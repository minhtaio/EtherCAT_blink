
Reflexor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011258  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ffc  08011438  08011438  00021438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012434  08012434  000381b8  2**0
                  CONTENTS
  4 .ARM          00000000  08012434  08012434  000381b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012434  08012434  000381b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012434  08012434  00022434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012438  08012438  00022438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b0c  20000000  0801243c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ea4  20000b10  08012f48  00030b10  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200079b4  08012f48  000379b4  2**0
                  ALLOC
 11 .spiDma_module_space 00000200  20007fb8  08012f48  00037fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  000381b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028472  00000000  00000000  000381e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006460  00000000  00000000  0006065a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021d8  00000000  00000000  00066ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f38  00000000  00000000  00068c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000868f  00000000  00000000  0006abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d5c1  00000000  00000000  0007325f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111931  00000000  00000000  000a0820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b2151  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000956c  00000000  00000000  001b21a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000b10 	.word	0x20000b10
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011420 	.word	0x08011420

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000b14 	.word	0x20000b14
 800021c:	08011420 	.word	0x08011420

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <canIdle_pollEvent>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

static void canIdle_pollEvent (tCanIdle_Module * const module)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
   can_iso_tp_link_t_p link = NULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]
   uint32_t currTimeMs = 0u;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
   uint8_t idx = 0u;
 80002d0:	2300      	movs	r3, #0
 80002d2:	73fb      	strb	r3, [r7, #15]

   /* Determine the identify of can device. */
   idx = canIdle_getDeviceId (module->input.devReqId);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f835 	bl	8000348 <canIdle_getDeviceId>
 80002de:	4603      	mov	r3, r0
 80002e0:	73fb      	strb	r3, [r7, #15]

   if (CANIDLE_ID_INVALID != idx)
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	2b05      	cmp	r3, #5
 80002e6:	d010      	beq.n	800030a <canIdle_pollEvent+0x4a>
   {
      /* Get current time of system. */
      currTimeMs = canIdle_getCurrentTimeInMillis();
 80002e8:	f000 f816 	bl	8000318 <canIdle_getCurrentTimeInMillis>
 80002ec:	6138      	str	r0, [r7, #16]

      /* Get the link and config of device. */
      link = (can_iso_tp_link_t_p)&canIdle_Devices[idx].local;
 80002ee:	7bfb      	ldrb	r3, [r7, #15]
 80002f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80002f4:	fb02 f303 	mul.w	r3, r2, r3
 80002f8:	3338      	adds	r3, #56	; 0x38
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <canIdle_pollEvent+0x54>)
 80002fc:	4413      	add	r3, r2
 80002fe:	3304      	adds	r3, #4
 8000300:	617b      	str	r3, [r7, #20]

      /* Polling event of Can TP. */
      iso_can_tp_poll (link, currTimeMs);
 8000302:	6939      	ldr	r1, [r7, #16]
 8000304:	6978      	ldr	r0, [r7, #20]
 8000306:	f001 fc2f 	bl	8001b68 <iso_can_tp_poll>
   }
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000000 	.word	0x20000000

08000318 <canIdle_getCurrentTimeInMillis>:


// Function to get the current time in milliseconds
static uint32_t canIdle_getCurrentTimeInMillis(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
   TickType_t ticks = xTaskGetTickCount();
 800031e:	f00e f99f 	bl	800e660 <xTaskGetTickCount>
 8000322:	6078      	str	r0, [r7, #4]
   
   uint32_t milliseconds = pdMS_TO_TICKS(ticks);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800032a:	fb02 f303 	mul.w	r3, r2, r3
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <canIdle_getCurrentTimeInMillis+0x2c>)
 8000330:	fba2 2303 	umull	r2, r3, r2, r3
 8000334:	099b      	lsrs	r3, r3, #6
 8000336:	603b      	str	r3, [r7, #0]
   
   return milliseconds;
 8000338:	683b      	ldr	r3, [r7, #0]
}
 800033a:	4618      	mov	r0, r3
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	10624dd3 	.word	0x10624dd3

08000348 <canIdle_getDeviceId>:

static uint8_t canIdle_getDeviceId (tCanIdle_DeviceId id)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
   uint8_t iter = 0u;
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]
   uint8_t deviceId = CANIDLE_ID_INVALID;
 8000356:	2305      	movs	r3, #5
 8000358:	73bb      	strb	r3, [r7, #14]

   for (iter = 0u; iter < CANIDLE_DEV_TOTAL; iter ++)
 800035a:	2300      	movs	r3, #0
 800035c:	73fb      	strb	r3, [r7, #15]
 800035e:	e01a      	b.n	8000396 <canIdle_getDeviceId+0x4e>
   {
      if ((id == canIdle_Devices[iter].deviceId) && (CANIDLE_ID_INVALID != canIdle_Devices[iter].deviceId))
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <canIdle_getDeviceId+0x64>)
 8000364:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000368:	fb01 f303 	mul.w	r3, r1, r3
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	79fa      	ldrb	r2, [r7, #7]
 8000372:	429a      	cmp	r2, r3
 8000374:	d10c      	bne.n	8000390 <canIdle_getDeviceId+0x48>
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <canIdle_getDeviceId+0x64>)
 800037a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800037e:	fb01 f303 	mul.w	r3, r1, r3
 8000382:	4413      	add	r3, r2
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b05      	cmp	r3, #5
 8000388:	d002      	beq.n	8000390 <canIdle_getDeviceId+0x48>
      {
         deviceId = iter;
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	73bb      	strb	r3, [r7, #14]

         break;
 800038e:	e005      	b.n	800039c <canIdle_getDeviceId+0x54>
   for (iter = 0u; iter < CANIDLE_DEV_TOTAL; iter ++)
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	3301      	adds	r3, #1
 8000394:	73fb      	strb	r3, [r7, #15]
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	2b03      	cmp	r3, #3
 800039a:	d9e1      	bls.n	8000360 <canIdle_getDeviceId+0x18>
      }
   }

   return (deviceId);
 800039c:	7bbb      	ldrb	r3, [r7, #14]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000000 	.word	0x20000000

080003b0 <canIdle_FDCanSend>:
   /* Currently, the log message debug of this module does not print out. */
   (void *)msg;
}

static int canIdle_FDCanSend (can_iso_tp_link_t_p link, const struct CAN_msg *msg)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08c      	sub	sp, #48	; 0x30
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
   FDCAN_TxHeaderTypeDef txHeader = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2224      	movs	r2, #36	; 0x24
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f00f ff23 	bl	801020e <memset>
   int ret = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	62fb      	str	r3, [r7, #44]	; 0x2c

   txHeader.Identifier = (msg->id.id & 0x7FF);
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80003d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80003d8:	60bb      	str	r3, [r7, #8]
   txHeader.IdType = (true == msg->id.isExt) ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	78db      	ldrb	r3, [r3, #3]
 80003de:	065b      	lsls	r3, r3, #25
 80003e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80003e4:	60fb      	str	r3, [r7, #12]
   txHeader.DataLength = (FDCAN_DLC_BYTES_0 | ((uint32_t)CANIDLE_DLC_OFF(msg->dlc)));
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	041b      	lsls	r3, r3, #16
 80003ec:	617b      	str	r3, [r7, #20]
   txHeader.FDFormat = (true == msg->id.isCANFD) ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	78db      	ldrb	r3, [r3, #3]
 80003f2:	03db      	lsls	r3, r3, #15
 80003f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003f8:	623b      	str	r3, [r7, #32]
   txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
   txHeader.TxFrameType = (true == msg->id.isRemote) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	78db      	ldrb	r3, [r3, #3]
 8000402:	059b      	lsls	r3, r3, #22
 8000404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000408:	613b      	str	r3, [r7, #16]
   txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800040a:	2300      	movs	r3, #0
 800040c:	627b      	str	r3, [r7, #36]	; 0x24

   if (HAL_OK == HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, (uint8_t *)msg->data))
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	1d5a      	adds	r2, r3, #5
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	480e      	ldr	r0, [pc, #56]	; (8000454 <canIdle_FDCanSend+0xa4>)
 800041a:	f008 fecb 	bl	80091b4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d112      	bne.n	800044a <canIdle_FDCanSend+0x9a>
   {
      sprintf (canIdle_msg, "can msg with id 0x%x dlc 0x%d: ", msg->id.id, msg->dlc);
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800042c:	461a      	mov	r2, r3
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	4909      	ldr	r1, [pc, #36]	; (8000458 <canIdle_FDCanSend+0xa8>)
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <canIdle_FDCanSend+0xac>)
 8000436:	f010 faef 	bl	8010a18 <siprintf>

      if (NULL != link->init_info.print_debug)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043e:	2b00      	cmp	r3, #0
 8000440:	d003      	beq.n	800044a <canIdle_FDCanSend+0x9a>
      {
    	  link->init_info.print_debug (canIdle_msg);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <canIdle_FDCanSend+0xac>)
 8000448:	4798      	blx	r3
      }
   }

   return (ret);
 800044a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800044c:	4618      	mov	r0, r3
 800044e:	3730      	adds	r7, #48	; 0x30
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200025f8 	.word	0x200025f8
 8000458:	08011438 	.word	0x08011438
 800045c:	20000d2c 	.word	0x20000d2c

08000460 <canIdle_N_USData_indication>:

static int canIdle_N_USData_indication(can_iso_tp_link_t_p link,
                                       const uint8_t *payload,
                                       uint32_t size,
                                       CAN_ISO_TP_RESAULT error)
{
 8000460:	b480      	push	{r7}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
 800046c:	70fb      	strb	r3, [r7, #3]
   int ret = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]

   if (N_TIMEOUT_CR == error)
 8000472:	78fb      	ldrb	r3, [r7, #3]
 8000474:	2b03      	cmp	r3, #3
 8000476:	d102      	bne.n	800047e <canIdle_N_USData_indication+0x1e>
   {
      canIdle_Module.local.state = CANIDLE_IDLE;
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <canIdle_N_USData_indication+0x2c>)
 800047a:	2200      	movs	r2, #0
 800047c:	721a      	strb	r2, [r3, #8]
   }

   return ret;
 800047e:	697b      	ldr	r3, [r7, #20]
}
 8000480:	4618      	mov	r0, r3
 8000482:	371c      	adds	r7, #28
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	20000960 	.word	0x20000960

08000490 <canIdle_N_USData_confirm>:

static int canIdle_N_USData_confirm(can_iso_tp_link_t_p link,
                                    const uint8_t *payload,
                                    uint32_t size,
                                    CAN_ISO_TP_RESAULT error)
{
 8000490:	b480      	push	{r7}
 8000492:	b087      	sub	sp, #28
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
 800049c:	70fb      	strb	r3, [r7, #3]
   int ret = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]

   if (N_TIMEOUT_A == error)
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d102      	bne.n	80004ae <canIdle_N_USData_confirm+0x1e>
   {
      canIdle_Module.local.state = CANIDLE_IDLE;
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <canIdle_N_USData_confirm+0x2c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	721a      	strb	r2, [r3, #8]
   }

   return ret;
 80004ae:	697b      	ldr	r3, [r7, #20]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	371c      	adds	r7, #28
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	20000960 	.word	0x20000960

080004c0 <canIdle_WaitingEvent>:

static tCanIdle_State canIdle_WaitingEvent (tCanIdle_Module * const module)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = CANIDLE_IDLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	73fb      	strb	r3, [r7, #15]

   if (true == module->local.isNewReq)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7a5b      	ldrb	r3, [r3, #9]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d00b      	beq.n	80004ec <canIdle_WaitingEvent+0x2c>
   {
      /* Reset flag. */
      module->local.isNewReq = false;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	725a      	strb	r2, [r3, #9]
      module->local.isRecMsg = false;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	729a      	strb	r2, [r3, #10]
      module->output.isNewMsg = false;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

      /* Change mode to next state. */
      nextState = CANIDLE_PROCESS_ENTRY;
 80004e8:	2301      	movs	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
   }

   return (nextState);
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <canIdle_ProcessEntry>:

static tCanIdle_State canIdle_ProcessEntry (tCanIdle_Module * const module)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = CANIDLE_PROCESS_ENTRY;
 8000504:	2301      	movs	r3, #1
 8000506:	75fb      	strb	r3, [r7, #23]
   can_iso_tp_link_t_p link = NULL;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
   uint8_t idx = 0u; 
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]

   /* Determine the identify of can device. */
   idx = canIdle_getDeviceId (module->input.devReqId);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff17 	bl	8000348 <canIdle_getDeviceId>
 800051a:	4603      	mov	r3, r0
 800051c:	73fb      	strb	r3, [r7, #15]
   
   if (CANIDLE_ID_INVALID != idx)
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	2b05      	cmp	r3, #5
 8000522:	d012      	beq.n	800054a <canIdle_ProcessEntry+0x4e>
   {
      /* Get the link and config of device. */
      link = (can_iso_tp_link_t_p)&canIdle_Devices[idx].local;
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	f44f 7216 	mov.w	r2, #600	; 0x258
 800052a:	fb02 f303 	mul.w	r3, r2, r3
 800052e:	3338      	adds	r3, #56	; 0x38
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <canIdle_ProcessEntry+0x58>)
 8000532:	4413      	add	r3, r2
 8000534:	3304      	adds	r3, #4
 8000536:	613b      	str	r3, [r7, #16]

      /* Send request.*/
      iso_can_tp_N_USData_request (link, 0, (uint8_t *)can_tx_buffer, module->input.size);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <canIdle_ProcessEntry+0x5c>)
 800053e:	2100      	movs	r1, #0
 8000540:	6938      	ldr	r0, [r7, #16]
 8000542:	f001 fcf7 	bl	8001f34 <iso_can_tp_N_USData_request>

      /* Next state. */
      nextState = CANIDLE_PROCESS;
 8000546:	2302      	movs	r3, #2
 8000548:	75fb      	strb	r3, [r7, #23]
   }
   
   return (nextState);
 800054a:	7dfb      	ldrb	r3, [r7, #23]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000000 	.word	0x20000000
 8000558:	20000b2c 	.word	0x20000b2c

0800055c <canIdle_Process>:

static tCanIdle_State canIdle_Process (tCanIdle_Module * const module)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = CANIDLE_PROCESS;
 8000564:	2302      	movs	r3, #2
 8000566:	73fb      	strb	r3, [r7, #15]
   uint8_t idx = 0u;
 8000568:	2300      	movs	r3, #0
 800056a:	73bb      	strb	r3, [r7, #14]

   /* Determine the identify of can device. */
   idx = canIdle_getDeviceId (module->input.devReqId);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fee9 	bl	8000348 <canIdle_getDeviceId>
 8000576:	4603      	mov	r3, r0
 8000578:	73bb      	strb	r3, [r7, #14]

   if (CANIDLE_ID_INVALID != idx)
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	2b05      	cmp	r3, #5
 800057e:	d008      	beq.n	8000592 <canIdle_Process+0x36>
   {
      /* FIXME - Consider add the code to manage the state timeout, device can not send data and receive data from 
      Device can on bus after command sent. */


      if (true == module->local.isRecMsg) 
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7a9b      	ldrb	r3, [r3, #10]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d004      	beq.n	8000592 <canIdle_Process+0x36>
      {
         /* Update new state. */
         nextState = CANIDLE_PROCESS_POST;
 8000588:	2303      	movs	r3, #3
 800058a:	73fb      	strb	r3, [r7, #15]

         /* Reset flag. */
         module->local.isRecMsg = false;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	729a      	strb	r2, [r3, #10]
      }
   }

   return (nextState);
 8000592:	7bfb      	ldrb	r3, [r7, #15]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <canIdle_ProcessPost>:

static tCanIdle_State canIdle_ProcessPost (tCanIdle_Module * const module)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = CANIDLE_PROCESS_POST;
 80005a4:	2303      	movs	r3, #3
 80005a6:	75fb      	strb	r3, [r7, #23]
   can_iso_tp_link_t_p link = NULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
   uint8_t idx = 0u;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]

   /* Determine the identify of can device. */
   idx = canIdle_getDeviceId (module->input.devReqId);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fec7 	bl	8000348 <canIdle_getDeviceId>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73fb      	strb	r3, [r7, #15]

   /* Update data. */
   if (CANIDLE_ID_INVALID != idx)
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	d064      	beq.n	800068e <canIdle_ProcessPost+0xf2>
   {
      /* Get the link and config of device. */
      link = (can_iso_tp_link_t_p)&canIdle_Devices[idx].local;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80005ca:	fb02 f303 	mul.w	r3, r2, r3
 80005ce:	3338      	adds	r3, #56	; 0x38
 80005d0:	4a32      	ldr	r2, [pc, #200]	; (800069c <canIdle_ProcessPost+0x100>)
 80005d2:	4413      	add	r3, r2
 80005d4:	3304      	adds	r3, #4
 80005d6:	613b      	str	r3, [r7, #16]

      if (OP_OK == iso_can_tp_L_Data_indication (link, (struct CAN_msg *)&module->local.msgRes))
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	330c      	adds	r3, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	6938      	ldr	r0, [r7, #16]
 80005e0:	f001 fbee 	bl	8001dc0 <iso_can_tp_L_Data_indication>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d151      	bne.n	800068e <canIdle_ProcessPost+0xf2>
      {  
         iso_can_tp_L_Data_confirm (link, (struct CAN_msg *)&module->local.msgRes, N_OK);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	330c      	adds	r3, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	4619      	mov	r1, r3
 80005f2:	6938      	ldr	r0, [r7, #16]
 80005f4:	f001 fb22 	bl	8001c3c <iso_can_tp_L_Data_confirm>

         /* Enter critical section. */
         taskENTER_CRITICAL();
 80005f8:	f00f f98c 	bl	800f914 <vPortEnterCritical>

         /* Update data output. */
         memcpy ((uint8_t *)module->output.msgRes.data, 
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f103 0459 	add.w	r4, r3, #89	; 0x59
                 (uint8_t *)module->local.msgRes.data, 
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f103 0511 	add.w	r5, r3, #17
                 dlc2len(module->local.msgRes.dlc));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	7c1b      	ldrb	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f9f9 	bl	8000a04 <dlc2len>
 8000612:	4603      	mov	r3, r0
         memcpy ((uint8_t *)module->output.msgRes.data, 
 8000614:	461a      	mov	r2, r3
 8000616:	4629      	mov	r1, r5
 8000618:	4620      	mov	r0, r4
 800061a:	f00f fdea 	bl	80101f2 <memcpy>
         module->output.msgRes.id = module->local.msgRes.id;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	68d2      	ldr	r2, [r2, #12]
 8000624:	655a      	str	r2, [r3, #84]	; 0x54
         module->output.msgRes.dlc = module->local.msgRes.dlc;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7c1a      	ldrb	r2, [r3, #16]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

         /* Set flag to identify new data updated. */
         module->output.isNewMsg = true;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2201      	movs	r2, #1
 8000634:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

         /* Id device */
         module->output.id = module->input.devReqId;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

         /* Exit critical section. */
         taskEXIT_CRITICAL();
 8000642:	f00f f997 	bl	800f974 <vPortExitCritical>

         /* Call back function. */
         if (NULL != module->dev[idx].funIrq)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000652:	fb01 f303 	mul.w	r3, r1, r3
 8000656:	4413      	add	r3, r2
 8000658:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800065c:	2b00      	cmp	r3, #0
 800065e:	d016      	beq.n	800068e <canIdle_ProcessPost+0xf2>
         {
            module->dev[idx].funIrq (module->local.msgRes.data, dlc2len(module->local.msgRes.dlc));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f44f 7116 	mov.w	r1, #600	; 0x258
 800066c:	fb01 f303 	mul.w	r3, r1, r3
 8000670:	4413      	add	r3, r2
 8000672:	f8d3 4254 	ldr.w	r4, [r3, #596]	; 0x254
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f103 0511 	add.w	r5, r3, #17
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7c1b      	ldrb	r3, [r3, #16]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f9bf 	bl	8000a04 <dlc2len>
 8000686:	4603      	mov	r3, r0
 8000688:	4619      	mov	r1, r3
 800068a:	4628      	mov	r0, r5
 800068c:	47a0      	blx	r4
         }
      }
   }

   /* Back to IDLE state. */
   nextState = CANIDLE_IDLE;
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]

   return (nextState);
 8000692:	7dfb      	ldrb	r3, [r7, #23]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bdb0      	pop	{r4, r5, r7, pc}
 800069c:	20000000 	.word	0x20000000

080006a0 <canIdle_Send>:

bool canIdle_Send (tCanIdle_DeviceId id, const uint8_t * payload, uint8_t size)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4613      	mov	r3, r2
 80006ae:	71bb      	strb	r3, [r7, #6]
   bool ret = false;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

   if (CANIDLE_IDLE == canIdle_Module.local.state)
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <canIdle_Send+0x50>)
 80006b6:	7a1b      	ldrb	r3, [r3, #8]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d114      	bne.n	80006e6 <canIdle_Send+0x46>
   {
      /* Enter critical section. */
      taskENTER_CRITICAL();
 80006bc:	f00f f92a 	bl	800f914 <vPortEnterCritical>

      /* Update the Device id send request. */
      canIdle_Module.input.devReqId = id;
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <canIdle_Send+0x50>)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	7013      	strb	r3, [r2, #0]
      canIdle_Module.input.size = size;
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <canIdle_Send+0x50>)
 80006ca:	6053      	str	r3, [r2, #4]

      /* Copy data to locally data of this module. */
      memcpy ((void *)can_tx_buffer, (void *)payload, size);
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	461a      	mov	r2, r3
 80006d0:	6839      	ldr	r1, [r7, #0]
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <canIdle_Send+0x54>)
 80006d4:	f00f fd8d 	bl	80101f2 <memcpy>

      /* Exit critical section. */
      taskEXIT_CRITICAL();
 80006d8:	f00f f94c 	bl	800f974 <vPortExitCritical>

      /* Setting flag which determine the new data update. */
      canIdle_Module.local.isNewReq = true;
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <canIdle_Send+0x50>)
 80006de:	2201      	movs	r2, #1
 80006e0:	725a      	strb	r2, [r3, #9]

      ret = true;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
   }

   return (ret);
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000960 	.word	0x20000960
 80006f4:	20000b2c 	.word	0x20000b2c

080006f8 <canIdle_Read>:

bool canIdle_Read (tCanIdle_DeviceId id, const uint8_t * payload, uint8_t * size)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	73fb      	strb	r3, [r7, #15]
   bool ret = false;
 8000706:	2300      	movs	r3, #0
 8000708:	75fb      	strb	r3, [r7, #23]
   uint8_t lenDataRet = 0u;
 800070a:	2300      	movs	r3, #0
 800070c:	75bb      	strb	r3, [r7, #22]

   if ((id == canIdle_Module.output.id) && (true == canIdle_Module.output.isNewMsg))
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <canIdle_Read+0x5c>)
 8000710:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	429a      	cmp	r2, r3
 8000718:	d117      	bne.n	800074a <canIdle_Read+0x52>
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <canIdle_Read+0x5c>)
 800071c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000720:	2b00      	cmp	r3, #0
 8000722:	d012      	beq.n	800074a <canIdle_Read+0x52>
   {
      lenDataRet = dlc2len(canIdle_Module.output.msgRes.dlc);
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <canIdle_Read+0x5c>)
 8000726:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f96a 	bl	8000a04 <dlc2len>
 8000730:	4603      	mov	r3, r0
 8000732:	75bb      	strb	r3, [r7, #22]

      *size = lenDataRet;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7dba      	ldrb	r2, [r7, #22]
 8000738:	701a      	strb	r2, [r3, #0]
      memcpy ((uint8_t *)payload, (uint8_t *)canIdle_Module.output.msgRes.data, lenDataRet);
 800073a:	7dbb      	ldrb	r3, [r7, #22]
 800073c:	461a      	mov	r2, r3
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <canIdle_Read+0x60>)
 8000740:	68b8      	ldr	r0, [r7, #8]
 8000742:	f00f fd56 	bl	80101f2 <memcpy>

      ret = true;
 8000746:	2301      	movs	r3, #1
 8000748:	75fb      	strb	r3, [r7, #23]
   }

   return ret;
 800074a:	7dfb      	ldrb	r3, [r7, #23]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000960 	.word	0x20000960
 8000758:	200009b9 	.word	0x200009b9

0800075c <canIdle_Init>:

   return (ret);
}

void canIdle_Init (tCanIdle_Module * const module)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
   uint8_t iter = 0u;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
   
   for (iter = 0u; iter < CANIDLE_DEV_TOTAL; iter ++)
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	e05d      	b.n	800082a <canIdle_Init+0xce>
   {
      if (false != canIdle_Module.dev[iter].isActive)
 800076e:	4b3b      	ldr	r3, [pc, #236]	; (800085c <canIdle_Init+0x100>)
 8000770:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	f44f 7116 	mov.w	r1, #600	; 0x258
 800077a:	fb01 f303 	mul.w	r3, r1, r3
 800077e:	4413      	add	r3, r2
 8000780:	785b      	ldrb	r3, [r3, #1]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d036      	beq.n	80007f4 <canIdle_Init+0x98>
      {
         canIdle_Module.dev[iter].config.L_Data_request = canIdle_FDCanSend;
 8000786:	4b35      	ldr	r3, [pc, #212]	; (800085c <canIdle_Init+0x100>)
 8000788:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	4413      	add	r3, r2
 8000798:	4a31      	ldr	r2, [pc, #196]	; (8000860 <canIdle_Init+0x104>)
 800079a:	615a      	str	r2, [r3, #20]
         canIdle_Module.dev[iter].config.N_USData_indication = (void *)canIdle_N_USData_indication;
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <canIdle_Init+0x100>)
 800079e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80007a8:	fb01 f303 	mul.w	r3, r1, r3
 80007ac:	4413      	add	r3, r2
 80007ae:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <canIdle_Init+0x108>)
 80007b0:	619a      	str	r2, [r3, #24]
         canIdle_Module.dev[iter].config.N_USData_confirm = (void *)canIdle_N_USData_confirm;
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <canIdle_Init+0x100>)
 80007b4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	f44f 7116 	mov.w	r1, #600	; 0x258
 80007be:	fb01 f303 	mul.w	r3, r1, r3
 80007c2:	4413      	add	r3, r2
 80007c4:	4a28      	ldr	r2, [pc, #160]	; (8000868 <canIdle_Init+0x10c>)
 80007c6:	61da      	str	r2, [r3, #28]
         canIdle_Module.dev[iter].config.rx_buff = can_rx_buffer;
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <canIdle_Init+0x100>)
 80007ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80007d4:	fb01 f303 	mul.w	r3, r1, r3
 80007d8:	4413      	add	r3, r2
 80007da:	4a24      	ldr	r2, [pc, #144]	; (800086c <canIdle_Init+0x110>)
 80007dc:	621a      	str	r2, [r3, #32]
         canIdle_Module.dev[iter].config.rx_buff_len = CANIDLE_RX_SIZE;
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <canIdle_Init+0x100>)
 80007e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80007ea:	fb01 f303 	mul.w	r3, r1, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	2240      	movs	r2, #64	; 0x40
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
      }

      iso_can_tp_create (&canIdle_Module.dev[iter].local, &canIdle_Module.dev[iter].config);
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <canIdle_Init+0x100>)
 80007f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000800:	fb01 f303 	mul.w	r3, r1, r3
 8000804:	4413      	add	r3, r2
 8000806:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <canIdle_Init+0x100>)
 800080c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000816:	fb01 f303 	mul.w	r3, r1, r3
 800081a:	4413      	add	r3, r2
 800081c:	3304      	adds	r3, #4
 800081e:	4619      	mov	r1, r3
 8000820:	f001 f8be 	bl	80019a0 <iso_can_tp_create>
   for (iter = 0u; iter < CANIDLE_DEV_TOTAL; iter ++)
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	3301      	adds	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d99e      	bls.n	800076e <canIdle_Init+0x12>
   }

   HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2101      	movs	r1, #1
 8000834:	480e      	ldr	r0, [pc, #56]	; (8000870 <canIdle_Init+0x114>)
 8000836:	f008 feb3 	bl	80095a0 <HAL_FDCAN_ActivateNotification>

   if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK)
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <canIdle_Init+0x114>)
 800083c:	f008 fc92 	bl	8009164 <HAL_FDCAN_Start>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d105      	bne.n	8000852 <canIdle_Init+0xf6>
   {
	   /* Reset state of module to Idle. */
	   module->local.isNewReq = false;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	725a      	strb	r2, [r3, #9]
	   module->local.state = CANIDLE_IDLE;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	721a      	strb	r2, [r3, #8]
   }

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000960 	.word	0x20000960
 8000860:	080003b1 	.word	0x080003b1
 8000864:	08000461 	.word	0x08000461
 8000868:	08000491 	.word	0x08000491
 800086c:	20000c2c 	.word	0x20000c2c
 8000870:	200025f8 	.word	0x200025f8

08000874 <canIdle_MainFunction>:

void canIdle_MainFunction (tCanIdle_Module * const module)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = module->local.state;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a1b      	ldrb	r3, [r3, #8]
 8000880:	73fb      	strb	r3, [r7, #15]

   canIdle_pollEvent(module);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fd1c 	bl	80002c0 <canIdle_pollEvent>

   switch (module->local.state)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	7a1b      	ldrb	r3, [r3, #8]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d823      	bhi.n	80008d8 <canIdle_MainFunction+0x64>
 8000890:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <canIdle_MainFunction+0x24>)
 8000892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000896:	bf00      	nop
 8000898:	080008a9 	.word	0x080008a9
 800089c:	080008b5 	.word	0x080008b5
 80008a0:	080008c1 	.word	0x080008c1
 80008a4:	080008cd 	.word	0x080008cd
   {
   case CANIDLE_IDLE:
      nextState = canIdle_WaitingEvent (module);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fe09 	bl	80004c0 <canIdle_WaitingEvent>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]
      break;
 80008b2:	e012      	b.n	80008da <canIdle_MainFunction+0x66>

   case CANIDLE_PROCESS_ENTRY:
      nextState = canIdle_ProcessEntry (module);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff fe21 	bl	80004fc <canIdle_ProcessEntry>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]
      break;
 80008be:	e00c      	b.n	80008da <canIdle_MainFunction+0x66>

   case CANIDLE_PROCESS:
      nextState = canIdle_Process (module);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff fe4b 	bl	800055c <canIdle_Process>
 80008c6:	4603      	mov	r3, r0
 80008c8:	73fb      	strb	r3, [r7, #15]
      break;
 80008ca:	e006      	b.n	80008da <canIdle_MainFunction+0x66>

   case CANIDLE_PROCESS_POST:
      nextState = canIdle_ProcessPost (module);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fe65 	bl	800059c <canIdle_ProcessPost>
 80008d2:	4603      	mov	r3, r0
 80008d4:	73fb      	strb	r3, [r7, #15]
      break;
 80008d6:	e000      	b.n	80008da <canIdle_MainFunction+0x66>
   
   default:
      break;
 80008d8:	bf00      	nop
   }

   module->local.state = nextState;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7bfa      	ldrb	r2, [r7, #15]
 80008de:	721a      	strb	r2, [r3, #8]
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback (FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b090      	sub	sp, #64	; 0x40
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
   FDCAN_RxHeaderTypeDef rxHeader = {0u};
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	2228      	movs	r2, #40	; 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f00f fc87 	bl	801020e <memset>
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000900:	2300      	movs	r3, #0
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c

   if (FDCAN_IT_RX_FIFO0_NEW_MESSAGE == (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	2b00      	cmp	r3, #0
 800090c:	d05a      	beq.n	80009c4 <HAL_FDCAN_RxFifo0Callback+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800090e:	f3ef 8211 	mrs	r2, BASEPRI
 8000912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000916:	f383 8811 	msr	BASEPRI, r3
 800091a:	f3bf 8f6f 	isb	sy
 800091e:	f3bf 8f4f 	dsb	sy
 8000922:	63ba      	str	r2, [r7, #56]	; 0x38
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
   {
      taskENTER_CRITICAL_FROM_ISR();

      /* Get new message from FIFO. */
      if (HAL_OK == HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, (FDCAN_RxHeaderTypeDef *)&rxHeader, (uint8_t *)can_rx_buffer))
 8000926:	f107 0208 	add.w	r2, r7, #8
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 800092c:	2140      	movs	r1, #64	; 0x40
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f008 fd50 	bl	80093d4 <HAL_FDCAN_GetRxMessage>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d13e      	bne.n	80009b8 <HAL_FDCAN_RxFifo0Callback+0xd0>
      {
         /* Update new data. */
         canIdle_Module.local.msgRes.id.id = rxHeader.Identifier;
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8000940:	4a26      	ldr	r2, [pc, #152]	; (80009dc <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000942:	68d3      	ldr	r3, [r2, #12]
 8000944:	f361 031c 	bfi	r3, r1, #0, #29
 8000948:	60d3      	str	r3, [r2, #12]
         canIdle_Module.local.msgRes.id.isCANFD = (FDCAN_FD_CAN == rxHeader.FDFormat)? true : false;
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2d9      	uxtb	r1, r3
 8000958:	4a20      	ldr	r2, [pc, #128]	; (80009dc <HAL_FDCAN_RxFifo0Callback+0xf4>)
 800095a:	7bd3      	ldrb	r3, [r2, #15]
 800095c:	f361 1386 	bfi	r3, r1, #6, #1
 8000960:	73d3      	strb	r3, [r2, #15]
         canIdle_Module.local.msgRes.id.isExt = (FDCAN_EXTENDED_ID == rxHeader.IdType)? true : false;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000968:	bf0c      	ite	eq
 800096a:	2301      	moveq	r3, #1
 800096c:	2300      	movne	r3, #0
 800096e:	b2d9      	uxtb	r1, r3
 8000970:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000972:	7bd3      	ldrb	r3, [r2, #15]
 8000974:	f361 1345 	bfi	r3, r1, #5, #1
 8000978:	73d3      	strb	r3, [r2, #15]
         canIdle_Module.local.msgRes.id.isRemote = (FDCAN_REMOTE_FRAME == rxHeader.RxFrameType)? true : false;
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000980:	bf0c      	ite	eq
 8000982:	2301      	moveq	r3, #1
 8000984:	2300      	movne	r3, #0
 8000986:	b2d9      	uxtb	r1, r3
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <HAL_FDCAN_RxFifo0Callback+0xf4>)
 800098a:	7bd3      	ldrb	r3, [r2, #15]
 800098c:	f361 13c7 	bfi	r3, r1, #7, #1
 8000990:	73d3      	strb	r3, [r2, #15]
         canIdle_Module.local.msgRes.dlc = (uint8_t)(rxHeader.DataLength >> 16U);
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	0c1b      	lsrs	r3, r3, #16
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_FDCAN_RxFifo0Callback+0xf4>)
 800099a:	741a      	strb	r2, [r3, #16]

         /* Copy data. */
         memcpy ((void *)canIdle_Module.local.msgRes.data, (void *)can_rx_buffer, dlc2len(canIdle_Module.local.msgRes.dlc));
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_FDCAN_RxFifo0Callback+0xf4>)
 800099e:	7c1b      	ldrb	r3, [r3, #16]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f82f 	bl	8000a04 <dlc2len>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	490b      	ldr	r1, [pc, #44]	; (80009d8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80009ae:	f00f fc20 	bl	80101f2 <memcpy>

         /* Change the state of module. */
         canIdle_Module.local.isRecMsg = true; 
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_FDCAN_RxFifo0Callback+0xf4>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	729a      	strb	r2, [r3, #10]
      }

      taskEXIT_CRITICAL_FROM_ISR(xHigherPriorityTaskWoken);
 80009b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80009bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80009c2:	bf00      	nop
   }

   HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f008 fde9 	bl	80095a0 <HAL_FDCAN_ActivateNotification>

}
 80009ce:	bf00      	nop
 80009d0:	3740      	adds	r7, #64	; 0x40
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000c2c 	.word	0x20000c2c
 80009dc:	20000960 	.word	0x20000960
 80009e0:	20000971 	.word	0x20000971

080009e4 <canIdleTask>:

void canIdleTask (void const * argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN canIdleTask */
  canIdle_Init(&canIdle_Module);
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <canIdleTask+0x1c>)
 80009ee:	f7ff feb5 	bl	800075c <canIdle_Init>

  /* Infinite loop */
  for(;;)
  {
     canIdle_MainFunction(&canIdle_Module);
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <canIdleTask+0x1c>)
 80009f4:	f7ff ff3e 	bl	8000874 <canIdle_MainFunction>
     osDelay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f00c fc81 	bl	800d300 <osDelay>
     canIdle_MainFunction(&canIdle_Module);
 80009fe:	e7f8      	b.n	80009f2 <canIdleTask+0xe>
 8000a00:	20000960 	.word	0x20000960

08000a04 <dlc2len>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

inline uint8_t dlc2len(uint8_t dlc)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
   return dlc_len_table[dlc & 0xf];
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 030f 	and.w	r3, r3, #15
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <dlc2len+0x20>)
 8000a16:	5cd3      	ldrb	r3, [r2, r3]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	08011be8 	.word	0x08011be8

08000a28 <lenToMinDlc>:

inline int lenToMinDlc(uint16_t len)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
   int dlc;
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e00a      	b.n	8000a4e <lenToMinDlc+0x26>
   {
      if (len <= dlc_len_table[dlc])
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <lenToMinDlc+0x40>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	88fa      	ldrh	r2, [r7, #6]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d906      	bls.n	8000a56 <lenToMinDlc+0x2e>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b10      	cmp	r3, #16
 8000a52:	d9f1      	bls.n	8000a38 <lenToMinDlc+0x10>
 8000a54:	e000      	b.n	8000a58 <lenToMinDlc+0x30>
         break;
 8000a56:	bf00      	nop
   }
   return dlc;
 8000a58:	68fb      	ldr	r3, [r7, #12]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	08011be8 	.word	0x08011be8

08000a6c <printf_debug_msg>:

static void printf_debug_msg(struct can_iso_tp_init_t *link, char *msg)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
   if (NULL != link->print_debug)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <printf_debug_msg+0x1a>
   {
      link->print_debug(msg);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a82:	6838      	ldr	r0, [r7, #0]
 8000a84:	4798      	blx	r3
   }
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <event_manage_block_init>:


//--------------task mange module----------------
static int event_manage_block_init(struct event_mange_t *event)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   mcu_lock_init(&event->lock);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fb3c 	bl	8002116 <mcu_lock_init>
   if (!QueueInit(&event->fifo, event->fifo_data, sizeof(event->fifo_data) / sizeof(event->fifo_data[0])))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f103 0010 	add.w	r0, r3, #16
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f001 faae 	bl	800200c <QueueInit>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <event_manage_block_init+0x2e>
   {
      return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aba:	e000      	b.n	8000abe <event_manage_block_init+0x30>
   }
   return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <report_event_to_manage_block>:

static int report_event_to_manage_block(struct event_mange_t *task, void *par_with_handle)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
   int res = OP_NOK;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]

   // Push events into FIFO queues
   if (QueueOperateOk != QueueIn(&task->fifo, (ElemType)par_with_handle))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3310      	adds	r3, #16
 8000ad8:	6839      	ldr	r1, [r7, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fabf 	bl	800205e <QueueIn>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d122      	bne.n	8000b2c <report_event_to_manage_block+0x66>
   {
      // can not call printf_debug_msg here, return OP_NOK
   }
   else
   {
      if (mcu_lock_try_lock(&task->lock))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fb21 	bl	8002130 <mcu_lock_try_lock>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d019      	beq.n	8000b28 <report_event_to_manage_block+0x62>
            struct
            {
               event_handle_t handle;
            } *par;
            // Retrieve the latest event record from the FIFO queue
            if (QueueOperateOk != QueueOut(&task->fifo, (ElemType *)&par))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3310      	adds	r3, #16
 8000af8:	f107 0208 	add.w	r2, r7, #8
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fadb 	bl	80020ba <QueueOut>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d004      	beq.n	8000b14 <report_event_to_manage_block+0x4e>
               {
                  par->handle((void *)par);
               }
            }
         } while (1 == 1);
         mcu_lock_unlock(&task->lock);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fb26 	bl	800215e <mcu_lock_unlock>
 8000b12:	e009      	b.n	8000b28 <report_event_to_manage_block+0x62>
               if (par->handle)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0eb      	beq.n	8000af4 <report_event_to_manage_block+0x2e>
                  par->handle((void *)par);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	4610      	mov	r0, r2
 8000b24:	4798      	blx	r3
         {
 8000b26:	e7e5      	b.n	8000af4 <report_event_to_manage_block+0x2e>
      }
      res = OP_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
   }
   return res;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <tx_event_cf_frame>:

//---------------control logic----------------
static int tx_event_cf_frame(can_iso_tp_link_t_p link)
{
 8000b36:	b5b0      	push	{r4, r5, r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   if (link->tx_record.status == tx_cf_wait_tx)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000b44:	2b06      	cmp	r3, #6
 8000b46:	f040 80e3 	bne.w	8000d10 <tx_event_cf_frame+0x1da>
   {
      int tx_frame = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
      if (link->tx_record.rx_Stmin != 0)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00c      	beq.n	8000b72 <tx_event_cf_frame+0x3c>
      {
         if ((link->current_time_ms - link->tx_record.last_msg_time_ms) < link->tx_record.rx_Stmin)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d201      	bcs.n	8000b72 <tx_event_cf_frame+0x3c>
         {
            tx_frame = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
         }
      }
      if (0 != tx_frame)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 80cb 	beq.w	8000d10 <tx_event_cf_frame+0x1da>
      {
         uint32_t txLen = link->tx_record.current_size - link->tx_record.current_tx_index;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	60bb      	str	r3, [r7, #8]
         if (txLen > (uint32_t)(dlc2len(link->init_info.TX_DLC) - 1))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff37 	bl	8000a04 <dlc2len>
 8000b96:	4603      	mov	r3, r0
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d908      	bls.n	8000bb4 <tx_event_cf_frame+0x7e>
         {
            txLen = (dlc2len(link->init_info.TX_DLC) - 1);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff2b 	bl	8000a04 <dlc2len>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
         }
         if (txLen == 0)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d114      	bne.n	8000be4 <tx_event_cf_frame+0xae>
         {
            link->tx_record.status = tx_idle;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            if (link->init_info.N_USData_confirm)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 80a2 	beq.w	8000d10 <tx_event_cf_frame+0x1da>
            {
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	699c      	ldr	r4, [r3, #24]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000bdc:	2300      	movs	r3, #0
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	47a0      	blx	r4
 8000be2:	e095      	b.n	8000d10 <tx_event_cf_frame+0x1da>
            }
         }
         else
         {
            link->tx_record.last_msg.id = link->init_info.tx_id;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6852      	ldr	r2, [r2, #4]
 8000bea:	641a      	str	r2, [r3, #64]	; 0x40
            link->tx_record.last_msg.data[0] = 0x20 | (link->tx_record.current_tx_SN & 0xf);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	f043 0320 	orr.w	r3, r3, #32
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            memcpy(&link->tx_record.last_msg.data[1], &link->tx_record.current_playload[link->tx_record.current_tx_index], txLen);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c1a:	4413      	add	r3, r2
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f00f fae7 	bl	80101f2 <memcpy>
            if (dlc2len(link->init_info.TX_DLC) > (1 + txLen))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff feea 	bl	8000a04 <dlc2len>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d92f      	bls.n	8000c9c <tx_event_cf_frame+0x166>
            {
               memset(&link->tx_record.last_msg.data[1 + txLen], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 1 - txLen);
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	3340      	adds	r3, #64	; 0x40
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	1d5c      	adds	r4, r3, #5
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c4e:	461d      	mov	r5, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fed4 	bl	8000a04 <dlc2len>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	3b01      	subs	r3, #1
 8000c66:	461a      	mov	r2, r3
 8000c68:	4629      	mov	r1, r5
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f00f facf 	bl	801020e <memset>
               link->tx_record.last_msg.dlc = lenToMinDlc(txLen + 1);
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3301      	adds	r3, #1
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fed5 	bl	8000a28 <lenToMinDlc>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
               if (link->tx_record.last_msg.dlc < 8)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	d80a      	bhi.n	8000ca8 <tx_event_cf_frame+0x172>
                  link->tx_record.last_msg.dlc = 8;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2208      	movs	r2, #8
 8000c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c9a:	e005      	b.n	8000ca8 <tx_event_cf_frame+0x172>
            }
            else
            {
               link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }
            link->tx_record.current_tx_index += txLen;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	441a      	add	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            link->tx_record.status = tx_cf_wait_tx;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2206      	movs	r2, #6
 8000cbc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            link->tx_record.last_msg_time_ms = link->current_time_ms;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	3240      	adds	r2, #64	; 0x40
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	4798      	blx	r3
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d114      	bne.n	8000d08 <tx_event_cf_frame+0x1d2>
            {
               link->tx_record.rx_BS_tx++;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
               link->tx_record.current_tx_SN++;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
               link->tx_record.status = tx_cf_wait_confirm;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2208      	movs	r2, #8
 8000d02:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8000d06:	e003      	b.n	8000d10 <tx_event_cf_frame+0x1da>
            }
            else
            {
               link->tx_record.status = tx_cf_wait_tx_retry;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
         }
      }
   }
   return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bdb0      	pop	{r4, r5, r7, pc}

08000d1a <tx_event_poll>:

static int tx_event_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 8000d1a:	b590      	push	{r4, r7, lr}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]

   if (link->tx_record.status != tx_idle)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d078      	beq.n	8000e20 <tx_event_poll+0x106>
   {
      // Check whether the message is sent out of time
      if ((user_ms - link->tx_record.last_msg_time_ms) > link->init_info.N_As)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d924      	bls.n	8000d8a <tx_event_poll+0x70>
      {
         if (link->init_info.N_USData_confirm)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01b      	beq.n	8000d80 <tx_event_poll+0x66>
         {
            if (link->tx_record.status == tx_wait_fc)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d10b      	bne.n	8000d6a <tx_event_poll+0x50>
            {
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_BS);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	699c      	ldr	r4, [r3, #24]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d62:	2302      	movs	r3, #2
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	47a0      	blx	r4
 8000d68:	e00a      	b.n	8000d80 <tx_event_poll+0x66>
            }
            else
            {
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_A);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	699c      	ldr	r4, [r3, #24]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	47a0      	blx	r4
            }
         }
         link->tx_record.status = tx_idle;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8000d88:	e04a      	b.n	8000e20 <tx_event_poll+0x106>
      }
      else if (link->tx_record.status == tx_sf_wait_tx)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10e      	bne.n	8000db2 <tx_event_poll+0x98>
      {
         // If the last driver failed to send, the request is resubmitted
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	3240      	adds	r2, #64	; 0x40
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	4798      	blx	r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d13b      	bne.n	8000e20 <tx_event_poll+0x106>
         {
            link->tx_record.status = tx_sf_wait_confirm;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2202      	movs	r2, #2
 8000dac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8000db0:	e036      	b.n	8000e20 <tx_event_poll+0x106>
         }
      }
      else if (link->tx_record.status == tx_ff_wait_tx)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d10e      	bne.n	8000dda <tx_event_poll+0xc0>
      {
         // If the last driver failed to send, the request is resubmitted
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	3240      	adds	r2, #64	; 0x40
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d127      	bne.n	8000e20 <tx_event_poll+0x106>
         {
            link->tx_record.status = tx_ff_wait_confirm;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8000dd8:	e022      	b.n	8000e20 <tx_event_poll+0x106>
         }
      }
      else if (link->tx_record.status == tx_cf_wait_tx_retry)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000de0:	2b07      	cmp	r3, #7
 8000de2:	d11d      	bne.n	8000e20 <tx_event_poll+0x106>
      {
         // If the last driver failed to send, the request is resubmitted
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	3240      	adds	r2, #64	; 0x40
 8000dec:	4611      	mov	r1, r2
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4798      	blx	r3
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d113      	bne.n	8000e20 <tx_event_poll+0x106>
         {
            link->tx_record.rx_BS_tx++;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
            link->tx_record.current_tx_SN++;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
            link->tx_record.status = tx_cf_wait_confirm;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
      else
      {
         // do nothing
      }
   }
   tx_event_cf_frame(link);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff fe88 	bl	8000b36 <tx_event_cf_frame>
   return 0;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <tx_event_L_Data_Confirm>:

static int tx_event_L_Data_Confirm(can_iso_tp_link_t_p link, int8_t error)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
   if (link->tx_record.status == tx_sf_wait_confirm)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d123      	bne.n	8000e8e <tx_event_L_Data_Confirm+0x5e>
   {
      if (link->init_info.N_USData_confirm)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d01a      	beq.n	8000e84 <tx_event_L_Data_Confirm+0x54>
      {
         if (0 == error)
 8000e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10b      	bne.n	8000e6e <tx_event_L_Data_Confirm+0x3e>
         {
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699c      	ldr	r4, [r3, #24]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e66:	2300      	movs	r3, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	47a0      	blx	r4
 8000e6c:	e00a      	b.n	8000e84 <tx_event_L_Data_Confirm+0x54>
         }
         else
         {
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_ERROR);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699c      	ldr	r4, [r3, #24]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e7e:	2309      	movs	r3, #9
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	47a0      	blx	r4
         }
      }
      link->tx_record.status = tx_idle;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8000e8c:	e056      	b.n	8000f3c <tx_event_L_Data_Confirm+0x10c>
   }
   else if (link->tx_record.status == tx_ff_wait_confirm)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d127      	bne.n	8000ee8 <tx_event_L_Data_Confirm+0xb8>
   {
      if (link->tx_record.current_size > 0xfff)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ea2:	d30c      	bcc.n	8000ebe <tx_event_L_Data_Confirm+0x8e>
      {
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 6;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fdaa 	bl	8000a04 <dlc2len>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	3b06      	subs	r3, #6
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000ebc:	e00b      	b.n	8000ed6 <tx_event_L_Data_Confirm+0xa6>
      }
      else
      {
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 2;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fd9d 	bl	8000a04 <dlc2len>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
      link->tx_record.current_tx_SN = 1;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      link->tx_record.status = tx_wait_fc;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8000ee6:	e029      	b.n	8000f3c <tx_event_L_Data_Confirm+0x10c>
   }
   else if (link->tx_record.status == tx_cf_wait_confirm)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d124      	bne.n	8000f3c <tx_event_L_Data_Confirm+0x10c>
   {
      if (link->tx_record.rx_BS != 0)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d013      	beq.n	8000f24 <tx_event_L_Data_Confirm+0xf4>
      {
         if ((link->tx_record.rx_BS == link->tx_record.rx_BS_tx) && (link->tx_record.current_size != link->tx_record.current_tx_index))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d10b      	bne.n	8000f24 <tx_event_L_Data_Confirm+0xf4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d003      	beq.n	8000f24 <tx_event_L_Data_Confirm+0xf4>
         {
            link->tx_record.status = tx_wait_fc;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2205      	movs	r2, #5
 8000f20:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         }
      }
      if (link->tx_record.status == tx_cf_wait_confirm)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d103      	bne.n	8000f36 <tx_event_L_Data_Confirm+0x106>
      {
         link->tx_record.status = tx_cf_wait_tx;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2206      	movs	r2, #6
 8000f32:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
      }
      tx_event_cf_frame(link);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fdfd 	bl	8000b36 <tx_event_cf_frame>
   }
   return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
	...

08000f48 <tx_event_N_USData_Request>:

static int tx_event_N_USData_Request(can_iso_tp_link_t_p link, uint8_t isFunction, const uint8_t payload[], uint32_t size)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	460b      	mov	r3, r1
 8000f56:	72fb      	strb	r3, [r7, #11]
   unsigned int i;
   uint8_t single_frame_max_len = 7;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	74fb      	strb	r3, [r7, #19]
   if (link->init_info.TX_DLC > 8)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d908      	bls.n	8000f78 <tx_event_N_USData_Request+0x30>
   {
      single_frame_max_len = dlc2len(link->init_info.TX_DLC) - 2;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fd49 	bl	8000a04 <dlc2len>
 8000f72:	4603      	mov	r3, r0
 8000f74:	3b02      	subs	r3, #2
 8000f76:	74fb      	strb	r3, [r7, #19]
   }

   if (link->tx_record.status == tx_idle)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 8110 	bne.w	80011a4 <tx_event_N_USData_Request+0x25c>
   {
      if (size <= single_frame_max_len)
 8000f84:	7cfb      	ldrb	r3, [r7, #19]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f200 808b 	bhi.w	80010a4 <tx_event_N_USData_Request+0x15c>
      {
         // single frame
         if (isFunction == 0)
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d104      	bne.n	8000f9e <tx_event_N_USData_Request+0x56>
         {
            link->tx_record.last_msg.id = link->init_info.tx_id;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	6852      	ldr	r2, [r2, #4]
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9c:	e003      	b.n	8000fa6 <tx_event_N_USData_Request+0x5e>
         }
         else
         {
            link->tx_record.last_msg.id = link->init_info.funtion_id;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	68d2      	ldr	r2, [r2, #12]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
         }

         if (size <= 7)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d829      	bhi.n	8001000 <tx_event_N_USData_Request+0xb8>
         {
            for (i = 0; i < size; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00c      	b.n	8000fcc <tx_event_N_USData_Request+0x84>
            {
               link->tx_record.last_msg.data[i] = payload[i];
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	7819      	ldrb	r1, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3345      	adds	r3, #69	; 0x45
 8000fc2:	460a      	mov	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < size; i++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3ee      	bcc.n	8000fb2 <tx_event_N_USData_Request+0x6a>
            }
            for (; i < single_frame_max_len; i++)
 8000fd4:	e00b      	b.n	8000fee <tx_event_N_USData_Request+0xa6>
            {
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3345      	adds	r3, #69	; 0x45
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	701a      	strb	r2, [r3, #0]
            for (; i < single_frame_max_len; i++)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d3ef      	bcc.n	8000fd6 <tx_event_N_USData_Request+0x8e>
            }
            link->tx_record.last_msg.dlc = 8;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ffe:	e030      	b.n	8001062 <tx_event_N_USData_Request+0x11a>
         }
         else
         {
            for (i = 0; i < size; i++)
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e00c      	b.n	8001020 <tx_event_N_USData_Request+0xd8>
            {
               link->tx_record.last_msg.data[i] = payload[i];
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4413      	add	r3, r2
 800100c:	7819      	ldrb	r1, [r3, #0]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4413      	add	r3, r2
 8001014:	3345      	adds	r3, #69	; 0x45
 8001016:	460a      	mov	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < size; i++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3ee      	bcc.n	8001006 <tx_event_N_USData_Request+0xbe>
            }
            for (; i < single_frame_max_len; i++)
 8001028:	e00b      	b.n	8001042 <tx_event_N_USData_Request+0xfa>
            {
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4413      	add	r3, r2
 8001036:	3345      	adds	r3, #69	; 0x45
 8001038:	460a      	mov	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
            for (; i < single_frame_max_len; i++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	7cfb      	ldrb	r3, [r7, #19]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3ef      	bcc.n	800102a <tx_event_N_USData_Request+0xe2>
            }
            link->tx_record.last_msg.dlc = lenToMinDlc(size + 2);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b29b      	uxth	r3, r3
 800104e:	3302      	adds	r3, #2
 8001050:	b29b      	uxth	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fce8 	bl	8000a28 <lenToMinDlc>
 8001058:	4603      	mov	r3, r0
 800105a:	b2da      	uxtb	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
         }
         link->tx_record.status = tx_sf_wait_tx;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         link->tx_record.current_playload = payload;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
         link->tx_record.current_size = size;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	3240      	adds	r2, #64	; 0x40
 800108c:	4611      	mov	r1, r2
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	4798      	blx	r3
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	f040 8095 	bne.w	80011c4 <tx_event_N_USData_Request+0x27c>
         {
            link->tx_record.status = tx_sf_wait_confirm;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2202      	movs	r2, #2
 800109e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80010a2:	e08f      	b.n	80011c4 <tx_event_N_USData_Request+0x27c>
         }
      }
      else
      {
         // multi frame
         link->tx_record.N_WFT_cnt = 0;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
         link->tx_record.last_msg.id = link->init_info.tx_id;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	6852      	ldr	r2, [r2, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
         if (size <= 0xfff)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010ba:	d21e      	bcs.n	80010fa <tx_event_N_USData_Request+0x1b2>
         {
            link->tx_record.last_msg.data[0] = 0x10 | ((uint8_t)(size >> 8));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            link->tx_record.last_msg.data[1] = (uint8_t)(size & 0xff);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            memcpy(&link->tx_record.last_msg.data[2], payload, dlc2len(link->init_info.TX_DLC) - 2);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f103 0447 	add.w	r4, r3, #71	; 0x47
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fc8d 	bl	8000a04 <dlc2len>
 80010ea:	4603      	mov	r3, r0
 80010ec:	3b02      	subs	r3, #2
 80010ee:	461a      	mov	r2, r3
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4620      	mov	r0, r4
 80010f4:	f00f f87d 	bl	80101f2 <memcpy>
 80010f8:	e02e      	b.n	8001158 <tx_event_N_USData_Request+0x210>
         }
         else
         {
            link->tx_record.last_msg.data[0] = 0x10;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2210      	movs	r2, #16
 80010fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            link->tx_record.last_msg.data[1] = 0;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            link->tx_record.last_msg.data[2] = (uint8_t)(size >> 24);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	0e1b      	lsrs	r3, r3, #24
 800110e:	b2da      	uxtb	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            link->tx_record.last_msg.data[3] = (uint8_t)(size >> 16);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	0c1b      	lsrs	r3, r3, #16
 800111a:	b2da      	uxtb	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            link->tx_record.last_msg.data[4] = (uint8_t)(size >> 8);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b2da      	uxtb	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            link->tx_record.last_msg.data[5] = (uint8_t)(size);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            memcpy(&link->tx_record.last_msg.data[6], payload, dlc2len(link->init_info.TX_DLC) - 6);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fc5d 	bl	8000a04 <dlc2len>
 800114a:	4603      	mov	r3, r0
 800114c:	3b06      	subs	r3, #6
 800114e:	461a      	mov	r2, r3
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4620      	mov	r0, r4
 8001154:	f00f f84d 	bl	80101f2 <memcpy>
         }
         link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
         link->tx_record.status = tx_ff_wait_tx;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2203      	movs	r2, #3
 8001168:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         link->tx_record.current_playload = payload;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
         link->tx_record.current_size = size;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	3240      	adds	r2, #64	; 0x40
 800118e:	4611      	mov	r1, r2
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	4798      	blx	r3
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d114      	bne.n	80011c4 <tx_event_N_USData_Request+0x27c>
         {
            link->tx_record.status = tx_ff_wait_confirm;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2204      	movs	r2, #4
 800119e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80011a2:	e00f      	b.n	80011c4 <tx_event_N_USData_Request+0x27c>
         }
      }
   }
   else
   {
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when last request is not done\n");
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	490a      	ldr	r1, [pc, #40]	; (80011d0 <tx_event_N_USData_Request+0x288>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fc5f 	bl	8000a6c <printf_debug_msg>
      if (link->init_info.N_USData_confirm)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <tx_event_N_USData_Request+0x27c>
      {
         link->init_info.N_USData_confirm(link, payload, size, N_ERROR);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	699c      	ldr	r4, [r3, #24]
 80011ba:	2309      	movs	r3, #9
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	47a0      	blx	r4
      }
   }
   return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08011458 	.word	0x08011458

080011d4 <tx_event_L_Data_indication>:

static int tx_event_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *rx_msg)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
   if (link->tx_record.status == tx_wait_fc)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d17f      	bne.n	80012e8 <tx_event_L_Data_indication+0x114>
   {
      if (rx_msg->data[0] != 0x31)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	795b      	ldrb	r3, [r3, #5]
 80011ec:	2b31      	cmp	r3, #49	; 0x31
 80011ee:	d003      	beq.n	80011f8 <tx_event_L_Data_indication+0x24>
      {
         link->tx_record.N_WFT_cnt = 0;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
      }
      if (rx_msg->data[0] == 0x30)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	795b      	ldrb	r3, [r3, #5]
 80011fc:	2b30      	cmp	r3, #48	; 0x30
 80011fe:	d126      	bne.n	800124e <tx_event_L_Data_indication+0x7a>
      {
         link->tx_record.status = tx_cf_wait_tx;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2206      	movs	r2, #6
 8001204:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         link->tx_record.rx_BS = rx_msg->data[1];
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	799a      	ldrb	r2, [r3, #6]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
         link->tx_record.rx_BS_tx = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
         link->tx_record.rx_Stmin = rx_msg->data[2];
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	79da      	ldrb	r2, [r3, #7]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
         if (link->tx_record.rx_Stmin > 0x7f)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800122a:	b25b      	sxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	da03      	bge.n	8001238 <tx_event_L_Data_indication+0x64>
         {
            link->tx_record.rx_Stmin = 1;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
         }
         link->tx_record.last_msg_time_ms = link->current_time_ms - link->tx_record.rx_Stmin - 1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800124c:	e04c      	b.n	80012e8 <tx_event_L_Data_indication+0x114>
      }
      else if (rx_msg->data[0] == 0x32)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	795b      	ldrb	r3, [r3, #5]
 8001252:	2b32      	cmp	r3, #50	; 0x32
 8001254:	d113      	bne.n	800127e <tx_event_L_Data_indication+0xaa>
      {
         link->tx_record.status = tx_idle;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         if (link->init_info.N_USData_confirm)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d040      	beq.n	80012e8 <tx_event_L_Data_indication+0x114>
         {
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_BUFFER_OVFLW);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699c      	ldr	r4, [r3, #24]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001276:	2308      	movs	r3, #8
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	47a0      	blx	r4
 800127c:	e034      	b.n	80012e8 <tx_event_L_Data_indication+0x114>
         }
      }
      else if (rx_msg->data[0] == 0x31)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	795b      	ldrb	r3, [r3, #5]
 8001282:	2b31      	cmp	r3, #49	; 0x31
 8001284:	d11d      	bne.n	80012c2 <tx_event_L_Data_indication+0xee>
      {
         if (0 != link->init_info.N_WFTmax)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800128c:	2b00      	cmp	r3, #0
 800128e:	d02b      	beq.n	80012e8 <tx_event_L_Data_indication+0x114>
         {
            link->tx_record.N_WFT_cnt++;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8001296:	3301      	adds	r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            if (link->init_info.N_WFTmax <= link->tx_record.N_WFT_cnt)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d81b      	bhi.n	80012e8 <tx_event_L_Data_indication+0x114>
            {
               link->tx_record.N_WFT_cnt = 0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
               link->tx_record.status = tx_idle;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80012c0:	e012      	b.n	80012e8 <tx_event_L_Data_indication+0x114>
            }
         }
      }
      else
      {
         if (link->init_info.N_USData_confirm)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00a      	beq.n	80012e0 <tx_event_L_Data_indication+0x10c>
         {
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_INVALID_FS);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699c      	ldr	r4, [r3, #24]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012da:	2305      	movs	r3, #5
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	47a0      	blx	r4
         }
         link->tx_record.status = tx_idle;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
      }
   }
   tx_event_cf_frame(link);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fc24 	bl	8000b36 <tx_event_cf_frame>
   return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}

080012f8 <rx_event_handle_poll>:

static int rx_event_handle_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
   if (link->rx_record.status == rx_wait_cf)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001308:	2b03      	cmp	r3, #3
 800130a:	d11a      	bne.n	8001342 <rx_event_handle_poll+0x4a>
   {
      // Check whether the message is sent out of time
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Cr)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800131a:	4293      	cmp	r3, r2
 800131c:	d911      	bls.n	8001342 <rx_event_handle_poll+0x4a>
      {
         if (link->init_info.N_USData_indication)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <rx_event_handle_poll+0x42>
         {
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_CR);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695c      	ldr	r4, [r3, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69d9      	ldr	r1, [r3, #28]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001334:	2303      	movs	r3, #3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	47a0      	blx	r4
         }
         link->rx_record.status = rx_idle;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      }
   }
   if ((link->rx_record.status == rx_tx_fc_wait_confirm) || (link->rx_record.status == rx_tx_fc))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001348:	2b02      	cmp	r3, #2
 800134a:	d004      	beq.n	8001356 <rx_event_handle_poll+0x5e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001352:	2b01      	cmp	r3, #1
 8001354:	d11a      	bne.n	800138c <rx_event_handle_poll+0x94>
   {
      // Check whether the message is sent out of time
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Ar)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001364:	4293      	cmp	r3, r2
 8001366:	d911      	bls.n	800138c <rx_event_handle_poll+0x94>
      {
         if (link->init_info.N_USData_indication)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <rx_event_handle_poll+0x8c>
         {
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_A);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695c      	ldr	r4, [r3, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69d9      	ldr	r1, [r3, #28]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800137e:	2301      	movs	r3, #1
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	47a0      	blx	r4
         }
         link->rx_record.status = rx_idle;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      }
   }
   if (link->rx_record.status == rx_tx_fc)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001392:	2b01      	cmp	r3, #1
 8001394:	d10f      	bne.n	80013b6 <rx_event_handle_poll+0xbe>
   {
      // If the last driver failed to send, the request is resubmitted
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 80013a0:	4611      	mov	r1, r2
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d118      	bne.n	80013de <rx_event_handle_poll+0xe6>
      {
         link->rx_record.status = rx_tx_fc_wait_confirm;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 80013b4:	e013      	b.n	80013de <rx_event_handle_poll+0xe6>
      }
   }
   else if (link->rx_record.status == rx_tx_fc_overrun)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d10e      	bne.n	80013de <rx_event_handle_poll+0xe6>
   {
      // If the last driver failed to send, the request is resubmitted
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 80013ca:	4611      	mov	r1, r2
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4798      	blx	r3
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <rx_event_handle_poll+0xe6>
      {
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2205      	movs	r2, #5
 80013da:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      }
   }
   return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}

080013e8 <rx_event_L_Data_Confirm>:

static int rx_event_L_Data_Confirm(can_iso_tp_link_t_p link, int8_t error)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
   if (link->rx_record.status == rx_tx_fc_wait_confirm)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d104      	bne.n	8001408 <rx_event_L_Data_Confirm+0x20>
   {
      link->rx_record.status = rx_wait_cf;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2203      	movs	r2, #3
 8001402:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8001406:	e008      	b.n	800141a <rx_event_L_Data_Confirm+0x32>
   }
   else if (link->rx_record.status == rx_tx_fc_overrun_wait_confirm)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800140e:	2b05      	cmp	r3, #5
 8001410:	d103      	bne.n	800141a <rx_event_L_Data_Confirm+0x32>
   {
      link->rx_record.status = rx_idle;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
   }
   return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <rx_event_L_Data_indication>:

static int rx_event_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *rx_msg)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
   if ((rx_msg->data[0] & 0xf0) == 0)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	795b      	ldrb	r3, [r3, #5]
 8001436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d16e      	bne.n	800151c <rx_event_L_Data_indication+0xf4>
   {
      if (rx_msg->data[0] != 0)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d03b      	beq.n	80014be <rx_event_L_Data_indication+0x96>
      {
         if ((rx_msg->dlc <= 8) && (rx_msg->data[0] <= 7))
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	791b      	ldrb	r3, [r3, #4]
 800144a:	2b08      	cmp	r3, #8
 800144c:	f200 817a 	bhi.w	8001744 <rx_event_L_Data_indication+0x31c>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	795b      	ldrb	r3, [r3, #5]
 8001454:	2b07      	cmp	r3, #7
 8001456:	f200 8175 	bhi.w	8001744 <rx_event_L_Data_indication+0x31c>
         {
            uint8_t len = rx_msg->data[0];
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	795b      	ldrb	r3, [r3, #5]
 800145e:	737b      	strb	r3, [r7, #13]
            uint8_t rx_len = dlc2len(rx_msg->dlc);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	791b      	ldrb	r3, [r3, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff facd 	bl	8000a04 <dlc2len>
 800146a:	4603      	mov	r3, r0
 800146c:	733b      	strb	r3, [r7, #12]
            if (rx_len >= (1 + len))
 800146e:	7b7a      	ldrb	r2, [r7, #13]
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	429a      	cmp	r2, r3
 8001474:	f080 8166 	bcs.w	8001744 <rx_event_L_Data_indication+0x31c>
            {
               if (link->init_info.N_USData_indication)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 8161 	beq.w	8001744 <rx_event_L_Data_indication+0x31c>
               {
                  if (link->rx_record.status != rx_idle)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <rx_event_L_Data_indication+0x78>
                  {
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695c      	ldr	r4, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69d9      	ldr	r1, [r3, #28]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800149a:	2306      	movs	r3, #6
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	47a0      	blx	r4
                  }
                  link->rx_record.status = rx_idle;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                  link->init_info.N_USData_indication(link, &rx_msg->data[1], rx_msg->data[0], N_OK);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695c      	ldr	r4, [r3, #20]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	1d99      	adds	r1, r3, #6
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	795b      	ldrb	r3, [r3, #5]
 80014b4:	461a      	mov	r2, r3
 80014b6:	2300      	movs	r3, #0
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	47a0      	blx	r4
 80014bc:	e142      	b.n	8001744 <rx_event_L_Data_indication+0x31c>
            }
         }
      }
      else
      {
         if (rx_msg->dlc > 8)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	791b      	ldrb	r3, [r3, #4]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	f240 813e 	bls.w	8001744 <rx_event_L_Data_indication+0x31c>
         {
            uint8_t len = rx_msg->data[1];
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	799b      	ldrb	r3, [r3, #6]
 80014cc:	73fb      	strb	r3, [r7, #15]
            if (len > 0)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8137 	beq.w	8001744 <rx_event_L_Data_indication+0x31c>
            {
               uint8_t rx_len = dlc2len(rx_msg->dlc);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fa92 	bl	8000a04 <dlc2len>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73bb      	strb	r3, [r7, #14]
               if (rx_len >= (2 + len))
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	f280 812a 	bge.w	8001744 <rx_event_L_Data_indication+0x31c>
               {
                  /* according 15765-2-2016  table13, ignore frames that SF_DL does not fit int valid range*/
                  if (lenToMinDlc(len + 2) == rx_msg->dlc)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	3302      	adds	r3, #2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fa95 	bl	8000a28 <lenToMinDlc>
 80014fe:	4602      	mov	r2, r0
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 811d 	bne.w	8001744 <rx_event_L_Data_indication+0x31c>
                  {
                     link->init_info.N_USData_indication(link, &rx_msg->data[2], len, N_OK);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695c      	ldr	r4, [r3, #20]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	1dd9      	adds	r1, r3, #7
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	2300      	movs	r3, #0
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	47a0      	blx	r4
 800151a:	e113      	b.n	8001744 <rx_event_L_Data_indication+0x31c>
               }
            }
         }
      }
   }
   else if ((rx_msg->data[0] & 0xf0) == 0x10)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	795b      	ldrb	r3, [r3, #5]
 8001520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001524:	2b10      	cmp	r3, #16
 8001526:	d167      	bne.n	80015f8 <rx_event_L_Data_indication+0x1d0>
   {
      uint8_t rx_index_offset;
      if (link->rx_record.status != rx_idle)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <rx_event_L_Data_indication+0x11e>
      {
         link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695c      	ldr	r4, [r3, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69d9      	ldr	r1, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001540:	2306      	movs	r3, #6
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	47a0      	blx	r4
      }
      // rx ff and send fc
      link->rx_record.rx_len = (rx_msg->data[0] & 0xf) * 256 + rx_msg->data[1];
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	795b      	ldrb	r3, [r3, #5]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	7992      	ldrb	r2, [r2, #6]
 8001554:	4413      	add	r3, r2
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
      if (0 == link->rx_record.rx_len)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001564:	2b00      	cmp	r3, #0
 8001566:	d113      	bne.n	8001590 <rx_event_L_Data_indication+0x168>
      {
         link->rx_record.rx_len = (((uint32_t)rx_msg->data[2]) << 24) + (((uint32_t)rx_msg->data[3]) << 16) + (((uint32_t)rx_msg->data[4]) << 8) + (((uint32_t)rx_msg->data[5]));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	79db      	ldrb	r3, [r3, #7]
 800156c:	061a      	lsls	r2, r3, #24
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	7a1b      	ldrb	r3, [r3, #8]
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	441a      	add	r2, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	7a5b      	ldrb	r3, [r3, #9]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	4413      	add	r3, r2
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	7a92      	ldrb	r2, [r2, #10]
 8001582:	441a      	add	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
         rx_index_offset = 6;
 800158a:	2306      	movs	r3, #6
 800158c:	75fb      	strb	r3, [r7, #23]
 800158e:	e001      	b.n	8001594 <rx_event_L_Data_indication+0x16c>
      }
      else
      {
         rx_index_offset = 2;
 8001590:	2302      	movs	r3, #2
 8001592:	75fb      	strb	r3, [r7, #23]
      }
      if (link->rx_record.rx_len <= link->init_info.rx_buff_len)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d825      	bhi.n	80015ee <rx_event_L_Data_indication+0x1c6>
      {
         link->rx_record.rx_index = dlc2len(rx_msg->dlc) - rx_index_offset;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fa2c 	bl	8000a04 <dlc2len>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
         memcpy(link->init_info.rx_buff, &rx_msg->data[rx_index_offset], link->rx_record.rx_index);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69d8      	ldr	r0, [r3, #28]
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	1d59      	adds	r1, r3, #5
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80015ce:	461a      	mov	r2, r3
 80015d0:	f00e fe0f 	bl	80101f2 <memcpy>
         link->rx_record.rx_SN = 0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
         link->rx_record.tx_BS_cnt = 0;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
         link->rx_record.status = rx_tx_fc;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 80015ec:	e0aa      	b.n	8001744 <rx_event_L_Data_indication+0x31c>
      }
      else
      {
         link->rx_record.status = rx_tx_fc_overrun;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2204      	movs	r2, #4
 80015f2:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 80015f6:	e0a5      	b.n	8001744 <rx_event_L_Data_indication+0x31c>
      }
   }
   else if ((rx_msg->data[0] & 0xf0) == 0x20)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	795b      	ldrb	r3, [r3, #5]
 80015fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001600:	2b20      	cmp	r3, #32
 8001602:	f040 809f 	bne.w	8001744 <rx_event_L_Data_indication+0x31c>
   {
      // rx cf
      if (link->rx_record.status == rx_wait_cf)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800160c:	2b03      	cmp	r3, #3
 800160e:	f040 8099 	bne.w	8001744 <rx_event_L_Data_indication+0x31c>
      {
         uint32_t rx_len = link->rx_record.rx_len - link->rx_record.rx_index;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	613b      	str	r3, [r7, #16]
         if (rx_len > (uint32_t)(dlc2len(rx_msg->dlc) - 1))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	791b      	ldrb	r3, [r3, #4]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f9ec 	bl	8000a04 <dlc2len>
 800162c:	4603      	mov	r3, r0
 800162e:	3b01      	subs	r3, #1
 8001630:	461a      	mov	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4293      	cmp	r3, r2
 8001636:	d907      	bls.n	8001648 <rx_event_L_Data_indication+0x220>
         {
            rx_len = (dlc2len(rx_msg->dlc) - 1);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	791b      	ldrb	r3, [r3, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff f9e1 	bl	8000a04 <dlc2len>
 8001642:	4603      	mov	r3, r0
 8001644:	3b01      	subs	r3, #1
 8001646:	613b      	str	r3, [r7, #16]
         }
         link->rx_record.rx_SN++;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800164e:	3301      	adds	r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
         link->rx_record.last_msg_time_ms = link->current_time_ms;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
         if ((link->rx_record.rx_SN & 0xf) == (rx_msg->data[0] & 0xf))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	795b      	ldrb	r3, [r3, #5]
 800166c:	4053      	eors	r3, r2
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	2b00      	cmp	r3, #0
 8001676:	d157      	bne.n	8001728 <rx_event_L_Data_indication+0x300>
         {
            memcpy(&link->init_info.rx_buff[link->rx_record.rx_index], &rx_msg->data[1], rx_len);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001682:	18d0      	adds	r0, r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3306      	adds	r3, #6
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4619      	mov	r1, r3
 800168c:	f00e fdb1 	bl	80101f2 <memcpy>
            link->rx_record.rx_index += rx_len;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	441a      	add	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
            if (link->rx_record.status != rx_idle)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d04c      	beq.n	8001744 <rx_event_L_Data_indication+0x31c>
            {
               if (link->rx_record.rx_index >= link->rx_record.rx_len)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d312      	bcc.n	80016e0 <rx_event_L_Data_indication+0x2b8>
               {
                  if (link->init_info.N_USData_indication)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <rx_event_L_Data_indication+0x2ae>
                  {
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_OK);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695c      	ldr	r4, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69d9      	ldr	r1, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80016d0:	2300      	movs	r3, #0
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	47a0      	blx	r4
                  }
                  link->rx_record.status = rx_idle;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 80016de:	e031      	b.n	8001744 <rx_event_L_Data_indication+0x31c>
               }
               else
               {
                  link->rx_record.tx_BS_cnt++;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
                  if (link->init_info.FC_BS != 0)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d024      	beq.n	8001744 <rx_event_L_Data_indication+0x31c>
                  {
                     if ((link->rx_record.tx_BS_cnt % link->init_info.FC_BS) == 0)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8001706:	fbb3 f1f2 	udiv	r1, r3, r2
 800170a:	fb01 f202 	mul.w	r2, r1, r2
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <rx_event_L_Data_indication+0x31c>
                     {
                        link->rx_record.status = rx_tx_fc;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                        link->rx_record.tx_BS_cnt = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8001726:	e00d      	b.n	8001744 <rx_event_L_Data_indication+0x31c>
               }
            }
         }
         else
         {
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_WRONG_SN);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695c      	ldr	r4, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69d9      	ldr	r1, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001736:	2304      	movs	r3, #4
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	47a0      	blx	r4
            link->rx_record.status = rx_idle;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
         }
      }
   }
   if (link->rx_record.status == rx_tx_fc)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800174a:	2b01      	cmp	r3, #1
 800174c:	d143      	bne.n	80017d6 <rx_event_L_Data_indication+0x3ae>
   {
      link->rx_record.last_msg.id = link->init_info.tx_id;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6852      	ldr	r2, [r2, #4]
 8001754:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x30;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = link->init_info.FC_BS;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = link->init_info.STmin;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001784:	461d      	mov	r5, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f939 	bl	8000a04 <dlc2len>
 8001792:	4603      	mov	r3, r0
 8001794:	3b03      	subs	r3, #3
 8001796:	461a      	mov	r2, r3
 8001798:	4629      	mov	r1, r5
 800179a:	4620      	mov	r0, r4
 800179c:	f00e fd37 	bl	801020e <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 80017c0:	4611      	mov	r1, r2
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d148      	bne.n	800185e <rx_event_L_Data_indication+0x436>
      {
         link->rx_record.status = rx_tx_fc_wait_confirm;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 80017d4:	e043      	b.n	800185e <rx_event_L_Data_indication+0x436>
      }
   }
   else if (link->rx_record.status == rx_tx_fc_overrun)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d13e      	bne.n	800185e <rx_event_L_Data_indication+0x436>
   {
      link->rx_record.last_msg.id = link->init_info.tx_id;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6852      	ldr	r2, [r2, #4]
 80017e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x32;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2232      	movs	r2, #50	; 0x32
 80017ee:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = 0;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = 0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800180e:	461d      	mov	r5, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f8f4 	bl	8000a04 <dlc2len>
 800181c:	4603      	mov	r3, r0
 800181e:	3b03      	subs	r3, #3
 8001820:	461a      	mov	r2, r3
 8001822:	4629      	mov	r1, r5
 8001824:	4620      	mov	r0, r4
 8001826:	f00e fcf2 	bl	801020e <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 800184a:	4611      	mov	r1, r2
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <rx_event_L_Data_indication+0x436>
      {
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2205      	movs	r2, #5
 800185a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      }
   }
   return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bdb0      	pop	{r4, r5, r7, pc}

08001868 <tx_event_poll_handle>:

static void tx_event_poll_handle(void *par_src)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
   struct time_poll_par_t *par = (struct time_poll_par_t *)par_src;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60fb      	str	r3, [r7, #12]
   tx_event_poll(par->link, par->user_ms);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f7ff fa4b 	bl	8000d1a <tx_event_poll>
   par->handle = (event_handle_t)0;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <tx_event_L_Data_Confirm_handle>:

static void tx_event_L_Data_Confirm_handle(void *par_src)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   struct L_Data_confirm_par_t *par = (struct L_Data_confirm_par_t *)par_src;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]
   int8_t error = par->error;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	7a1b      	ldrb	r3, [r3, #8]
 80018a2:	72fb      	strb	r3, [r7, #11]
   par->handle = (event_handle_t)0;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
   tx_event_L_Data_Confirm(par->link, par->error);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f7ff faba 	bl	8000e30 <tx_event_L_Data_Confirm>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <tx_event_N_USData_Request_handle>:

static void tx_event_N_USData_Request_handle(void *par_src)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
   struct N_USData_request_par_t *par = (struct N_USData_request_par_t *)par_src;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	60fb      	str	r3, [r7, #12]
   tx_event_N_USData_Request(par->link, par->isFunction, par->payload, par->size);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6858      	ldr	r0, [r3, #4]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	7a19      	ldrb	r1, [r3, #8]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f7ff fb32 	bl	8000f48 <tx_event_N_USData_Request>
   par->handle = (event_handle_t)0;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <tx_event_L_Data_indication_handle>:

static void tx_event_L_Data_indication_handle(void *par_src)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   struct L_Data_indication_par_t *par = (struct L_Data_indication_par_t *)par_src;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
   tx_event_L_Data_indication(par->link, &par->rx_msg);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3308      	adds	r3, #8
 8001906:	4619      	mov	r1, r3
 8001908:	4610      	mov	r0, r2
 800190a:	f7ff fc63 	bl	80011d4 <tx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <rx_event_poll_handle>:

static void rx_event_poll_handle(void *par_src)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
   struct time_poll_par_t *par = (struct time_poll_par_t *)par_src;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	60fb      	str	r3, [r7, #12]
   rx_event_handle_poll(par->link, par->user_ms);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f7ff fce0 	bl	80012f8 <rx_event_handle_poll>
   par->handle = (event_handle_t)0;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <rx_event_L_Data_Confirm_handle>:

static void rx_event_L_Data_Confirm_handle(void *par_src)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   struct L_Data_confirm_par_t *par = (struct L_Data_confirm_par_t *)par_src;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]
   int8_t error = par->error;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	7a1b      	ldrb	r3, [r3, #8]
 8001956:	72fb      	strb	r3, [r7, #11]
   par->handle = (event_handle_t)0;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
   rx_event_L_Data_Confirm(par->link, error);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fd3d 	bl	80013e8 <rx_event_L_Data_Confirm>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <rx_event_L_Data_indication_handle>:

static void rx_event_L_Data_indication_handle(void *par_src)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   struct L_Data_indication_par_t *par = (struct L_Data_indication_par_t *)par_src;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]
   rx_event_L_Data_indication(par->link, &par->rx_msg);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3308      	adds	r3, #8
 800198a:	4619      	mov	r1, r3
 800198c:	4610      	mov	r0, r2
 800198e:	f7ff fd4b 	bl	8001428 <rx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <iso_can_tp_create>:

//---------------------call interface------------------------
int iso_can_tp_create(can_iso_tp_link_t_p link, struct can_iso_tp_init_t *init)
{
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
   if ((struct can_iso_tp_init_t *)0 == init)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <iso_can_tp_create+0x14>
   {
      return OP_NOK;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0bc      	b.n	8001b2e <iso_can_tp_create+0x18e>
   }
   if ((can_iso_tp_link_t_p)0 == link)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <iso_can_tp_create+0x1e>
   {
      return OP_NOK;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0b7      	b.n	8001b2e <iso_can_tp_create+0x18e>
   }
   if ((uint8_t *)0 == init->rx_buff)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <iso_can_tp_create+0x32>
   {
      printf_debug_msg(init, MODULE_PRINT "null rx_buff\n");
 80019c6:	495c      	ldr	r1, [pc, #368]	; (8001b38 <iso_can_tp_create+0x198>)
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7ff f84f 	bl	8000a6c <printf_debug_msg>
      return OP_NOK;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0ad      	b.n	8001b2e <iso_can_tp_create+0x18e>
   }
   if (init->rx_buff_len < 8)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	2b07      	cmp	r3, #7
 80019d8:	d805      	bhi.n	80019e6 <iso_can_tp_create+0x46>
   {
      printf_debug_msg(init, MODULE_PRINT "rx_buff_len should not less than 8\n");
 80019da:	4958      	ldr	r1, [pc, #352]	; (8001b3c <iso_can_tp_create+0x19c>)
 80019dc:	6838      	ldr	r0, [r7, #0]
 80019de:	f7ff f845 	bl	8000a6c <printf_debug_msg>
      return OP_NOK;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0a3      	b.n	8001b2e <iso_can_tp_create+0x18e>
//   if (memcmp(&init->rx_id, &init->tx_id, sizeof(init->tx_id)) == 0)
//   {
//      printf_debug_msg(init, MODULE_PRINT "rx_id should not = tx_id\n");
//      return OP_NOK;
//   }
   if (memcmp(&init->funtion_id, &init->tx_id, sizeof(init->tx_id)) == 0)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f103 000c 	add.w	r0, r3, #12
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	3304      	adds	r3, #4
 80019f0:	2204      	movs	r2, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	f00e fbed 	bl	80101d2 <memcmp>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <iso_can_tp_create+0x6a>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = tx_id\n");
 80019fe:	4950      	ldr	r1, [pc, #320]	; (8001b40 <iso_can_tp_create+0x1a0>)
 8001a00:	6838      	ldr	r0, [r7, #0]
 8001a02:	f7ff f833 	bl	8000a6c <printf_debug_msg>
      return OP_NOK;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e091      	b.n	8001b2e <iso_can_tp_create+0x18e>
   }
   if (memcmp(&init->funtion_id, &init->rx_id, sizeof(init->tx_id)) == 0)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f103 000c 	add.w	r0, r3, #12
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	3308      	adds	r3, #8
 8001a14:	2204      	movs	r2, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	f00e fbdb 	bl	80101d2 <memcmp>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <iso_can_tp_create+0x8e>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = rx_id\n");
 8001a22:	4948      	ldr	r1, [pc, #288]	; (8001b44 <iso_can_tp_create+0x1a4>)
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f7ff f821 	bl	8000a6c <printf_debug_msg>
      return OP_NOK;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07f      	b.n	8001b2e <iso_can_tp_create+0x18e>
   }
   if (init->tx_id.isRemote != 0)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	79db      	ldrb	r3, [r3, #7]
 8001a32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <iso_can_tp_create+0xae>
   {
      printf_debug_msg(init, MODULE_PRINT "tx frame should not be remote frame\n");
 8001a3c:	4942      	ldr	r1, [pc, #264]	; (8001b48 <iso_can_tp_create+0x1a8>)
 8001a3e:	6838      	ldr	r0, [r7, #0]
 8001a40:	f7ff f814 	bl	8000a6c <printf_debug_msg>
      init->tx_id.isRemote = 0;
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	79d3      	ldrb	r3, [r2, #7]
 8001a48:	f36f 13c7 	bfc	r3, #7, #1
 8001a4c:	71d3      	strb	r3, [r2, #7]
   }
   if (init->funtion_id.isRemote != 0)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	7bdb      	ldrb	r3, [r3, #15]
 8001a52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <iso_can_tp_create+0xce>
   {
      printf_debug_msg(init, MODULE_PRINT "function frame should not be remote frame\n");
 8001a5c:	493b      	ldr	r1, [pc, #236]	; (8001b4c <iso_can_tp_create+0x1ac>)
 8001a5e:	6838      	ldr	r0, [r7, #0]
 8001a60:	f7ff f804 	bl	8000a6c <printf_debug_msg>
      init->funtion_id.isRemote = 0;
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	7bd3      	ldrb	r3, [r2, #15]
 8001a68:	f36f 13c7 	bfc	r3, #7, #1
 8001a6c:	73d3      	strb	r3, [r2, #15]
   }
   if (init->rx_id.isRemote != 0)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	7adb      	ldrb	r3, [r3, #11]
 8001a72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <iso_can_tp_create+0xee>
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame should not be remote frame\n");
 8001a7c:	4934      	ldr	r1, [pc, #208]	; (8001b50 <iso_can_tp_create+0x1b0>)
 8001a7e:	6838      	ldr	r0, [r7, #0]
 8001a80:	f7fe fff4 	bl	8000a6c <printf_debug_msg>
      init->rx_id.isRemote = 0;
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	7ad3      	ldrb	r3, [r2, #11]
 8001a88:	f36f 13c7 	bfc	r3, #7, #1
 8001a8c:	72d3      	strb	r3, [r2, #11]
   }
#ifdef SUPPORT_CAN_FD
   if (init->TX_DLC < 8)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a94:	2b07      	cmp	r3, #7
 8001a96:	d807      	bhi.n	8001aa8 <iso_can_tp_create+0x108>
   {
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not less than 8\n");
 8001a98:	492e      	ldr	r1, [pc, #184]	; (8001b54 <iso_can_tp_create+0x1b4>)
 8001a9a:	6838      	ldr	r0, [r7, #0]
 8001a9c:	f7fe ffe6 	bl	8000a6c <printf_debug_msg>
      init->TX_DLC = 8;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   }
   if (init->TX_DLC > 0xf)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	d907      	bls.n	8001ac2 <iso_can_tp_create+0x122>
   {
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not more than 0xf\n");
 8001ab2:	4929      	ldr	r1, [pc, #164]	; (8001b58 <iso_can_tp_create+0x1b8>)
 8001ab4:	6838      	ldr	r0, [r7, #0]
 8001ab6:	f7fe ffd9 	bl	8000a6c <printf_debug_msg>
      init->TX_DLC = 0xf;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	220f      	movs	r2, #15
 8001abe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame can not have can-fd frame, compile with maro SUPPORT_CAN_FD if you need can-fd support\n");
      return OP_NOK;
   }
#endif
   memset(link, 0, sizeof(struct can_iso_tp_link_t));
 8001ac2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f00e fba0 	bl	801020e <memset>
   link->init_info = *init;
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4614      	mov	r4, r2
 8001ad4:	461d      	mov	r5, r3
 8001ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ae6:	e884 0003 	stmia.w	r4, {r0, r1}
   if (0 != event_manage_block_init(&link->rx_events.event_manage))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe ffcc 	bl	8000a8e <event_manage_block_init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <iso_can_tp_create+0x168>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create rx_events manage block\n");
 8001afc:	4917      	ldr	r1, [pc, #92]	; (8001b5c <iso_can_tp_create+0x1bc>)
 8001afe:	6838      	ldr	r0, [r7, #0]
 8001b00:	f7fe ffb4 	bl	8000a6c <printf_debug_msg>
      return OP_NOK;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e012      	b.n	8001b2e <iso_can_tp_create+0x18e>
   }
   if (0 != event_manage_block_init(&link->tx_events.event_manage))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe ffbd 	bl	8000a8e <event_manage_block_init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <iso_can_tp_create+0x186>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create tx_events manage block\n");
 8001b1a:	4911      	ldr	r1, [pc, #68]	; (8001b60 <iso_can_tp_create+0x1c0>)
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f7fe ffa5 	bl	8000a6c <printf_debug_msg>
      return OP_NOK;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e003      	b.n	8001b2e <iso_can_tp_create+0x18e>
   }
   SET_INIT_DONE_FLAG(link);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <iso_can_tp_create+0x1c4>)
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
   return OP_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bdb0      	pop	{r4, r5, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	0801149c 	.word	0x0801149c
 8001b3c:	080114b8 	.word	0x080114b8
 8001b40:	080114e8 	.word	0x080114e8
 8001b44:	08011514 	.word	0x08011514
 8001b48:	08011540 	.word	0x08011540
 8001b4c:	08011574 	.word	0x08011574
 8001b50:	080115ac 	.word	0x080115ac
 8001b54:	080115e0 	.word	0x080115e0
 8001b58:	08011608 	.word	0x08011608
 8001b5c:	08011634 	.word	0x08011634
 8001b60:	08011668 	.word	0x08011668
 8001b64:	74185295 	.word	0x74185295

08001b68 <iso_can_tp_poll>:

void iso_can_tp_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
   if (!CHECK_INIT_DONE_FLAG(link))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <iso_can_tp_poll+0xc0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d150      	bne.n	8001c1e <iso_can_tp_poll+0xb6>
   {
      return;
   }
   // Update internal timestamp
   link->current_time_ms = user_ms;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	63da      	str	r2, [r3, #60]	; 0x3c
   MCU_LOCK_ENTER_CRITICAL;
 8001b82:	f00d fec7 	bl	800f914 <vPortEnterCritical>
   if (link->rx_events.time_poll_par.handle == (event_handle_t)0)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d118      	bne.n	8001bc2 <iso_can_tp_poll+0x5a>
   {
      link->rx_events.time_poll_par.handle = rx_event_poll_handle;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <iso_can_tp_poll+0xc4>)
 8001b94:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
      MCU_LOCK_EXIT_CRITICAL;
 8001b98:	f00d feec 	bl	800f974 <vPortExitCritical>
      link->rx_events.time_poll_par.link = link;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
      link->rx_events.time_poll_par.user_ms = user_ms;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
      report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.time_poll_par);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f7fe ff83 	bl	8000ac6 <report_event_to_manage_block>
 8001bc0:	e006      	b.n	8001bd0 <iso_can_tp_poll+0x68>
   }
   else
   {
      MCU_LOCK_EXIT_CRITICAL;
 8001bc2:	f00d fed7 	bl	800f974 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new rx evnent when last is not done.\n");
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4919      	ldr	r1, [pc, #100]	; (8001c30 <iso_can_tp_poll+0xc8>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe ff4e 	bl	8000a6c <printf_debug_msg>
   }

   MCU_LOCK_ENTER_CRITICAL;
 8001bd0:	f00d fea0 	bl	800f914 <vPortEnterCritical>
   if (link->tx_events.time_poll_par.handle == (event_handle_t)0)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d117      	bne.n	8001c0e <iso_can_tp_poll+0xa6>
   {
      link->tx_events.time_poll_par.handle = tx_event_poll_handle;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <iso_can_tp_poll+0xcc>)
 8001be2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
      MCU_LOCK_EXIT_CRITICAL;
 8001be6:	f00d fec5 	bl	800f974 <vPortExitCritical>
      link->tx_events.time_poll_par.link = link;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      link->tx_events.time_poll_par.user_ms = user_ms;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
      report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.time_poll_par);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	33fc      	adds	r3, #252	; 0xfc
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f7fe ff5d 	bl	8000ac6 <report_event_to_manage_block>
 8001c0c:	e008      	b.n	8001c20 <iso_can_tp_poll+0xb8>
   }
   else
   {
      MCU_LOCK_EXIT_CRITICAL;
 8001c0e:	f00d feb1 	bl	800f974 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new tx evnent when last is not done.\n");
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4908      	ldr	r1, [pc, #32]	; (8001c38 <iso_can_tp_poll+0xd0>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe ff28 	bl	8000a6c <printf_debug_msg>
 8001c1c:	e000      	b.n	8001c20 <iso_can_tp_poll+0xb8>
      return;
 8001c1e:	bf00      	nop
   }
}
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	74185295 	.word	0x74185295
 8001c2c:	0800191d 	.word	0x0800191d
 8001c30:	0801169c 	.word	0x0801169c
 8001c34:	08001869 	.word	0x08001869
 8001c38:	080116e0 	.word	0x080116e0

08001c3c <iso_can_tp_L_Data_confirm>:

int iso_can_tp_L_Data_confirm(can_iso_tp_link_t_p link, const struct CAN_msg *msg, int8_t error)
{
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	71fb      	strb	r3, [r7, #7]
   int res = OP_NOK;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
   if ((can_iso_tp_link_t_p)0 == link)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <iso_can_tp_L_Data_confirm+0x1c>
   {
      return OP_NOK;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0a5      	b.n	8001da4 <iso_can_tp_L_Data_confirm+0x168>
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	4a53      	ldr	r2, [pc, #332]	; (8001dac <iso_can_tp_L_Data_confirm+0x170>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d001      	beq.n	8001c66 <iso_can_tp_L_Data_confirm+0x2a>
   {
      return OP_NOK;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e09e      	b.n	8001da4 <iso_can_tp_L_Data_confirm+0x168>
   }
   if (msg != (const struct CAN_msg *)0)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 809a 	beq.w	8001da2 <iso_can_tp_L_Data_confirm+0x166>
   {
      // RX task only focuses on sending completed flow control messages, other messages regardless, TX task does not care about sending completed flow control messages
      if ((msg->data[0] & 0xf0) == 0x30)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	795b      	ldrb	r3, [r3, #5]
 8001c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c76:	2b30      	cmp	r3, #48	; 0x30
 8001c78:	d155      	bne.n	8001d26 <iso_can_tp_L_Data_confirm+0xea>
      {
         if ((msg->id.isExt == link->rx_record.last_msg.id.isExt) 
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	78db      	ldrb	r3, [r3, #3]
 8001c7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8001c8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8086 	bne.w	8001da2 <iso_can_tp_L_Data_confirm+0x166>
             && (msg->id.id == link->rx_record.last_msg.id.id) 
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ca4:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d17a      	bne.n	8001da2 <iso_can_tp_L_Data_confirm+0x166>
             && (0 == memcmp(msg->data, link->rx_record.last_msg.data, dlc2len(link->rx_record.last_msg.dlc))))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1d5c      	adds	r4, r3, #5
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f203 154d 	addw	r5, r3, #333	; 0x14d
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fea1 	bl	8000a04 <dlc2len>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f00e fa82 	bl	80101d2 <memcmp>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d166      	bne.n	8001da2 <iso_can_tp_L_Data_confirm+0x166>
         {
            MCU_LOCK_ENTER_CRITICAL;
 8001cd4:	f00d fe1e 	bl	800f914 <vPortEnterCritical>
            if (link->rx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d119      	bne.n	8001d16 <iso_can_tp_L_Data_confirm+0xda>
            {
               link->rx_events.L_Data_confirm_par.handle = rx_event_L_Data_Confirm_handle;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <iso_can_tp_L_Data_confirm+0x174>)
 8001ce6:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
               MCU_LOCK_EXIT_CRITICAL;
 8001cea:	f00d fe43 	bl	800f974 <vPortExitCritical>
               link->rx_events.L_Data_confirm_par.link = link;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
               link->rx_events.L_Data_confirm_par.error = error;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	79fa      	ldrb	r2, [r7, #7]
 8001cfa:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_confirm_par);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	f7fe feda 	bl	8000ac6 <report_event_to_manage_block>
 8001d12:	6178      	str	r0, [r7, #20]
 8001d14:	e045      	b.n	8001da2 <iso_can_tp_L_Data_confirm+0x166>
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 8001d16:	f00d fe2d 	bl	800f974 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new rx evnent when last is not done.\n");
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4925      	ldr	r1, [pc, #148]	; (8001db4 <iso_can_tp_L_Data_confirm+0x178>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fea4 	bl	8000a6c <printf_debug_msg>
 8001d24:	e03d      	b.n	8001da2 <iso_can_tp_L_Data_confirm+0x166>
            }
         }
      }
      else
      {
         if ((msg->id.isExt == link->tx_record.last_msg.id.isExt) 
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	78db      	ldrb	r3, [r3, #3]
 8001d2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001d36:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d130      	bne.n	8001da2 <iso_can_tp_L_Data_confirm+0x166>
             && (msg->id.id == link->tx_record.last_msg.id.id))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d126      	bne.n	8001da2 <iso_can_tp_L_Data_confirm+0x166>
         {
            MCU_LOCK_ENTER_CRITICAL;
 8001d54:	f00d fdde 	bl	800f914 <vPortEnterCritical>
            if (link->tx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <iso_can_tp_L_Data_confirm+0x158>
            {
               link->tx_events.L_Data_confirm_par.handle = tx_event_L_Data_Confirm_handle;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <iso_can_tp_L_Data_confirm+0x17c>)
 8001d66:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
               MCU_LOCK_EXIT_CRITICAL;
 8001d6a:	f00d fe03 	bl	800f974 <vPortExitCritical>
               link->tx_events.L_Data_confirm_par.link = link;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
               link->tx_events.L_Data_confirm_par.error = error;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_confirm_par);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	33f0      	adds	r3, #240	; 0xf0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7fe fe9b 	bl	8000ac6 <report_event_to_manage_block>
 8001d90:	6178      	str	r0, [r7, #20]
 8001d92:	e006      	b.n	8001da2 <iso_can_tp_L_Data_confirm+0x166>
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 8001d94:	f00d fdee 	bl	800f974 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new tx event when last is not done.\n");
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <iso_can_tp_L_Data_confirm+0x180>)
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fe65 	bl	8000a6c <printf_debug_msg>
   }
   else
   {
      // no need to print info
   }
   return res;
 8001da2:	697b      	ldr	r3, [r7, #20]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	74185295 	.word	0x74185295
 8001db0:	08001947 	.word	0x08001947
 8001db4:	08011724 	.word	0x08011724
 8001db8:	08001893 	.word	0x08001893
 8001dbc:	08011768 	.word	0x08011768

08001dc0 <iso_can_tp_L_Data_indication>:

int iso_can_tp_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *msg)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
   int res = OP_NOK;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
   if ((can_iso_tp_link_t_p)0 == link)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <iso_can_tp_L_Data_indication+0x18>
   {
      return OP_NOK;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e09f      	b.n	8001f18 <iso_can_tp_L_Data_indication+0x158>
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ddc:	4a50      	ldr	r2, [pc, #320]	; (8001f20 <iso_can_tp_L_Data_indication+0x160>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d001      	beq.n	8001de6 <iso_can_tp_L_Data_indication+0x26>
   {
      return OP_NOK;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e098      	b.n	8001f18 <iso_can_tp_L_Data_indication+0x158>
   }
   if (msg)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8094 	beq.w	8001f16 <iso_can_tp_L_Data_indication+0x156>
   {
      // ignore remote frames
      if (msg->id.isRemote != 0)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	78db      	ldrb	r3, [r3, #3]
 8001df2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <iso_can_tp_L_Data_indication+0x40>
      {
         return OP_NOK;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e08b      	b.n	8001f18 <iso_can_tp_L_Data_indication+0x158>
      {
         printf_debug_msg(&link->init_info, "L_Data_indication cannot handle CANFD frame when SUPPORT_CAN_FD is not defined.\n");
         return OP_NOK;
      }
#endif
      if (((msg->id.isExt == link->init_info.rx_id.isExt) && (msg->id.id == link->init_info.rx_id.id)) 
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	78db      	ldrb	r3, [r3, #3]
 8001e04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7adb      	ldrb	r3, [r3, #11]
 8001e0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d109      	bne.n	8001e2c <iso_can_tp_L_Data_indication+0x6c>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d015      	beq.n	8001e58 <iso_can_tp_L_Data_indication+0x98>
          || ((msg->id.isExt == link->init_info.funtion_id.isExt) && (msg->id.id == link->init_info.funtion_id.id)))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	78db      	ldrb	r3, [r3, #3]
 8001e30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7bdb      	ldrb	r3, [r3, #15]
 8001e3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d168      	bne.n	8001f16 <iso_can_tp_L_Data_indication+0x156>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d15e      	bne.n	8001f16 <iso_can_tp_L_Data_indication+0x156>
      {
         // TX task only pays attention to receiving flow control message, other receive message can be ignored, RX task no matter receiving flow control message
         if ((msg->data[0] & 0xf0) == 0x30)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	795b      	ldrb	r3, [r3, #5]
 8001e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e60:	2b30      	cmp	r3, #48	; 0x30
 8001e62:	d12b      	bne.n	8001ebc <iso_can_tp_L_Data_indication+0xfc>
         {
            MCU_LOCK_ENTER_CRITICAL;
 8001e64:	f00d fd56 	bl	800f914 <vPortEnterCritical>
            if (link->tx_events.L_Data_indication_par.handle == (event_handle_t)0)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d11c      	bne.n	8001eac <iso_can_tp_L_Data_indication+0xec>
            {
               link->tx_events.L_Data_indication_par.handle = tx_event_L_Data_indication_handle;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <iso_can_tp_L_Data_indication+0x164>)
 8001e76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
               MCU_LOCK_EXIT_CRITICAL;
 8001e7a:	f00d fd7b 	bl	800f974 <vPortExitCritical>
               link->tx_events.L_Data_indication_par.link = link;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
               link->tx_events.L_Data_indication_par.rx_msg = *msg;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	33a8      	adds	r3, #168	; 0xa8
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	2248      	movs	r2, #72	; 0x48
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00e f9ae 	bl	80101f2 <memcpy>
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_indication_par);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	33a0      	adds	r3, #160	; 0xa0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f7fe fe0f 	bl	8000ac6 <report_event_to_manage_block>
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	e034      	b.n	8001f16 <iso_can_tp_L_Data_indication+0x156>
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 8001eac:	f00d fd62 	bl	800f974 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new tx event when last is not done.\n");
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	491d      	ldr	r1, [pc, #116]	; (8001f28 <iso_can_tp_L_Data_indication+0x168>)
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fdd9 	bl	8000a6c <printf_debug_msg>
 8001eba:	e02c      	b.n	8001f16 <iso_can_tp_L_Data_indication+0x156>
            }
         }
         else
         {
            MCU_LOCK_ENTER_CRITICAL;
 8001ebc:	f00d fd2a 	bl	800f914 <vPortEnterCritical>
            if (link->rx_events.L_Data_indication_par.handle == (event_handle_t)0)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d11e      	bne.n	8001f08 <iso_can_tp_L_Data_indication+0x148>
            {
               link->rx_events.L_Data_indication_par.handle = rx_event_L_Data_indication_handle;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <iso_can_tp_L_Data_indication+0x16c>)
 8001ece:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
               MCU_LOCK_EXIT_CRITICAL;
 8001ed2:	f00d fd4f 	bl	800f974 <vPortExitCritical>
               link->rx_events.L_Data_indication_par.link = link;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
               link->rx_events.L_Data_indication_par.rx_msg = *msg;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	2248      	movs	r2, #72	; 0x48
 8001eea:	4618      	mov	r0, r3
 8001eec:	f00e f981 	bl	80101f2 <memcpy>
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_indication_par);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f7fe fde1 	bl	8000ac6 <report_event_to_manage_block>
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	e006      	b.n	8001f16 <iso_can_tp_L_Data_indication+0x156>
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 8001f08:	f00d fd34 	bl	800f974 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new rx event when last is not done.\n");
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <iso_can_tp_L_Data_indication+0x170>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fdab 	bl	8000a6c <printf_debug_msg>
            }
         }
      }
   }
   return res;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	74185295 	.word	0x74185295
 8001f24:	080018f3 	.word	0x080018f3
 8001f28:	080117ac 	.word	0x080117ac
 8001f2c:	08001977 	.word	0x08001977
 8001f30:	080117f4 	.word	0x080117f4

08001f34 <iso_can_tp_N_USData_request>:

int iso_can_tp_N_USData_request(can_iso_tp_link_t_p link, uint8_t isFunction, const uint8_t payload[], uint32_t size)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	460b      	mov	r3, r1
 8001f42:	72fb      	strb	r3, [r7, #11]
   int res = OP_NOK;
 8001f44:	2301      	movs	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
   if ((can_iso_tp_link_t_p)0 == link)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <iso_can_tp_N_USData_request+0x1e>
   {
      return OP_NOK;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e04d      	b.n	8001fee <iso_can_tp_N_USData_request+0xba>
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <iso_can_tp_N_USData_request+0xc4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d001      	beq.n	8001f60 <iso_can_tp_N_USData_request+0x2c>
   {
      return OP_NOK;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e046      	b.n	8001fee <iso_can_tp_N_USData_request+0xba>
   }
   if ((const uint8_t *)0 == payload)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <iso_can_tp_N_USData_request+0x42>
   {
      res = OP_NOK;
 8001f66:	2301      	movs	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when payload == (const uint8_t*)0\n");
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4923      	ldr	r1, [pc, #140]	; (8001ffc <iso_can_tp_N_USData_request+0xc8>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fd7c 	bl	8000a6c <printf_debug_msg>
 8001f74:	e03a      	b.n	8001fec <iso_can_tp_N_USData_request+0xb8>
   }
   else
   {
      if (0 == size)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <iso_can_tp_N_USData_request+0x58>
      {
         res = OP_NOK;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
         printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when size == 0\n");
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	491f      	ldr	r1, [pc, #124]	; (8002000 <iso_can_tp_N_USData_request+0xcc>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fd71 	bl	8000a6c <printf_debug_msg>
 8001f8a:	e02f      	b.n	8001fec <iso_can_tp_N_USData_request+0xb8>
      }
      else
      {
         MCU_LOCK_ENTER_CRITICAL;
 8001f8c:	f00d fcc2 	bl	800f914 <vPortEnterCritical>
         if (link->tx_events.N_USData_request_par.handle == (event_handle_t)0)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d121      	bne.n	8001fde <iso_can_tp_N_USData_request+0xaa>
         {
            link->tx_events.N_USData_request_par.handle = tx_event_N_USData_Request_handle;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <iso_can_tp_N_USData_request+0xd0>)
 8001f9e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MCU_LOCK_EXIT_CRITICAL;
 8001fa2:	f00d fce7 	bl	800f974 <vPortExitCritical>
            link->tx_events.N_USData_request_par.link = link;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            link->tx_events.N_USData_request_par.isFunction = isFunction;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	7afa      	ldrb	r2, [r7, #11]
 8001fb2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            link->tx_events.N_USData_request_par.payload = payload;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            link->tx_events.N_USData_request_par.size = size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.N_USData_request_par);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	f7fe fd76 	bl	8000ac6 <report_event_to_manage_block>
 8001fda:	6178      	str	r0, [r7, #20]
 8001fdc:	e006      	b.n	8001fec <iso_can_tp_N_USData_request+0xb8>
         }
         else
         {
            MCU_LOCK_EXIT_CRITICAL;
 8001fde:	f00d fcc9 	bl	800f974 <vPortExitCritical>
            printf_debug_msg(&link->init_info, "N_USData_request cannot insert new tx event when last is not done.\n");
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4908      	ldr	r1, [pc, #32]	; (8002008 <iso_can_tp_N_USData_request+0xd4>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fd40 	bl	8000a6c <printf_debug_msg>
         }
      }
   }
   return res;
 8001fec:	697b      	ldr	r3, [r7, #20]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	74185295 	.word	0x74185295
 8001ffc:	0801183c 	.word	0x0801183c
 8002000:	08011884 	.word	0x08011884
 8002004:	080018c5 	.word	0x080018c5
 8002008:	080118b8 	.word	0x080118b8

0800200c <QueueInit>:
#include "can_iso_tp_mcu_lock.h"

/*Queue Init*/
uint8_t
QueueInit(struct FifoQueue *Queue, ElemType *dat, uint16_t queue_size)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
   uint8_t ret = (0 == 1);
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
   Queue->queue_size = queue_size;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	88fa      	ldrh	r2, [r7, #6]
 8002022:	809a      	strh	r2, [r3, #4]
   Queue->dat = dat;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	601a      	str	r2, [r3, #0]
   if ((Queue->dat != (ElemType *)0) && (Queue->queue_size != 0))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00e      	beq.n	8002050 <QueueInit+0x44>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	889b      	ldrh	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <QueueInit+0x44>
   {
      Queue->front = 0;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	80da      	strh	r2, [r3, #6]
      Queue->rear = 0;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	811a      	strh	r2, [r3, #8]
      ;
      Queue->count = 0;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	815a      	strh	r2, [r3, #10]
      ret = (1 == 1);
 800204c:	2301      	movs	r3, #1
 800204e:	75fb      	strb	r3, [r7, #23]
   }
   return ret;
 8002050:	7dfb      	ldrb	r3, [r7, #23]
}
 8002052:	4618      	mov	r0, r3
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <QueueIn>:

/* Queue In */
uint8_t
QueueIn(register struct FifoQueue *Queue, ElemType sdat)
{
 800205e:	b590      	push	{r4, r7, lr}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	4604      	mov	r4, r0
 8002066:	6079      	str	r1, [r7, #4]
   MCU_LOCK_ENTER_CRITICAL;
 8002068:	f00d fc54 	bl	800f914 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == Queue->queue_size))
 800206c:	88e2      	ldrh	r2, [r4, #6]
 800206e:	8923      	ldrh	r3, [r4, #8]
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <QueueIn+0x26>
 8002074:	8962      	ldrh	r2, [r4, #10]
 8002076:	88a3      	ldrh	r3, [r4, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	d103      	bne.n	8002084 <QueueIn+0x26>
   {
      MCU_LOCK_EXIT_CRITICAL;
 800207c:	f00d fc7a 	bl	800f974 <vPortExitCritical>
      return QueueFull;
 8002080:	2300      	movs	r3, #0
 8002082:	e016      	b.n	80020b2 <QueueIn+0x54>
   }
   else
   {
      Queue->dat[Queue->rear] = sdat;
 8002084:	6822      	ldr	r2, [r4, #0]
 8002086:	8923      	ldrh	r3, [r4, #8]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
      Queue->rear = (Queue->rear + 1) % Queue->queue_size;
 8002090:	8923      	ldrh	r3, [r4, #8]
 8002092:	3301      	adds	r3, #1
 8002094:	88a2      	ldrh	r2, [r4, #4]
 8002096:	fb93 f1f2 	sdiv	r1, r3, r2
 800209a:	fb01 f202 	mul.w	r2, r1, r2
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	8123      	strh	r3, [r4, #8]
      Queue->count = Queue->count + 1;
 80020a4:	8963      	ldrh	r3, [r4, #10]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 80020ac:	f00d fc62 	bl	800f974 <vPortExitCritical>
      return QueueOperateOk;
 80020b0:	2302      	movs	r3, #2
   }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}

080020ba <QueueOut>:

/* Queue Out*/
uint8_t
QueueOut(register struct FifoQueue *Queue, ElemType *sdat)
{
 80020ba:	b590      	push	{r4, r7, lr}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4604      	mov	r4, r0
 80020c2:	6079      	str	r1, [r7, #4]
   MCU_LOCK_ENTER_CRITICAL;
 80020c4:	f00d fc26 	bl	800f914 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == 0))
 80020c8:	88e2      	ldrh	r2, [r4, #6]
 80020ca:	8923      	ldrh	r3, [r4, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d106      	bne.n	80020de <QueueOut+0x24>
 80020d0:	8963      	ldrh	r3, [r4, #10]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <QueueOut+0x24>
   {
      MCU_LOCK_EXIT_CRITICAL;
 80020d6:	f00d fc4d 	bl	800f974 <vPortExitCritical>
      return QueueEmpty;
 80020da:	2301      	movs	r3, #1
 80020dc:	e017      	b.n	800210e <QueueOut+0x54>
   }
   else
   {
      *sdat = Queue->dat[Queue->front];
 80020de:	6822      	ldr	r2, [r4, #0]
 80020e0:	88e3      	ldrh	r3, [r4, #6]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	601a      	str	r2, [r3, #0]
      Queue->front = (Queue->front + 1) % Queue->queue_size;
 80020ec:	88e3      	ldrh	r3, [r4, #6]
 80020ee:	3301      	adds	r3, #1
 80020f0:	88a2      	ldrh	r2, [r4, #4]
 80020f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f6:	fb01 f202 	mul.w	r2, r1, r2
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	80e3      	strh	r3, [r4, #6]
      Queue->count = Queue->count - 1;
 8002100:	8963      	ldrh	r3, [r4, #10]
 8002102:	3b01      	subs	r3, #1
 8002104:	b29b      	uxth	r3, r3
 8002106:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 8002108:	f00d fc34 	bl	800f974 <vPortExitCritical>
      return QueueOperateOk;
 800210c:	2302      	movs	r3, #2
   }
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}

08002116 <mcu_lock_init>:
#include <stdint.h>
#include "can_iso_tp_mcu_lock.h"

void mcu_lock_init(mcu_lock_t *lock)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   *lock = 0;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <mcu_lock_try_lock>:

unsigned int mcu_lock_try_lock(register mcu_lock_t *lock)
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4604      	mov	r4, r0
   register volatile cpu_status_t cpu_sr;
   register unsigned int ret = (0 == 1);
 8002138:	2500      	movs	r5, #0
   if (0 == *lock)
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <mcu_lock_try_lock+0x24>
   {
      MCU_LOCK_ENTER_CRITICAL;
 8002140:	f00d fbe8 	bl	800f914 <vPortEnterCritical>
      if (0 == *lock)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <mcu_lock_try_lock+0x20>
      {
         *lock = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	6023      	str	r3, [r4, #0]
         ret = (1 == 1);
 800214e:	2501      	movs	r5, #1
      }
      MCU_LOCK_EXIT_CRITICAL;
 8002150:	f00d fc10 	bl	800f974 <vPortExitCritical>
   }
   return ret;
 8002154:	462b      	mov	r3, r5
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bdb0      	pop	{r4, r5, r7, pc}

0800215e <mcu_lock_unlock>:

void mcu_lock_unlock(mcu_lock_t *lock)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
      {
         *lock = false;
      }
      MCU_LOCK_EXIT_CRITICAL;
   }*/
   *lock = 0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <md80_TransmitReceive>:
{
}

bool md80_TransmitReceive(tMd80_Device *const me,
                          uint32_t timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
   bool ret = false;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]

   if (true == canIdle_Send(me->config.canId, me->local.command.toMd80.data, me->local.command.toMd80.length))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7818      	ldrb	r0, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f503 71d1 	add.w	r1, r3, #418	; 0x1a2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8002196:	461a      	mov	r2, r3
 8002198:	f7fe fa82 	bl	80006a0 <canIdle_Send>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <md80_TransmitReceive+0x50>
   {
      if (0 < timeout)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00f      	beq.n	80021c8 <md80_TransmitReceive+0x50>
      {
         osDelay(timeout);
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f00b f8a9 	bl	800d300 <osDelay>
         ret = canIdle_Read(me->config.canId, me->local.response.fromMd80.data, (uint8_t *)&me->local.response.fromMd80.length);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7818      	ldrb	r0, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 80021be:	461a      	mov	r2, r3
 80021c0:	f7fe fa9a 	bl	80006f8 <canIdle_Read>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
      }
   }

   return ret;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <md80_UpdateCommandFrame>:

static void md80_UpdateCommandFrame (tMd80_Device *const me)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
   switch (me->local.mode)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d859      	bhi.n	800229a <md80_UpdateCommandFrame+0xc6>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <md80_UpdateCommandFrame+0x18>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	08002201 	.word	0x08002201
 80021f0:	0800223d 	.word	0x0800223d
 80021f4:	08002279 	.word	0x08002279
 80021f8:	0800229b 	.word	0x0800229b
 80021fc:	0800221b 	.word	0x0800221b
   {
   case MD80_IDLE:
      me->local.command.toMd80.length = 2u;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      me->local.command.toMd80.data[0] = MD80_FRAME_GET_INFO;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2205      	movs	r2, #5
 800220c:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
      me->local.command.toMd80.data[1] = 0x00;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
      break;
 8002218:	e040      	b.n	800229c <md80_UpdateCommandFrame+0xc8>

   case MD80_IMPEDANCE:
      if (true == me->config.isRegularsAdjust)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <md80_UpdateCommandFrame+0x60>
      {
         /* Pack ImpedanceFrame */
         md80_PackImpedanceFrame(me);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa43 	bl	80026b0 <md80_PackImpedanceFrame>

         /* Reset flag. */
         me->config.isRegularsAdjust = false;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      else
      {
         /* Pack Motion Target Frame */
         md80_PackMotionTargetsFrame(me);
      }
      break;
 8002232:	e033      	b.n	800229c <md80_UpdateCommandFrame+0xc8>
         md80_PackMotionTargetsFrame(me);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fae9 	bl	800280c <md80_PackMotionTargetsFrame>
      break;
 800223a:	e02f      	b.n	800229c <md80_UpdateCommandFrame+0xc8>

   case MD80_POSITION_PID:
      if (true == me->config.isRegularsAdjust)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <md80_UpdateCommandFrame+0x82>
      {
         /* Pack PositionFrame */
         md80_PackPositionFrame(me);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fa6c 	bl	8002724 <md80_PackPositionFrame>

         /* Reset flag. */
         me->config.isRegularsAdjust = false;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      else
      {
         /* packMotionTargetsFrame */
         md80_PackMotionTargetsFrame(me);
      }
      break;
 8002254:	e022      	b.n	800229c <md80_UpdateCommandFrame+0xc8>
      else if (true == me->config.isVelocityRegulatorAdjust)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <md80_UpdateCommandFrame+0x9c>
         md80_PackVelocityFrame(me);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fa99 	bl	8002798 <md80_PackVelocityFrame>
         me->config.isVelocityRegulatorAdjust = false;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      break;
 800226e:	e015      	b.n	800229c <md80_UpdateCommandFrame+0xc8>
         md80_PackMotionTargetsFrame(me);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 facb 	bl	800280c <md80_PackMotionTargetsFrame>
      break;
 8002276:	e011      	b.n	800229c <md80_UpdateCommandFrame+0xc8>

   case MD80_VELOCITY_PID:
      if (true == me->config.isVelocityRegulatorAdjust)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <md80_UpdateCommandFrame+0xbe>
      {
         /* packVelocityFrame */
         md80_PackVelocityFrame(me);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa88 	bl	8002798 <md80_PackVelocityFrame>

         /* Reset flag. */
         me->config.isVelocityRegulatorAdjust = false;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      else
      {
         /* packMotionTargetsFrame */
         md80_PackMotionTargetsFrame(me);
      }
      break;
 8002290:	e004      	b.n	800229c <md80_UpdateCommandFrame+0xc8>
         md80_PackMotionTargetsFrame(me);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 faba 	bl	800280c <md80_PackMotionTargetsFrame>
      break;
 8002298:	e000      	b.n	800229c <md80_UpdateCommandFrame+0xc8>

   default:
      break;
 800229a:	bf00      	nop
   }
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <md80_UpdateRespondeData>:

void md80_UpdateRespondeData(tMd80_Device *const me, tMd80_ResponseFrame *const respFrame)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
   if ((me->config.canId != respFrame->canId) || (respFrame->fromMd80.data[0] != MD80_RESPONSE_DEFAULT))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d128      	bne.n	800230c <md80_UpdateRespondeData+0x68>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	789b      	ldrb	r3, [r3, #2]
 80022be:	2ba0      	cmp	r3, #160	; 0xa0
 80022c0:	d124      	bne.n	800230c <md80_UpdateRespondeData+0x68>
   {
      return;
   }

   me->local.errorVector = *(uint16_t *)&respFrame->fromMd80.data[1];
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	3303      	adds	r3, #3
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
   me->local.temperature = respFrame->fromMd80.data[3];
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	795a      	ldrb	r2, [r3, #5]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   me->local.position = *(float *)&respFrame->fromMd80.data[4];
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	3306      	adds	r3, #6
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50
   me->local.velocity = *(float *)&respFrame->fromMd80.data[8];
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	330a      	adds	r3, #10
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
   me->local.torque = *(float *)&respFrame->fromMd80.data[12];
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	330e      	adds	r3, #14
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	659a      	str	r2, [r3, #88]	; 0x58
   me->local.encoderPosition = *(float *)&respFrame->fromMd80.data[16];
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3312      	adds	r3, #18
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c
   me->local.encoderVelocity = *(float *)&respFrame->fromMd80.data[20];
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	3316      	adds	r3, #22
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	661a      	str	r2, [r3, #96]	; 0x60
 800230a:	e000      	b.n	800230e <md80_UpdateRespondeData+0x6a>
      return;
 800230c:	bf00      	nop
}
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <md80_SetEncoderZero>:

   return ret;
}

bool md80_SetEncoderZero(tMd80_Device *const me)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
   bool ret = false;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

   me->local.command.toMd80.data[0] = MD80_FRAME_ZERO_ENCODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2203      	movs	r2, #3
 8002328:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   me->local.command.toMd80.length = 2u;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

   if (true == md80_TransmitReceive(me, 50))
 800233c:	2132      	movs	r1, #50	; 0x32
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ff1a 	bl	8002178 <md80_TransmitReceive>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00f      	beq.n	800236a <md80_SetEncoderZero+0x52>
   {
      /* Set target position to 0.0f to avoid jerk at startup */
      md80_SendMotionCommand(me, 0.0f, 0.0f, 0.0f);
 800234a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8002374 <md80_SetEncoderZero+0x5c>
 800234e:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002374 <md80_SetEncoderZero+0x5c>
 8002352:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002374 <md80_SetEncoderZero+0x5c>
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f80e 	bl	8002378 <md80_SendMotionCommand>

      /* Set target position. */
      md80_SetTargetPosition(me, 0.0f);
 800235c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002374 <md80_SetEncoderZero+0x5c>
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f978 	bl	8002656 <md80_SetTargetPosition>

      ret = true;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
   }

   return (ret);
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	00000000 	.word	0x00000000

08002378 <md80_SendMotionCommand>:

void md80_SendMotionCommand(tMd80_Device *const me, float pos, float vel, float torque)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	ed87 0a02 	vstr	s0, [r7, #8]
 8002384:	edc7 0a01 	vstr	s1, [r7, #4]
 8002388:	ed87 1a00 	vstr	s2, [r7]
   me->local.command.toMd80.length = 16U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2210      	movs	r2, #16
 8002390:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2214      	movs	r2, #20
 8002398:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   *(float *)&me->local.command.toMd80.data[2] = vel;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[6] = pos;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[10] = torque;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	601a      	str	r2, [r3, #0]

   if (true == md80_TransmitReceive(me, 100))
 80023c2:	2164      	movs	r1, #100	; 0x64
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f7ff fed7 	bl	8002178 <md80_TransmitReceive>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <md80_SendMotionCommand+0x66>
   {
      md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80023d6:	4619      	mov	r1, r3
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff ff63 	bl	80022a4 <md80_UpdateRespondeData>
   }
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <md80_SetCurrentLimit>:

bool md80_SetCurrentLimit(tMd80_Device *const me, float currentLimit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	ed87 0a00 	vstr	s0, [r7]
   bool ret = false;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

   if (MD80_DRIVER_MAXCURRENT < currentLimit)
 80023f8:	edd7 7a00 	vldr	s15, [r7]
 80023fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002478 <md80_SetCurrentLimit+0x90>
 8002400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002408:	dd02      	ble.n	8002410 <md80_SetCurrentLimit+0x28>
   {
      currentLimit = MD80_DRIVER_MAXCURRENT;
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <md80_SetCurrentLimit+0x94>)
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	e00b      	b.n	8002428 <md80_SetCurrentLimit+0x40>
   }
   else if (MD80_DRIVER_MINCURRENT > currentLimit)
 8002410:	edd7 7a00 	vldr	s15, [r7]
 8002414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	d502      	bpl.n	8002428 <md80_SetCurrentLimit+0x40>
   {
      currentLimit = MD80_DRIVER_MINCURRENT;
 8002422:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002426:	603b      	str	r3, [r7, #0]
   }

   me->local.command.toMd80.data[0] = MD80_FRAME_BASE_CONFIG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2204      	movs	r2, #4
 800242c:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   me->local.command.toMd80.length = 6u;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2206      	movs	r2, #6
 800243c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
   *(float *)&me->local.command.toMd80.data[2] = currentLimit;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	601a      	str	r2, [r3, #0]

   if (true == md80_TransmitReceive(me, 50))
 800244a:	2132      	movs	r1, #50	; 0x32
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fe93 	bl	8002178 <md80_TransmitReceive>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <md80_SetCurrentLimit+0x84>
   {
      if (MD80_FRAME_BASE_CONFIG == me->local.response.fromMd80.data[0])
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d104      	bne.n	800246c <md80_SetCurrentLimit+0x84>
      {
         me->config.currentMax = currentLimit;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	60da      	str	r2, [r3, #12]
         ret = true;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      }
   }

   return (ret);
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	42200000 	.word	0x42200000
 800247c:	42200000 	.word	0x42200000

08002480 <md80_ControlMd80Mode>:

bool md80_ControlMd80Mode(tMd80_Device *const me, tMd80_Mode mode)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
   bool ret = false;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

   me->local.command.toMd80.data[0] = MD80_FRAME_CONTROL_SELECT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   me->local.command.toMd80.data[2] = (uint8_t)mode;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
   me->local.command.toMd80.length = 3u;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2203      	movs	r2, #3
 80024ac:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

   if (true == md80_TransmitReceive(me, 50))
 80024b0:	2132      	movs	r1, #50	; 0x32
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fe60 	bl	8002178 <md80_TransmitReceive>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <md80_ControlMd80Mode+0x4a>
   {
      me->local.mode = mode;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
      ret = true;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
   }

   return ret;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <md80_ControlMd80Enable>:

bool md80_ControlMd80Enable(tMd80_Device *const me, bool enable)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
   bool ret = false;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]

   me->local.command.toMd80.data[0] = MD80_FRAME_MOTOR_ENABLE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   me->local.command.toMd80.data[2] = (uint8_t)enable;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
   me->local.command.toMd80.length = 3u;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

   if (true == md80_TransmitReceive(me, 50))
 8002504:	2132      	movs	r1, #50	; 0x32
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fe36 	bl	8002178 <md80_TransmitReceive>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <md80_ControlMd80Enable+0x42>
   {
	   ret = true;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
   }

   return ret;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <md80_MainFunction>:

void md80_MainFunction (tMd80_Device *const me)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
   md80_UpdateCommandFrame (me);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fe53 	bl	80021d4 <md80_UpdateCommandFrame>

   if (true == md80_TransmitReceive(me, 50))
 800252e:	2132      	movs	r1, #50	; 0x32
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fe21 	bl	8002178 <md80_TransmitReceive>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <md80_MainFunction+0x2a>
   {
      md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fead 	bl	80022a4 <md80_UpdateRespondeData>
   }
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <md80_SetPositionControllerParams>:
void md80_SetPositionControllerParams(tMd80_Device *const me,
                                      float kp,
                                      float ki,
                                      float kd,
                                      float iWindup)
{
 8002552:	b480      	push	{r7}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	6178      	str	r0, [r7, #20]
 800255a:	ed87 0a04 	vstr	s0, [r7, #16]
 800255e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002562:	ed87 1a02 	vstr	s2, [r7, #8]
 8002566:	edc7 1a01 	vstr	s3, [r7, #4]
   me->config.isRegularsAdjust = true;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   me->config.positionController.kp = kp;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	621a      	str	r2, [r3, #32]
   me->config.positionController.ki = ki;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
   me->config.positionController.kd = kd;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
   me->config.positionController.i_windup = iWindup;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <md80_SetVelocityControllerParams>:
void md80_SetVelocityControllerParams(tMd80_Device *const me,
                                      float kp,
                                      float ki,
                                      float kd,
                                      float iWindup)
{
 8002596:	b480      	push	{r7}
 8002598:	b087      	sub	sp, #28
 800259a:	af00      	add	r7, sp, #0
 800259c:	6178      	str	r0, [r7, #20]
 800259e:	ed87 0a04 	vstr	s0, [r7, #16]
 80025a2:	edc7 0a03 	vstr	s1, [r7, #12]
 80025a6:	ed87 1a02 	vstr	s2, [r7, #8]
 80025aa:	edc7 1a01 	vstr	s3, [r7, #4]
   me->config.velocityController.kp = kp;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	611a      	str	r2, [r3, #16]
   me->config.velocityController.ki = ki;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	615a      	str	r2, [r3, #20]
   me->config.velocityController.kd = kd;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	619a      	str	r2, [r3, #24]
   me->config.velocityController.i_windup = iWindup;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	61da      	str	r2, [r3, #28]
   me->config.isVelocityRegulatorAdjust = true;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <md80_SetImpedanceControllerParams>:

void md80_SetImpedanceControllerParams(tMd80_Device *const me, float kp, float kd)
{
 80025da:	b480      	push	{r7}
 80025dc:	b085      	sub	sp, #20
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	ed87 0a02 	vstr	s0, [r7, #8]
 80025e6:	edc7 0a01 	vstr	s1, [r7, #4]
   me->config.impedanceController.kp = kp;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
   me->config.impedanceController.kd = kd;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34
   me->config.isRegularsAdjust = true;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <md80_SetMaxTorque>:

void md80_SetMaxTorque(tMd80_Device *const me, float maxTorque)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	ed87 0a00 	vstr	s0, [r7]
   /* Send request */
   me->config.torqueMax = maxTorque;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	605a      	str	r2, [r3, #4]
   me->config.isTorqueMaxAdjust = true;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <md80_SetMaxVelocity>:

void md80_SetMaxVelocity(tMd80_Device *const me, float maxVelocity)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	ed87 0a00 	vstr	s0, [r7]
   me->config.velocityMax = maxVelocity;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	609a      	str	r2, [r3, #8]
   me->config.isVelocityAdjust = true;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <md80_SetTargetPosition>:

void md80_SetTargetPosition(tMd80_Device *const me, float pos)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	ed87 0a00 	vstr	s0, [r7]
   me->input.position = pos;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <md80_SetTargetVelocity>:

void md80_SetTargetVelocity(tMd80_Device *const me, float vel)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	ed87 0a00 	vstr	s0, [r7]
   me->input.velocity = vel;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <md80_SetTorque>:

void md80_SetTorque(tMd80_Device *const me, float torque)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	ed87 0a00 	vstr	s0, [r7]
   me->input.torque = torque;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <md80_PackImpedanceFrame>:
{

}

void md80_PackImpedanceFrame(tMd80_Device *const me)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
   me->local.command.toMd80.length = 32u;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
   me->local.command.toMd80.data[0] = MD80_FRAME_IMP_CONTROL;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2212      	movs	r2, #18
 80026c4:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   *(float *)&me->local.command.toMd80.data[2] = me->config.impedanceController.kp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026da:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[6] = me->config.impedanceController.kd;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026e6:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[10] = me->input.position;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026f2:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[14] = me->input.velocity;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026fe:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[18] = me->input.torque;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800270a:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[22] = me->config.torqueMax;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6852      	ldr	r2, [r2, #4]
 8002716:	601a      	str	r2, [r3, #0]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <md80_PackPositionFrame>:

void md80_PackPositionFrame(tMd80_Device *const me)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
   me->local.command.toMd80.length = 32;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
   me->local.command.toMd80.data[0] = MD80_FRAME_POS_CONTROL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2210      	movs	r2, #16
 8002738:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   *(float *)&me->local.command.toMd80.data[2] = me->config.positionController.kp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6a12      	ldr	r2, [r2, #32]
 800274e:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[6] = me->config.positionController.ki;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800275a:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[10] = me->config.positionController.kd;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002766:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[14] = me->config.positionController.i_windup;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002772:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[18] = me->config.velocityMax;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6892      	ldr	r2, [r2, #8]
 800277e:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[22] = me->input.position;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800278a:	601a      	str	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <md80_PackVelocityFrame>:

void md80_PackVelocityFrame (tMd80_Device *const me)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
   me->local.command.toMd80.length = 32;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
   me->local.command.toMd80.data[0] = MD80_FRAME_VEL_CONTROL;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2211      	movs	r2, #17
 80027ac:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   *(float *)&me->local.command.toMd80.data[2] =  me->config.velocityController.kp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6912      	ldr	r2, [r2, #16]
 80027c2:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[6] =  me->config.velocityController.ki;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6952      	ldr	r2, [r2, #20]
 80027ce:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[10] = me->config.velocityController.kd;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6992      	ldr	r2, [r2, #24]
 80027da:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[14] = me->config.velocityController.i_windup;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	69d2      	ldr	r2, [r2, #28]
 80027e6:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[18] = me->config.torqueMax;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6852      	ldr	r2, [r2, #4]
 80027f2:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[22] = me->input.velocity;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027fe:	601a      	str	r2, [r3, #0]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <md80_PackMotionTargetsFrame>:
void md80_PackMotionTargetsFrame (tMd80_Device *const me)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
   me->local.command.toMd80.length = 24;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2218      	movs	r2, #24
 8002818:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2214      	movs	r2, #20
 8002820:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
   me->local.command.toMd80.data[1] = 0x00;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
   memcpy((uint8_t *)&me->local.command.toMd80.data[2], (uint8_t *)&me->input.velocity, sizeof(float));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	3244      	adds	r2, #68	; 0x44
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	601a      	str	r2, [r3, #0]
   memcpy((uint8_t *)&me->local.command.toMd80.data[6], (uint8_t *)&me->input.position, sizeof(float));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	3240      	adds	r2, #64	; 0x40
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	601a      	str	r2, [r3, #0]
   memcpy((uint8_t *)&me->local.command.toMd80.data[10], (uint8_t *)&me->input.torque, sizeof(float));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	3248      	adds	r2, #72	; 0x48
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	601a      	str	r2, [r3, #0]
   memcpy((uint8_t *)&me->local.command.toMd80.data[14], (uint8_t *)&me->config.torqueMax, sizeof(float));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	3204      	adds	r2, #4
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	601a      	str	r2, [r3, #0]
   memcpy((uint8_t *)&me->local.command.toMd80.data[18], (uint8_t *)&me->config.velocityMax, sizeof(float));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <ESC_download_pre_objecthandler>:
uint32_t ESC_download_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af02      	add	r7, sp, #8
 8002886:	60ba      	str	r2, [r7, #8]
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4603      	mov	r3, r0
 800288c:	81fb      	strh	r3, [r7, #14]
 800288e:	460b      	mov	r3, r1
 8002890:	737b      	strb	r3, [r7, #13]
   if (IS_RXPDO (index) ||
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8002898:	d303      	bcc.n	80028a2 <ESC_download_pre_objecthandler+0x22>
 800289a:	89fb      	ldrh	r3, [r7, #14]
 800289c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80028a0:	d311      	bcc.n	80028c6 <ESC_download_pre_objecthandler+0x46>
 80028a2:	89fb      	ldrh	r3, [r7, #14]
 80028a4:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 80028a8:	d303      	bcc.n	80028b2 <ESC_download_pre_objecthandler+0x32>
       IS_TXPDO (index) ||
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80028b0:	d309      	bcc.n	80028c6 <ESC_download_pre_objecthandler+0x46>
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	f641 4212 	movw	r2, #7186	; 0x1c12
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <ESC_download_pre_objecthandler+0x46>
       index == RX_PDO_OBJIDX ||
 80028bc:	89fb      	ldrh	r3, [r7, #14]
 80028be:	f641 4213 	movw	r2, #7187	; 0x1c13
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d112      	bne.n	80028ec <ESC_download_pre_objecthandler+0x6c>
       index == TX_PDO_OBJIDX)
   {
      uint8_t minSub = ((flags & COMPLETE_ACCESS_FLAG) == 0) ? 0 : 1;
 80028c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	0bdb      	lsrs	r3, r3, #15
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	75fb      	strb	r3, [r7, #23]
      if (subindex > minSub && COE_maxSub (index) != 0)
 80028d2:	7b7a      	ldrb	r2, [r7, #13]
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d908      	bls.n	80028ec <ESC_download_pre_objecthandler+0x6c>
 80028da:	89fb      	ldrh	r3, [r7, #14]
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 f983 	bl	8006be8 <COE_maxSub>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <ESC_download_pre_objecthandler+0x6c>
      {
         return ABORT_SUBINDEX0_NOT_ZERO;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <ESC_download_pre_objecthandler+0x94>)
 80028ea:	e00f      	b.n	800290c <ESC_download_pre_objecthandler+0x8c>
      }
   }

   if (ESCvar.pre_object_download_hook)
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <ESC_download_pre_objecthandler+0x98>)
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <ESC_download_pre_objecthandler+0x8a>
   {
      return (ESCvar.pre_object_download_hook) (index,
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <ESC_download_pre_objecthandler+0x98>)
 80028f6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80028f8:	7b79      	ldrb	r1, [r7, #13]
 80028fa:	89f8      	ldrh	r0, [r7, #14]
 80028fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	47a0      	blx	r4
 8002906:	4603      	mov	r3, r0
 8002908:	e000      	b.n	800290c <ESC_download_pre_objecthandler+0x8c>
            data,
            size,
            flags);
   }

   return 0;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	06010003 	.word	0x06010003
 8002918:	200014a8 	.word	0x200014a8

0800291c <ESC_download_post_objecthandler>:
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_download_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
 8002926:	460b      	mov	r3, r1
 8002928:	717b      	strb	r3, [r7, #5]
 800292a:	4613      	mov	r3, r2
 800292c:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_download_hook != NULL)
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <ESC_download_post_objecthandler+0x34>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <ESC_download_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_download_hook)(index, subindex, flags);
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <ESC_download_post_objecthandler+0x34>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	7979      	ldrb	r1, [r7, #5]
 800293e:	88f8      	ldrh	r0, [r7, #6]
 8002940:	4798      	blx	r3
 8002942:	4603      	mov	r3, r0
 8002944:	e000      	b.n	8002948 <ESC_download_post_objecthandler+0x2c>
   }

   return 0;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200014a8 	.word	0x200014a8

08002954 <ESC_upload_pre_objecthandler>:
uint32_t ESC_upload_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t *size,
      uint16_t flags)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b087      	sub	sp, #28
 8002958:	af02      	add	r7, sp, #8
 800295a:	60ba      	str	r2, [r7, #8]
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4603      	mov	r3, r0
 8002960:	81fb      	strh	r3, [r7, #14]
 8002962:	460b      	mov	r3, r1
 8002964:	737b      	strb	r3, [r7, #13]
   if (ESCvar.pre_object_upload_hook != NULL)
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <ESC_upload_pre_objecthandler+0x3c>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <ESC_upload_pre_objecthandler+0x30>
   {
      return (ESCvar.pre_object_upload_hook) (index,
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <ESC_upload_pre_objecthandler+0x3c>)
 8002970:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002972:	7b79      	ldrb	r1, [r7, #13]
 8002974:	89f8      	ldrh	r0, [r7, #14]
 8002976:	8c3b      	ldrh	r3, [r7, #32]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	47a0      	blx	r4
 8002980:	4603      	mov	r3, r0
 8002982:	e000      	b.n	8002986 <ESC_upload_pre_objecthandler+0x32>
            data,
            size,
            flags);
   }

   return 0;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
 800298e:	bf00      	nop
 8002990:	200014a8 	.word	0x200014a8

08002994 <ESC_upload_post_objecthandler>:
 * @param[in] index      = index of SDO upload request to handle
 * @param[in] sub-index  = sub-index of SDO upload request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_upload_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
 800299e:	460b      	mov	r3, r1
 80029a0:	717b      	strb	r3, [r7, #5]
 80029a2:	4613      	mov	r3, r2
 80029a4:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_upload_hook != NULL)
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <ESC_upload_post_objecthandler+0x34>)
 80029a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <ESC_upload_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_upload_hook)(index, subindex, flags);
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <ESC_upload_post_objecthandler+0x34>)
 80029b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	7979      	ldrb	r1, [r7, #5]
 80029b6:	88f8      	ldrh	r0, [r7, #6]
 80029b8:	4798      	blx	r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	e000      	b.n	80029c0 <ESC_upload_post_objecthandler+0x2c>
   }

   return 0;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200014a8 	.word	0x200014a8

080029cc <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <APP_safeoutput+0x18>)
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <APP_safeoutput+0x12>
   {
      (ESCvar.safeoutput_override)();
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <APP_safeoutput+0x18>)
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	4798      	blx	r3
   }
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200014a8 	.word	0x200014a8

080029e8 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <TXPDO_update+0x3c>)
 80029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <TXPDO_update+0x3c>)
 80029f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f8:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 80029fa:	e010      	b.n	8002a1e <TXPDO_update+0x36>
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <TXPDO_update+0x3c>)
 80029fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <TXPDO_update+0x40>)
 8002a04:	4619      	mov	r1, r3
 8002a06:	4809      	ldr	r0, [pc, #36]	; (8002a2c <TXPDO_update+0x44>)
 8002a08:	f004 f82e 	bl	8006a68 <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <TXPDO_update+0x3c>)
 8002a0e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002a12:	461a      	mov	r2, r3
 8002a14:	4905      	ldr	r1, [pc, #20]	; (8002a2c <TXPDO_update+0x44>)
 8002a16:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002a1a:	f004 f9a3 	bl	8006d64 <ESC_write>
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200014a8 	.word	0x200014a8
 8002a28:	20001460 	.word	0x20001460
 8002a2c:	20001d98 	.word	0x20001d98

08002a30 <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <RXPDO_update+0x3c>)
 8002a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <RXPDO_update+0x3c>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 8002a42:	e010      	b.n	8002a66 <RXPDO_update+0x36>
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <RXPDO_update+0x3c>)
 8002a46:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4908      	ldr	r1, [pc, #32]	; (8002a70 <RXPDO_update+0x40>)
 8002a4e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002a52:	f004 f923 	bl	8006c9c <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <RXPDO_update+0x3c>)
 8002a58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a5c:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <RXPDO_update+0x44>)
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <RXPDO_update+0x40>)
 8002a62:	f004 f863 	bl	8006b2c <COE_pdoUnpack>
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200014a8 	.word	0x200014a8
 8002a70:	20001b98 	.word	0x20001b98
 8002a74:	20001430 	.word	0x20001430

08002a78 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	dd46      	ble.n	8002b1a <DIG_process+0xa2>
   {
      if (CC_ATOMIC_GET(watchdog) > 0)
 8002a8c:	4b4f      	ldr	r3, [pc, #316]	; (8002bcc <DIG_process+0x154>)
 8002a8e:	f3bf 8f5b 	dmb	ish
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3bf 8f5b 	dmb	ish
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	dd0c      	ble.n	8002ab6 <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 8002a9c:	4b4b      	ldr	r3, [pc, #300]	; (8002bcc <DIG_process+0x154>)
 8002a9e:	f3bf 8f5b 	dmb	ish
 8002aa2:	e853 2f00 	ldrex	r2, [r3]
 8002aa6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002aaa:	e843 2100 	strex	r1, r2, [r3]
 8002aae:	2900      	cmp	r1, #0
 8002ab0:	d1f7      	bne.n	8002aa2 <DIG_process+0x2a>
 8002ab2:	f3bf 8f5b 	dmb	ish
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8002ab6:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <DIG_process+0x154>)
 8002ab8:	f3bf 8f5b 	dmb	ish
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3bf 8f5b 	dmb	ish
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	dc14      	bgt.n	8002af0 <DIG_process+0x78>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8002ac6:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <DIG_process+0x158>)
 8002ac8:	f3bf 8f5b 	dmb	ish
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	f3bf 8f5b 	dmb	ish
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f003 0302 	and.w	r3, r3, #2
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	dd09      	ble.n	8002af0 <DIG_process+0x78>
           (ESCvar.ESC_SM2_sml > 0))
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <DIG_process+0x15c>)
 8002ade:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <DIG_process+0x78>
      {
         DPRINT("DIG_process watchdog expired\n");
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 8002ae6:	211b      	movs	r1, #27
 8002ae8:	2014      	movs	r0, #20
 8002aea:	f000 f919 	bl	8002d20 <ESC_ALstatusgotoerror>
 8002aee:	e014      	b.n	8002b1a <DIG_process+0xa2>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 8002af0:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <DIG_process+0x158>)
 8002af2:	f3bf 8f5b 	dmb	ish
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	f3bf 8f5b 	dmb	ish
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <DIG_process+0xa2>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8002b06:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <DIG_process+0x15c>)
 8002b08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <DIG_process+0x154>)
 8002b10:	f3bf 8f5b 	dmb	ish
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	f3bf 8f5b 	dmb	ish
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	dd30      	ble.n	8002b86 <DIG_process+0x10e>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <DIG_process+0x158>)
 8002b26:	f3bf 8f5b 	dmb	ish
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	f3bf 8f5b 	dmb	ish
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	dd15      	ble.n	8002b66 <DIG_process+0xee>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 8002b3a:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <DIG_process+0x15c>)
 8002b3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00e      	beq.n	8002b66 <DIG_process+0xee>
      {
         RXPDO_update();
 8002b48:	f7ff ff72 	bl	8002a30 <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <DIG_process+0x15c>)
 8002b4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <DIG_process+0x154>)
 8002b56:	f3bf 8f5b 	dmb	ish
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f3bf 8f5b 	dmb	ish
         /* Set outputs */
         cb_set_outputs();
 8002b60:	f004 fc46 	bl	80073f0 <cb_set_outputs>
 8002b64:	e00f      	b.n	8002b86 <DIG_process+0x10e>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <DIG_process+0x15c>)
 8002b68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <DIG_process+0x10e>
      {
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8002b74:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <DIG_process+0x15c>)
 8002b76:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4916      	ldr	r1, [pc, #88]	; (8002bd8 <DIG_process+0x160>)
 8002b7e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002b82:	f004 f88b 	bl	8006c9c <ESC_read>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	dd06      	ble.n	8002b9e <DIG_process+0x126>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <DIG_process+0x15c>)
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <DIG_process+0x126>
      {
         (ESCvar.application_hook)();
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <DIG_process+0x15c>)
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	dd0c      	ble.n	8002bc2 <DIG_process+0x14a>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <DIG_process+0x158>)
 8002baa:	f3bf 8f5b 	dmb	ish
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	f3bf 8f5b 	dmb	ish
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <DIG_process+0x14a>
      {
         /* Update inputs */
         cb_get_inputs();
 8002bba:	f004 fbb9 	bl	8007330 <cb_get_inputs>
         TXPDO_update();
 8002bbe:	f7ff ff13 	bl	80029e8 <TXPDO_update>
      }
   }
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20001b94 	.word	0x20001b94
 8002bd0:	20001591 	.word	0x20001591
 8002bd4:	200014a8 	.word	0x200014a8
 8002bd8:	20001b98 	.word	0x20001b98

08002bdc <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 8002be0:	2204      	movs	r2, #4
 8002be2:	4910      	ldr	r1, [pc, #64]	; (8002c24 <ecat_slv_poll+0x48>)
 8002be4:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8002be8:	f004 f858 	bl	8006c9c <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <ecat_slv_poll+0x4c>)
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf2:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <ecat_slv_poll+0x4c>)
 8002bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

   /* Check the state machine */
   ESC_state();
 8002bf8:	f001 f86e 	bl	8003cd8 <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 8002bfc:	f000 ff5e 	bl	8003abc <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 8002c00:	f000 fc88 	bl	8003514 <ESC_mbxprocess>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <ecat_slv_poll+0x36>
   {
      ESC_coeprocess();
 8002c0a:	f003 fad3 	bl	80061b4 <ESC_coeprocess>
      ESC_foeprocess();
#endif
#if USE_EOE
      ESC_eoeprocess();
#endif
      ESC_xoeprocess();
 8002c0e:	f000 fdb9 	bl	8003784 <ESC_xoeprocess>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <ecat_slv_poll+0x4c>)
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <ecat_slv_poll+0x44>
   {
      (ESCvar.esc_hw_eep_handler)();
 8002c1a:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <ecat_slv_poll+0x4c>)
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	4798      	blx	r3
   }
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20001588 	.word	0x20001588
 8002c28:	200014a8 	.word	0x200014a8

08002c2c <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
   ecat_slv_poll();
 8002c30:	f7ff ffd4 	bl	8002bdc <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 8002c34:	200f      	movs	r0, #15
 8002c36:	f7ff ff1f 	bl	8002a78 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <ecat_slv_init+0x68>)
 8002c4e:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f001 faab 	bl	80041ac <ESC_config>
   /* Call HW init */
   ESC_init (config);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f004 f8e8 	bl	8006e2c <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8002c5c:	e00b      	b.n	8002c76 <ecat_slv_init+0x36>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 8002c5e:	2202      	movs	r2, #2
 8002c60:	4912      	ldr	r1, [pc, #72]	; (8002cac <ecat_slv_init+0x6c>)
 8002c62:	f44f 7088 	mov.w	r0, #272	; 0x110
 8002c66:	f004 f819 	bl	8006c9c <ESC_read>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <ecat_slv_init+0x70>)
 8002c6c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <ecat_slv_init+0x70>)
 8002c72:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <ecat_slv_init+0x70>)
 8002c78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ec      	beq.n	8002c5e <ecat_slv_init+0x1e>
   /* Init EoE */
   EOE_init ();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 8002c84:	2001      	movs	r0, #1
 8002c86:	f000 f82f 	bl	8002ce8 <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f000 f812 	bl	8002cb4 <ESC_ALerror>
   ESC_stopmbx ();
 8002c90:	f000 fa88 	bl	80031a4 <ESC_stopmbx>
   ESC_stopinput ();
 8002c94:	f000 feb4 	bl	8003a00 <ESC_stopinput>
   ESC_stopoutput ();
 8002c98:	f000 fef8 	bl	8003a8c <ESC_stopoutput>
   /* Init Object Dictionary default values */
   COE_initDefaultValues ();
 8002c9c:	f003 fe78 	bl	8006990 <COE_initDefaultValues>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20001b94 	.word	0x20001b94
 8002cac:	2000152e 	.word	0x2000152e
 8002cb0:	200014a8 	.word	0x200014a8

08002cb4 <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <ESC_ALerror+0x30>)
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   dummy = htoes (errornumber);
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 8002cca:	f107 030e 	add.w	r3, r7, #14
 8002cce:	2202      	movs	r2, #2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 709a 	mov.w	r0, #308	; 0x134
 8002cd6:	f004 f845 	bl	8006d64 <ESC_write>
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200014a8 	.word	0x200014a8

08002ce8 <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <ESC_ALstatus+0x34>)
 8002cf8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
   dummy = htoes ((uint16_t) status);
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 8002d02:	f107 030e 	add.w	r3, r7, #14
 8002d06:	2202      	movs	r2, #2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002d0e:	f004 f829 	bl	8006d64 <ESC_write>
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200014a8 	.word	0x200014a8

08002d20 <ESC_ALstatusgotoerror>:
 * reflecting actual state and error indication if present
 * @param[in] errornumber   = Write an by EtherCAT specified Error number
 * register 0x134 AL Status Code
 */
void ESC_ALstatusgotoerror (uint8_t status, uint16_t errornumber)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	460a      	mov	r2, r1
 8002d2a:	71fb      	strb	r3, [r7, #7]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	80bb      	strh	r3, [r7, #4]
   uint8_t an, as;

   if(status & ESCop)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d145      	bne.n	8002dc6 <ESC_ALstatusgotoerror+0xa6>
   {
      /* Erroneous input, ignore */
      return;
   }
   /* Mask error ack of current state */
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <ESC_ALstatusgotoerror+0xb0>)
 8002d3c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	73bb      	strb	r3, [r7, #14]
   an = as;
 8002d4a:	7bbb      	ldrb	r3, [r7, #14]
 8002d4c:	73fb      	strb	r3, [r7, #15]
   /* Set the state transition, new state in high bits and old in bits  */
   as = (uint8_t)(((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f));
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	b25a      	sxtb	r2, r3
 8002d54:	7bbb      	ldrb	r3, [r7, #14]
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	73bb      	strb	r3, [r7, #14]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <ESC_ALstatusgotoerror+0xb0>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <ESC_ALstatusgotoerror+0x5e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <ESC_ALstatusgotoerror+0xb0>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f107 010f 	add.w	r1, r7, #15
 8002d76:	f107 020e 	add.w	r2, r7, #14
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4798      	blx	r3
   }
   /* Stop outputs if active */
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <ESC_ALstatusgotoerror+0xb4>)
 8002d80:	f3bf 8f5b 	dmb	ish
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f3bf 8f5b 	dmb	ish
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	dd01      	ble.n	8002d98 <ESC_ALstatusgotoerror+0x78>
   {
      ESC_stopoutput();
 8002d94:	f000 fe7a 	bl	8003a8c <ESC_stopoutput>
   }
   ESC_ALerror(errornumber);
 8002d98:	88bb      	ldrh	r3, [r7, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff8a 	bl	8002cb4 <ESC_ALerror>
   ESC_ALstatus(status);
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ffa0 	bl	8002ce8 <ESC_ALstatus>
   an = status;
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	73fb      	strb	r3, [r7, #15]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <ESC_ALstatusgotoerror+0xb0>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <ESC_ALstatusgotoerror+0xa8>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <ESC_ALstatusgotoerror+0xb0>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f107 010f 	add.w	r1, r7, #15
 8002dbc:	f107 020e 	add.w	r2, r7, #14
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4798      	blx	r3
 8002dc4:	e000      	b.n	8002dc8 <ESC_ALstatusgotoerror+0xa8>
      return;
 8002dc6:	bf00      	nop
   }
}
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200014a8 	.word	0x200014a8
 8002dd4:	20001591 	.word	0x20001591

08002dd8 <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
   uint8_t dummy;
   ESC_read ((uint16_t)(ESCREG_SM0ACTIVATE + (n << 3)), &dummy, 1);
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f603 0306 	addw	r3, r3, #2054	; 0x806
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f107 010f 	add.w	r1, r7, #15
 8002df4:	2201      	movs	r2, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 ff50 	bl	8006c9c <ESC_read>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	3317      	adds	r3, #23
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <ESC_SMstatus+0x3c>)
 8002e16:	4413      	add	r3, r2
 8002e18:	3304      	adds	r3, #4
 8002e1a:	60fb      	str	r3, [r7, #12]
   ESC_read ((uint16_t)(ESCREG_SM0STATUS + (n << 3)), &(sm->Status), 1);
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f603 0305 	addw	r3, r3, #2053	; 0x805
 8002e28:	b298      	uxth	r0, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3305      	adds	r3, #5
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4619      	mov	r1, r3
 8002e32:	f003 ff33 	bl	8006c9c <ESC_read>
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200014a8 	.word	0x200014a8

08002e44 <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	3317      	adds	r3, #23
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <ESC_SMwritepdi+0x3c>)
 8002e56:	4413      	add	r3, r2
 8002e58:	3304      	adds	r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
   ESC_write ((uint16_t)(ESCREG_SM0PDI + (n << 3)), &(sm->ActPDI), 1);
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8002e68:	b298      	uxth	r0, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3307      	adds	r3, #7
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4619      	mov	r1, r3
 8002e72:	f003 ff77 	bl	8006d64 <ESC_write>
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200014a8 	.word	0x200014a8

08002e84 <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	3317      	adds	r3, #23
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <ESC_SMenable+0x38>)
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= (uint8_t)~ESCREG_SMENABLE_BIT;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	79db      	ldrb	r3, [r3, #7]
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ffc9 	bl	8002e44 <ESC_SMwritepdi>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200014a8 	.word	0x200014a8

08002ec0 <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	3317      	adds	r3, #23
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <ESC_SMdisable+0x38>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	79db      	ldrb	r3, [r3, #7]
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ffab 	bl	8002e44 <ESC_SMwritepdi>
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200014a8 	.word	0x200014a8

08002efc <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 8002f00:	2202      	movs	r2, #2
 8002f02:	4906      	ldr	r1, [pc, #24]	; (8002f1c <ESC_address+0x20>)
 8002f04:	2010      	movs	r0, #16
 8002f06:	f003 fec9 	bl	8006c9c <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <ESC_address+0x24>)
 8002f0c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <ESC_address+0x24>)
 8002f12:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20001530 	.word	0x20001530
 8002f20:	200014a8 	.word	0x200014a8

08002f24 <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 8002f2a:	1dfb      	adds	r3, r7, #7
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f640 1081 	movw	r0, #2433	; 0x981
 8002f34:	f003 feb2 	bl	8006c9c <ESC_read>
   return activation;
 8002f38:	79fb      	ldrb	r3, [r7, #7]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	80fb      	strh	r3, [r7, #6]

   uint8_t sync_act = ESC_SYNCactivation();
 8002f4e:	f7ff ffe9 	bl	8002f24 <ESC_SYNCactivation>
 8002f52:	4603      	mov	r3, r0
 8002f54:	717b      	strb	r3, [r7, #5]
   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 8002f56:	797b      	ldrb	r3, [r7, #5]
 8002f58:	f003 0309 	and.w	r3, r3, #9
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dd0b      	ble.n	8002f78 <ESC_checkDC+0x34>
   {
      /* Trigger a by the application given DC check handler, return error if
       *  non is given
       */
      ret = ALERR_DCINVALIDSYNCCFG;
 8002f60:	2330      	movs	r3, #48	; 0x30
 8002f62:	80fb      	strh	r3, [r7, #6]
      if(ESCvar.esc_check_dc_handler != NULL)
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <ESC_checkDC+0x50>)
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <ESC_checkDC+0x44>
      {
         ret = (ESCvar.esc_check_dc_handler)();
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <ESC_checkDC+0x50>)
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f70:	4798      	blx	r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
 8002f76:	e007      	b.n	8002f88 <ESC_checkDC+0x44>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <ESC_checkDC+0x50>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      ESCvar.synccounter = 0;
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <ESC_checkDC+0x50>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
   }

   return ret;
 8002f88:	88fb      	ldrh	r3, [r7, #6]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	200014a8 	.word	0x200014a8

08002f98 <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	4934      	ldr	r1, [pc, #208]	; (8003078 <ESC_checkmbx+0xe0>)
 8002fa6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002faa:	f003 fe77 	bl	8006c9c <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 8002fae:	2208      	movs	r2, #8
 8002fb0:	4932      	ldr	r1, [pc, #200]	; (800307c <ESC_checkmbx+0xe4>)
 8002fb2:	f640 0008 	movw	r0, #2056	; 0x808
 8002fb6:	f003 fe71 	bl	8006c9c <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <ESC_checkmbx+0xe0>)
 8002fbc:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <ESC_checkmbx+0xe8>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d116      	bne.n	8002ffc <ESC_checkmbx+0x64>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	885b      	ldrh	r3, [r3, #2]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <ESC_checkmbx+0xe8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	885b      	ldrh	r3, [r3, #2]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d10e      	bne.n	8002ffc <ESC_checkmbx+0x64>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	791a      	ldrb	r2, [r3, #4]
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <ESC_checkmbx+0xe8>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	799b      	ldrb	r3, [r3, #6]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d107      	bne.n	8002ffc <ESC_checkmbx+0x64>
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <ESC_checkmbx+0xe8>)
 8002fee:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <ESC_checkmbx+0x7c>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <ESC_checkmbx+0xe8>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 8003004:	2000      	movs	r0, #0
 8003006:	f7ff ff5b 	bl	8002ec0 <ESC_SMdisable>
      ESC_SMdisable (1);
 800300a:	2001      	movs	r0, #1
 800300c:	f7ff ff58 	bl	8002ec0 <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 8003010:	2311      	movs	r3, #17
 8003012:	e02d      	b.n	8003070 <ESC_checkmbx+0xd8>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <ESC_checkmbx+0xe4>)
 8003016:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <ESC_checkmbx+0xe8>)
 8003020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d116      	bne.n	8003056 <ESC_checkmbx+0xbe>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	885b      	ldrh	r3, [r3, #2]
 800302c:	b29a      	uxth	r2, r3
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <ESC_checkmbx+0xe8>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003032:	885b      	ldrh	r3, [r3, #2]
 8003034:	429a      	cmp	r2, r3
 8003036:	d10e      	bne.n	8003056 <ESC_checkmbx+0xbe>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	791a      	ldrb	r2, [r3, #4]
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <ESC_checkmbx+0xe8>)
 800303e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003040:	799b      	ldrb	r3, [r3, #6]
 8003042:	429a      	cmp	r2, r3
 8003044:	d107      	bne.n	8003056 <ESC_checkmbx+0xbe>
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <ESC_checkmbx+0xe8>)
 8003048:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <ESC_checkmbx+0xd6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <ESC_checkmbx+0xe8>)
 8003058:	2202      	movs	r2, #2
 800305a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 800305e:	2000      	movs	r0, #0
 8003060:	f7ff ff2e 	bl	8002ec0 <ESC_SMdisable>
      ESC_SMdisable (1);
 8003064:	2001      	movs	r0, #1
 8003066:	f7ff ff2b 	bl	8002ec0 <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 800306a:	2311      	movs	r3, #17
 800306c:	e000      	b.n	8003070 <ESC_checkmbx+0xd8>
   }
   return state;
 800306e:	79fb      	ldrb	r3, [r7, #7]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20001564 	.word	0x20001564
 800307c:	2000156c 	.word	0x2000156c
 8003080:	200014a8 	.word	0x200014a8

08003084 <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZE;
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <ESC_startmbx+0x84>)
 8003090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003094:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mb[0];
 8003096:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <ESC_startmbx+0x84>)
 8003098:	4a1c      	ldr	r2, [pc, #112]	; (800310c <ESC_startmbx+0x88>)
 800309a:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mb[1];
 800309c:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <ESC_startmbx+0x84>)
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <ESC_startmbx+0x8c>)
 80030a0:	675a      	str	r2, [r3, #116]	; 0x74


   ESC_SMenable (0);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7ff feee 	bl	8002e84 <ESC_SMenable>
   ESC_SMenable (1);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7ff feeb 	bl	8002e84 <ESC_SMenable>
   ESC_SMstatus (0);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7ff fea8 	bl	8002e04 <ESC_SMstatus>
   ESC_SMstatus (1);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f7ff fea5 	bl	8002e04 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff6b 	bl	8002f98 <ESC_checkmbx>
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <ESC_startmbx+0x5c>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 80030d0:	2016      	movs	r0, #22
 80030d2:	f7ff fdef 	bl	8002cb4 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <ESC_startmbx+0x84>)
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80030de:	e00d      	b.n	80030fc <ESC_startmbx+0x78>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <ESC_startmbx+0x84>)
 80030e2:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80030e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <ESC_startmbx+0x84>)
 80030f0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <ESC_startmbx+0x84>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   }
   return state;
 80030fc:	79fb      	ldrb	r3, [r7, #7]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200014a8 	.word	0x200014a8
 800310c:	200014ac 	.word	0x200014ac
 8003110:	200014b4 	.word	0x200014b4

08003114 <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZEBOOT;
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <ESC_startmbxboot+0x84>)
 8003120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003124:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <ESC_startmbxboot+0x84>)
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <ESC_startmbxboot+0x88>)
 800312a:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <ESC_startmbxboot+0x84>)
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <ESC_startmbxboot+0x8c>)
 8003130:	675a      	str	r2, [r3, #116]	; 0x74

   ESC_SMenable (0);
 8003132:	2000      	movs	r0, #0
 8003134:	f7ff fea6 	bl	8002e84 <ESC_SMenable>
   ESC_SMenable (1);
 8003138:	2001      	movs	r0, #1
 800313a:	f7ff fea3 	bl	8002e84 <ESC_SMenable>
   ESC_SMstatus (0);
 800313e:	2000      	movs	r0, #0
 8003140:	f7ff fe60 	bl	8002e04 <ESC_SMstatus>
   ESC_SMstatus (1);
 8003144:	2001      	movs	r0, #1
 8003146:	f7ff fe5d 	bl	8002e04 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff23 	bl	8002f98 <ESC_checkmbx>
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <ESC_startmbxboot+0x5c>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 8003160:	2015      	movs	r0, #21
 8003162:	f7ff fda7 	bl	8002cb4 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <ESC_startmbxboot+0x84>)
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800316e:	e00d      	b.n	800318c <ESC_startmbxboot+0x78>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <ESC_startmbxboot+0x84>)
 8003172:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8003176:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <ESC_startmbxboot+0x84>)
 8003180:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <ESC_startmbxboot+0x84>)
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   }
   return state;
 800318c:	79fb      	ldrb	r3, [r7, #7]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200014a8 	.word	0x200014a8
 800319c:	200014bc 	.word	0x200014bc
 80031a0:	200014c4 	.word	0x200014c4

080031a4 <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <ESC_stopmbx+0xa4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   ESC_SMdisable (0);
 80031b2:	2000      	movs	r0, #0
 80031b4:	f7ff fe84 	bl	8002ec0 <ESC_SMdisable>
   ESC_SMdisable (1);
 80031b8:	2001      	movs	r0, #1
 80031ba:	f7ff fe81 	bl	8002ec0 <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 80031be:	2300      	movs	r3, #0
 80031c0:	71fb      	strb	r3, [r7, #7]
 80031c2:	e006      	b.n	80031d2 <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	4a21      	ldr	r2, [pc, #132]	; (800324c <ESC_stopmbx+0xa8>)
 80031c8:	2100      	movs	r1, #0
 80031ca:	54d1      	strb	r1, [r2, r3]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	3301      	adds	r3, #1
 80031d0:	71fb      	strb	r3, [r7, #7]
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d9f5      	bls.n	80031c4 <ESC_stopmbx+0x20>
   }
   ESCvar.mbxoutpost = 0;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <ESC_stopmbx+0xa4>)
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   ESCvar.mbxbackup = 0;
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <ESC_stopmbx+0xa4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   ESCvar.xoe = 0;
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <ESC_stopmbx+0xa4>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxfree = 1;
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <ESC_stopmbx+0xa4>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
   ESCvar.toggle = 0;
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <ESC_stopmbx+0xa4>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   ESCvar.mbxincnt = 0;
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <ESC_stopmbx+0xa4>)
 8003202:	2200      	movs	r2, #0
 8003204:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
   ESCvar.segmented = 0;
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <ESC_stopmbx+0xa4>)
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
   ESCvar.frags = 0;
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <ESC_stopmbx+0xa4>)
 8003212:	2200      	movs	r2, #0
 8003214:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   ESCvar.fragsleft = 0;
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <ESC_stopmbx+0xa4>)
 800321a:	2200      	movs	r2, #0
 800321c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   ESCvar.txcue = 0;
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <ESC_stopmbx+0xa4>)
 8003222:	2200      	movs	r2, #0
 8003224:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   ESCvar.index = 0;
 8003228:	4b07      	ldr	r3, [pc, #28]	; (8003248 <ESC_stopmbx+0xa4>)
 800322a:	2200      	movs	r2, #0
 800322c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ESCvar.subindex = 0;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <ESC_stopmbx+0xa4>)
 8003232:	2200      	movs	r2, #0
 8003234:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
   ESCvar.flags = 0;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <ESC_stopmbx+0xa4>)
 800323a:	2200      	movs	r2, #0
 800323c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200014a8 	.word	0x200014a8
 800324c:	2000142c 	.word	0x2000142c

08003250 <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <ESC_readmbx+0x80>)
 8003258:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <ESC_readmbx+0x84>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	2206      	movs	r2, #6
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4618      	mov	r0, r3
 8003266:	f003 fd19 	bl	8006c9c <ESC_read>
   length = etohs (MB->header.length);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	461a      	mov	r2, r3
 8003276:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <ESC_readmbx+0x84>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	885b      	ldrh	r3, [r3, #2]
 800327c:	3b06      	subs	r3, #6
 800327e:	429a      	cmp	r2, r3
 8003280:	d905      	bls.n	800328e <ESC_readmbx+0x3e>
   {
      length = (uint16_t)(ESC_MBX0_sml - ESC_MBXHSIZE);
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <ESC_readmbx+0x84>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	885b      	ldrh	r3, [r3, #2]
 8003288:	3b06      	subs	r3, #6
 800328a:	b29b      	uxth	r3, r3
 800328c:	807b      	strh	r3, [r7, #2]
   }
   ESC_read ((uint16_t)(ESC_MBX0_sma + ESC_MBXHSIZE), MB->b, length);
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <ESC_readmbx+0x84>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	3306      	adds	r3, #6
 8003296:	b298      	uxth	r0, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3306      	adds	r3, #6
 800329c:	887a      	ldrh	r2, [r7, #2]
 800329e:	4619      	mov	r1, r3
 80032a0:	f003 fcfc 	bl	8006c9c <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	3306      	adds	r3, #6
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <ESC_readmbx+0x84>)
 80032aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80032ac:	8852      	ldrh	r2, [r2, #2]
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d207      	bcs.n	80032c2 <ESC_readmbx+0x72>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <ESC_readmbx+0x84>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	889b      	ldrh	r3, [r3, #4]
 80032b8:	1cb9      	adds	r1, r7, #2
 80032ba:	2201      	movs	r2, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 fced 	bl	8006c9c <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <ESC_readmbx+0x88>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000e2c 	.word	0x20000e2c
 80032d4:	200014a8 	.word	0x200014a8
 80032d8:	2000142c 	.word	0x2000142c

080032dc <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <ESC_writembx+0x88>)
 80032ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <ESC_writembx+0x8c>)
 80032f2:	4413      	add	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	4313      	orrs	r3, r2
 8003304:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 8003306:	8afa      	ldrh	r2, [r7, #22]
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <ESC_writembx+0x88>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	885b      	ldrh	r3, [r3, #2]
 800330e:	3b06      	subs	r3, #6
 8003310:	429a      	cmp	r2, r3
 8003312:	d904      	bls.n	800331e <ESC_writembx+0x42>
   {
      length = (uint16_t)(ESC_MBX1_sml - ESC_MBXHSIZE);
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <ESC_writembx+0x88>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	885b      	ldrh	r3, [r3, #2]
 800331a:	3b06      	subs	r3, #6
 800331c:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, (uint16_t)(ESC_MBXHSIZE + length));
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <ESC_writembx+0x88>)
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	8818      	ldrh	r0, [r3, #0]
 8003324:	8afb      	ldrh	r3, [r7, #22]
 8003326:	3306      	adds	r3, #6
 8003328:	b29b      	uxth	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	6939      	ldr	r1, [r7, #16]
 800332e:	f003 fd19 	bl	8006d64 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 8003332:	8afb      	ldrh	r3, [r7, #22]
 8003334:	3306      	adds	r3, #6
 8003336:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <ESC_writembx+0x88>)
 8003338:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800333a:	8852      	ldrh	r2, [r2, #2]
 800333c:	4293      	cmp	r3, r2
 800333e:	d208      	bcs.n	8003352 <ESC_writembx+0x76>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <ESC_writembx+0x88>)
 8003342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003344:	889b      	ldrh	r3, [r3, #4]
 8003346:	f107 010f 	add.w	r1, r7, #15
 800334a:	2201      	movs	r2, #1
 800334c:	4618      	mov	r0, r3
 800334e:	f003 fd09 	bl	8006d64 <ESC_write>
   }

   ESCvar.mbxfree = 0;
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <ESC_writembx+0x88>)
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200014a8 	.word	0x200014a8
 8003368:	20000e2c 	.word	0x20000e2c

0800336c <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <ESC_ackmbxread+0x2c>)
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	1df9      	adds	r1, r7, #7
 800337e:	2201      	movs	r2, #1
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fcef 	bl	8006d64 <ESC_write>
   ESCvar.mbxfree = 1;
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <ESC_ackmbxread+0x2c>)
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200014a8 	.word	0x200014a8

0800339c <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 80033a2:	2302      	movs	r3, #2
 80033a4:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 80033a6:	e002      	b.n	80033ae <ESC_claimbuffer+0x12>
   {
      n--;
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <ESC_claimbuffer+0x22>
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <ESC_claimbuffer+0xc8>)
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f4      	bne.n	80033a8 <ESC_claimbuffer+0xc>
   }
   if (n)
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d047      	beq.n	8003454 <ESC_claimbuffer+0xb8>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	4a27      	ldr	r2, [pc, #156]	; (8003464 <ESC_claimbuffer+0xc8>)
 80033c8:	2102      	movs	r1, #2
 80033ca:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	4a26      	ldr	r2, [pc, #152]	; (8003468 <ESC_claimbuffer+0xcc>)
 80033d0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	4a25      	ldr	r2, [pc, #148]	; (800346c <ESC_claimbuffer+0xd0>)
 80033d8:	4413      	add	r3, r2
 80033da:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <ESC_claimbuffer+0xcc>)
 80033de:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80033e2:	3301      	adds	r3, #1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <ESC_claimbuffer+0xcc>)
 80033e8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <ESC_claimbuffer+0xcc>)
 80033ee:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <ESC_claimbuffer+0xcc>)
 80033fa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (ESCvar.mbxcnt == 0)
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <ESC_claimbuffer+0xcc>)
 8003400:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <ESC_claimbuffer+0x74>
      {
         ESCvar.mbxcnt = 1;
 8003408:	4b17      	ldr	r3, [pc, #92]	; (8003468 <ESC_claimbuffer+0xcc>)
 800340a:	2201      	movs	r2, #1
 800340c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      }
      MBh->address = htoes (0x0000);      // destination is master
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	709a      	strb	r2, [r3, #2]
 8003416:	2200      	movs	r2, #0
 8003418:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	7913      	ldrb	r3, [r2, #4]
 800341e:	f36f 0305 	bfc	r3, #0, #6
 8003422:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	7913      	ldrb	r3, [r2, #4]
 8003428:	f36f 1387 	bfc	r3, #6, #2
 800342c:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt & 0xFU;
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <ESC_claimbuffer+0xcc>)
 8003430:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	b2d9      	uxtb	r1, r3
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	7953      	ldrb	r3, [r2, #5]
 800343e:	f361 1307 	bfi	r3, r1, #4, #4
 8003442:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <ESC_claimbuffer+0xcc>)
 8003446:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800344a:	3301      	adds	r3, #1
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <ESC_claimbuffer+0xcc>)
 8003450:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   }
   return n;
 8003454:	79fb      	ldrb	r3, [r7, #7]
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2000142c 	.word	0x2000142c
 8003468:	200014a8 	.word	0x200014a8
 800346c:	20000e2c 	.word	0x20000e2c

08003470 <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 8003476:	2302      	movs	r3, #2
 8003478:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800347a:	e002      	b.n	8003482 <ESC_outreqbuffer+0x12>
   {
      n--;
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	3b01      	subs	r3, #1
 8003480:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <ESC_outreqbuffer+0x22>
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <ESC_outreqbuffer+0x30>)
 800348c:	5cd3      	ldrb	r3, [r2, r3]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d1f4      	bne.n	800347c <ESC_outreqbuffer+0xc>
   }
   return n;
 8003492:	79fb      	ldrb	r3, [r7, #7]
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	2000142c 	.word	0x2000142c

080034a4 <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 80034ae:	f7ff ff75 	bl	800339c <ESC_claimbuffer>
 80034b2:	4603      	mov	r3, r0
 80034b4:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d021      	beq.n	8003500 <MBX_error+0x5c>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <MBX_error+0x64>)
 80034c0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	4a11      	ldr	r2, [pc, #68]	; (800350c <MBX_error+0x68>)
 80034c8:	4413      	add	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f042 0204 	orr.w	r2, r2, #4
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	7953      	ldrb	r3, [r2, #5]
 80034de:	f36f 0303 	bfc	r3, #0, #4
 80034e2:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	719a      	strb	r2, [r3, #6]
 80034ee:	2200      	movs	r2, #0
 80034f0:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <MBX_error+0x6c>)
 80034fc:	2103      	movs	r1, #3
 80034fe:	54d1      	strb	r1, [r2, r3]
   }
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	200014a8 	.word	0x200014a8
 800350c:	20000e2c 	.word	0x20000e2c
 8003510:	2000142c 	.word	0x2000142c

08003514 <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 800351e:	4b96      	ldr	r3, [pc, #600]	; (8003778 <ESC_mbxprocess+0x264>)
 8003520:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 8003522:	4b96      	ldr	r3, [pc, #600]	; (800377c <ESC_mbxprocess+0x268>)
 8003524:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 800352c:	2300      	movs	r3, #0
 800352e:	e11f      	b.n	8003770 <ESC_mbxprocess+0x25c>
   }

   /* SM0/1 access */
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 8003530:	4b92      	ldr	r3, [pc, #584]	; (800377c <ESC_mbxprocess+0x268>)
 8003532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <ESC_mbxprocess+0x36>
   {
      ESC_SMstatus (0);
 800353e:	2000      	movs	r0, #0
 8003540:	f7ff fc60 	bl	8002e04 <ESC_SMstatus>
      ESC_SMstatus (1);
 8003544:	2001      	movs	r0, #1
 8003546:	f7ff fc5d 	bl	8002e04 <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 800354a:	4b8c      	ldr	r3, [pc, #560]	; (800377c <ESC_mbxprocess+0x268>)
 800354c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d03c      	beq.n	80035ce <ESC_mbxprocess+0xba>
 8003554:	4b89      	ldr	r3, [pc, #548]	; (800377c <ESC_mbxprocess+0x268>)
 8003556:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800355a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355e:	2b00      	cmp	r3, #0
 8003560:	d035      	beq.n	80035ce <ESC_mbxprocess+0xba>
   {
      ESC_ackmbxread ();
 8003562:	f7ff ff03 	bl	800336c <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 8003566:	4b85      	ldr	r3, [pc, #532]	; (800377c <ESC_mbxprocess+0x268>)
 8003568:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <ESC_mbxprocess+0x6a>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 8003570:	4b82      	ldr	r3, [pc, #520]	; (800377c <ESC_mbxprocess+0x268>)
 8003572:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003576:	461a      	mov	r2, r3
 8003578:	4b81      	ldr	r3, [pc, #516]	; (8003780 <ESC_mbxprocess+0x26c>)
 800357a:	2100      	movs	r1, #0
 800357c:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 800357e:	4b7f      	ldr	r3, [pc, #508]	; (800377c <ESC_mbxprocess+0x268>)
 8003580:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003584:	461a      	mov	r2, r3
 8003586:	4b7e      	ldr	r3, [pc, #504]	; (8003780 <ESC_mbxprocess+0x26c>)
 8003588:	5c9b      	ldrb	r3, [r3, r2]
 800358a:	2b06      	cmp	r3, #6
 800358c:	d105      	bne.n	800359a <ESC_mbxprocess+0x86>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 800358e:	4b7b      	ldr	r3, [pc, #492]	; (800377c <ESC_mbxprocess+0x268>)
 8003590:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fea1 	bl	80032dc <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800359a:	4b78      	ldr	r3, [pc, #480]	; (800377c <ESC_mbxprocess+0x268>)
 800359c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b77      	ldr	r3, [pc, #476]	; (8003780 <ESC_mbxprocess+0x26c>)
 80035a4:	2105      	movs	r1, #5
 80035a6:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 80035a8:	4b74      	ldr	r3, [pc, #464]	; (800377c <ESC_mbxprocess+0x268>)
 80035aa:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80035ae:	4b73      	ldr	r3, [pc, #460]	; (800377c <ESC_mbxprocess+0x268>)
 80035b0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      ESCvar.mbxoutpost = 0;
 80035b4:	4b71      	ldr	r3, [pc, #452]	; (800377c <ESC_mbxprocess+0x268>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 80035bc:	4b6f      	ldr	r3, [pc, #444]	; (800377c <ESC_mbxprocess+0x268>)
 80035be:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <ESC_mbxprocess+0xb6>
      {
         return 1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0d2      	b.n	8003770 <ESC_mbxprocess+0x25c>
      }
      return 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e0d0      	b.n	8003770 <ESC_mbxprocess+0x25c>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 80035ce:	4b6b      	ldr	r3, [pc, #428]	; (800377c <ESC_mbxprocess+0x268>)
 80035d0:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80035d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	4b67      	ldr	r3, [pc, #412]	; (800377c <ESC_mbxprocess+0x268>)
 80035de:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d044      	beq.n	8003670 <ESC_mbxprocess+0x15c>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 80035e6:	4b65      	ldr	r3, [pc, #404]	; (800377c <ESC_mbxprocess+0x268>)
 80035e8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <ESC_mbxprocess+0xe6>
 80035f0:	4b62      	ldr	r3, [pc, #392]	; (800377c <ESC_mbxprocess+0x268>)
 80035f2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d038      	beq.n	800366c <ESC_mbxprocess+0x158>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 80035fa:	4b60      	ldr	r3, [pc, #384]	; (800377c <ESC_mbxprocess+0x268>)
 80035fc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <ESC_mbxprocess+0xfe>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8003604:	4b5d      	ldr	r3, [pc, #372]	; (800377c <ESC_mbxprocess+0x268>)
 8003606:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fe66 	bl	80032dc <ESC_writembx>
 8003610:	e012      	b.n	8003638 <ESC_mbxprocess+0x124>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 8003612:	2001      	movs	r0, #1
 8003614:	f7ff fc54 	bl	8002ec0 <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <ESC_mbxprocess+0x268>)
 800361a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800361e:	461a      	mov	r2, r3
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <ESC_mbxprocess+0x26c>)
 8003622:	2106      	movs	r1, #6
 8003624:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 8003626:	2001      	movs	r0, #1
 8003628:	f7ff fc2c 	bl	8002e84 <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <ESC_mbxprocess+0x268>)
 800362e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fe52 	bl	80032dc <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <ESC_mbxprocess+0x268>)
 800363a:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800363e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	4b4d      	ldr	r3, [pc, #308]	; (800377c <ESC_mbxprocess+0x268>)
 8003648:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
         ESCvar.SM[1].PDIrep = ESCvar.toggle & 0x1U;
 800364c:	4b4b      	ldr	r3, [pc, #300]	; (800377c <ESC_mbxprocess+0x268>)
 800364e:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	b2d9      	uxtb	r1, r3
 8003658:	4a48      	ldr	r2, [pc, #288]	; (800377c <ESC_mbxprocess+0x268>)
 800365a:	f892 30cb 	ldrb.w	r3, [r2, #203]	; 0xcb
 800365e:	f361 0341 	bfi	r3, r1, #1, #1
 8003662:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
         ESC_SMwritepdi (1);
 8003666:	2001      	movs	r0, #1
 8003668:	f7ff fbec 	bl	8002e44 <ESC_SMwritepdi>
      }
      return 0;
 800366c:	2300      	movs	r3, #0
 800366e:	e07f      	b.n	8003770 <ESC_mbxprocess+0x25c>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 8003670:	4b42      	ldr	r3, [pc, #264]	; (800377c <ESC_mbxprocess+0x268>)
 8003672:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02f      	beq.n	80036da <ESC_mbxprocess+0x1c6>
 800367a:	4b40      	ldr	r3, [pc, #256]	; (800377c <ESC_mbxprocess+0x268>)
 800367c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <ESC_mbxprocess+0x180>
 8003684:	4b3d      	ldr	r3, [pc, #244]	; (800377c <ESC_mbxprocess+0x268>)
 8003686:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d122      	bne.n	80036da <ESC_mbxprocess+0x1c6>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 8003694:	f7ff feec 	bl	8003470 <ESC_outreqbuffer>
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01b      	beq.n	80036da <ESC_mbxprocess+0x1c6>
      {
         ESC_writembx (mbxhandle);
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fe19 	bl	80032dc <ESC_writembx>
         /* Refresh SM status */
         ESC_SMstatus (1);
 80036aa:	2001      	movs	r0, #1
 80036ac:	f7ff fbaa 	bl	8002e04 <ESC_SMstatus>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	4a33      	ldr	r2, [pc, #204]	; (8003780 <ESC_mbxprocess+0x26c>)
 80036b4:	2104      	movs	r1, #4
 80036b6:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 80036b8:	4a30      	ldr	r2, [pc, #192]	; (800377c <ESC_mbxprocess+0x268>)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
         if (ESCvar.txcue)
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <ESC_mbxprocess+0x268>)
 80036c2:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <ESC_mbxprocess+0x1c6>
         {
            ESCvar.txcue--;
 80036ca:	4b2c      	ldr	r3, [pc, #176]	; (800377c <ESC_mbxprocess+0x268>)
 80036cc:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b29      	ldr	r3, [pc, #164]	; (800377c <ESC_mbxprocess+0x268>)
 80036d6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 80036da:	4b28      	ldr	r3, [pc, #160]	; (800377c <ESC_mbxprocess+0x268>)
 80036dc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d041      	beq.n	800376e <ESC_mbxprocess+0x25a>
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <ESC_mbxprocess+0x26c>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d13d      	bne.n	800376e <ESC_mbxprocess+0x25a>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 80036f2:	4b22      	ldr	r3, [pc, #136]	; (800377c <ESC_mbxprocess+0x268>)
 80036f4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d138      	bne.n	800376e <ESC_mbxprocess+0x25a>
 80036fc:	4b1f      	ldr	r3, [pc, #124]	; (800377c <ESC_mbxprocess+0x268>)
 80036fe:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003702:	2b00      	cmp	r3, #0
 8003704:	d133      	bne.n	800376e <ESC_mbxprocess+0x25a>
   {
      ESC_readmbx ();
 8003706:	f7ff fda3 	bl	8003250 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <ESC_mbxprocess+0x268>)
 800370c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8003710:	f36f 03c3 	bfc	r3, #3, #1
 8003714:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
      if (etohs (MBh->length) == 0)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <ESC_mbxprocess+0x21a>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8003722:	2005      	movs	r0, #5
 8003724:	f7ff febe 	bl	80034a4 <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <ESC_mbxprocess+0x26c>)
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	795b      	ldrb	r3, [r3, #5]
 8003732:	f023 030f 	bic.w	r3, r3, #15
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <ESC_mbxprocess+0x244>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	795b      	ldrb	r3, [r3, #5]
 8003740:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <ESC_mbxprocess+0x268>)
 800374a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800374e:	429a      	cmp	r2, r3
 8003750:	d102      	bne.n	8003758 <ESC_mbxprocess+0x244>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <ESC_mbxprocess+0x26c>)
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	795b      	ldrb	r3, [r3, #5]
 800375c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <ESC_mbxprocess+0x268>)
 8003766:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
      return 1;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <ESC_mbxprocess+0x25c>
   }

   return 0;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000e2c 	.word	0x20000e2c
 800377c:	200014a8 	.word	0x200014a8
 8003780:	2000142c 	.word	0x2000142c

08003784 <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   if (ESCvar.MBXrun == 0)
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <ESC_xoeprocess+0x5c>)
 800378c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003790:	2b00      	cmp	r3, #0
 8003792:	d021      	beq.n	80037d8 <ESC_xoeprocess+0x54>
   {
      return;
   }
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <ESC_xoeprocess+0x5c>)
 8003796:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800379a:	2b00      	cmp	r3, #0
 800379c:	d11d      	bne.n	80037da <ESC_xoeprocess+0x56>
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <ESC_xoeprocess+0x60>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d119      	bne.n	80037da <ESC_xoeprocess+0x56>
   {
      mbh = (_MBXh *) &MBX[0];
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <ESC_xoeprocess+0x64>)
 80037a8:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	795b      	ldrb	r3, [r3, #5]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <ESC_xoeprocess+0x3e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <ESC_xoeprocess+0x46>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 80037c2:	2005      	movs	r0, #5
 80037c4:	f7ff fe6e 	bl	80034a4 <MBX_error>
 80037c8:	e002      	b.n	80037d0 <ESC_xoeprocess+0x4c>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 80037ca:	2002      	movs	r0, #2
 80037cc:	f7ff fe6a 	bl	80034a4 <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <ESC_xoeprocess+0x60>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e000      	b.n	80037da <ESC_xoeprocess+0x56>
      return;
 80037d8:	bf00      	nop
   }
}
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	200014a8 	.word	0x200014a8
 80037e4:	2000142c 	.word	0x2000142c
 80037e8:	20000e2c 	.word	0x20000e2c

080037ec <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 80037f6:	2208      	movs	r2, #8
 80037f8:	4940      	ldr	r1, [pc, #256]	; (80038fc <ESC_checkSM23+0x110>)
 80037fa:	f44f 6001 	mov.w	r0, #2064	; 0x810
 80037fe:	f003 fa4d 	bl	8006c9c <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 8003802:	4b3e      	ldr	r3, [pc, #248]	; (80038fc <ESC_checkSM23+0x110>)
 8003804:	60fb      	str	r3, [r7, #12]
   
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8003810:	d103      	bne.n	800381a <ESC_checkSM23+0x2e>
       (SM->Command != ESC_SM2_smc))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 8003816:	2b24      	cmp	r3, #36	; 0x24
 8003818:	d005      	beq.n	8003826 <ESC_checkSM23+0x3a>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <ESC_checkSM23+0x114>)
 800381c:	2204      	movs	r2, #4
 800381e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8003822:	2312      	movs	r3, #18
 8003824:	e066      	b.n	80038f4 <ESC_checkSM23+0x108>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	b29a      	uxth	r2, r3
 800382c:	4b34      	ldr	r3, [pc, #208]	; (8003900 <ESC_checkSM23+0x114>)
 800382e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8003832:	429a      	cmp	r2, r3
 8003834:	d005      	beq.n	8003842 <ESC_checkSM23+0x56>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8003836:	4b32      	ldr	r3, [pc, #200]	; (8003900 <ESC_checkSM23+0x114>)
 8003838:	2204      	movs	r2, #4
 800383a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 800383e:	2312      	movs	r3, #18
 8003840:	e058      	b.n	80038f4 <ESC_checkSM23+0x108>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	799b      	ldrb	r3, [r3, #6]
 8003846:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <ESC_checkSM23+0x78>
            (ESCvar.ESC_SM2_sml > 0))
 800384e:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <ESC_checkSM23+0x114>)
 8003850:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <ESC_checkSM23+0x78>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8003858:	4b29      	ldr	r3, [pc, #164]	; (8003900 <ESC_checkSM23+0x114>)
 800385a:	2204      	movs	r2, #4
 800385c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8003860:	2312      	movs	r3, #18
 8003862:	e047      	b.n	80038f4 <ESC_checkSM23+0x108>
   }

   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	885b      	ldrh	r3, [r3, #2]
 8003868:	b29b      	uxth	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003876:	dd05      	ble.n	8003884 <ESC_checkSM23+0x98>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8003878:	4b21      	ldr	r3, [pc, #132]	; (8003900 <ESC_checkSM23+0x114>)
 800387a:	2204      	movs	r2, #4
 800387c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* SM2 overlaps SM3, fail state change */
      return (ESCpreop | ESCerror);
 8003880:	2312      	movs	r3, #18
 8003882:	e037      	b.n	80038f4 <ESC_checkSM23+0x108>
   }

   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 8003884:	2208      	movs	r2, #8
 8003886:	491f      	ldr	r1, [pc, #124]	; (8003904 <ESC_checkSM23+0x118>)
 8003888:	f640 0018 	movw	r0, #2072	; 0x818
 800388c:	f003 fa06 	bl	8006c9c <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <ESC_checkSM23+0x118>)
 8003892:	60fb      	str	r3, [r7, #12]
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800389e:	d103      	bne.n	80038a8 <ESC_checkSM23+0xbc>
       (SM->Command != ESC_SM3_smc))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d005      	beq.n	80038b4 <ESC_checkSM23+0xc8>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <ESC_checkSM23+0x114>)
 80038aa:	2208      	movs	r2, #8
 80038ac:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80038b0:	2312      	movs	r3, #18
 80038b2:	e01f      	b.n	80038f4 <ESC_checkSM23+0x108>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	885b      	ldrh	r3, [r3, #2]
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <ESC_checkSM23+0x114>)
 80038bc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d005      	beq.n	80038d0 <ESC_checkSM23+0xe4>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <ESC_checkSM23+0x114>)
 80038c6:	2208      	movs	r2, #8
 80038c8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80038cc:	2312      	movs	r3, #18
 80038ce:	e011      	b.n	80038f4 <ESC_checkSM23+0x108>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	799b      	ldrb	r3, [r3, #6]
 80038d4:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <ESC_checkSM23+0x106>
            (ESCvar.ESC_SM3_sml > 0))
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <ESC_checkSM23+0x114>)
 80038de:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <ESC_checkSM23+0x106>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <ESC_checkSM23+0x114>)
 80038e8:	2208      	movs	r2, #8
 80038ea:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80038ee:	2312      	movs	r3, #18
 80038f0:	e000      	b.n	80038f4 <ESC_checkSM23+0x108>
   }
   return state;
 80038f2:	79fb      	ldrb	r3, [r7, #7]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20001574 	.word	0x20001574
 8003900:	200014a8 	.word	0x200014a8
 8003904:	2000157c 	.word	0x2000157c

08003908 <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff69 	bl	80037ec <ESC_checkSM23>
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	2b12      	cmp	r3, #18
 8003922:	d00f      	beq.n	8003944 <ESC_startinput+0x3c>
   {
   	  /* If inputs > 0 , enable SM3 */
      if (ESCvar.ESC_SM3_sml > 0)
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <ESC_startinput+0xf0>)
 8003926:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <ESC_startinput+0x2c>
      {
         ESC_SMenable (3);
 800392e:	2003      	movs	r0, #3
 8003930:	f7ff faa8 	bl	8002e84 <ESC_SMenable>
      }
      /* Go to state input regardless of any inputs present */
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 8003934:	4b31      	ldr	r3, [pc, #196]	; (80039fc <ESC_startinput+0xf4>)
 8003936:	f3bf 8f5b 	dmb	ish
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	f3bf 8f5b 	dmb	ish
 8003942:	e013      	b.n	800396c <ESC_startinput+0x64>
   }
   else
   {
      ESC_SMdisable (2);
 8003944:	2002      	movs	r0, #2
 8003946:	f7ff fabb 	bl	8002ec0 <ESC_SMdisable>
      ESC_SMdisable (3);
 800394a:	2003      	movs	r0, #3
 800394c:	f7ff fab8 	bl	8002ec0 <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8003950:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <ESC_startinput+0xf0>)
 8003952:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <ESC_startinput+0x5e>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 800395e:	201e      	movs	r0, #30
 8003960:	f7ff f9a8 	bl	8002cb4 <ESC_ALerror>
 8003964:	e002      	b.n	800396c <ESC_startinput+0x64>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8003966:	201d      	movs	r0, #29
 8003968:	f7ff f9a4 	bl	8002cb4 <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 800396c:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <ESC_startinput+0xf0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <ESC_startinput+0x70>
   {
      return state;
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	e03b      	b.n	80039f0 <ESC_startinput+0xe8>
   }

   if (state != (ESCpreop | ESCerror))
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2b12      	cmp	r3, #18
 800397c:	d037      	beq.n	80039ee <ESC_startinput+0xe6>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 800397e:	f7ff fae1 	bl	8002f44 <ESC_checkDC>
 8003982:	4603      	mov	r3, r0
 8003984:	817b      	strh	r3, [r7, #10]
      if(dc_check_result > 0)
 8003986:	897b      	ldrh	r3, [r7, #10]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <ESC_startinput+0xac>
      {
         ESC_ALerror (dc_check_result);
 800398c:	897b      	ldrh	r3, [r7, #10]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff f990 	bl	8002cb4 <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 8003994:	2312      	movs	r3, #18
 8003996:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 8003998:	2002      	movs	r0, #2
 800399a:	f7ff fa91 	bl	8002ec0 <ESC_SMdisable>
         ESC_SMdisable (3);
 800399e:	2003      	movs	r0, #3
 80039a0:	f7ff fa8e 	bl	8002ec0 <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 80039a4:	4b15      	ldr	r3, [pc, #84]	; (80039fc <ESC_startinput+0xf4>)
 80039a6:	f3bf 8f5b 	dmb	ish
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	f3bf 8f5b 	dmb	ish
 80039b2:	e01c      	b.n	80039ee <ESC_startinput+0xe6>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <ESC_startinput+0xf0>)
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d018      	beq.n	80039ee <ESC_startinput+0xe6>
         {
            uint32_t int_mask;

            if (ESCvar.ESC_SM2_sml == 0)
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <ESC_startinput+0xf0>)
 80039be:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <ESC_startinput+0xc6>
            {
               int_mask = ESCREG_ALEVENT_SM3;
 80039c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e002      	b.n	80039d4 <ESC_startinput+0xcc>
            }
            else
            {
               int_mask = ESCREG_ALEVENT_SM2;
 80039ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d2:	60fb      	str	r3, [r7, #12]
            }

            if (ESCvar.dcsync > 0)
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <ESC_startinput+0xf0>)
 80039d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <ESC_startinput+0xde>
            {
               int_mask |= ESCREG_ALEVENT_DC_SYNC0;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	60fb      	str	r3, [r7, #12]
            }
            ESCvar.esc_hw_interrupt_enable (int_mask);
 80039e6:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <ESC_startinput+0xf0>)
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	4798      	blx	r3
         }
      }
   }

   return state;
 80039ee:	79fb      	ldrb	r3, [r7, #7]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200014a8 	.word	0x200014a8
 80039fc:	20001591 	.word	0x20001591

08003a00 <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <ESC_stopinput+0x3c>)
 8003a06:	f3bf 8f5b 	dmb	ish
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 8003a12:	2003      	movs	r0, #3
 8003a14:	f7ff fa54 	bl	8002ec0 <ESC_SMdisable>
   ESC_SMdisable (2);
 8003a18:	2002      	movs	r0, #2
 8003a1a:	f7ff fa51 	bl	8002ec0 <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <ESC_stopinput+0x40>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <ESC_stopinput+0x40>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   if ((ESCvar.use_interrupt != 0) &&
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <ESC_stopinput+0x38>
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <ESC_stopinput+0x40>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f640 4004 	movw	r0, #3076	; 0xc04
 8003a36:	4798      	blx	r3
            ESCREG_ALEVENT_SM2 |
            ESCREG_ALEVENT_SM3);
   }
}
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20001591 	.word	0x20001591
 8003a40:	200014a8 	.word	0x200014a8

08003a44 <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
	
   /* If outputs > 0 , enable SM2 */
   if (ESCvar.ESC_SM2_sml > 0)
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <ESC_startoutput+0x40>)
 8003a50:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <ESC_startoutput+0x1a>
   {
      ESC_SMenable (2);
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f7ff fa13 	bl	8002e84 <ESC_SMenable>
   }
   /* Go to state output regardless of any outputs present */
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <ESC_startoutput+0x44>)
 8003a60:	f3bf 8f5b 	dmb	ish
 8003a64:	e8d3 2f4f 	ldrexb	r2, [r3]
 8003a68:	f042 0202 	orr.w	r2, r2, #2
 8003a6c:	e8c3 2f41 	strexb	r1, r2, [r3]
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d1f7      	bne.n	8003a64 <ESC_startoutput+0x20>
 8003a74:	f3bf 8f5b 	dmb	ish
   return state;
 8003a78:	79fb      	ldrb	r3, [r7, #7]

}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200014a8 	.word	0x200014a8
 8003a88:	20001591 	.word	0x20001591

08003a8c <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <ESC_stopoutput+0x2c>)
 8003a92:	f3bf 8f5b 	dmb	ish
 8003a96:	e8d3 2f4f 	ldrexb	r2, [r3]
 8003a9a:	f002 0201 	and.w	r2, r2, #1
 8003a9e:	e8c3 2f41 	strexb	r1, r2, [r3]
 8003aa2:	2900      	cmp	r1, #0
 8003aa4:	d1f7      	bne.n	8003a96 <ESC_stopoutput+0xa>
 8003aa6:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f7ff fa08 	bl	8002ec0 <ESC_SMdisable>
   APP_safeoutput ();
 8003ab0:	f7fe ff8c 	bl	80029cc <APP_safeoutput>
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20001591 	.word	0x20001591

08003abc <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 8003ac2:	4b56      	ldr	r3, [pc, #344]	; (8003c1c <ESC_sm_act_event+0x160>)
 8003ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 809e 	beq.w	8003c0e <ESC_sm_act_event+0x152>
      /* nothing to do */
      return;
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <ESC_sm_act_event+0x160>)
 8003ad4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 8003ae0:	4b4e      	ldr	r3, [pc, #312]	; (8003c1c <ESC_sm_act_event+0x160>)
 8003ae2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	717b      	strb	r3, [r7, #5]
   an = as;
 8003aee:	797b      	ldrb	r3, [r7, #5]
 8003af0:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <ESC_sm_act_event+0x46>
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <ESC_sm_act_event+0x56>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8003b0a:	79bb      	ldrb	r3, [r7, #6]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 8003b12:	797b      	ldrb	r3, [r7, #5]
 8003b14:	f003 030e 	and.w	r3, r3, #14
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d05f      	beq.n	8003bdc <ESC_sm_act_event+0x120>
 8003b1c:	797b      	ldrb	r3, [r7, #5]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d05c      	beq.n	8003bdc <ESC_sm_act_event+0x120>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 8003b22:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <ESC_sm_act_event+0x160>)
 8003b24:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d057      	beq.n	8003bdc <ESC_sm_act_event+0x120>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 8003b2c:	797b      	ldrb	r3, [r7, #5]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fa32 	bl	8002f98 <ESC_checkmbx>
 8003b34:	4603      	mov	r3, r0
 8003b36:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 8003b38:	797b      	ldrb	r3, [r7, #5]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fe56 	bl	80037ec <ESC_checkSM23>
 8003b40:	4603      	mov	r3, r0
 8003b42:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8003b44:	79bb      	ldrb	r3, [r7, #6]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <ESC_sm_act_event+0x9c>
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d040      	beq.n	8003bda <ESC_sm_act_event+0x11e>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 8003b58:	793b      	ldrb	r3, [r7, #4]
 8003b5a:	2b11      	cmp	r3, #17
 8003b5c:	d11a      	bne.n	8003b94 <ESC_sm_act_event+0xd8>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 8003b5e:	4b30      	ldr	r3, [pc, #192]	; (8003c20 <ESC_sm_act_event+0x164>)
 8003b60:	f3bf 8f5b 	dmb	ish
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f3bf 8f5b 	dmb	ish
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <ESC_sm_act_event+0xbc>
         {
            ESC_stopoutput ();
 8003b70:	f7ff ff8c 	bl	8003a8c <ESC_stopoutput>
            ESC_stopinput ();
 8003b74:	f7ff ff44 	bl	8003a00 <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 8003b78:	f7ff fb14 	bl	80031a4 <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8003b7c:	2016      	movs	r0, #22
 8003b7e:	f7ff f899 	bl	8002cb4 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 8003b82:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <ESC_sm_act_event+0x160>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
         ESC_ALstatus (ax);
 8003b8a:	793b      	ldrb	r3, [r7, #4]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f8ab 	bl	8002ce8 <ESC_ALstatus>
         return;
 8003b92:	e03f      	b.n	8003c14 <ESC_sm_act_event+0x158>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 8003b94:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <ESC_sm_act_event+0x164>)
 8003b96:	f3bf 8f5b 	dmb	ish
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f3bf 8f5b 	dmb	ish
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d035      	beq.n	8003c12 <ESC_sm_act_event+0x156>
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	2b12      	cmp	r3, #18
 8003baa:	d132      	bne.n	8003c12 <ESC_sm_act_event+0x156>
      {
         ESC_stopoutput ();
 8003bac:	f7ff ff6e 	bl	8003a8c <ESC_stopoutput>
         ESC_stopinput ();
 8003bb0:	f7ff ff26 	bl	8003a00 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <ESC_sm_act_event+0x160>)
 8003bb6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <ESC_sm_act_event+0x10e>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8003bc2:	201e      	movs	r0, #30
 8003bc4:	f7ff f876 	bl	8002cb4 <ESC_ALerror>
 8003bc8:	e002      	b.n	8003bd0 <ESC_sm_act_event+0x114>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8003bca:	201d      	movs	r0, #29
 8003bcc:	f7ff f872 	bl	8002cb4 <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff f888 	bl	8002ce8 <ESC_ALstatus>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8003bd8:	e01b      	b.n	8003c12 <ESC_sm_act_event+0x156>
 8003bda:	e01a      	b.n	8003c12 <ESC_sm_act_event+0x156>
      }
   }
   else
   {
      ESC_SMack (0);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7ff f8fb 	bl	8002dd8 <ESC_SMack>
      ESC_SMack (1);
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7ff f8f8 	bl	8002dd8 <ESC_SMack>
      ESC_SMack (2);
 8003be8:	2002      	movs	r0, #2
 8003bea:	f7ff f8f5 	bl	8002dd8 <ESC_SMack>
      ESC_SMack (3);
 8003bee:	2003      	movs	r0, #3
 8003bf0:	f7ff f8f2 	bl	8002dd8 <ESC_SMack>
      ESC_SMack (4);
 8003bf4:	2004      	movs	r0, #4
 8003bf6:	f7ff f8ef 	bl	8002dd8 <ESC_SMack>
      ESC_SMack (5);
 8003bfa:	2005      	movs	r0, #5
 8003bfc:	f7ff f8ec 	bl	8002dd8 <ESC_SMack>
      ESC_SMack (6);
 8003c00:	2006      	movs	r0, #6
 8003c02:	f7ff f8e9 	bl	8002dd8 <ESC_SMack>
      ESC_SMack (7);
 8003c06:	2007      	movs	r0, #7
 8003c08:	f7ff f8e6 	bl	8002dd8 <ESC_SMack>
 8003c0c:	e002      	b.n	8003c14 <ESC_sm_act_event+0x158>
      return;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <ESC_sm_act_event+0x158>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8003c12:	bf00      	nop
   }
}
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200014a8 	.word	0x200014a8
 8003c20:	20001591 	.word	0x20001591

08003c24 <ESC_check_id_request>:

static bool ESC_check_id_request (uint16_t ALcontrol, uint8_t * an)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	80fb      	strh	r3, [r7, #6]
   if ((ALcontrol & ESCREG_AL_ID_REQUEST) != 0)
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d021      	beq.n	8003c7e <ESC_check_id_request+0x5a>
   {
      uint8_t state = ALcontrol & ESCREG_AL_ERRACKMASK;
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	73fb      	strb	r3, [r7, #15]

      if ((state != ESCboot) &&
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d019      	beq.n	8003c7e <ESC_check_id_request+0x5a>
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d907      	bls.n	8003c60 <ESC_check_id_request+0x3c>
          ((state < ESCsafeop) || (*an == ESCsafeop) || (*an == ESCop)))
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d003      	beq.n	8003c60 <ESC_check_id_request+0x3c>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d10e      	bne.n	8003c7e <ESC_check_id_request+0x5a>
      {
         uint16_t ALstatuscode;

         ESC_read (ESCREG_ALERROR,
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	2202      	movs	r2, #2
 8003c66:	4619      	mov	r1, r3
 8003c68:	f44f 709a 	mov.w	r0, #308	; 0x134
 8003c6c:	f003 f816 	bl	8006c9c <ESC_read>
                   (void *)&ALstatuscode,
                   sizeof (ALstatuscode));

         return (ALstatuscode == ALERR_NONE);
 8003c70:	89bb      	ldrh	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	e000      	b.n	8003c80 <ESC_check_id_request+0x5c>
      }
   }

   return false;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <ESC_load_device_id>:

static uint8_t ESC_load_device_id (void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
   uint16_t device_id;

   if (ESCvar.get_device_id != NULL)
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <ESC_load_device_id+0x4c>)
 8003c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <ESC_load_device_id+0x24>
   {
      if (ESCvar.get_device_id (&device_id) != 0)
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <ESC_load_device_id+0x4c>)
 8003c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9a:	1dba      	adds	r2, r7, #6
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4798      	blx	r3
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <ESC_load_device_id+0x30>
      {
         device_id = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	80fb      	strh	r3, [r7, #6]
 8003caa:	e005      	b.n	8003cb8 <ESC_load_device_id+0x30>
      }
   }
   else
   {
      ESC_read (ESCREG_CONF_STATION_ALIAS,
 8003cac:	1dbb      	adds	r3, r7, #6
 8003cae:	2202      	movs	r2, #2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2012      	movs	r0, #18
 8003cb4:	f002 fff2 	bl	8006c9c <ESC_read>
                (void *)&device_id,
                sizeof (device_id));
   }

   if (device_id != 0)
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <ESC_load_device_id+0x42>
   {
      /* Load the Device Identification Value to the AL Status Code register */
      ESC_ALerror (device_id);
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe fff7 	bl	8002cb4 <ESC_ALerror>

      return ESCREG_AL_ID_REQUEST;
 8003cc6:	2320      	movs	r3, #32
 8003cc8:	e000      	b.n	8003ccc <ESC_load_device_id+0x44>
   }

   return 0;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200014a8 	.word	0x200014a8

08003cd8 <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 8003cde:	4bda      	ldr	r3, [pc, #872]	; (8004048 <ESC_state+0x370>)
 8003ce0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8256 	beq.w	800419a <ESC_state+0x4c2>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 8003cee:	2202      	movs	r2, #2
 8003cf0:	49d6      	ldr	r1, [pc, #856]	; (800404c <ESC_state+0x374>)
 8003cf2:	f44f 7090 	mov.w	r0, #288	; 0x120
 8003cf6:	f002 ffd1 	bl	8006c9c <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 8003cfa:	4bd3      	ldr	r3, [pc, #844]	; (8004048 <ESC_state+0x370>)
 8003cfc:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003d00:	4bd1      	ldr	r3, [pc, #836]	; (8004048 <ESC_state+0x370>)
 8003d02:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 8003d06:	4bd0      	ldr	r3, [pc, #832]	; (8004048 <ESC_state+0x370>)
 8003d08:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 8003d14:	4bcc      	ldr	r3, [pc, #816]	; (8004048 <ESC_state+0x370>)
 8003d16:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	717b      	strb	r3, [r7, #5]
   an = as;
 8003d24:	797b      	ldrb	r3, [r7, #5]
 8003d26:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <ESC_state+0x60>
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d108      	bne.n	8003d4a <ESC_state+0x72>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8003d40:	79bb      	ldrb	r3, [r7, #6]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8003d4a:	79bb      	ldrb	r3, [r7, #6]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <ESC_state+0x88>
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 821f 	beq.w	800419e <ESC_state+0x4c6>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (uint8_t)((ac << 4) | (as & 0x0f));
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	b25a      	sxtb	r2, r3
 8003d66:	797b      	ldrb	r3, [r7, #5]
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 8003d78:	4bb3      	ldr	r3, [pc, #716]	; (8004048 <ESC_state+0x370>)
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <ESC_state+0xb4>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8003d80:	4bb1      	ldr	r3, [pc, #708]	; (8004048 <ESC_state+0x370>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	1db9      	adds	r1, r7, #6
 8003d86:	1d7a      	adds	r2, r7, #5
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 8003d8c:	797b      	ldrb	r3, [r7, #5]
 8003d8e:	3b11      	subs	r3, #17
 8003d90:	2b77      	cmp	r3, #119	; 0x77
 8003d92:	f200 81ac 	bhi.w	80040ee <ESC_state+0x416>
 8003d96:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <ESC_state+0xc4>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08004133 	.word	0x08004133
 8003da0:	08003fcd 	.word	0x08003fcd
 8003da4:	08003fd7 	.word	0x08003fd7
 8003da8:	08003fbf 	.word	0x08003fbf
 8003dac:	080040ef 	.word	0x080040ef
 8003db0:	080040ef 	.word	0x080040ef
 8003db4:	080040ef 	.word	0x080040ef
 8003db8:	08003fad 	.word	0x08003fad
 8003dbc:	080040ef 	.word	0x080040ef
 8003dc0:	080040ef 	.word	0x080040ef
 8003dc4:	080040ef 	.word	0x080040ef
 8003dc8:	080040ef 	.word	0x080040ef
 8003dcc:	080040ef 	.word	0x080040ef
 8003dd0:	080040ef 	.word	0x080040ef
 8003dd4:	080040ef 	.word	0x080040ef
 8003dd8:	080040ef 	.word	0x080040ef
 8003ddc:	08003f7d 	.word	0x08003f7d
 8003de0:	08004133 	.word	0x08004133
 8003de4:	08003fe1 	.word	0x08003fe1
 8003de8:	08004097 	.word	0x08004097
 8003dec:	080040ef 	.word	0x080040ef
 8003df0:	080040ef 	.word	0x080040ef
 8003df4:	080040ef 	.word	0x080040ef
 8003df8:	08004089 	.word	0x08004089
 8003dfc:	080040ef 	.word	0x080040ef
 8003e00:	080040ef 	.word	0x080040ef
 8003e04:	080040ef 	.word	0x080040ef
 8003e08:	080040ef 	.word	0x080040ef
 8003e0c:	080040ef 	.word	0x080040ef
 8003e10:	080040ef 	.word	0x080040ef
 8003e14:	080040ef 	.word	0x080040ef
 8003e18:	080040ef 	.word	0x080040ef
 8003e1c:	08003f8f 	.word	0x08003f8f
 8003e20:	08003fe1 	.word	0x08003fe1
 8003e24:	08003f8f 	.word	0x08003f8f
 8003e28:	080040a1 	.word	0x080040a1
 8003e2c:	080040ef 	.word	0x080040ef
 8003e30:	080040ef 	.word	0x080040ef
 8003e34:	080040ef 	.word	0x080040ef
 8003e38:	080040bb 	.word	0x080040bb
 8003e3c:	080040ef 	.word	0x080040ef
 8003e40:	080040ef 	.word	0x080040ef
 8003e44:	080040ef 	.word	0x080040ef
 8003e48:	080040ef 	.word	0x080040ef
 8003e4c:	080040ef 	.word	0x080040ef
 8003e50:	080040ef 	.word	0x080040ef
 8003e54:	080040ef 	.word	0x080040ef
 8003e58:	080040ef 	.word	0x080040ef
 8003e5c:	08003fa1 	.word	0x08003fa1
 8003e60:	08003fed 	.word	0x08003fed
 8003e64:	08003fe1 	.word	0x08003fe1
 8003e68:	08003fed 	.word	0x08003fed
 8003e6c:	080040ef 	.word	0x080040ef
 8003e70:	080040ef 	.word	0x080040ef
 8003e74:	080040ef 	.word	0x080040ef
 8003e78:	080040e5 	.word	0x080040e5
 8003e7c:	080040ef 	.word	0x080040ef
 8003e80:	080040ef 	.word	0x080040ef
 8003e84:	080040ef 	.word	0x080040ef
 8003e88:	080040ef 	.word	0x080040ef
 8003e8c:	080040ef 	.word	0x080040ef
 8003e90:	080040ef 	.word	0x080040ef
 8003e94:	080040ef 	.word	0x080040ef
 8003e98:	080040ef 	.word	0x080040ef
 8003e9c:	080040ef 	.word	0x080040ef
 8003ea0:	080040ef 	.word	0x080040ef
 8003ea4:	080040ef 	.word	0x080040ef
 8003ea8:	080040ef 	.word	0x080040ef
 8003eac:	080040ef 	.word	0x080040ef
 8003eb0:	080040ef 	.word	0x080040ef
 8003eb4:	080040ef 	.word	0x080040ef
 8003eb8:	080040ef 	.word	0x080040ef
 8003ebc:	080040ef 	.word	0x080040ef
 8003ec0:	080040ef 	.word	0x080040ef
 8003ec4:	080040ef 	.word	0x080040ef
 8003ec8:	080040ef 	.word	0x080040ef
 8003ecc:	080040ef 	.word	0x080040ef
 8003ed0:	080040ef 	.word	0x080040ef
 8003ed4:	080040ef 	.word	0x080040ef
 8003ed8:	080040ef 	.word	0x080040ef
 8003edc:	080040ef 	.word	0x080040ef
 8003ee0:	080040ef 	.word	0x080040ef
 8003ee4:	080040ef 	.word	0x080040ef
 8003ee8:	080040ef 	.word	0x080040ef
 8003eec:	080040ef 	.word	0x080040ef
 8003ef0:	080040ef 	.word	0x080040ef
 8003ef4:	080040ef 	.word	0x080040ef
 8003ef8:	080040ef 	.word	0x080040ef
 8003efc:	080040ef 	.word	0x080040ef
 8003f00:	080040ef 	.word	0x080040ef
 8003f04:	080040ef 	.word	0x080040ef
 8003f08:	080040ef 	.word	0x080040ef
 8003f0c:	080040ef 	.word	0x080040ef
 8003f10:	080040ef 	.word	0x080040ef
 8003f14:	080040ef 	.word	0x080040ef
 8003f18:	080040ef 	.word	0x080040ef
 8003f1c:	080040ef 	.word	0x080040ef
 8003f20:	080040ef 	.word	0x080040ef
 8003f24:	080040ef 	.word	0x080040ef
 8003f28:	080040ef 	.word	0x080040ef
 8003f2c:	080040ef 	.word	0x080040ef
 8003f30:	080040ef 	.word	0x080040ef
 8003f34:	080040ef 	.word	0x080040ef
 8003f38:	080040ef 	.word	0x080040ef
 8003f3c:	080040ef 	.word	0x080040ef
 8003f40:	080040ef 	.word	0x080040ef
 8003f44:	080040ef 	.word	0x080040ef
 8003f48:	080040ef 	.word	0x080040ef
 8003f4c:	080040ef 	.word	0x080040ef
 8003f50:	080040ef 	.word	0x080040ef
 8003f54:	080040ef 	.word	0x080040ef
 8003f58:	080040ef 	.word	0x080040ef
 8003f5c:	08003fa1 	.word	0x08003fa1
 8003f60:	0800407d 	.word	0x0800407d
 8003f64:	08003fe1 	.word	0x08003fe1
 8003f68:	080040ad 	.word	0x080040ad
 8003f6c:	080040ef 	.word	0x080040ef
 8003f70:	080040ef 	.word	0x080040ef
 8003f74:	080040ef 	.word	0x080040ef
 8003f78:	08004133 	.word	0x08004133
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 8003f7c:	f7fe ffbe 	bl	8002efc <ESC_address>
         an = ESC_startmbx (ac);
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f87e 	bl	8003084 <ESC_startmbx>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71bb      	strb	r3, [r7, #6]
         break;
 8003f8c:	e0d6      	b.n	800413c <ESC_state+0x464>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 8003f8e:	f7fe ffb5 	bl	8002efc <ESC_address>
         an = ESC_startmbxboot (ac);
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff f8bd 	bl	8003114 <ESC_startmbxboot>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71bb      	strb	r3, [r7, #6]
         break;
 8003f9e:	e0cd      	b.n	800413c <ESC_state+0x464>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 8003fa0:	2311      	movs	r3, #17
 8003fa2:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8003fa4:	2011      	movs	r0, #17
 8003fa6:	f7fe fe85 	bl	8002cb4 <ESC_ALerror>
         break;
 8003faa:	e0c7      	b.n	800413c <ESC_state+0x464>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 8003fac:	f7ff fd6e 	bl	8003a8c <ESC_stopoutput>
         ESC_stopinput ();
 8003fb0:	f7ff fd26 	bl	8003a00 <ESC_stopinput>
         ESC_stopmbx ();
 8003fb4:	f7ff f8f6 	bl	80031a4 <ESC_stopmbx>
         an = ESCinit;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	71bb      	strb	r3, [r7, #6]
         break;
 8003fbc:	e0be      	b.n	800413c <ESC_state+0x464>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 8003fbe:	f7ff fd1f 	bl	8003a00 <ESC_stopinput>
         ESC_stopmbx ();
 8003fc2:	f7ff f8ef 	bl	80031a4 <ESC_stopmbx>
         an = ESCinit;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	71bb      	strb	r3, [r7, #6]
         break;
 8003fca:	e0b7      	b.n	800413c <ESC_state+0x464>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 8003fcc:	f7ff f8ea 	bl	80031a4 <ESC_stopmbx>
         an = ESCinit;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	71bb      	strb	r3, [r7, #6]
         break;
 8003fd4:	e0b2      	b.n	800413c <ESC_state+0x464>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 8003fd6:	f7ff f8e5 	bl	80031a4 <ESC_stopmbx>
         an = ESCinit;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	71bb      	strb	r3, [r7, #6]
         break;
 8003fde:	e0ad      	b.n	800413c <ESC_state+0x464>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8003fe0:	2312      	movs	r3, #18
 8003fe2:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8003fe4:	2011      	movs	r0, #17
 8003fe6:	f7fe fe65 	bl	8002cb4 <ESC_ALerror>
         break;
 8003fea:	e0a7      	b.n	800413c <ESC_state+0x464>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 8003fec:	2304      	movs	r3, #4
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <ESC_state+0x378>)
 8003ff0:	4918      	ldr	r1, [pc, #96]	; (8004054 <ESC_state+0x37c>)
 8003ff2:	f641 4012 	movw	r0, #7186	; 0x1c12
 8003ff6:	f000 f9dd 	bl	80043b4 <sizeOfPDO>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <ESC_state+0x370>)
 8004000:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
                                         SMmap2, MAX_MAPPINGS_SM2);
         if (ESCvar.sm2mappings < 0)
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <ESC_state+0x370>)
 8004006:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800400a:	2b00      	cmp	r3, #0
 800400c:	da05      	bge.n	800401a <ESC_state+0x342>
         {
            an = ESCpreop | ESCerror;
 800400e:	2312      	movs	r3, #18
 8004010:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8004012:	201d      	movs	r0, #29
 8004014:	f7fe fe4e 	bl	8002cb4 <ESC_ALerror>
            break;
 8004018:	e090      	b.n	800413c <ESC_state+0x464>
         }

         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 800401a:	2306      	movs	r3, #6
 800401c:	4a0e      	ldr	r2, [pc, #56]	; (8004058 <ESC_state+0x380>)
 800401e:	490f      	ldr	r1, [pc, #60]	; (800405c <ESC_state+0x384>)
 8004020:	f641 4013 	movw	r0, #7187	; 0x1c13
 8004024:	f000 f9c6 	bl	80043b4 <sizeOfPDO>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <ESC_state+0x370>)
 800402e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                                         SMmap3, MAX_MAPPINGS_SM3);
         if (ESCvar.sm3mappings < 0)
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <ESC_state+0x370>)
 8004034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004038:	2b00      	cmp	r3, #0
 800403a:	da11      	bge.n	8004060 <ESC_state+0x388>
         {
            an = ESCpreop | ESCerror;
 800403c:	2312      	movs	r3, #18
 800403e:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8004040:	201e      	movs	r0, #30
 8004042:	f7fe fe37 	bl	8002cb4 <ESC_ALerror>
            break;
 8004046:	e079      	b.n	800413c <ESC_state+0x464>
 8004048:	200014a8 	.word	0x200014a8
 800404c:	2000152a 	.word	0x2000152a
 8004050:	20001430 	.word	0x20001430
 8004054:	20001554 	.word	0x20001554
 8004058:	20001460 	.word	0x20001460
 800405c:	20001558 	.word	0x20001558
         }

         an = ESC_startinput (ac);
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fc50 	bl	8003908 <ESC_startinput>
 8004068:	4603      	mov	r3, r0
 800406a:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 800406c:	79bb      	ldrb	r3, [r7, #6]
 800406e:	79fa      	ldrb	r2, [r7, #7]
 8004070:	429a      	cmp	r2, r3
 8004072:	d160      	bne.n	8004136 <ESC_state+0x45e>
         {
            ESC_SMenable (2);
 8004074:	2002      	movs	r0, #2
 8004076:	f7fe ff05 	bl	8002e84 <ESC_SMenable>
         }
         break;
 800407a:	e05c      	b.n	8004136 <ESC_state+0x45e>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 800407c:	2312      	movs	r3, #18
 800407e:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8004080:	2011      	movs	r0, #17
 8004082:	f7fe fe17 	bl	8002cb4 <ESC_ALerror>
         break;
 8004086:	e059      	b.n	800413c <ESC_state+0x464>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 8004088:	f7ff fd00 	bl	8003a8c <ESC_stopoutput>
         ESC_stopinput ();
 800408c:	f7ff fcb8 	bl	8003a00 <ESC_stopinput>
         an = ESCpreop;
 8004090:	2302      	movs	r3, #2
 8004092:	71bb      	strb	r3, [r7, #6]
         break;
 8004094:	e052      	b.n	800413c <ESC_state+0x464>
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 8004096:	f7ff fcb3 	bl	8003a00 <ESC_stopinput>
         an = ESCpreop;
 800409a:	2302      	movs	r3, #2
 800409c:	71bb      	strb	r3, [r7, #6]
         break;
 800409e:	e04d      	b.n	800413c <ESC_state+0x464>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 80040a0:	2314      	movs	r3, #20
 80040a2:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 80040a4:	2011      	movs	r0, #17
 80040a6:	f7fe fe05 	bl	8002cb4 <ESC_ALerror>
         break;
 80040aa:	e047      	b.n	800413c <ESC_state+0x464>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fcc8 	bl	8003a44 <ESC_startoutput>
 80040b4:	4603      	mov	r3, r0
 80040b6:	71bb      	strb	r3, [r7, #6]
         break;
 80040b8:	e040      	b.n	800413c <ESC_state+0x464>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 80040ba:	2314      	movs	r3, #20
 80040bc:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 80040be:	2011      	movs	r0, #17
 80040c0:	f7fe fdf8 	bl	8002cb4 <ESC_ALerror>
         ESC_stopoutput ();
 80040c4:	f7ff fce2 	bl	8003a8c <ESC_stopoutput>
         /* If no outputs present, we need to flag error using SM3 */
         if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 80040c8:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <ESC_state+0x4d0>)
 80040ca:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d133      	bne.n	800413a <ESC_state+0x462>
 80040d2:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <ESC_state+0x4d0>)
 80040d4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02e      	beq.n	800413a <ESC_state+0x462>
         {
            ESC_SMdisable (3);
 80040dc:	2003      	movs	r0, #3
 80040de:	f7fe feef 	bl	8002ec0 <ESC_SMdisable>
         }
         break;
 80040e2:	e02a      	b.n	800413a <ESC_state+0x462>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 80040e4:	2304      	movs	r3, #4
 80040e6:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 80040e8:	f7ff fcd0 	bl	8003a8c <ESC_stopoutput>
         break;
 80040ec:	e026      	b.n	800413c <ESC_state+0x464>
      }
      default:
      {
         if (an == ESCop)
 80040ee:	79bb      	ldrb	r3, [r7, #6]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d110      	bne.n	8004116 <ESC_state+0x43e>
         {
            ESC_stopoutput ();
 80040f4:	f7ff fcca 	bl	8003a8c <ESC_stopoutput>
            /* If no outputs present, we need to flag error using SM3 */
            if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <ESC_state+0x4d0>)
 80040fa:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <ESC_state+0x43a>
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <ESC_state+0x4d0>)
 8004104:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <ESC_state+0x43a>
            {
               ESC_SMdisable (3);
 800410c:	2003      	movs	r0, #3
 800410e:	f7fe fed7 	bl	8002ec0 <ESC_SMdisable>
            }
            an = ESCsafeop;
 8004112:	2304      	movs	r3, #4
 8004114:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 8004116:	797b      	ldrb	r3, [r7, #5]
 8004118:	2b04      	cmp	r3, #4
 800411a:	d101      	bne.n	8004120 <ESC_state+0x448>
         {
            ESC_stopinput ();
 800411c:	f7ff fc70 	bl	8003a00 <ESC_stopinput>
         }
         an |= ESCerror;
 8004120:	79bb      	ldrb	r3, [r7, #6]
 8004122:	f043 0310 	orr.w	r3, r3, #16
 8004126:	b2db      	uxtb	r3, r3
 8004128:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 800412a:	2012      	movs	r0, #18
 800412c:	f7fe fdc2 	bl	8002cb4 <ESC_ALerror>
         break;
 8004130:	e004      	b.n	800413c <ESC_state+0x464>
         break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <ESC_state+0x464>
         break;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <ESC_state+0x464>
         break;
 800413a:	bf00      	nop
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <ESC_state+0x4d0>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <ESC_state+0x478>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <ESC_state+0x4d0>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	1db9      	adds	r1, r7, #6
 800414a:	1d7a      	adds	r2, r7, #5
 800414c:	4610      	mov	r0, r2
 800414e:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 8004150:	79bb      	ldrb	r3, [r7, #6]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <ESC_state+0x492>
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <ESC_state+0x4d0>)
 800415c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <ESC_state+0x492>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 8004164:	2000      	movs	r0, #0
 8004166:	f7fe fda5 	bl	8002cb4 <ESC_ALerror>
   }

   if (ESC_check_id_request (ESCvar.ALcontrol, &an))
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <ESC_state+0x4d0>)
 800416c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8004170:	1dba      	adds	r2, r7, #6
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fd55 	bl	8003c24 <ESC_check_id_request>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <ESC_state+0x4b8>
   {
      an |= ESC_load_device_id ();
 8004180:	f7ff fd82 	bl	8003c88 <ESC_load_device_id>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	79bb      	ldrb	r3, [r7, #6]
 800418a:	4313      	orrs	r3, r2
 800418c:	b2db      	uxtb	r3, r3
 800418e:	71bb      	strb	r3, [r7, #6]
   }

   ESC_ALstatus (an);
 8004190:	79bb      	ldrb	r3, [r7, #6]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fda8 	bl	8002ce8 <ESC_ALstatus>
 8004198:	e002      	b.n	80041a0 <ESC_state+0x4c8>
      return;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <ESC_state+0x4c8>
      return;
 800419e:	bf00      	nop

#ifdef ESC_DEBUG
   DPRINT ("state %s\n", ESC_state_to_string (an & 0xF));
#endif
}
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200014a8 	.word	0x200014a8

080041ac <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4a36      	ldr	r2, [pc, #216]	; (8004294 <ESC_config+0xe8>)
 80041ba:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4a34      	ldr	r2, [pc, #208]	; (8004294 <ESC_config+0xe8>)
 80041c2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc

   ESCvar.mb[0] = mb0;
 80041c6:	4b33      	ldr	r3, [pc, #204]	; (8004294 <ESC_config+0xe8>)
 80041c8:	4a33      	ldr	r2, [pc, #204]	; (8004298 <ESC_config+0xec>)
 80041ca:	3304      	adds	r3, #4
 80041cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041d0:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mb[1] = mb1;
 80041d4:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <ESC_config+0xe8>)
 80041d6:	4a31      	ldr	r2, [pc, #196]	; (800429c <ESC_config+0xf0>)
 80041d8:	330c      	adds	r3, #12
 80041da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041de:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 80041e2:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <ESC_config+0xe8>)
 80041e4:	4a2e      	ldr	r2, [pc, #184]	; (80042a0 <ESC_config+0xf4>)
 80041e6:	3314      	adds	r3, #20
 80041e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041ec:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 80041f0:	4b28      	ldr	r3, [pc, #160]	; (8004294 <ESC_config+0xe8>)
 80041f2:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <ESC_config+0xf8>)
 80041f4:	331c      	adds	r3, #28
 80041f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041fa:	e883 0003 	stmia.w	r3, {r0, r1}

   ESCvar.skip_default_initialization = cfg->skip_default_initialization;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7b1a      	ldrb	r2, [r3, #12]
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <ESC_config+0xe8>)
 8004204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	4a21      	ldr	r2, [pc, #132]	; (8004294 <ESC_config+0xe8>)
 800420e:	6293      	str	r3, [r2, #40]	; 0x28
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <ESC_config+0xe8>)
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <ESC_config+0xe8>)
 800421e:	6313      	str	r3, [r2, #48]	; 0x30
   ESCvar.application_hook = cfg->application_hook;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <ESC_config+0xe8>)
 8004226:	6353      	str	r3, [r2, #52]	; 0x34
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4a19      	ldr	r2, [pc, #100]	; (8004294 <ESC_config+0xe8>)
 800422e:	6393      	str	r3, [r2, #56]	; 0x38
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	4a17      	ldr	r2, [pc, #92]	; (8004294 <ESC_config+0xe8>)
 8004236:	63d3      	str	r3, [r2, #60]	; 0x3c
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <ESC_config+0xe8>)
 800423e:	6413      	str	r3, [r2, #64]	; 0x40
   ESCvar.pre_object_upload_hook = cfg->pre_object_upload_hook;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	4a13      	ldr	r2, [pc, #76]	; (8004294 <ESC_config+0xe8>)
 8004246:	6453      	str	r3, [r2, #68]	; 0x44
   ESCvar.post_object_upload_hook = cfg->post_object_upload_hook;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	4a11      	ldr	r2, [pc, #68]	; (8004294 <ESC_config+0xe8>)
 800424e:	6493      	str	r3, [r2, #72]	; 0x48
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <ESC_config+0xe8>)
 8004256:	64d3      	str	r3, [r2, #76]	; 0x4c
   ESCvar.txpdo_override = cfg->txpdo_override;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <ESC_config+0xe8>)
 800425e:	6513      	str	r3, [r2, #80]	; 0x50
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <ESC_config+0xe8>)
 8004266:	6553      	str	r3, [r2, #84]	; 0x54
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	4a09      	ldr	r2, [pc, #36]	; (8004294 <ESC_config+0xe8>)
 800426e:	6593      	str	r3, [r2, #88]	; 0x58
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <ESC_config+0xe8>)
 8004276:	65d3      	str	r3, [r2, #92]	; 0x5c
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	4a05      	ldr	r2, [pc, #20]	; (8004294 <ESC_config+0xe8>)
 800427e:	6613      	str	r3, [r2, #96]	; 0x60
   ESCvar.get_device_id = cfg->get_device_id;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	4a03      	ldr	r2, [pc, #12]	; (8004294 <ESC_config+0xe8>)
 8004286:	6653      	str	r3, [r2, #100]	; 0x64
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	200014a8 	.word	0x200014a8
 8004298:	20000a04 	.word	0x20000a04
 800429c:	20000a0c 	.word	0x20000a0c
 80042a0:	20000a14 	.word	0x20000a14
 80042a4:	20000a1c 	.word	0x20000a1c

080042a8 <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int32_t nidx, uint8_t subindex)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
   const _objd *objd;
   int16_t n = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 80042b8:	4a29      	ldr	r2, [pc, #164]	; (8004360 <SDO_findsubindex+0xb8>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	4413      	add	r3, r2
 80042c0:	330c      	adds	r3, #12
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 80042c6:	4a26      	ldr	r2, [pc, #152]	; (8004360 <SDO_findsubindex+0xb8>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	4413      	add	r3, r2
 80042ce:	3304      	adds	r3, #4
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	73fb      	strb	r3, [r7, #15]

   /* Since most objects contain all subindexes (i.e. are not sparse),
    * check the most likely scenario first
    */
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d815      	bhi.n	8004308 <SDO_findsubindex+0x60>
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	461a      	mov	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4413      	add	r3, r2
 80042ec:	881a      	ldrh	r2, [r3, #0]
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d108      	bne.n	8004308 <SDO_findsubindex+0x60>
   {
      return subindex;
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	b21b      	sxth	r3, r3
 80042fa:	e02b      	b.n	8004354 <SDO_findsubindex+0xac>
   }

   while (((objd + n)->subindex < subindex) && (n < maxsub))
   {
      n++;
 80042fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004300:	b29b      	uxth	r3, r3
 8004302:	3301      	adds	r3, #1
 8004304:	b29b      	uxth	r3, r3
 8004306:	82fb      	strh	r3, [r7, #22]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 8004308:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	461a      	mov	r2, r3
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4413      	add	r3, r2
 800431a:	881a      	ldrh	r2, [r3, #0]
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	b29b      	uxth	r3, r3
 8004320:	429a      	cmp	r2, r3
 8004322:	d204      	bcs.n	800432e <SDO_findsubindex+0x86>
 8004324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	429a      	cmp	r2, r3
 800432c:	dbe6      	blt.n	80042fc <SDO_findsubindex+0x54>
   }
   if ((objd + n)->subindex != subindex)
 800432e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	461a      	mov	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	b29b      	uxth	r3, r3
 8004346:	429a      	cmp	r2, r3
 8004348:	d002      	beq.n	8004350 <SDO_findsubindex+0xa8>
   {
      return -1;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800434e:	e001      	b.n	8004354 <SDO_findsubindex+0xac>
   }
   return n;
 8004350:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	08012268 	.word	0x08012268

08004364 <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8004372:	e002      	b.n	800437a <SDO_findobject+0x16>
   {
      n++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <SDO_findobject+0x4c>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	429a      	cmp	r2, r3
 8004388:	d8f4      	bhi.n	8004374 <SDO_findobject+0x10>
   }
   if (SDOobjects[n].index != index)
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <SDO_findobject+0x4c>)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	429a      	cmp	r2, r3
 8004398:	d002      	beq.n	80043a0 <SDO_findobject+0x3c>
   {
      return -1;
 800439a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800439e:	e000      	b.n	80043a2 <SDO_findobject+0x3e>
   }
   return n;
 80043a0:	68fb      	ldr	r3, [r7, #12]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	08012268 	.word	0x08012268

080043b4 <sizeOfPDO>:
 * @param[out] max_mappings = max number of mapped objects in SM
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index, int * nmappings, _SMmap * mappings,
                    int max_mappings)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b090      	sub	sp, #64	; 0x40
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4603      	mov	r3, r0
 80043c2:	81fb      	strh	r3, [r7, #14]
   uint32_t offset = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   uint16_t hobj;
   uint8_t si, sic, c;
   int32_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;
   int mapIx = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	633b      	str	r3, [r7, #48]	; 0x30

   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	f641 4212 	movw	r2, #7186	; 0x1c12
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d006      	beq.n	80043e4 <sizeOfPDO+0x30>
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	f641 4213 	movw	r2, #7187	; 0x1c13
 80043dc:	4293      	cmp	r3, r2
 80043de:	d001      	beq.n	80043e4 <sizeOfPDO+0x30>
   {
      return 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e134      	b.n	800464e <sizeOfPDO+0x29a>
   }

   nidx = SDO_findobject (index);
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ffbc 	bl	8004364 <SDO_findobject>
 80043ec:	6378      	str	r0, [r7, #52]	; 0x34
   if(nidx < 0)
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da01      	bge.n	80043f8 <sizeOfPDO+0x44>
   {
      return 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e12a      	b.n	800464e <sizeOfPDO+0x29a>
   }

   objd1c1x = SDOobjects[nidx].objdesc;
 80043f8:	4a97      	ldr	r2, [pc, #604]	; (8004658 <sizeOfPDO+0x2a4>)
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4413      	add	r3, r2
 8004400:	330c      	adds	r3, #12
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28

   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <sizeOfPDO+0x62>
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	e002      	b.n	800441c <sizeOfPDO+0x68>
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (si)
 8004420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8104 	beq.w	8004632 <sizeOfPDO+0x27e>
   {
      for (sic = 1; sic <= si; sic++)
 800442a:	2301      	movs	r3, #1
 800442c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004430:	e0f8      	b.n	8004624 <sizeOfPDO+0x270>
      {
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 8004432:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	461a      	mov	r2, r3
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	4413      	add	r3, r2
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <sizeOfPDO+0xae>
 800444a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	461a      	mov	r2, r3
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	4413      	add	r3, r2
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	e00a      	b.n	8004478 <sizeOfPDO+0xc4>
 8004462:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	461a      	mov	r2, r3
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	4413      	add	r3, r2
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	b29b      	uxth	r3, r3
 8004478:	84bb      	strh	r3, [r7, #36]	; 0x24
         nidx = SDO_findobject (hobj);
 800447a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff71 	bl	8004364 <SDO_findobject>
 8004482:	6378      	str	r0, [r7, #52]	; 0x34
         if (nidx >= 0)
 8004484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	f2c0 80c7 	blt.w	800461a <sizeOfPDO+0x266>
         {
            uint8_t maxsub;

            objd = SDOobjects[nidx].objdesc;
 800448c:	4a72      	ldr	r2, [pc, #456]	; (8004658 <sizeOfPDO+0x2a4>)
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	4413      	add	r3, r2
 8004494:	330c      	adds	r3, #12
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	623b      	str	r3, [r7, #32]
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <sizeOfPDO+0xf6>
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	e002      	b.n	80044b0 <sizeOfPDO+0xfc>
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	77fb      	strb	r3, [r7, #31]

            for (c = 1; c <= maxsub; c++)
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80044b8:	e0a9      	b.n	800460e <sizeOfPDO+0x25a>
            {
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 80044ba:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	461a      	mov	r2, r3
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	4413      	add	r3, r2
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <sizeOfPDO+0x136>
 80044d2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	461a      	mov	r2, r3
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	4413      	add	r3, r2
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	e009      	b.n	80044fe <sizeOfPDO+0x14a>
 80044ea:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	461a      	mov	r2, r3
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	4413      	add	r3, r2
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	61bb      	str	r3, [r7, #24]
               uint8_t bitlength = value & 0xFF;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	75fb      	strb	r3, [r7, #23]

               if (max_mappings > 0)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	dd78      	ble.n	80045fc <sizeOfPDO+0x248>
               {
                  uint16_t index = (uint16_t)(value >> 16);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	82bb      	strh	r3, [r7, #20]
                  uint8_t subindex = (value >> 8) & 0xFF;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	74fb      	strb	r3, [r7, #19]
                  const _objd * mapping;

                  if (mapIx == max_mappings)
 8004516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d105      	bne.n	800452a <sizeOfPDO+0x176>
                  {
                     /* Too many mapped objects */
                     *nmappings = -1;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004524:	601a      	str	r2, [r3, #0]
                     return 0;
 8004526:	2300      	movs	r3, #0
 8004528:	e091      	b.n	800464e <sizeOfPDO+0x29a>
                  }

                  DPRINT ("%04x:%02x @ %d\n", index, subindex, offset);

                  if (index == 0 && subindex == 0)
 800452a:	8abb      	ldrh	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <sizeOfPDO+0x188>
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <sizeOfPDO+0x188>
                  {
                     /* Padding element */
                     mapping = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453a:	e02d      	b.n	8004598 <sizeOfPDO+0x1e4>
                  }
                  else
                  {
                     nidx = SDO_findobject (index);
 800453c:	8abb      	ldrh	r3, [r7, #20]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ff10 	bl	8004364 <SDO_findobject>
 8004544:	6378      	str	r0, [r7, #52]	; 0x34
                     if (nidx >= 0)
 8004546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004548:	2b00      	cmp	r3, #0
 800454a:	db1f      	blt.n	800458c <sizeOfPDO+0x1d8>
                     {
                        int16_t nsub;

                        nsub = SDO_findsubindex (nidx, subindex);
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	4619      	mov	r1, r3
 8004550:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004552:	f7ff fea9 	bl	80042a8 <SDO_findsubindex>
 8004556:	4603      	mov	r3, r0
 8004558:	823b      	strh	r3, [r7, #16]
                        if (nsub < 0)
 800455a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	da05      	bge.n	800456e <sizeOfPDO+0x1ba>
                        {
                           /* Mapped subindex does not exist */
                           *nmappings = -1;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004568:	601a      	str	r2, [r3, #0]
                           return 0;
 800456a:	2300      	movs	r3, #0
 800456c:	e06f      	b.n	800464e <sizeOfPDO+0x29a>
                        }

                        mapping = &SDOobjects[nidx].objdesc[nsub];
 800456e:	4a3a      	ldr	r2, [pc, #232]	; (8004658 <sizeOfPDO+0x2a4>)
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	4413      	add	r3, r2
 8004576:	330c      	adds	r3, #12
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458a:	e005      	b.n	8004598 <sizeOfPDO+0x1e4>
                     }
                     else
                     {
                        /* Mapped index does not exist */
                        *nmappings = -1;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004592:	601a      	str	r2, [r3, #0]
                        return 0;
 8004594:	2300      	movs	r3, #0
 8004596:	e05a      	b.n	800464e <sizeOfPDO+0x29a>
                     }
                  }

                  mappings[mapIx].obj = mapping;
 8004598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4413      	add	r3, r2
 80045a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045aa:	601a      	str	r2, [r3, #0]
                  /* Save object list reference */
                  if(mapping != NULL)
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <sizeOfPDO+0x21a>
                  {
                     mappings[mapIx].objectlistitem = &SDOobjects[nidx];
 80045b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045c4:	0112      	lsls	r2, r2, #4
 80045c6:	4924      	ldr	r1, [pc, #144]	; (8004658 <sizeOfPDO+0x2a4>)
 80045c8:	440a      	add	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	e009      	b.n	80045e2 <sizeOfPDO+0x22e>
                  }
                  else
                  {
                     mappings[mapIx].objectlistitem = NULL;
 80045ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	605a      	str	r2, [r3, #4]
                  }
                  mappings[mapIx++].offset = offset;
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	633a      	str	r2, [r7, #48]	; 0x30
 80045e8:	461a      	mov	r2, r3
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	461a      	mov	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045fa:	609a      	str	r2, [r3, #8]
               }

               offset += bitlength;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004600:	4413      	add	r3, r2
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (c = 1; c <= maxsub; c++)
 8004604:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004608:	3301      	adds	r3, #1
 800460a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800460e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	429a      	cmp	r2, r3
 8004616:	f67f af50 	bls.w	80044ba <sizeOfPDO+0x106>
      for (sic = 1; sic <= si; sic++)
 800461a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800461e:	3301      	adds	r3, #1
 8004620:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004624:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800462c:	429a      	cmp	r2, r3
 800462e:	f67f af00 	bls.w	8004432 <sizeOfPDO+0x7e>
            }
         }
      }
   }

   if (max_mappings > 0)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	dd03      	ble.n	8004640 <sizeOfPDO+0x28c>
   {
      *nmappings = mapIx;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e002      	b.n	8004646 <sizeOfPDO+0x292>
   }
   else
   {
      *nmappings = 0;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
   }

   return BITS2BYTES (offset) & 0xFFFF;
 8004646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004648:	3307      	adds	r3, #7
 800464a:	08db      	lsrs	r3, r3, #3
 800464c:	b29b      	uxth	r3, r3
}
 800464e:	4618      	mov	r0, r3
 8004650:	3740      	adds	r7, #64	; 0x40
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	08012268 	.word	0x08012268

0800465c <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
static void copy2mbx (void *source, void *dest, size_t size)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
   memcpy (dest, source, size);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	68b8      	ldr	r0, [r7, #8]
 800466e:	f00b fdc0 	bl	80101f2 <memcpy>
}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
static void SDO_abort (uint8_t reusembx, uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	460b      	mov	r3, r1
 800468a:	80bb      	strh	r3, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	71bb      	strb	r3, [r7, #6]
   uint8_t MBXout;
   _COEsdo *coeres;
   if (reusembx)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <SDO_abort+0x20>
      MBXout = reusembx;
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	e003      	b.n	80046a4 <SDO_abort+0x28>
   else
      MBXout = ESC_claimbuffer ();
 800469c:	f7fe fe7e 	bl	800339c <ESC_claimbuffer>
 80046a0:	4603      	mov	r3, r0
 80046a2:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d025      	beq.n	80046f6 <SDO_abort+0x7a>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	4a14      	ldr	r2, [pc, #80]	; (8004700 <SDO_abort+0x84>)
 80046ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	4a13      	ldr	r2, [pc, #76]	; (8004704 <SDO_abort+0x88>)
 80046b6:	4413      	add	r3, r2
 80046b8:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	220a      	movs	r2, #10
 80046be:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	7953      	ldrb	r3, [r2, #5]
 80046c4:	2103      	movs	r1, #3
 80046c6:	f361 0303 	bfi	r3, r1, #0, #4
 80046ca:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046d2:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	88ba      	ldrh	r2, [r7, #4]
 80046d8:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	79ba      	ldrb	r2, [r7, #6]
 80046e0:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	4a05      	ldr	r2, [pc, #20]	; (8004708 <SDO_abort+0x8c>)
 80046f2:	2103      	movs	r1, #3
 80046f4:	54d1      	strb	r1, [r2, r3]
   }
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	200014a8 	.word	0x200014a8
 8004704:	20000e2c 	.word	0x20000e2c
 8004708:	2000142c 	.word	0x2000142c

0800470c <set_state_idle>:

static void set_state_idle (uint8_t reusembx,
                           uint16_t index,
                           uint8_t subindex,
                           uint32_t abortcode)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4603      	mov	r3, r0
 8004716:	71fb      	strb	r3, [r7, #7]
 8004718:	460b      	mov	r3, r1
 800471a:	80bb      	strh	r3, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	71bb      	strb	r3, [r7, #6]
   if (abortcode != 0)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <set_state_idle+0x26>
   {
      SDO_abort (reusembx, index, subindex, abortcode);
 8004726:	79ba      	ldrb	r2, [r7, #6]
 8004728:	88b9      	ldrh	r1, [r7, #4]
 800472a:	79f8      	ldrb	r0, [r7, #7]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f7ff ffa5 	bl	800467c <SDO_abort>
   }

   MBXcontrol[0].state = MBXstate_idle;
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <set_state_idle+0x3c>)
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <set_state_idle+0x40>)
 800473a:	2200      	movs	r2, #0
 800473c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	2000142c 	.word	0x2000142c
 800474c:	200014a8 	.word	0x200014a8

08004750 <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
static void SDO_upload (void)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b08f      	sub	sp, #60	; 0x3c
 8004754:	af02      	add	r7, sp, #8
   int32_t nidx;
   int32_t nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   uint32_t abort = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 800475a:	4b8c      	ldr	r3, [pc, #560]	; (800498c <SDO_upload+0x23c>)
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
   index = etohs (coesdo->index);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8004766:	847b      	strh	r3, [r7, #34]	; 0x22
   subindex = coesdo->subindex;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	7adb      	ldrb	r3, [r3, #11]
 800476c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   nidx = SDO_findobject (index);
 8004770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fdf6 	bl	8004364 <SDO_findobject>
 8004778:	61f8      	str	r0, [r7, #28]
   if (nidx >= 0)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f2c0 81b3 	blt.w	8004ae8 <SDO_upload+0x398>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8004782:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004786:	4619      	mov	r1, r3
 8004788:	69f8      	ldr	r0, [r7, #28]
 800478a:	f7ff fd8d 	bl	80042a8 <SDO_findsubindex>
 800478e:	4603      	mov	r3, r0
 8004790:	61bb      	str	r3, [r7, #24]
      if (nsub >= 0)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f2c0 819f 	blt.w	8004ad8 <SDO_upload+0x388>
      {
         objd = SDOobjects[nidx].objdesc;
 800479a:	4a7d      	ldr	r2, [pc, #500]	; (8004990 <SDO_upload+0x240>)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	4413      	add	r3, r2
 80047a2:	330c      	adds	r3, #12
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	617b      	str	r3, [r7, #20]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	461a      	mov	r2, r3
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	4413      	add	r3, r2
 80047b8:	88db      	ldrh	r3, [r3, #6]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c0:	74fb      	strb	r3, [r7, #19]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 80047c2:	4b74      	ldr	r3, [pc, #464]	; (8004994 <SDO_upload+0x244>)
 80047c4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	74bb      	strb	r3, [r7, #18]
         if (!READ_ACCESS(access, state))
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <SDO_upload+0x90>
 80047da:	7cbb      	ldrb	r3, [r7, #18]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d017      	beq.n	8004810 <SDO_upload+0xc0>
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <SDO_upload+0xa0>
 80047ea:	7cbb      	ldrb	r3, [r7, #18]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d00f      	beq.n	8004810 <SDO_upload+0xc0>
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <SDO_upload+0xb0>
 80047fa:	7cbb      	ldrb	r3, [r7, #18]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d007      	beq.n	8004810 <SDO_upload+0xc0>
         {
            set_state_idle (0, index, subindex, ABORT_WRITEONLY);
 8004800:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004804:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004806:	4b64      	ldr	r3, [pc, #400]	; (8004998 <SDO_upload+0x248>)
 8004808:	2000      	movs	r0, #0
 800480a:	f7ff ff7f 	bl	800470c <set_state_idle>
            return;
 800480e:	e179      	b.n	8004b04 <SDO_upload+0x3b4>
         }
         MBXout = ESC_claimbuffer ();
 8004810:	f7fe fdc4 	bl	800339c <ESC_claimbuffer>
 8004814:	4603      	mov	r3, r0
 8004816:	747b      	strb	r3, [r7, #17]
         if (MBXout)
 8004818:	7c7b      	ldrb	r3, [r7, #17]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 816b 	beq.w	8004af6 <SDO_upload+0x3a6>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8004820:	7c7b      	ldrb	r3, [r7, #17]
 8004822:	4a5c      	ldr	r2, [pc, #368]	; (8004994 <SDO_upload+0x244>)
 8004824:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	4a58      	ldr	r2, [pc, #352]	; (800498c <SDO_upload+0x23c>)
 800482c:	4413      	add	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	220a      	movs	r2, #10
 8004834:	801a      	strh	r2, [r3, #0]
            coeres->mbxheader.mbxtype = MBXCOE;
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	7953      	ldrb	r3, [r2, #5]
 800483a:	2103      	movs	r1, #3
 800483c:	f361 0303 	bfi	r3, r1, #0, #4
 8004840:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004848:	80da      	strh	r2, [r3, #6]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	461a      	mov	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4413      	add	r3, r2
 800485a:	889b      	ldrh	r3, [r3, #4]
 800485c:	607b      	str	r3, [r7, #4]
            /* expedited bits used calculation */
            dss = 0x0c;
 800485e:	230c      	movs	r3, #12
 8004860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (size > 8)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d902      	bls.n	8004870 <SDO_upload+0x120>
            {
               dss = 0x08;
 800486a:	2308      	movs	r3, #8
 800486c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if (size > 16)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b10      	cmp	r3, #16
 8004874:	d902      	bls.n	800487c <SDO_upload+0x12c>
            {
               dss = 0x04;
 8004876:	2304      	movs	r3, #4
 8004878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if (size > 24)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b18      	cmp	r3, #24
 8004880:	d902      	bls.n	8004888 <SDO_upload+0x138>
            {
               dss = 0x00;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            coeres->index = htoes (index);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800488c:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004896:	72da      	strb	r2, [r3, #11]
            coeres->command = COE_COMMAND_UPLOADRESPONSE |
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2241      	movs	r2, #65	; 0x41
 800489c:	721a      	strb	r2, [r3, #8]
               COE_SIZE_INDICATOR;
            /* convert bits to bytes */
            size = BITS2BYTES(size);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3307      	adds	r3, #7
 80048a2:	08db      	lsrs	r3, r3, #3
 80048a4:	607b      	str	r3, [r7, #4]
            if (size <= 4)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d877      	bhi.n	800499c <SDO_upload+0x24c>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	7a1a      	ldrb	r2, [r3, #8]
 80048b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048b4:	4313      	orrs	r3, r2
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	721a      	strb	r2, [r3, #8]
               void *dataptr = ((objd + nsub)->data) ?
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	461a      	mov	r2, r3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	4413      	add	r3, r2
 80048d2:	691b      	ldr	r3, [r3, #16]
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <SDO_upload+0x19c>
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	461a      	mov	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4413      	add	r3, r2
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	e008      	b.n	80048fe <SDO_upload+0x1ae>
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	461a      	mov	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4413      	add	r3, r2
 80048fc:	330c      	adds	r3, #12
               void *dataptr = ((objd + nsub)->data) ?
 80048fe:	60bb      	str	r3, [r7, #8]
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     dataptr, (size_t *)&size, (objd + nsub)->flags);
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	461a      	mov	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 8004910:	88db      	ldrh	r3, [r3, #6]
 8004912:	1d3a      	adds	r2, r7, #4
 8004914:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8004918:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	f7fe f818 	bl	8002954 <ESC_upload_pre_objecthandler>
 8004924:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort == 0)
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	d126      	bne.n	800497a <SDO_upload+0x22a>
               {
                  if ((objd + nsub)->data == NULL)
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	461a      	mov	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <SDO_upload+0x20a>
                  {
                     /* use constant value */
                     coeres->size = htoel ((objd + nsub)->value);
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	461a      	mov	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4413      	add	r3, r2
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	60da      	str	r2, [r3, #12]
 8004958:	e096      	b.n	8004a88 <SDO_upload+0x338>
                  }
                  else
                  {
                     /* use dynamic data */
                     copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	461a      	mov	r2, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	6918      	ldr	r0, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	330c      	adds	r3, #12
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4619      	mov	r1, r3
 8004974:	f7ff fe72 	bl	800465c <copy2mbx>
 8004978:	e086      	b.n	8004a88 <SDO_upload+0x338>
                  }
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 800497a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800497e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004980:	7c78      	ldrb	r0, [r7, #17]
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	f7ff fec2 	bl	800470c <set_state_idle>
                  return;
 8004988:	e0bc      	b.n	8004b04 <SDO_upload+0x3b4>
 800498a:	bf00      	nop
 800498c:	20000e2c 	.word	0x20000e2c
 8004990:	08012268 	.word	0x08012268
 8004994:	200014a8 	.word	0x200014a8
 8004998:	06010001 	.word	0x06010001
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	461a      	mov	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 80049ac:	691c      	ldr	r4, [r3, #16]
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	461a      	mov	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 80049be:	88db      	ldrh	r3, [r3, #6]
 80049c0:	1d3a      	adds	r2, r7, #4
 80049c2:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80049c6:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	4622      	mov	r2, r4
 80049ce:	f7fd ffc1 	bl	8002954 <ESC_upload_pre_objecthandler>
 80049d2:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort == 0)
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d14e      	bne.n	8004a78 <SDO_upload+0x328>
               {
                  /* set total size in bytes */
                  ESCvar.frags = size;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4b      	ldr	r2, [pc, #300]	; (8004b0c <SDO_upload+0x3bc>)
 80049de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                  coeres->size = htoel (size);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	60da      	str	r2, [r3, #12]
                  if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f103 020a 	add.w	r2, r3, #10
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <SDO_upload+0x3bc>)
 80049f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f2:	3b06      	subs	r3, #6
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d924      	bls.n	8004a42 <SDO_upload+0x2f2>
                  {
                     /* segmented transfer needed */
                     /* limit to mailbox size */
                     size = ESC_MBXDSIZE - COE_HEADERSIZE;
 80049f8:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <SDO_upload+0x3bc>)
 80049fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fc:	3b10      	subs	r3, #16
 80049fe:	607b      	str	r3, [r7, #4]
                     /* number of bytes done */
                     ESCvar.fragsleft = size;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a42      	ldr	r2, [pc, #264]	; (8004b0c <SDO_upload+0x3bc>)
 8004a04:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
                     /* signal segmented transfer */
                     ESCvar.segmented = MBXSEU;
 8004a08:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <SDO_upload+0x3bc>)
 8004a0a:	2240      	movs	r2, #64	; 0x40
 8004a0c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                     ESCvar.data = (objd + nsub)->data;
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4413      	add	r3, r2
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	4a3a      	ldr	r2, [pc, #232]	; (8004b0c <SDO_upload+0x3bc>)
 8004a24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                     ESCvar.flags = (objd + nsub)->flags;
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	461a      	mov	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4413      	add	r3, r2
 8004a38:	88da      	ldrh	r2, [r3, #6]
 8004a3a:	4b34      	ldr	r3, [pc, #208]	; (8004b0c <SDO_upload+0x3bc>)
 8004a3c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8004a40:	e003      	b.n	8004a4a <SDO_upload+0x2fa>
                  }
                  else
                  {
                     ESCvar.segmented = 0;
 8004a42:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <SDO_upload+0x3bc>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                  }
                  coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	330a      	adds	r3, #10
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	801a      	strh	r2, [r3, #0]

                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	461a      	mov	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4413      	add	r3, r2
 8004a66:	6918      	ldr	r0, [r3, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4619      	mov	r1, r3
 8004a72:	f7ff fdf3 	bl	800465c <copy2mbx>
 8004a76:	e007      	b.n	8004a88 <SDO_upload+0x338>
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 8004a78:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004a7c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004a7e:	7c78      	ldrb	r0, [r7, #17]
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	f7ff fe43 	bl	800470c <set_state_idle>
                  return;
 8004a86:	e03d      	b.n	8004b04 <SDO_upload+0x3b4>
               }
            }
            if ((abort == 0) && (ESCvar.segmented == 0))
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11f      	bne.n	8004ace <SDO_upload+0x37e>
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <SDO_upload+0x3bc>)
 8004a90:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11a      	bne.n	8004ace <SDO_upload+0x37e>
            {
               abort = ESC_upload_post_objecthandler (index, subindex,
                                                      (objd + nsub)->flags);
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4413      	add	r3, r2
               abort = ESC_upload_post_objecthandler (index, subindex,
 8004aa8:	88da      	ldrh	r2, [r3, #6]
 8004aaa:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8004aae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fd ff6f 	bl	8002994 <ESC_upload_post_objecthandler>
 8004ab6:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort != 0)
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <SDO_upload+0x37e>
               {
                  set_state_idle (MBXout, index, subindex, abort);
 8004abe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004ac2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004ac4:	7c78      	ldrb	r0, [r7, #17]
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	f7ff fe20 	bl	800470c <set_state_idle>
                  return;
 8004acc:	e01a      	b.n	8004b04 <SDO_upload+0x3b4>
               }
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8004ace:	7c7b      	ldrb	r3, [r7, #17]
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <SDO_upload+0x3c0>)
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	54d1      	strb	r1, [r2, r3]
 8004ad6:	e00e      	b.n	8004af6 <SDO_upload+0x3a6>
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 8004ad8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004adc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <SDO_upload+0x3c4>)
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7ff fdcb 	bl	800467c <SDO_abort>
 8004ae6:	e006      	b.n	8004af6 <SDO_upload+0x3a6>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 8004ae8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004aec:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <SDO_upload+0x3c8>)
 8004af0:	2000      	movs	r0, #0
 8004af2:	f7ff fdc3 	bl	800467c <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <SDO_upload+0x3c0>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <SDO_upload+0x3bc>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8004b04:	3734      	adds	r7, #52	; 0x34
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200014a8 	.word	0x200014a8
 8004b10:	2000142c 	.word	0x2000142c
 8004b14:	06090011 	.word	0x06090011
 8004b18:	06020000 	.word	0x06020000

08004b1c <complete_access_get_variables>:

static uint32_t complete_access_get_variables(_COEsdo *coesdo, uint16_t *index,
                                              uint8_t *subindex, int32_t *nidx,
                                              int16_t *nsub)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
   *index = etohs (coesdo->index);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	801a      	strh	r2, [r3, #0]
   *subindex = coesdo->subindex;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	7ada      	ldrb	r2, [r3, #11]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	701a      	strb	r2, [r3, #0]

   /* A Complete Access must start with Subindex 0 or Subindex 1 */
   if (*subindex > 1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d901      	bls.n	8004b4a <complete_access_get_variables+0x2e>
   {
      return ABORT_UNSUPPORTED;
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <complete_access_get_variables+0x7c>)
 8004b48:	e021      	b.n	8004b8e <complete_access_get_variables+0x72>
   }

   *nidx = SDO_findobject (*index);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fc08 	bl	8004364 <SDO_findobject>
 8004b54:	4602      	mov	r2, r0
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	601a      	str	r2, [r3, #0]
   if (*nidx < 0)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da01      	bge.n	8004b66 <complete_access_get_variables+0x4a>
   {
      return ABORT_NOOBJECT;
 8004b62:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <complete_access_get_variables+0x80>)
 8004b64:	e013      	b.n	8004b8e <complete_access_get_variables+0x72>
   }

   *nsub = SDO_findsubindex (*nidx, *subindex);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7ff fb99 	bl	80042a8 <SDO_findsubindex>
 8004b76:	4603      	mov	r3, r0
 8004b78:	461a      	mov	r2, r3
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	801a      	strh	r2, [r3, #0]
   if (*nsub < 0)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	da01      	bge.n	8004b8c <complete_access_get_variables+0x70>
   {
      return ABORT_NOSUBINDEX;
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <complete_access_get_variables+0x84>)
 8004b8a:	e000      	b.n	8004b8e <complete_access_get_variables+0x72>
   }

   return 0;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	06010000 	.word	0x06010000
 8004b9c:	06020000 	.word	0x06020000
 8004ba0:	06090011 	.word	0x06090011

08004ba4 <complete_access_subindex_loop>:
                                              int32_t nidx,
                                              int16_t nsub,
                                              uint8_t *mbxdata,
                                              load_t load_type,
                                              uint32_t max_bytes)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
   /* Objects with dynamic entries cannot be accessed with Complete Access */
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	885b      	ldrh	r3, [r3, #2]
 8004bb8:	2b09      	cmp	r3, #9
 8004bba:	d007      	beq.n	8004bcc <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	885b      	ldrh	r3, [r3, #2]
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 8004bc0:	2b0a      	cmp	r3, #10
 8004bc2:	d003      	beq.n	8004bcc <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_UNICODE_STRING))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	885b      	ldrh	r3, [r3, #2]
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 8004bc8:	2b0b      	cmp	r3, #11
 8004bca:	d101      	bne.n	8004bd0 <complete_access_subindex_loop+0x2c>
   {
      return ABORT_CA_NOT_SUPPORTED;
 8004bcc:	4ba6      	ldr	r3, [pc, #664]	; (8004e68 <complete_access_subindex_loop+0x2c4>)
 8004bce:	e153      	b.n	8004e78 <complete_access_subindex_loop+0x2d4>
   }

   uint32_t size = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24

   /* Clear padded mbxdata byte [1] on upload */
   if ((load_type == UPLOAD) && (mbxdata != NULL))
 8004bd4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f040 8139 	bne.w	8004e50 <complete_access_subindex_loop+0x2ac>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8135 	beq.w	8004e50 <complete_access_subindex_loop+0x2ac>
   {
      mbxdata[1] = 0;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
   }

   while (nsub <= SDOobjects[nidx].maxsub)
 8004bee:	e12f      	b.n	8004e50 <complete_access_subindex_loop+0x2ac>
   {
      uint16_t bitlen = (objd + nsub)->bitlength;
 8004bf0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	889b      	ldrh	r3, [r3, #4]
 8004c04:	847b      	strh	r3, [r7, #34]	; 0x22
      void *ul_source = ((objd + nsub)->data != NULL) ?
 8004c06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	461a      	mov	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	691b      	ldr	r3, [r3, #16]
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <complete_access_subindex_loop+0x90>
 8004c1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	e009      	b.n	8004c48 <complete_access_subindex_loop+0xa4>
 8004c34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	461a      	mov	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	330c      	adds	r3, #12
      void *ul_source = ((objd + nsub)->data != NULL) ?
 8004c48:	61fb      	str	r3, [r7, #28]
      uint8_t bitoffset = size % 8;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	76fb      	strb	r3, [r7, #27]
      uint8_t access = (objd + nsub)->flags & 0x3f;
 8004c54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	461a      	mov	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	88db      	ldrh	r3, [r3, #6]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c6e:	76bb      	strb	r3, [r7, #26]
      uint8_t state = ESCvar.ALstatus & 0x0f;
 8004c70:	4b7e      	ldr	r3, [pc, #504]	; (8004e6c <complete_access_subindex_loop+0x2c8>)
 8004c72:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	767b      	strb	r3, [r7, #25]

      if ((bitlen % 8) == 0)
 8004c7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d16f      	bne.n	8004d6a <complete_access_subindex_loop+0x1c6>
      {
         if (bitoffset != 0)
 8004c8a:	7efb      	ldrb	r3, [r7, #27]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <complete_access_subindex_loop+0xf6>
         {
            /* move on to next byte boundary */
            size += (8U - bitoffset);
 8004c90:	7efb      	ldrb	r3, [r7, #27]
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	3308      	adds	r3, #8
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
         }
         if (mbxdata != NULL)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80be 	beq.w	8004e1e <complete_access_subindex_loop+0x27a>
         {
            /* copy a non-bit data type to a byte boundary */
            if (load_type == UPLOAD)
 8004ca2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d131      	bne.n	8004d0e <complete_access_subindex_loop+0x16a>
            {
               if (READ_ACCESS(access, state))
 8004caa:	7ebb      	ldrb	r3, [r7, #26]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <complete_access_subindex_loop+0x116>
 8004cb4:	7e7b      	ldrb	r3, [r7, #25]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d00f      	beq.n	8004cda <complete_access_subindex_loop+0x136>
 8004cba:	7ebb      	ldrb	r3, [r7, #26]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <complete_access_subindex_loop+0x126>
 8004cc4:	7e7b      	ldrb	r3, [r7, #25]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d007      	beq.n	8004cda <complete_access_subindex_loop+0x136>
 8004cca:	7ebb      	ldrb	r3, [r7, #26]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00f      	beq.n	8004cf4 <complete_access_subindex_loop+0x150>
 8004cd4:	7e7b      	ldrb	r3, [r7, #25]
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d10c      	bne.n	8004cf4 <complete_access_subindex_loop+0x150>
               {
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	3307      	adds	r3, #7
 8004cde:	08db      	lsrs	r3, r3, #3
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	18d0      	adds	r0, r2, r3
                        BITS2BYTES(bitlen));
 8004ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ce6:	3307      	adds	r3, #7
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 8004ce8:	08db      	lsrs	r3, r3, #3
 8004cea:	461a      	mov	r2, r3
 8004cec:	69f9      	ldr	r1, [r7, #28]
 8004cee:	f00b fa80 	bl	80101f2 <memcpy>
 8004cf2:	e094      	b.n	8004e1e <complete_access_subindex_loop+0x27a>
               }
               else
               {
                  /* return zeroes for upload of WO objects */
                  memset(&mbxdata[BITS2BYTES(size)], 0, BITS2BYTES(bitlen));
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	3307      	adds	r3, #7
 8004cf8:	08db      	lsrs	r3, r3, #3
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	18d0      	adds	r0, r2, r3
 8004cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d00:	3307      	adds	r3, #7
 8004d02:	08db      	lsrs	r3, r3, #3
 8004d04:	461a      	mov	r2, r3
 8004d06:	2100      	movs	r1, #0
 8004d08:	f00b fa81 	bl	801020e <memset>
 8004d0c:	e087      	b.n	8004e1e <complete_access_subindex_loop+0x27a>
               }
            }
            /* download of RO objects shall be ignored */
            else if (WRITE_ACCESS(access, state))
 8004d0e:	7ebb      	ldrb	r3, [r7, #26]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <complete_access_subindex_loop+0x17a>
 8004d18:	7e7b      	ldrb	r3, [r7, #25]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d00f      	beq.n	8004d3e <complete_access_subindex_loop+0x19a>
 8004d1e:	7ebb      	ldrb	r3, [r7, #26]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <complete_access_subindex_loop+0x18a>
 8004d28:	7e7b      	ldrb	r3, [r7, #25]
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d007      	beq.n	8004d3e <complete_access_subindex_loop+0x19a>
 8004d2e:	7ebb      	ldrb	r3, [r7, #26]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d072      	beq.n	8004e1e <complete_access_subindex_loop+0x27a>
 8004d38:	7e7b      	ldrb	r3, [r7, #25]
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d16f      	bne.n	8004e1e <complete_access_subindex_loop+0x27a>
            {
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 8004d3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	6918      	ldr	r0, [r3, #16]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	3307      	adds	r3, #7
 8004d56:	08db      	lsrs	r3, r3, #3
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	18d1      	adds	r1, r2, r3
                     BITS2BYTES(bitlen));
 8004d5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d5e:	3307      	adds	r3, #7
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 8004d60:	08db      	lsrs	r3, r3, #3
 8004d62:	461a      	mov	r2, r3
 8004d64:	f00b fa45 	bl	80101f2 <memcpy>
 8004d68:	e059      	b.n	8004e1e <complete_access_subindex_loop+0x27a>
            }
         }
      }
      else if ((load_type == UPLOAD) && (mbxdata != NULL))
 8004d6a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d155      	bne.n	8004e1e <complete_access_subindex_loop+0x27a>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d052      	beq.n	8004e1e <complete_access_subindex_loop+0x27a>
      {
         /* copy a bit data type into correct position */
         uint32_t bitmask = (1U << bitlen) - 1U;
 8004d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
         uint32_t tempmask;
         if (READ_ACCESS(access, state))
 8004d84:	7ebb      	ldrb	r3, [r7, #26]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <complete_access_subindex_loop+0x1f0>
 8004d8e:	7e7b      	ldrb	r3, [r7, #25]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d00f      	beq.n	8004db4 <complete_access_subindex_loop+0x210>
 8004d94:	7ebb      	ldrb	r3, [r7, #26]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <complete_access_subindex_loop+0x200>
 8004d9e:	7e7b      	ldrb	r3, [r7, #25]
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d007      	beq.n	8004db4 <complete_access_subindex_loop+0x210>
 8004da4:	7ebb      	ldrb	r3, [r7, #26]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d023      	beq.n	8004df6 <complete_access_subindex_loop+0x252>
 8004dae:	7e7b      	ldrb	r3, [r7, #25]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d120      	bne.n	8004df6 <complete_access_subindex_loop+0x252>
         {
            if (bitoffset == 0)
 8004db4:	7efb      	ldrb	r3, [r7, #27]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d105      	bne.n	8004dc6 <complete_access_subindex_loop+0x222>
            {
               mbxdata[BITSPOS2BYTESOFFSET(size)] = 0;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	08db      	lsrs	r3, r3, #3
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
            }
            tempmask = (*(uint8_t *)ul_source & bitmask) << bitoffset;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	401a      	ands	r2, r3
 8004dd0:	7efb      	ldrb	r3, [r7, #27]
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] |= (uint8_t)tempmask;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	08db      	lsrs	r3, r3, #3
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	4413      	add	r3, r2
 8004de0:	7819      	ldrb	r1, [r3, #0]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	08db      	lsrs	r3, r3, #3
 8004dea:	6838      	ldr	r0, [r7, #0]
 8004dec:	4403      	add	r3, r0
 8004dee:	430a      	orrs	r2, r1
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e013      	b.n	8004e1e <complete_access_subindex_loop+0x27a>
         }
         else
         {
            tempmask = ~(bitmask << bitoffset);
 8004df6:	7efb      	ldrb	r3, [r7, #27]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] &= (uint8_t)tempmask;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	08db      	lsrs	r3, r3, #3
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	4413      	add	r3, r2
 8004e0a:	7819      	ldrb	r1, [r3, #0]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	08db      	lsrs	r3, r3, #3
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	4403      	add	r3, r0
 8004e18:	400a      	ands	r2, r1
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
         }
      }

      /* Subindex 0 is padded to 16 bit */
      size += (nsub == 0) ? 16 : bitlen;
 8004e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <complete_access_subindex_loop+0x286>
 8004e26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e28:	e000      	b.n	8004e2c <complete_access_subindex_loop+0x288>
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	4413      	add	r3, r2
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
      nsub++;
 8004e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	80fb      	strh	r3, [r7, #6]

      if ((max_bytes > 0) && (BITS2BYTES(size) >= max_bytes))
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <complete_access_subindex_loop+0x2ac>
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	3307      	adds	r3, #7
 8004e48:	08db      	lsrs	r3, r3, #3
 8004e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d911      	bls.n	8004e74 <complete_access_subindex_loop+0x2d0>
   while (nsub <= SDOobjects[nidx].maxsub)
 8004e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e54:	4906      	ldr	r1, [pc, #24]	; (8004e70 <complete_access_subindex_loop+0x2cc>)
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0112      	lsls	r2, r2, #4
 8004e5a:	440a      	add	r2, r1
 8004e5c:	3204      	adds	r2, #4
 8004e5e:	7812      	ldrb	r2, [r2, #0]
 8004e60:	4293      	cmp	r3, r2
 8004e62:	f77f aec5 	ble.w	8004bf0 <complete_access_subindex_loop+0x4c>
 8004e66:	e006      	b.n	8004e76 <complete_access_subindex_loop+0x2d2>
 8004e68:	06010004 	.word	0x06010004
 8004e6c:	200014a8 	.word	0x200014a8
 8004e70:	08012268 	.word	0x08012268
      {
         break;
 8004e74:	bf00      	nop
      }
   }

   return size;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3728      	adds	r7, #40	; 0x28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <init_coesdo>:
static void init_coesdo(_COEsdo *coesdo,
                        uint8_t sdoservice,
                        uint8_t command,
                        uint16_t index,
                        uint8_t subindex)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	70fb      	strb	r3, [r7, #3]
 8004e92:	460b      	mov	r3, r1
 8004e94:	70bb      	strb	r3, [r7, #2]
 8004e96:	4613      	mov	r3, r2
 8004e98:	803b      	strh	r3, [r7, #0]
   coesdo->mbxheader.length = htoes(COE_DEFAULTLENGTH);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	220a      	movs	r2, #10
 8004e9e:	801a      	strh	r2, [r3, #0]
   coesdo->mbxheader.mbxtype = MBXCOE;
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	7953      	ldrb	r3, [r2, #5]
 8004ea4:	2103      	movs	r1, #3
 8004ea6:	f361 0303 	bfi	r3, r1, #0, #4
 8004eaa:	7153      	strb	r3, [r2, #5]
   coesdo->coeheader.numberservice = htoes(sdoservice << 12);
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	031b      	lsls	r3, r3, #12
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	80da      	strh	r2, [r3, #6]
   coesdo->command = command;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	78ba      	ldrb	r2, [r7, #2]
 8004ebc:	721a      	strb	r2, [r3, #8]
   coesdo->index = htoes(index);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	883a      	ldrh	r2, [r7, #0]
 8004ec2:	f8a3 2009 	strh.w	r2, [r3, #9]
   coesdo->subindex = subindex;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7c3a      	ldrb	r2, [r7, #16]
 8004eca:	72da      	strb	r2, [r3, #11]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <SDO_upload_complete_access>:
 *  sending the content requested in a free Mailbox buffer. Depending of
 *  size of data expedited, normal or segmented transfer is used.
 *  On error an SDO Abort will be sent.
 */
static void SDO_upload_complete_access (void)
{
 8004ed8:	b590      	push	{r4, r7, lr}
 8004eda:	b08d      	sub	sp, #52	; 0x34
 8004edc:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 8004ede:	4b87      	ldr	r3, [pc, #540]	; (80050fc <SDO_upload_complete_access+0x224>)
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 8004ee2:	f107 0008 	add.w	r0, r7, #8
 8004ee6:	f107 020d 	add.w	r2, r7, #13
 8004eea:	f107 010e 	add.w	r1, r7, #14
 8004eee:	1dbb      	adds	r3, r7, #6
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef6:	f7ff fe11 	bl	8004b1c <complete_access_get_variables>
 8004efa:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <SDO_upload_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 8004f02:	89f9      	ldrh	r1, [r7, #14]
 8004f04:	7b7a      	ldrb	r2, [r7, #13]
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f7ff fbff 	bl	800470c <set_state_idle>
      return;
 8004f0e:	e0f2      	b.n	80050f6 <SDO_upload_complete_access+0x21e>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 8004f10:	f7fe fa44 	bl	800339c <ESC_claimbuffer>
 8004f14:	4603      	mov	r3, r0
 8004f16:	77fb      	strb	r3, [r7, #31]
   if (MBXout == 0)
 8004f18:	7ffb      	ldrb	r3, [r7, #31]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <SDO_upload_complete_access+0x54>
   {
      /* It is a bad idea to call SDO_abort when ESC_claimbuffer fails,
       * because SDO_abort will also call ESC_claimbuffer ...
       */
      set_state_idle (0, index, subindex, 0);
 8004f1e:	89f9      	ldrh	r1, [r7, #14]
 8004f20:	7b7a      	ldrb	r2, [r7, #13]
 8004f22:	2300      	movs	r3, #0
 8004f24:	2000      	movs	r0, #0
 8004f26:	f7ff fbf1 	bl	800470c <set_state_idle>
      return;
 8004f2a:	e0e4      	b.n	80050f6 <SDO_upload_complete_access+0x21e>
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a74      	ldr	r2, [pc, #464]	; (8005100 <SDO_upload_complete_access+0x228>)
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	4413      	add	r3, r2
 8004f34:	330c      	adds	r3, #12
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	61bb      	str	r3, [r7, #24]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, UPLOAD, 0);
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	2300      	movs	r3, #0
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	69b8      	ldr	r0, [r7, #24]
 8004f4c:	f7ff fe2a 	bl	8004ba4 <complete_access_subindex_loop>
 8004f50:	4603      	mov	r3, r0
 8004f52:	603b      	str	r3, [r7, #0]

   /* expedited bits used calculation */
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b18      	cmp	r3, #24
 8004f58:	d808      	bhi.n	8004f6c <SDO_upload_complete_access+0x94>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	08db      	lsrs	r3, r3, #3
 8004f60:	f1c3 0303 	rsb	r3, r3, #3
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	e000      	b.n	8004f6e <SDO_upload_complete_access+0x96>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]

   /* convert bits to bytes */
   size = BITS2BYTES(size);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	3307      	adds	r3, #7
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	603b      	str	r3, [r7, #0]

   if (size > 0xffff)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7e:	d306      	bcc.n	8004f8e <SDO_upload_complete_access+0xb6>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (MBXout, index, subindex, size);
 8004f80:	89f9      	ldrh	r1, [r7, #14]
 8004f82:	7b7a      	ldrb	r2, [r7, #13]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	7ff8      	ldrb	r0, [r7, #31]
 8004f88:	f7ff fbc0 	bl	800470c <set_state_idle>
      return;
 8004f8c:	e0b3      	b.n	80050f6 <SDO_upload_complete_access+0x21e>
   }

   /* check that upload data fits in the preallocated buffer */
   if ((size + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	331e      	adds	r3, #30
 8004f92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f96:	d906      	bls.n	8004fa6 <SDO_upload_complete_access+0xce>
   {
      set_state_idle (MBXout, index, subindex, ABORT_CA_NOT_SUPPORTED);
 8004f98:	89f9      	ldrh	r1, [r7, #14]
 8004f9a:	7b7a      	ldrb	r2, [r7, #13]
 8004f9c:	7ff8      	ldrb	r0, [r7, #31]
 8004f9e:	4b59      	ldr	r3, [pc, #356]	; (8005104 <SDO_upload_complete_access+0x22c>)
 8004fa0:	f7ff fbb4 	bl	800470c <set_state_idle>
      return;
 8004fa4:	e0a7      	b.n	80050f6 <SDO_upload_complete_access+0x21e>
   }
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 8004fa6:	89f8      	ldrh	r0, [r7, #14]
 8004fa8:	7b79      	ldrb	r1, [r7, #13]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	691a      	ldr	r2, [r3, #16]
         objd->data, (size_t *)&size, objd->flags | COMPLETE_ACCESS_FLAG);
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	88db      	ldrh	r3, [r3, #6]
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 8004fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	463c      	mov	r4, r7
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4623      	mov	r3, r4
 8004fc2:	f7fd fcc7 	bl	8002954 <ESC_upload_pre_objecthandler>
 8004fc6:	6238      	str	r0, [r7, #32]
   if (abortcode != 0)
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <SDO_upload_complete_access+0x104>
   {
      set_state_idle (MBXout, index, subindex, abortcode);
 8004fce:	89f9      	ldrh	r1, [r7, #14]
 8004fd0:	7b7a      	ldrb	r2, [r7, #13]
 8004fd2:	7ff8      	ldrb	r0, [r7, #31]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f7ff fb99 	bl	800470c <set_state_idle>
      return;
 8004fda:	e08c      	b.n	80050f6 <SDO_upload_complete_access+0x21e>
   }

   /* copy subindex data into the preallocated buffer */
   complete_access_subindex_loop(objd, nidx, nsub, ESCvar.mbxdata, UPLOAD, 0);
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <SDO_upload_complete_access+0x230>)
 8004fec:	69b8      	ldr	r0, [r7, #24]
 8004fee:	f7ff fdd9 	bl	8004ba4 <complete_access_subindex_loop>

   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8004ff2:	7ffb      	ldrb	r3, [r7, #31]
 8004ff4:	4a45      	ldr	r2, [pc, #276]	; (800510c <SDO_upload_complete_access+0x234>)
 8004ff6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	4a3f      	ldr	r2, [pc, #252]	; (80050fc <SDO_upload_complete_access+0x224>)
 8004ffe:	4413      	add	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
   init_coesdo(coeres, COE_SDORESPONSE,
 8005002:	89fa      	ldrh	r2, [r7, #14]
 8005004:	7b7b      	ldrb	r3, [r7, #13]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	2251      	movs	r2, #81	; 0x51
 800500c:	2103      	movs	r1, #3
 800500e:	6938      	ldr	r0, [r7, #16]
 8005010:	f7ff ff36 	bl	8004e80 <init_coesdo>
         COE_COMMAND_UPLOADRESPONSE | COE_COMPLETEACCESS | COE_SIZE_INDICATOR,
         index, subindex);

   ESCvar.segmented = 0;
 8005014:	4b3d      	ldr	r3, [pc, #244]	; (800510c <SDO_upload_complete_access+0x234>)
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

   if (size <= 4)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b04      	cmp	r3, #4
 8005020:	d811      	bhi.n	8005046 <SDO_upload_complete_access+0x16e>
   {
      /* expedited response, i.e. length <= 4 bytes */
      coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	7a1a      	ldrb	r2, [r3, #8]
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	4313      	orrs	r3, r2
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	b2da      	uxtb	r2, r3
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	721a      	strb	r2, [r3, #8]
      memcpy(&(coeres->size), ESCvar.mbxdata, size);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	330c      	adds	r3, #12
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	4932      	ldr	r1, [pc, #200]	; (8005108 <SDO_upload_complete_access+0x230>)
 800503e:	4618      	mov	r0, r3
 8005040:	f00b f8d7 	bl	80101f2 <memcpy>
 8005044:	e031      	b.n	80050aa <SDO_upload_complete_access+0x1d2>
   }
   else
   {
      /* normal response, i.e. length > 4 bytes */
      coeres->size = htoel (size);
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	60da      	str	r2, [r3, #12]

      if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	f103 020a 	add.w	r2, r3, #10
 8005052:	4b2e      	ldr	r3, [pc, #184]	; (800510c <SDO_upload_complete_access+0x234>)
 8005054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005056:	3b06      	subs	r3, #6
 8005058:	429a      	cmp	r2, r3
 800505a:	d918      	bls.n	800508e <SDO_upload_complete_access+0x1b6>
      {
         /* segmented transfer needed */
         /* set total size in bytes */
         ESCvar.frags = size;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4a2b      	ldr	r2, [pc, #172]	; (800510c <SDO_upload_complete_access+0x234>)
 8005060:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8005064:	4b29      	ldr	r3, [pc, #164]	; (800510c <SDO_upload_complete_access+0x234>)
 8005066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005068:	3b10      	subs	r3, #16
 800506a:	603b      	str	r3, [r7, #0]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	4a27      	ldr	r2, [pc, #156]	; (800510c <SDO_upload_complete_access+0x234>)
 8005070:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         /* signal segmented transfer */
         ESCvar.segmented = MBXSEU;
 8005074:	4b25      	ldr	r3, [pc, #148]	; (800510c <SDO_upload_complete_access+0x234>)
 8005076:	2240      	movs	r2, #64	; 0x40
 8005078:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata;
 800507c:	4b23      	ldr	r3, [pc, #140]	; (800510c <SDO_upload_complete_access+0x234>)
 800507e:	4a22      	ldr	r2, [pc, #136]	; (8005108 <SDO_upload_complete_access+0x230>)
 8005080:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 8005084:	4b21      	ldr	r3, [pc, #132]	; (800510c <SDO_upload_complete_access+0x234>)
 8005086:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800508a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      }

      coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	330a      	adds	r3, #10
 8005094:	b29a      	uxth	r2, r3
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	801a      	strh	r2, [r3, #0]
      memcpy((&(coeres->size)) + 1, ESCvar.mbxdata, size);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	330c      	adds	r3, #12
 800509e:	3304      	adds	r3, #4
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	4919      	ldr	r1, [pc, #100]	; (8005108 <SDO_upload_complete_access+0x230>)
 80050a4:	4618      	mov	r0, r3
 80050a6:	f00b f8a4 	bl	80101f2 <memcpy>
   }

   if (ESCvar.segmented == 0)
 80050aa:	4b18      	ldr	r3, [pc, #96]	; (800510c <SDO_upload_complete_access+0x234>)
 80050ac:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d116      	bne.n	80050e2 <SDO_upload_complete_access+0x20a>
   {
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 80050b4:	89f8      	ldrh	r0, [r7, #14]
 80050b6:	7b79      	ldrb	r1, [r7, #13]
            objd->flags | COMPLETE_ACCESS_FLAG);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	88db      	ldrh	r3, [r3, #6]
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 80050bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	461a      	mov	r2, r3
 80050c8:	f7fd fc64 	bl	8002994 <ESC_upload_post_objecthandler>
 80050cc:	6238      	str	r0, [r7, #32]

      if (abortcode != 0)
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d006      	beq.n	80050e2 <SDO_upload_complete_access+0x20a>
      {
         set_state_idle (MBXout, index, subindex, abortcode);
 80050d4:	89f9      	ldrh	r1, [r7, #14]
 80050d6:	7b7a      	ldrb	r2, [r7, #13]
 80050d8:	7ff8      	ldrb	r0, [r7, #31]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f7ff fb16 	bl	800470c <set_state_idle>
         return;
 80050e0:	e009      	b.n	80050f6 <SDO_upload_complete_access+0x21e>
      }
   }

   MBXcontrol[MBXout].state = MBXstate_outreq;
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <SDO_upload_complete_access+0x238>)
 80050e6:	2103      	movs	r1, #3
 80050e8:	54d1      	strb	r1, [r2, r3]

   set_state_idle (MBXout, index, subindex, 0);
 80050ea:	89f9      	ldrh	r1, [r7, #14]
 80050ec:	7b7a      	ldrb	r2, [r7, #13]
 80050ee:	7ff8      	ldrb	r0, [r7, #31]
 80050f0:	2300      	movs	r3, #0
 80050f2:	f7ff fb0b 	bl	800470c <set_state_idle>
}
 80050f6:	372c      	adds	r7, #44	; 0x2c
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd90      	pop	{r4, r7, pc}
 80050fc:	20000e2c 	.word	0x20000e2c
 8005100:	08012268 	.word	0x08012268
 8005104:	06010004 	.word	0x06010004
 8005108:	20001592 	.word	0x20001592
 800510c:	200014a8 	.word	0x200014a8
 8005110:	2000142c 	.word	0x2000142c

08005114 <SDO_uploadsegment>:

/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 */
static void SDO_uploadsegment (void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af02      	add	r7, sp, #8
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset, abort;
   coesdo = (_COEsdo *) &MBX[0];
 800511a:	4b58      	ldr	r3, [pc, #352]	; (800527c <SDO_uploadsegment+0x168>)
 800511c:	61bb      	str	r3, [r7, #24]
   MBXout = ESC_claimbuffer ();
 800511e:	f7fe f93d 	bl	800339c <ESC_claimbuffer>
 8005122:	4603      	mov	r3, r0
 8005124:	75fb      	strb	r3, [r7, #23]
   if (MBXout)
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 809d 	beq.w	8005268 <SDO_uploadsegment+0x154>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	4a53      	ldr	r2, [pc, #332]	; (8005280 <SDO_uploadsegment+0x16c>)
 8005132:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	4a50      	ldr	r2, [pc, #320]	; (800527c <SDO_uploadsegment+0x168>)
 800513a:	4413      	add	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
      offset = ESCvar.fragsleft;
 800513e:	4b50      	ldr	r3, [pc, #320]	; (8005280 <SDO_uploadsegment+0x16c>)
 8005140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005144:	60fb      	str	r3, [r7, #12]
      size = ESCvar.frags - ESCvar.fragsleft;
 8005146:	4b4e      	ldr	r3, [pc, #312]	; (8005280 <SDO_uploadsegment+0x16c>)
 8005148:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800514c:	4b4c      	ldr	r3, [pc, #304]	; (8005280 <SDO_uploadsegment+0x16c>)
 800514e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	61fb      	str	r3, [r7, #28]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
            (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	7a1b      	ldrb	r3, [r3, #8]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	72fb      	strb	r3, [r7, #11]
      init_coesdo(coeres, COE_SDORESPONSE, command,
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005166:	b299      	uxth	r1, r3
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	7adb      	ldrb	r3, [r3, #11]
 800516c:	7afa      	ldrb	r2, [r7, #11]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	460b      	mov	r3, r1
 8005172:	2103      	movs	r1, #3
 8005174:	6938      	ldr	r0, [r7, #16]
 8005176:	f7ff fe83 	bl	8004e80 <init_coesdo>
            coesdo->index, coesdo->subindex);
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	1cda      	adds	r2, r3, #3
 800517e:	4b40      	ldr	r3, [pc, #256]	; (8005280 <SDO_uploadsegment+0x16c>)
 8005180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005182:	3b06      	subs	r3, #6
 8005184:	429a      	cmp	r2, r3
 8005186:	d912      	bls.n	80051ae <SDO_uploadsegment+0x9a>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 8005188:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <SDO_uploadsegment+0x16c>)
 800518a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518c:	3b09      	subs	r3, #9
 800518e:	61fb      	str	r3, [r7, #28]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 8005190:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <SDO_uploadsegment+0x16c>)
 8005192:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	4a39      	ldr	r2, [pc, #228]	; (8005280 <SDO_uploadsegment+0x16c>)
 800519c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3303      	adds	r3, #3
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e02c      	b.n	8005208 <SDO_uploadsegment+0xf4>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 80051ae:	4b34      	ldr	r3, [pc, #208]	; (8005280 <SDO_uploadsegment+0x16c>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 80051b6:	4b32      	ldr	r3, [pc, #200]	; (8005280 <SDO_uploadsegment+0x16c>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 80051be:	4b30      	ldr	r3, [pc, #192]	; (8005280 <SDO_uploadsegment+0x16c>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         coeres->command |= COE_COMMAND_LASTSEGMENTBIT;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	7a1b      	ldrb	r3, [r3, #8]
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d906      	bls.n	80051e8 <SDO_uploadsegment+0xd4>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3303      	adds	r3, #3
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e00f      	b.n	8005208 <SDO_uploadsegment+0xf4>
         }
         else
         {
            coeres->command |= (uint8_t)((7U - size) << 1);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	7a1a      	ldrb	r2, [r3, #8]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f1c3 0307 	rsb	r3, r3, #7
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	4313      	orrs	r3, r2
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	220a      	movs	r2, #10
 8005206:	801a      	strh	r2, [r3, #0]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1,
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <SDO_uploadsegment+0x16c>)
 800520a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	18d0      	adds	r0, r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3308      	adds	r3, #8
 8005216:	3301      	adds	r3, #1
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	4619      	mov	r1, r3
 800521c:	f7ff fa1e 	bl	800465c <copy2mbx>
            size);        /* copy to mailbox */

      if (ESCvar.segmented == 0)
 8005220:	4b17      	ldr	r3, [pc, #92]	; (8005280 <SDO_uploadsegment+0x16c>)
 8005222:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11a      	bne.n	8005260 <SDO_uploadsegment+0x14c>
      {
         abort = ESC_upload_post_objecthandler (etohs (coesdo->index),
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005230:	b298      	uxth	r0, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	7adb      	ldrb	r3, [r3, #11]
 8005236:	4a12      	ldr	r2, [pc, #72]	; (8005280 <SDO_uploadsegment+0x16c>)
 8005238:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 800523c:	4619      	mov	r1, r3
 800523e:	f7fd fba9 	bl	8002994 <ESC_upload_post_objecthandler>
 8005242:	6078      	str	r0, [r7, #4]
               coesdo->subindex, ESCvar.flags);
         if (abort != 0)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <SDO_uploadsegment+0x14c>
         {
            set_state_idle (MBXout, etohs (coesdo->index), coesdo->subindex, abort);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005250:	b299      	uxth	r1, r3
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	7ada      	ldrb	r2, [r3, #11]
 8005256:	7df8      	ldrb	r0, [r7, #23]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f7ff fa57 	bl	800470c <set_state_idle>
            return;
 800525e:	e00a      	b.n	8005276 <SDO_uploadsegment+0x162>
         }
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	4a08      	ldr	r2, [pc, #32]	; (8005284 <SDO_uploadsegment+0x170>)
 8005264:	2103      	movs	r1, #3
 8005266:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <SDO_uploadsegment+0x170>)
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <SDO_uploadsegment+0x16c>)
 8005270:	2200      	movs	r2, #0
 8005272:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000e2c 	.word	0x20000e2c
 8005280:	200014a8 	.word	0x200014a8
 8005284:	2000142c 	.word	0x2000142c

08005288 <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
static void SDO_download (void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b090      	sub	sp, #64	; 0x40
 800528c:	af02      	add	r7, sp, #8
   uint32_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   uint32_t abort;

   coesdo = (_COEsdo *) &MBX[0];
 800528e:	4b89      	ldr	r3, [pc, #548]	; (80054b4 <SDO_download+0x22c>)
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
   index = etohs (coesdo->index);
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800529a:	857b      	strh	r3, [r7, #42]	; 0x2a
   subindex = coesdo->subindex;
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	7adb      	ldrb	r3, [r3, #11]
 80052a0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   nidx = SDO_findobject (index);
 80052a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff f85c 	bl	8004364 <SDO_findobject>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24
   if (nidx >= 0)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f2c0 818c 	blt.w	80055ce <SDO_download+0x346>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 80052b6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052ba:	4619      	mov	r1, r3
 80052bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052be:	f7fe fff3 	bl	80042a8 <SDO_findsubindex>
 80052c2:	4603      	mov	r3, r0
 80052c4:	847b      	strh	r3, [r7, #34]	; 0x22
      if (nsub >= 0)
 80052c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f2c0 8177 	blt.w	80055be <SDO_download+0x336>
      {
         objd = SDOobjects[nidx].objdesc;
 80052d0:	4a79      	ldr	r2, [pc, #484]	; (80054b8 <SDO_download+0x230>)
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	4413      	add	r3, r2
 80052d8:	330c      	adds	r3, #12
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	61fb      	str	r3, [r7, #28]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 80052de:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	461a      	mov	r2, r3
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	88db      	ldrh	r3, [r3, #6]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f8:	76fb      	strb	r3, [r7, #27]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 80052fa:	4b70      	ldr	r3, [pc, #448]	; (80054bc <SDO_download+0x234>)
 80052fc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	76bb      	strb	r3, [r7, #26]
         if (WRITE_ACCESS(access, state))
 8005308:	7efb      	ldrb	r3, [r7, #27]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <SDO_download+0x90>
 8005312:	7ebb      	ldrb	r3, [r7, #26]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d011      	beq.n	800533c <SDO_download+0xb4>
 8005318:	7efb      	ldrb	r3, [r7, #27]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <SDO_download+0xa0>
 8005322:	7ebb      	ldrb	r3, [r7, #26]
 8005324:	2b04      	cmp	r3, #4
 8005326:	d009      	beq.n	800533c <SDO_download+0xb4>
 8005328:	7efb      	ldrb	r3, [r7, #27]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8132 	beq.w	8005598 <SDO_download+0x310>
 8005334:	7ebb      	ldrb	r3, [r7, #26]
 8005336:	2b08      	cmp	r3, #8
 8005338:	f040 812e 	bne.w	8005598 <SDO_download+0x310>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	7a1b      	ldrb	r3, [r3, #8]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <SDO_download+0xd8>
            {
               size = 4U - ((coesdo->command & 0x0CU) >> 2);
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	7a1b      	ldrb	r3, [r3, #8]
 800534c:	089b      	lsrs	r3, r3, #2
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	f1c3 0304 	rsb	r3, r3, #4
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
               mbxdata = &(coesdo->size);
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	330c      	adds	r3, #12
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
 800535e:	e007      	b.n	8005370 <SDO_download+0xe8>
            }
            else
            {
               /* normal download */
               size = (etohl (coesdo->size) & 0xffff);
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	b29b      	uxth	r3, r3
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
               mbxdata = (&(coesdo->size)) + 1;
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	330c      	adds	r3, #12
 800536c:	3304      	adds	r3, #4
 800536e:	633b      	str	r3, [r7, #48]	; 0x30
            }
            actsize = BITS2BYTES((objd + nsub)->bitlength);
 8005370:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	461a      	mov	r2, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	889b      	ldrh	r3, [r3, #4]
 8005384:	3307      	adds	r3, #7
 8005386:	08db      	lsrs	r3, r3, #3
 8005388:	617b      	str	r3, [r7, #20]
            if (actsize != size)
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538e:	429a      	cmp	r2, r3
 8005390:	d042      	beq.n	8005418 <SDO_download+0x190>
            {
               /* entries with data types VISIBLE_STRING, OCTET_STRING,
                * UNICODE_STRING, ARRAY_OF_INT, ARRAY_OF_SINT,
                * ARRAY_OF_DINT, and ARRAY_OF_UDINT may have flexible length
                */
               uint16_t type = (objd + nsub)->datatype;
 8005392:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	461a      	mov	r2, r3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	885b      	ldrh	r3, [r3, #2]
 80053a6:	827b      	strh	r3, [r7, #18]
               if (type == DTYPE_VISIBLE_STRING)
 80053a8:	8a7b      	ldrh	r3, [r7, #18]
 80053aa:	2b09      	cmp	r3, #9
 80053ac:	d113      	bne.n	80053d6 <SDO_download+0x14e>
               {
                  /* pad with zeroes up to the maximum size of the entry */
                  memset((objd + nsub)->data + size, 0, actsize - size);
 80053ae:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	461a      	mov	r2, r3
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c4:	18d0      	adds	r0, r2, r3
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	2100      	movs	r1, #0
 80053d0:	f00a ff1d 	bl	801020e <memset>
 80053d4:	e020      	b.n	8005418 <SDO_download+0x190>
               }
               else if ((type != DTYPE_OCTET_STRING) &&
 80053d6:	8a7b      	ldrh	r3, [r7, #18]
 80053d8:	2b0a      	cmp	r3, #10
 80053da:	d01d      	beq.n	8005418 <SDO_download+0x190>
 80053dc:	8a7b      	ldrh	r3, [r7, #18]
 80053de:	2b0b      	cmp	r3, #11
 80053e0:	d01a      	beq.n	8005418 <SDO_download+0x190>
                        (type != DTYPE_UNICODE_STRING) &&
 80053e2:	8a7b      	ldrh	r3, [r7, #18]
 80053e4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80053e8:	d016      	beq.n	8005418 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_INT) &&
 80053ea:	8a7b      	ldrh	r3, [r7, #18]
 80053ec:	f240 2261 	movw	r2, #609	; 0x261
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d011      	beq.n	8005418 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_SINT) &&
 80053f4:	8a7b      	ldrh	r3, [r7, #18]
 80053f6:	f240 2262 	movw	r2, #610	; 0x262
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00c      	beq.n	8005418 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_DINT) &&
 80053fe:	8a7b      	ldrh	r3, [r7, #18]
 8005400:	f240 2263 	movw	r2, #611	; 0x263
 8005404:	4293      	cmp	r3, r2
 8005406:	d007      	beq.n	8005418 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_UDINT))
               {
                  set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 8005408:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800540c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <SDO_download+0x238>)
 8005410:	2000      	movs	r0, #0
 8005412:	f7ff f97b 	bl	800470c <set_state_idle>
                  return;
 8005416:	e0ea      	b.n	80055ee <SDO_download+0x366>
            abort = ESC_download_pre_objecthandler (
                  index,
                  subindex,
                  mbxdata,
                  size,
                  (objd + nsub)->flags
 8005418:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	461a      	mov	r2, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
            abort = ESC_download_pre_objecthandler (
 800542a:	88db      	ldrh	r3, [r3, #6]
 800542c:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8005430:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005438:	f7fd fa22 	bl	8002880 <ESC_download_pre_objecthandler>
 800543c:	60f8      	str	r0, [r7, #12]
            );
            if (abort == 0)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f040 80a1 	bne.w	8005588 <SDO_download+0x300>
            {
               if ((size > 4) &&
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	2b04      	cmp	r3, #4
 800544a:	d93b      	bls.n	80054c4 <SDO_download+0x23c>
                     (size > (coesdo->mbxheader.length - COE_HEADERSIZE)))
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	3b0a      	subs	r3, #10
               if ((size > 4) &&
 8005452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005454:	429a      	cmp	r2, r3
 8005456:	d935      	bls.n	80054c4 <SDO_download+0x23c>
               {
                  size = coesdo->mbxheader.length - COE_HEADERSIZE;
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	3b0a      	subs	r3, #10
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSED;
 8005460:	4b16      	ldr	r3, [pc, #88]	; (80054bc <SDO_download+0x234>)
 8005462:	2250      	movs	r2, #80	; 0x50
 8005464:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                  ESCvar.data = (objd + nsub)->data + size;
 8005468:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	461a      	mov	r2, r3
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	4413      	add	r3, r2
 8005480:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <SDO_download+0x234>)
 8005482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                  ESCvar.index = index;
 8005486:	4a0d      	ldr	r2, [pc, #52]	; (80054bc <SDO_download+0x234>)
 8005488:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800548a:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
                  ESCvar.subindex = subindex;
 800548e:	4a0b      	ldr	r2, [pc, #44]	; (80054bc <SDO_download+0x234>)
 8005490:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005494:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
                  ESCvar.flags = (objd + nsub)->flags;
 8005498:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	461a      	mov	r2, r3
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	88da      	ldrh	r2, [r3, #6]
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <SDO_download+0x234>)
 80054ae:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80054b2:	e00b      	b.n	80054cc <SDO_download+0x244>
 80054b4:	20000e2c 	.word	0x20000e2c
 80054b8:	08012268 	.word	0x08012268
 80054bc:	200014a8 	.word	0x200014a8
 80054c0:	06070010 	.word	0x06070010
               }
               else
               {
                  ESCvar.segmented = 0;
 80054c4:	4b4b      	ldr	r3, [pc, #300]	; (80055f4 <SDO_download+0x36c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
               }
               copy2mbx (mbxdata, (objd + nsub)->data, size);
 80054cc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	461a      	mov	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e2:	4619      	mov	r1, r3
 80054e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e6:	f7ff f8b9 	bl	800465c <copy2mbx>
               MBXout = ESC_claimbuffer ();
 80054ea:	f7fd ff57 	bl	800339c <ESC_claimbuffer>
 80054ee:	4603      	mov	r3, r0
 80054f0:	72fb      	strb	r3, [r7, #11]
               if (MBXout)
 80054f2:	7afb      	ldrb	r3, [r7, #11]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d026      	beq.n	8005546 <SDO_download+0x2be>
               {
                  coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80054f8:	7afb      	ldrb	r3, [r7, #11]
 80054fa:	4a3e      	ldr	r2, [pc, #248]	; (80055f4 <SDO_download+0x36c>)
 80054fc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <SDO_download+0x370>)
 8005504:	4413      	add	r3, r2
 8005506:	607b      	str	r3, [r7, #4]
                  coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	220a      	movs	r2, #10
 800550c:	801a      	strh	r2, [r3, #0]
                  coeres->mbxheader.mbxtype = MBXCOE;
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	7953      	ldrb	r3, [r2, #5]
 8005512:	2103      	movs	r1, #3
 8005514:	f361 0303 	bfi	r3, r1, #0, #4
 8005518:	7153      	strb	r3, [r2, #5]
                  coeres->coeheader.numberservice =
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005520:	80da      	strh	r2, [r3, #6]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                  coeres->index = htoes (index);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005526:	f8a3 2009 	strh.w	r2, [r3, #9]
                  coeres->subindex = subindex;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005530:	72da      	strb	r2, [r3, #11]
                  coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2260      	movs	r2, #96	; 0x60
 8005536:	721a      	strb	r2, [r3, #8]
                  coeres->size = htoel (0);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	60da      	str	r2, [r3, #12]
                  MBXcontrol[MBXout].state = MBXstate_outreq;
 800553e:	7afb      	ldrb	r3, [r7, #11]
 8005540:	4a2e      	ldr	r2, [pc, #184]	; (80055fc <SDO_download+0x374>)
 8005542:	2103      	movs	r1, #3
 8005544:	54d1      	strb	r1, [r2, r3]
               }
               if (ESCvar.segmented == 0)
 8005546:	4b2b      	ldr	r3, [pc, #172]	; (80055f4 <SDO_download+0x36c>)
 8005548:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800554c:	2b00      	cmp	r3, #0
 800554e:	d146      	bne.n	80055de <SDO_download+0x356>
               {
                  /* external object write handler */
                  abort = ESC_download_post_objecthandler (index, subindex, (objd + nsub)->flags);
 8005550:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	461a      	mov	r2, r3
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	88da      	ldrh	r2, [r3, #6]
 8005564:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8005568:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd f9d6 	bl	800291c <ESC_download_post_objecthandler>
 8005570:	60f8      	str	r0, [r7, #12]
                  if (abort != 0)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d032      	beq.n	80055de <SDO_download+0x356>
                  {
                     SDO_abort (MBXout, index, subindex, abort);
 8005578:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800557c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800557e:	7af8      	ldrb	r0, [r7, #11]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f7ff f87b 	bl	800467c <SDO_abort>
            if (abort == 0)
 8005586:	e02a      	b.n	80055de <SDO_download+0x356>
                  }
               }
            }
            else
            {
               SDO_abort (0, index, subindex, abort);
 8005588:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800558c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2000      	movs	r0, #0
 8005592:	f7ff f873 	bl	800467c <SDO_abort>
            if (abort == 0)
 8005596:	e022      	b.n	80055de <SDO_download+0x356>
            }
         }
         else
         {
            if (access == ATYPE_RO)
 8005598:	7efb      	ldrb	r3, [r7, #27]
 800559a:	2b07      	cmp	r3, #7
 800559c:	d107      	bne.n	80055ae <SDO_download+0x326>
            {
               SDO_abort (0, index, subindex, ABORT_READONLY);
 800559e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80055a2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80055a4:	4b16      	ldr	r3, [pc, #88]	; (8005600 <SDO_download+0x378>)
 80055a6:	2000      	movs	r0, #0
 80055a8:	f7ff f868 	bl	800467c <SDO_abort>
 80055ac:	e018      	b.n	80055e0 <SDO_download+0x358>

            }
            else
            {
               SDO_abort (0, index, subindex, ABORT_NOTINTHISSTATE);
 80055ae:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80055b2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <SDO_download+0x37c>)
 80055b6:	2000      	movs	r0, #0
 80055b8:	f7ff f860 	bl	800467c <SDO_abort>
 80055bc:	e010      	b.n	80055e0 <SDO_download+0x358>
            }
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 80055be:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80055c2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80055c4:	4b10      	ldr	r3, [pc, #64]	; (8005608 <SDO_download+0x380>)
 80055c6:	2000      	movs	r0, #0
 80055c8:	f7ff f858 	bl	800467c <SDO_abort>
 80055cc:	e008      	b.n	80055e0 <SDO_download+0x358>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 80055ce:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80055d2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80055d4:	4b0d      	ldr	r3, [pc, #52]	; (800560c <SDO_download+0x384>)
 80055d6:	2000      	movs	r0, #0
 80055d8:	f7ff f850 	bl	800467c <SDO_abort>
 80055dc:	e000      	b.n	80055e0 <SDO_download+0x358>
            if (abort == 0)
 80055de:	bf00      	nop
   }
   MBXcontrol[0].state = MBXstate_idle;
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <SDO_download+0x374>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 80055e6:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <SDO_download+0x36c>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 80055ee:	3738      	adds	r7, #56	; 0x38
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	200014a8 	.word	0x200014a8
 80055f8:	20000e2c 	.word	0x20000e2c
 80055fc:	2000142c 	.word	0x2000142c
 8005600:	06010002 	.word	0x06010002
 8005604:	08000022 	.word	0x08000022
 8005608:	06090011 	.word	0x06090011
 800560c:	06020000 	.word	0x06020000

08005610 <SDO_download_complete_access>:
/** Function for handling incoming requested SDO Download with Complete Access,
 *  validating the request and sending a response. On error an SDO Abort will
 *  be sent.
 */
static void SDO_download_complete_access (void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08e      	sub	sp, #56	; 0x38
 8005614:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 8005616:	4b81      	ldr	r3, [pc, #516]	; (800581c <SDO_download_complete_access+0x20c>)
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 800561a:	f107 0008 	add.w	r0, r7, #8
 800561e:	f107 020d 	add.w	r2, r7, #13
 8005622:	f107 010e 	add.w	r1, r7, #14
 8005626:	1dbb      	adds	r3, r7, #6
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4603      	mov	r3, r0
 800562c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800562e:	f7ff fa75 	bl	8004b1c <complete_access_get_variables>
 8005632:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <SDO_download_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 800563a:	89f9      	ldrh	r1, [r7, #14]
 800563c:	7b7a      	ldrb	r2, [r7, #13]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	2000      	movs	r0, #0
 8005642:	f7ff f863 	bl	800470c <set_state_idle>
      return;
 8005646:	e0e6      	b.n	8005816 <SDO_download_complete_access+0x206>
   }

   uint32_t bytes;
   uint32_t *mbxdata = &(coesdo->size);
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	330c      	adds	r3, #12
 800564c:	62bb      	str	r3, [r7, #40]	; 0x28

   if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	7a1b      	ldrb	r3, [r3, #8]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <SDO_download_complete_access+0x5c>
   {
      /* expedited download */
      bytes = 4U - ((coesdo->command & 0x0CU) >> 2);
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	7a1b      	ldrb	r3, [r3, #8]
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	f1c3 0304 	rsb	r3, r3, #4
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566a:	e006      	b.n	800567a <SDO_download_complete_access+0x6a>
   }
   else
   {
      /* normal download */
      bytes = (etohl (coesdo->size) & 0xffff);
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	b29b      	uxth	r3, r3
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
      mbxdata++;
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	3304      	adds	r3, #4
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4a68      	ldr	r2, [pc, #416]	; (8005820 <SDO_download_complete_access+0x210>)
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	4413      	add	r3, r2
 8005682:	330c      	adds	r3, #12
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	61fb      	str	r3, [r7, #28]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, DOWNLOAD, 0);
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800568e:	2300      	movs	r3, #0
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	2301      	movs	r3, #1
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	2300      	movs	r3, #0
 8005698:	69f8      	ldr	r0, [r7, #28]
 800569a:	f7ff fa83 	bl	8004ba4 <complete_access_subindex_loop>
 800569e:	61b8      	str	r0, [r7, #24]
   size = BITS2BYTES(size);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	3307      	adds	r3, #7
 80056a4:	08db      	lsrs	r3, r3, #3
 80056a6:	61bb      	str	r3, [r7, #24]
   if (size > 0xffff)
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ae:	d306      	bcc.n	80056be <SDO_download_complete_access+0xae>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (0, index, subindex, size);
 80056b0:	89f9      	ldrh	r1, [r7, #14]
 80056b2:	7b7a      	ldrb	r2, [r7, #13]
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7ff f828 	bl	800470c <set_state_idle>
      return;
 80056bc:	e0ab      	b.n	8005816 <SDO_download_complete_access+0x206>
    * "The SDO Download Complete Access data length shall always match
    * the full current object size (defined by SubIndex0)".
    * But EtherCAT Conformance Test Tool doesn't follow this rule for some test
    * cases, which is the reason to here only check for 'less than or equal'.
    */
   else if (bytes <= size)
 80056be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d87b      	bhi.n	80057be <SDO_download_complete_access+0x1ae>
   {
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 80056c6:	89f8      	ldrh	r0, [r7, #14]
 80056c8:	7b79      	ldrb	r1, [r7, #13]
            size, objd->flags | COMPLETE_ACCESS_FLAG);
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	88db      	ldrh	r3, [r3, #6]
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 80056ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056de:	f7fd f8cf 	bl	8002880 <ESC_download_pre_objecthandler>
 80056e2:	6238      	str	r0, [r7, #32]
      if (abortcode != 0)
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d006      	beq.n	80056f8 <SDO_download_complete_access+0xe8>
      {
         set_state_idle (0, index, subindex, abortcode);
 80056ea:	89f9      	ldrh	r1, [r7, #14]
 80056ec:	7b7a      	ldrb	r2, [r7, #13]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	2000      	movs	r0, #0
 80056f2:	f7ff f80b 	bl	800470c <set_state_idle>
         return;
 80056f6:	e08e      	b.n	8005816 <SDO_download_complete_access+0x206>
      }

      if ((bytes + COE_HEADERSIZE) > ESC_MBXDSIZE)
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	f103 020a 	add.w	r2, r3, #10
 80056fe:	4b49      	ldr	r3, [pc, #292]	; (8005824 <SDO_download_complete_access+0x214>)
 8005700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005702:	3b06      	subs	r3, #6
 8005704:	429a      	cmp	r2, r3
 8005706:	d934      	bls.n	8005772 <SDO_download_complete_access+0x162>
      {
         /* check that download data fits in the preallocated buffer */
         if ((bytes + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	331e      	adds	r3, #30
 800570c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005710:	d906      	bls.n	8005720 <SDO_download_complete_access+0x110>
         {
             set_state_idle(0, index, subindex, ABORT_CA_NOT_SUPPORTED);
 8005712:	89f9      	ldrh	r1, [r7, #14]
 8005714:	7b7a      	ldrb	r2, [r7, #13]
 8005716:	4b44      	ldr	r3, [pc, #272]	; (8005828 <SDO_download_complete_access+0x218>)
 8005718:	2000      	movs	r0, #0
 800571a:	f7fe fff7 	bl	800470c <set_state_idle>
             return;
 800571e:	e07a      	b.n	8005816 <SDO_download_complete_access+0x206>
         }
         /* set total size in bytes */
         ESCvar.frags = bytes;
 8005720:	4a40      	ldr	r2, [pc, #256]	; (8005824 <SDO_download_complete_access+0x214>)
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <SDO_download_complete_access+0x214>)
 800572a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572c:	3b10      	subs	r3, #16
 800572e:	61bb      	str	r3, [r7, #24]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 8005730:	4a3c      	ldr	r2, [pc, #240]	; (8005824 <SDO_download_complete_access+0x214>)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         ESCvar.segmented = MBXSED;
 8005738:	4b3a      	ldr	r3, [pc, #232]	; (8005824 <SDO_download_complete_access+0x214>)
 800573a:	2250      	movs	r2, #80	; 0x50
 800573c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata + size;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	4a3a      	ldr	r2, [pc, #232]	; (800582c <SDO_download_complete_access+0x21c>)
 8005744:	4413      	add	r3, r2
 8005746:	4a37      	ldr	r2, [pc, #220]	; (8005824 <SDO_download_complete_access+0x214>)
 8005748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
         ESCvar.index = index;
 800574c:	89fa      	ldrh	r2, [r7, #14]
 800574e:	4b35      	ldr	r3, [pc, #212]	; (8005824 <SDO_download_complete_access+0x214>)
 8005750:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
         ESCvar.subindex = subindex;
 8005754:	7b7a      	ldrb	r2, [r7, #13]
 8005756:	4b33      	ldr	r3, [pc, #204]	; (8005824 <SDO_download_complete_access+0x214>)
 8005758:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800575c:	4b31      	ldr	r3, [pc, #196]	; (8005824 <SDO_download_complete_access+0x214>)
 800575e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005762:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
         /* Store the data */
         copy2mbx (mbxdata, ESCvar.mbxdata, size);
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4930      	ldr	r1, [pc, #192]	; (800582c <SDO_download_complete_access+0x21c>)
 800576a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800576c:	f7fe ff76 	bl	800465c <copy2mbx>
 8005770:	e02c      	b.n	80057cc <SDO_download_complete_access+0x1bc>
      }
      else
      {
         ESCvar.segmented = 0;
 8005772:	4b2c      	ldr	r3, [pc, #176]	; (8005824 <SDO_download_complete_access+0x214>)
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         /* copy download data to subindexes */
         complete_access_subindex_loop(objd, nidx, nsub, (uint8_t *)mbxdata, DOWNLOAD, bytes);
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	2301      	movs	r3, #1
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	69f8      	ldr	r0, [r7, #28]
 800578c:	f7ff fa0a 	bl	8004ba4 <complete_access_subindex_loop>

         abortcode = ESC_download_post_objecthandler(index, subindex,
 8005790:	89f8      	ldrh	r0, [r7, #14]
 8005792:	7b79      	ldrb	r1, [r7, #13]
               objd->flags | COMPLETE_ACCESS_FLAG);
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	88db      	ldrh	r3, [r3, #6]
         abortcode = ESC_download_post_objecthandler(index, subindex,
 8005798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	f7fd f8ba 	bl	800291c <ESC_download_post_objecthandler>
 80057a8:	6238      	str	r0, [r7, #32]
         if (abortcode != 0)
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00d      	beq.n	80057cc <SDO_download_complete_access+0x1bc>
         {
            set_state_idle (0, index, subindex, abortcode);
 80057b0:	89f9      	ldrh	r1, [r7, #14]
 80057b2:	7b7a      	ldrb	r2, [r7, #13]
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7fe ffa8 	bl	800470c <set_state_idle>
            return;
 80057bc:	e02b      	b.n	8005816 <SDO_download_complete_access+0x206>
         }
      }
   }
   else
   {
      set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 80057be:	89f9      	ldrh	r1, [r7, #14]
 80057c0:	7b7a      	ldrb	r2, [r7, #13]
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <SDO_download_complete_access+0x220>)
 80057c4:	2000      	movs	r0, #0
 80057c6:	f7fe ffa1 	bl	800470c <set_state_idle>
      return;
 80057ca:	e024      	b.n	8005816 <SDO_download_complete_access+0x206>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 80057cc:	f7fd fde6 	bl	800339c <ESC_claimbuffer>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]
   if (MBXout > 0)
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <SDO_download_complete_access+0x1fa>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	4a11      	ldr	r2, [pc, #68]	; (8005824 <SDO_download_complete_access+0x214>)
 80057de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80057e0:	fb02 f303 	mul.w	r3, r2, r3
 80057e4:	4a0d      	ldr	r2, [pc, #52]	; (800581c <SDO_download_complete_access+0x20c>)
 80057e6:	4413      	add	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
      init_coesdo(coeres, COE_SDORESPONSE,
 80057ea:	89fa      	ldrh	r2, [r7, #14]
 80057ec:	7b7b      	ldrb	r3, [r7, #13]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	2270      	movs	r2, #112	; 0x70
 80057f4:	2103      	movs	r1, #3
 80057f6:	6938      	ldr	r0, [r7, #16]
 80057f8:	f7ff fb42 	bl	8004e80 <init_coesdo>
                  COE_COMMAND_DOWNLOADRESPONSE | COE_COMPLETEACCESS,
                  index, subindex);

      coeres->size = 0;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <SDO_download_complete_access+0x224>)
 8005806:	2103      	movs	r1, #3
 8005808:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (MBXout, index, subindex, 0);
 800580a:	89f9      	ldrh	r1, [r7, #14]
 800580c:	7b7a      	ldrb	r2, [r7, #13]
 800580e:	7df8      	ldrb	r0, [r7, #23]
 8005810:	2300      	movs	r3, #0
 8005812:	f7fe ff7b 	bl	800470c <set_state_idle>
}
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000e2c 	.word	0x20000e2c
 8005820:	08012268 	.word	0x08012268
 8005824:	200014a8 	.word	0x200014a8
 8005828:	06010004 	.word	0x06010004
 800582c:	20001592 	.word	0x20001592
 8005830:	06070010 	.word	0x06070010
 8005834:	2000142c 	.word	0x2000142c

08005838 <SDO_downloadsegment>:

static void SDO_downloadsegment (void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 800583e:	4b6d      	ldr	r3, [pc, #436]	; (80059f4 <SDO_downloadsegment+0x1bc>)
 8005840:	623b      	str	r3, [r7, #32]
   uint8_t MBXout = ESC_claimbuffer ();
 8005842:	f7fd fdab 	bl	800339c <ESC_claimbuffer>
 8005846:	4603      	mov	r3, r0
 8005848:	77fb      	strb	r3, [r7, #31]
   if (MBXout)
 800584a:	7ffb      	ldrb	r3, [r7, #31]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80c7 	beq.w	80059e0 <SDO_downloadsegment+0x1a8>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8005852:	7ffb      	ldrb	r3, [r7, #31]
 8005854:	4a68      	ldr	r2, [pc, #416]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 8005856:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	4a65      	ldr	r2, [pc, #404]	; (80059f4 <SDO_downloadsegment+0x1bc>)
 800585e:	4413      	add	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
      uint32_t size = coesdo->mbxheader.length - 3U;
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	3b03      	subs	r3, #3
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
      if (size == 7)
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	2b07      	cmp	r3, #7
 800586e:	d107      	bne.n	8005880 <SDO_downloadsegment+0x48>
      {
         size = 7 - ((coesdo->command >> 1) & 7);
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	7a1b      	ldrb	r3, [r3, #8]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      uint8_t command = COE_COMMAND_DOWNLOADSEGRESP;
 8005880:	2320      	movs	r3, #32
 8005882:	75fb      	strb	r3, [r7, #23]
      uint8_t command2 = (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	7a1b      	ldrb	r3, [r3, #8]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	75bb      	strb	r3, [r7, #22]
      command |= command2;
 800588e:	7dfa      	ldrb	r2, [r7, #23]
 8005890:	7dbb      	ldrb	r3, [r7, #22]
 8005892:	4313      	orrs	r3, r2
 8005894:	75fb      	strb	r3, [r7, #23]
      init_coesdo(coeres, COE_SDORESPONSE, command, 0, 0);
 8005896:	7dfa      	ldrb	r2, [r7, #23]
 8005898:	2300      	movs	r3, #0
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2300      	movs	r3, #0
 800589e:	2103      	movs	r1, #3
 80058a0:	69b8      	ldr	r0, [r7, #24]
 80058a2:	f7ff faed 	bl	8004e80 <init_coesdo>

      void *mbxdata = &(coesdo->index);  /* data pointer */
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	3309      	adds	r3, #9
 80058aa:	613b      	str	r3, [r7, #16]
      copy2mbx (mbxdata, ESCvar.data, size);
 80058ac:	4b52      	ldr	r3, [pc, #328]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b4:	4619      	mov	r1, r3
 80058b6:	6938      	ldr	r0, [r7, #16]
 80058b8:	f7fe fed0 	bl	800465c <copy2mbx>

      if (coesdo->command & COE_COMMAND_LASTSEGMENTBIT)
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	7a1b      	ldrb	r3, [r3, #8]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d077      	beq.n	80059b8 <SDO_downloadsegment+0x180>
      {
         if(ESCvar.flags == COMPLETE_ACCESS_FLAG)
 80058c8:	4b4b      	ldr	r3, [pc, #300]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80058ca:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d2:	d14a      	bne.n	800596a <SDO_downloadsegment+0x132>
         {
            int32_t nidx;
            int16_t nsub;

            if(ESCvar.frags > ESCvar.fragsleft + size)
 80058d4:	4b48      	ldr	r3, [pc, #288]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80058d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80058da:	4b47      	ldr	r3, [pc, #284]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80058dc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	440b      	add	r3, r1
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d90a      	bls.n	80058fe <SDO_downloadsegment+0xc6>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_TYPEMISMATCH);
 80058e8:	4b43      	ldr	r3, [pc, #268]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80058ea:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 80058ee:	4b42      	ldr	r3, [pc, #264]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80058f0:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 80058f4:	4b41      	ldr	r3, [pc, #260]	; (80059fc <SDO_downloadsegment+0x1c4>)
 80058f6:	2000      	movs	r0, #0
 80058f8:	f7fe ff08 	bl	800470c <set_state_idle>
               return;
 80058fc:	e076      	b.n	80059ec <SDO_downloadsegment+0x1b4>
            }

            nidx = SDO_findobject(ESCvar.index);
 80058fe:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 8005900:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fd2d 	bl	8004364 <SDO_findobject>
 800590a:	60f8      	str	r0, [r7, #12]
            nsub = SDO_findsubindex (nidx, ESCvar.subindex);
 800590c:	4b3a      	ldr	r3, [pc, #232]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 800590e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8005912:	4619      	mov	r1, r3
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7fe fcc7 	bl	80042a8 <SDO_findsubindex>
 800591a:	4603      	mov	r3, r0
 800591c:	817b      	strh	r3, [r7, #10]

            if ((nidx < 0) || (nsub < 0))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	db03      	blt.n	800592c <SDO_downloadsegment+0xf4>
 8005924:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005928:	2b00      	cmp	r3, #0
 800592a:	da0a      	bge.n	8005942 <SDO_downloadsegment+0x10a>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_NOOBJECT);
 800592c:	4b32      	ldr	r3, [pc, #200]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 800592e:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 8005932:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 8005934:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8005938:	4b31      	ldr	r3, [pc, #196]	; (8005a00 <SDO_downloadsegment+0x1c8>)
 800593a:	2000      	movs	r0, #0
 800593c:	f7fe fee6 	bl	800470c <set_state_idle>
               return;
 8005940:	e054      	b.n	80059ec <SDO_downloadsegment+0x1b4>
            }

            /* copy download data to subindexes */
            const _objd *objd = SDOobjects[nidx].objdesc;
 8005942:	4a30      	ldr	r2, [pc, #192]	; (8005a04 <SDO_downloadsegment+0x1cc>)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	4413      	add	r3, r2
 800594a:	330c      	adds	r3, #12
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	607b      	str	r3, [r7, #4]
            complete_access_subindex_loop(objd,
 8005950:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 8005952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005956:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	2301      	movs	r3, #1
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4b29      	ldr	r3, [pc, #164]	; (8005a08 <SDO_downloadsegment+0x1d0>)
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff f91d 	bl	8004ba4 <complete_access_subindex_loop>
                  DOWNLOAD,
                  ESCvar.frags);

         }
         /* last segment */
         ESCvar.segmented = 0;
 800596a:	4b23      	ldr	r3, [pc, #140]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 8005972:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 800597a:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 800597c:	2200      	movs	r2, #0
 800597e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         /* external object write handler */
         uint32_t abort = ESC_download_post_objecthandler
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 8005984:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8005988:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 800598a:	f892 10a6 	ldrb.w	r1, [r2, #166]	; 0xa6
 800598e:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 8005990:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 8005994:	4618      	mov	r0, r3
 8005996:	f7fc ffc1 	bl	800291c <ESC_download_post_objecthandler>
 800599a:	6038      	str	r0, [r7, #0]
               (ESCvar.index, ESCvar.subindex, ESCvar.flags);
         if (abort != 0)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01a      	beq.n	80059d8 <SDO_downloadsegment+0x1a0>
         {
            set_state_idle (MBXout, ESCvar.index, ESCvar.subindex, abort);
 80059a2:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80059a4:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80059aa:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 80059ae:	7ff8      	ldrb	r0, [r7, #31]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	f7fe feab 	bl	800470c <set_state_idle>
            return;
 80059b6:	e019      	b.n	80059ec <SDO_downloadsegment+0x1b4>
         }
      }
      else
      {
         /* more segmented transfer needed: increase offset */
         ESCvar.data += size;
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80059ba:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	4413      	add	r3, r2
 80059c2:	4a0d      	ldr	r2, [pc, #52]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80059c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
         /* number of bytes done */
         ESCvar.fragsleft += size;
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80059ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	4413      	add	r3, r2
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <SDO_downloadsegment+0x1c0>)
 80059d4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 80059d8:	7ffb      	ldrb	r3, [r7, #31]
 80059da:	4a0c      	ldr	r2, [pc, #48]	; (8005a0c <SDO_downloadsegment+0x1d4>)
 80059dc:	2103      	movs	r1, #3
 80059de:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (0, 0, 0, 0);
 80059e0:	2300      	movs	r3, #0
 80059e2:	2200      	movs	r2, #0
 80059e4:	2100      	movs	r1, #0
 80059e6:	2000      	movs	r0, #0
 80059e8:	f7fe fe90 	bl	800470c <set_state_idle>
}
 80059ec:	3728      	adds	r7, #40	; 0x28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000e2c 	.word	0x20000e2c
 80059f8:	200014a8 	.word	0x200014a8
 80059fc:	06070010 	.word	0x06070010
 8005a00:	06020000 	.word	0x06020000
 8005a04:	08012268 	.word	0x08012268
 8005a08:	20001592 	.word	0x20001592
 8005a0c:	2000142c 	.word	0x2000142c

08005a10 <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
static void SDO_infoerror (uint32_t abortcode)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 8005a18:	f7fd fcc0 	bl	800339c <ESC_claimbuffer>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d039      	beq.n	8005a9a <SDO_infoerror+0x8a>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <SDO_infoerror+0x94>)
 8005a2a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	4a1d      	ldr	r2, [pc, #116]	; (8005aa8 <SDO_infoerror+0x98>)
 8005a32:	4413      	add	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_HEADERSIZE);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	220a      	movs	r2, #10
 8005a3a:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	7953      	ldrb	r3, [r2, #5]
 8005a40:	2103      	movs	r1, #3
 8005a42:	f361 0303 	bfi	r3, r1, #0, #4
 8005a46:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005a4e:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	7a13      	ldrb	r3, [r2, #8]
 8005a54:	2107      	movs	r1, #7
 8005a56:	f361 0306 	bfi	r3, r1, #0, #7
 8005a5a:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	7a13      	ldrb	r3, [r2, #8]
 8005a60:	f36f 13c7 	bfc	r3, #7, #1
 8005a64:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	815a      	strh	r2, [r3, #10]
      coeres->index = (uint16_t)htoel (abortcode);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	819a      	strh	r2, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	81da      	strh	r2, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	4a09      	ldr	r2, [pc, #36]	; (8005aac <SDO_infoerror+0x9c>)
 8005a88:	2103      	movs	r1, #3
 8005a8a:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <SDO_infoerror+0x9c>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <SDO_infoerror+0x94>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200014a8 	.word	0x200014a8
 8005aa8:	20000e2c 	.word	0x20000e2c
 8005aac:	2000142c 	.word	0x2000142c

08005ab0 <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
static void SDO_getodlist (void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
   uint32_t frags;
   uint8_t MBXout = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 8005abe:	e002      	b.n	8005ac6 <SDO_getodlist+0x16>
   {
      entries++;
 8005ac0:	8abb      	ldrh	r3, [r7, #20]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	82bb      	strh	r3, [r7, #20]
   while (SDOobjects[entries].index != 0xffff)
 8005ac6:	8abb      	ldrh	r3, [r7, #20]
 8005ac8:	4a7a      	ldr	r2, [pc, #488]	; (8005cb4 <SDO_getodlist+0x204>)
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d1f3      	bne.n	8005ac0 <SDO_getodlist+0x10>
   }
   ESCvar.entries = entries;
 8005ad8:	4a77      	ldr	r2, [pc, #476]	; (8005cb8 <SDO_getodlist+0x208>)
 8005ada:	8abb      	ldrh	r3, [r7, #20]
 8005adc:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
   frags = ((uint32_t)(entries << 1) + ODLISTSIZE - 1U);
 8005ae0:	8abb      	ldrh	r3, [r7, #20]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4b74      	ldr	r3, [pc, #464]	; (8005cb8 <SDO_getodlist+0x208>)
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aea:	885b      	ldrh	r3, [r3, #2]
 8005aec:	f1a3 020e 	sub.w	r2, r3, #14
 8005af0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005af4:	4013      	ands	r3, r2
 8005af6:	440b      	add	r3, r1
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60bb      	str	r3, [r7, #8]
   frags /= ODLISTSIZE;
 8005afc:	4b6e      	ldr	r3, [pc, #440]	; (8005cb8 <SDO_getodlist+0x208>)
 8005afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b00:	885b      	ldrh	r3, [r3, #2]
 8005b02:	f1a3 020e 	sub.w	r2, r3, #14
 8005b06:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	60bb      	str	r3, [r7, #8]
   coer = (_COEobjdesc *) &MBX[0];
 8005b14:	4b69      	ldr	r3, [pc, #420]	; (8005cbc <SDO_getodlist+0x20c>)
 8005b16:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	899b      	ldrh	r3, [r3, #12]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d903      	bls.n	8005b28 <SDO_getodlist+0x78>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 8005b20:	4867      	ldr	r0, [pc, #412]	; (8005cc0 <SDO_getodlist+0x210>)
 8005b22:	f7ff ff75 	bl	8005a10 <SDO_infoerror>
 8005b26:	e003      	b.n	8005b30 <SDO_getodlist+0x80>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 8005b28:	f7fd fc38 	bl	800339c <ESC_claimbuffer>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80ba 	beq.w	8005cac <SDO_getodlist+0x1fc>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	4a5f      	ldr	r2, [pc, #380]	; (8005cb8 <SDO_getodlist+0x208>)
 8005b3c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	4a5e      	ldr	r2, [pc, #376]	; (8005cbc <SDO_getodlist+0x20c>)
 8005b44:	4413      	add	r3, r2
 8005b46:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	7953      	ldrb	r3, [r2, #5]
 8005b4c:	2103      	movs	r1, #3
 8005b4e:	f361 0303 	bfi	r3, r1, #0, #4
 8005b52:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005b5a:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	7a13      	ldrb	r3, [r2, #8]
 8005b60:	2102      	movs	r1, #2
 8005b62:	f361 0306 	bfi	r3, r1, #0, #7
 8005b66:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	899b      	ldrh	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d13e      	bne.n	8005bee <SDO_getodlist+0x13e>
      {
         coel->index = htoes (0x00);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	819a      	strh	r2, [r3, #12]
         coel->infoheader.incomplete = 0;
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	7a13      	ldrb	r3, [r2, #8]
 8005b7a:	f36f 13c7 	bfc	r3, #7, #1
 8005b7e:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2200      	movs	r2, #0
 8005b84:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	815a      	strh	r2, [r3, #10]
         MBXcontrol[0].state = MBXstate_idle;
 8005b8c:	4b4d      	ldr	r3, [pc, #308]	; (8005cc4 <SDO_getodlist+0x214>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8005b92:	4b49      	ldr	r3, [pc, #292]	; (8005cb8 <SDO_getodlist+0x208>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         ESCvar.frags = frags;
 8005b9a:	4a47      	ldr	r2, [pc, #284]	; (8005cb8 <SDO_getodlist+0x208>)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4a44      	ldr	r2, [pc, #272]	; (8005cb8 <SDO_getodlist+0x208>)
 8005ba8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         p = &(coel->datatype);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	330e      	adds	r3, #14
 8005bb0:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8aba      	ldrh	r2, [r7, #20]
 8005bb6:	801a      	strh	r2, [r3, #0]
         p++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3302      	adds	r3, #2
 8005bbc:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	801a      	strh	r2, [r3, #0]
         p++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	801a      	strh	r2, [r3, #0]
         p++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	801a      	strh	r2, [r3, #0]
         p++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3302      	adds	r3, #2
 8005be0:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2212      	movs	r2, #18
 8005bec:	801a      	strh	r2, [r3, #0]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	899b      	ldrh	r3, [r3, #12]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d156      	bne.n	8005ca4 <SDO_getodlist+0x1f4>
      {
         if (frags > 1)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d912      	bls.n	8005c22 <SDO_getodlist+0x172>
         {
            coel->infoheader.incomplete = 1;
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	7a13      	ldrb	r3, [r2, #8]
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 8005c06:	4b2c      	ldr	r3, [pc, #176]	; (8005cb8 <SDO_getodlist+0x208>)
 8005c08:	2213      	movs	r2, #19
 8005c0a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
            n = ODLISTSIZE >> 1;
 8005c0e:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <SDO_getodlist+0x208>)
 8005c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c12:	885b      	ldrh	r3, [r3, #2]
 8005c14:	3b0e      	subs	r3, #14
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005c1e:	823b      	strh	r3, [r7, #16]
 8005c20:	e00d      	b.n	8005c3e <SDO_getodlist+0x18e>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	7a13      	ldrb	r3, [r2, #8]
 8005c26:	f36f 13c7 	bfc	r3, #7, #1
 8005c2a:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 8005c2c:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <SDO_getodlist+0x214>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8005c32:	4b21      	ldr	r3, [pc, #132]	; (8005cb8 <SDO_getodlist+0x208>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
            n = entries;
 8005c3a:	8abb      	ldrh	r3, [r7, #20]
 8005c3c:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2200      	movs	r2, #0
 8005c42:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 8005c44:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <SDO_getodlist+0x208>)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	4a19      	ldr	r2, [pc, #100]	; (8005cb8 <SDO_getodlist+0x208>)
 8005c52:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 8005c56:	4b18      	ldr	r3, [pc, #96]	; (8005cb8 <SDO_getodlist+0x208>)
 8005c58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (0x01);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	819a      	strh	r2, [r3, #12]

         p = &(coel->datatype);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	330e      	adds	r3, #14
 8005c6c:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	827b      	strh	r3, [r7, #18]
 8005c72:	e00c      	b.n	8005c8e <SDO_getodlist+0x1de>
         {
            *p = htoes (SDOobjects[i].index);
 8005c74:	8a7b      	ldrh	r3, [r7, #18]
 8005c76:	4a0f      	ldr	r2, [pc, #60]	; (8005cb4 <SDO_getodlist+0x204>)
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881a      	ldrh	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	801a      	strh	r2, [r3, #0]
            p++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3302      	adds	r3, #2
 8005c86:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8005c88:	8a7b      	ldrh	r3, [r7, #18]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	827b      	strh	r3, [r7, #18]
 8005c8e:	8a7a      	ldrh	r2, [r7, #18]
 8005c90:	8a3b      	ldrh	r3, [r7, #16]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d3ee      	bcc.n	8005c74 <SDO_getodlist+0x1c4>
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 8005c96:	8a3b      	ldrh	r3, [r7, #16]
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	4a07      	ldr	r2, [pc, #28]	; (8005cc4 <SDO_getodlist+0x214>)
 8005ca8:	2103      	movs	r1, #3
 8005caa:	54d1      	strb	r1, [r2, r3]
   }
}
 8005cac:	bf00      	nop
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	08012268 	.word	0x08012268
 8005cb8:	200014a8 	.word	0x200014a8
 8005cbc:	20000e2c 	.word	0x20000e2c
 8005cc0:	06010000 	.word	0x06010000
 8005cc4:	2000142c 	.word	0x2000142c

08005cc8 <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 */
static void SDO_getodlistcont (void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 8005cce:	f7fd fb65 	bl	800339c <ESC_claimbuffer>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8088 	beq.w	8005dee <SDO_getodlistcont+0x126>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	4a45      	ldr	r2, [pc, #276]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005ce2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	4a44      	ldr	r2, [pc, #272]	; (8005dfc <SDO_getodlistcont+0x134>)
 8005cea:	4413      	add	r3, r2
 8005cec:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	7953      	ldrb	r3, [r2, #5]
 8005cf2:	2103      	movs	r1, #3
 8005cf4:	f361 0303 	bfi	r3, r1, #0, #4
 8005cf8:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d00:	80da      	strh	r2, [r3, #6]
         htoes (COE_SDOINFORMATION << 12);
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	7a13      	ldrb	r3, [r2, #8]
 8005d06:	2102      	movs	r1, #2
 8005d08:	f361 0306 	bfi	r3, r1, #0, #7
 8005d0c:	7213      	strb	r3, [r2, #8]
      s = (uint16_t)((ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1));
 8005d0e:	4b3a      	ldr	r3, [pc, #232]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d10:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005d14:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	885b      	ldrh	r3, [r3, #2]
 8005d24:	3b0e      	subs	r3, #14
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	fb12 f303 	smulbb	r3, r2, r3
 8005d34:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 8005d36:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d911      	bls.n	8005d64 <SDO_getodlistcont+0x9c>
      {
         coel->infoheader.incomplete = 1;
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	7a13      	ldrb	r3, [r2, #8]
 8005d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d48:	7213      	strb	r3, [r2, #8]
         n = (uint16_t)(s + (ODLISTSIZE >> 1));
 8005d4a:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d4e:	885b      	ldrh	r3, [r3, #2]
 8005d50:	3b0e      	subs	r3, #14
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	4413      	add	r3, r2
 8005d60:	82bb      	strh	r3, [r7, #20]
 8005d62:	e00f      	b.n	8005d84 <SDO_getodlistcont+0xbc>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	7a13      	ldrb	r3, [r2, #8]
 8005d68:	f36f 13c7 	bfc	r3, #7, #1
 8005d6c:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <SDO_getodlistcont+0x138>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8005d74:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         n = ESCvar.entries;
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d7e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005d82:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d90:	3b01      	subs	r3, #1
 8005d92:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d94:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      coel->infoheader.fragmentsleft = htoes ((uint16_t)ESCvar.fragsleft);
 8005d98:	4b17      	ldr	r3, [pc, #92]	; (8005df8 <SDO_getodlistcont+0x130>)
 8005d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	330c      	adds	r3, #12
 8005da8:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	82fb      	strh	r3, [r7, #22]
 8005dae:	e00c      	b.n	8005dca <SDO_getodlistcont+0x102>
      {
         *p = htoes (SDOobjects[i].index);
 8005db0:	8afb      	ldrh	r3, [r7, #22]
 8005db2:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <SDO_getodlistcont+0x13c>)
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	4413      	add	r3, r2
 8005db8:	881a      	ldrh	r2, [r3, #0]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	801a      	strh	r2, [r3, #0]
         p++;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8005dc4:	8afb      	ldrh	r3, [r7, #22]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	82fb      	strh	r3, [r7, #22]
 8005dca:	8afa      	ldrh	r2, [r7, #22]
 8005dcc:	8abb      	ldrh	r3, [r7, #20]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3ee      	bcc.n	8005db0 <SDO_getodlistcont+0xe8>
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 8005dd2:	8aba      	ldrh	r2, [r7, #20]
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3306      	adds	r3, #6
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <SDO_getodlistcont+0x138>)
 8005dea:	2103      	movs	r1, #3
 8005dec:	54d1      	strb	r1, [r2, r3]
   }
}
 8005dee:	bf00      	nop
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200014a8 	.word	0x200014a8
 8005dfc:	20000e2c 	.word	0x20000e2c
 8005e00:	2000142c 	.word	0x2000142c
 8005e04:	08012268 	.word	0x08012268

08005e08 <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_getod (void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 8005e14:	4b74      	ldr	r3, [pc, #464]	; (8005fe8 <SDO_getod+0x1e0>)
 8005e16:	623b      	str	r3, [r7, #32]
   index = etohs (coer->index);
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	899b      	ldrh	r3, [r3, #12]
 8005e1c:	83fb      	strh	r3, [r7, #30]
   nidx = SDO_findobject (index);
 8005e1e:	8bfb      	ldrh	r3, [r7, #30]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe fa9f 	bl	8004364 <SDO_findobject>
 8005e26:	61b8      	str	r0, [r7, #24]
   if (nidx >= 0)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f2c0 80d4 	blt.w	8005fd8 <SDO_getod+0x1d0>
   {
      MBXout = ESC_claimbuffer ();
 8005e30:	f7fd fab4 	bl	800339c <ESC_claimbuffer>
 8005e34:	4603      	mov	r3, r0
 8005e36:	75fb      	strb	r3, [r7, #23]
      if (MBXout)
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 80cf 	beq.w	8005fde <SDO_getod+0x1d6>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	4a6a      	ldr	r2, [pc, #424]	; (8005fec <SDO_getod+0x1e4>)
 8005e44:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	4a67      	ldr	r2, [pc, #412]	; (8005fe8 <SDO_getod+0x1e0>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
         coel->mbxheader.mbxtype = MBXCOE;
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	7953      	ldrb	r3, [r2, #5]
 8005e54:	2103      	movs	r1, #3
 8005e56:	f361 0303 	bfi	r3, r1, #0, #4
 8005e5a:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005e62:	80da      	strh	r2, [r3, #6]
            htoes (COE_SDOINFORMATION << 12);
         coel->infoheader.opcode = COE_GETODRESPONSE;
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	7a13      	ldrb	r3, [r2, #8]
 8005e68:	2104      	movs	r1, #4
 8005e6a:	f361 0306 	bfi	r3, r1, #0, #7
 8005e6e:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	7a13      	ldrb	r3, [r2, #8]
 8005e74:	f36f 13c7 	bfc	r3, #7, #1
 8005e78:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2200      	movs	r2, #0
 8005e84:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (index);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	8bfa      	ldrh	r2, [r7, #30]
 8005e8a:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 8005e8c:	4a58      	ldr	r2, [pc, #352]	; (8005ff0 <SDO_getod+0x1e8>)
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	4413      	add	r3, r2
 8005e94:	3302      	adds	r3, #2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	d120      	bne.n	8005ede <SDO_getod+0xd6>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	69b8      	ldr	r0, [r7, #24]
 8005ea0:	f7fe fa02 	bl	80042a8 <SDO_findsubindex>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8005ea8:	4a51      	ldr	r2, [pc, #324]	; (8005ff0 <SDO_getod+0x1e8>)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	4413      	add	r3, r2
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	885a      	ldrh	r2, [r3, #2]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 8005ecc:	4a48      	ldr	r2, [pc, #288]	; (8005ff0 <SDO_getod+0x1e8>)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	781a      	ldrb	r2, [r3, #0]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	741a      	strb	r2, [r3, #16]
 8005edc:	e037      	b.n	8005f4e <SDO_getod+0x146>
         }
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 8005ede:	4a44      	ldr	r2, [pc, #272]	; (8005ff0 <SDO_getod+0x1e8>)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d122      	bne.n	8005f34 <SDO_getod+0x12c>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8005eee:	2100      	movs	r1, #0
 8005ef0:	69b8      	ldr	r0, [r7, #24]
 8005ef2:	f7fe f9d9 	bl	80042a8 <SDO_findsubindex>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	60fb      	str	r3, [r7, #12]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8005efa:	4a3d      	ldr	r2, [pc, #244]	; (8005ff0 <SDO_getod+0x1e8>)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	4413      	add	r3, r2
 8005f02:	330c      	adds	r3, #12
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60bb      	str	r3, [r7, #8]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	461a      	mov	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4413      	add	r3, r2
 8005f18:	885a      	ldrh	r2, [r3, #2]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 8005f1e:	4a34      	ldr	r2, [pc, #208]	; (8005ff0 <SDO_getod+0x1e8>)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	4413      	add	r3, r2
 8005f26:	330c      	adds	r3, #12
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	741a      	strb	r2, [r3, #16]
 8005f32:	e00c      	b.n	8005f4e <SDO_getod+0x146>
         }
         else
         {
            coel->datatype = htoes (0);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2200      	movs	r2, #0
 8005f38:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 8005f3a:	4a2d      	ldr	r2, [pc, #180]	; (8005ff0 <SDO_getod+0x1e8>)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	4413      	add	r3, r2
 8005f42:	330c      	adds	r3, #12
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	741a      	strb	r2, [r3, #16]
         }
         coel->objectcode = (uint8_t)SDOobjects[nidx].objtype;
 8005f4e:	4a28      	ldr	r2, [pc, #160]	; (8005ff0 <SDO_getod+0x1e8>)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	4413      	add	r3, r2
 8005f56:	3302      	adds	r3, #2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 8005f60:	4a23      	ldr	r2, [pc, #140]	; (8005ff0 <SDO_getod+0x1e8>)
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	4413      	add	r3, r2
 8005f68:	3308      	adds	r3, #8
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
         d = (uint8_t *) &(coel->name);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3312      	adds	r3, #18
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8005f74:	e00e      	b.n	8005f94 <SDO_getod+0x18c>
         {
            *d = *s;
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	781a      	ldrb	r2, [r3, #0]
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	701a      	strb	r2, [r3, #0]
            n++;
 8005f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f82:	3301      	adds	r3, #1
 8005f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            s++;
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
            d++;
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	3301      	adds	r3, #1
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d006      	beq.n	8005faa <SDO_getod+0x1a2>
 8005f9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005fa0:	4b12      	ldr	r3, [pc, #72]	; (8005fec <SDO_getod+0x1e4>)
 8005fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa4:	3b12      	subs	r3, #18
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d3e5      	bcc.n	8005f76 <SDO_getod+0x16e>
         }
         *d = *s;
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x0C + n);
 8005fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	330c      	adds	r3, #12
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <SDO_getod+0x1ec>)
 8005fc4:	2103      	movs	r1, #3
 8005fc6:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <SDO_getod+0x1ec>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8005fce:	4b07      	ldr	r3, [pc, #28]	; (8005fec <SDO_getod+0x1e4>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8005fd6:	e002      	b.n	8005fde <SDO_getod+0x1d6>
      SDO_infoerror (ABORT_NOOBJECT);
 8005fd8:	4807      	ldr	r0, [pc, #28]	; (8005ff8 <SDO_getod+0x1f0>)
 8005fda:	f7ff fd19 	bl	8005a10 <SDO_infoerror>
}
 8005fde:	bf00      	nop
 8005fe0:	3730      	adds	r7, #48	; 0x30
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000e2c 	.word	0x20000e2c
 8005fec:	200014a8 	.word	0x200014a8
 8005ff0:	08012268 	.word	0x08012268
 8005ff4:	2000142c 	.word	0x2000142c
 8005ff8:	06020000 	.word	0x06020000

08005ffc <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_geted (void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
   int16_t nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 8006006:	4b65      	ldr	r3, [pc, #404]	; (800619c <SDO_geted+0x1a0>)
 8006008:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	7b1a      	ldrb	r2, [r3, #12]
 800600e:	7b5b      	ldrb	r3, [r3, #13]
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	4313      	orrs	r3, r2
 8006014:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	7b9b      	ldrb	r3, [r3, #14]
 800601a:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 800601c:	8afb      	ldrh	r3, [r7, #22]
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe f9a0 	bl	8004364 <SDO_findobject>
 8006024:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f2c0 80b0 	blt.w	800618e <SDO_geted+0x192>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800602e:	7d7b      	ldrb	r3, [r7, #21]
 8006030:	4619      	mov	r1, r3
 8006032:	6938      	ldr	r0, [r7, #16]
 8006034:	f7fe f938 	bl	80042a8 <SDO_findsubindex>
 8006038:	4603      	mov	r3, r0
 800603a:	81fb      	strh	r3, [r7, #14]
      if (nsub >= 0)
 800603c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f2c0 80a0 	blt.w	8006186 <SDO_geted+0x18a>
      {
         objd = SDOobjects[nidx].objdesc;
 8006046:	4a56      	ldr	r2, [pc, #344]	; (80061a0 <SDO_geted+0x1a4>)
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	4413      	add	r3, r2
 800604e:	330c      	adds	r3, #12
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 8006054:	f7fd f9a2 	bl	800339c <ESC_claimbuffer>
 8006058:	4603      	mov	r3, r0
 800605a:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8098 	beq.w	8006194 <SDO_geted+0x198>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8006064:	79fb      	ldrb	r3, [r7, #7]
 8006066:	4a4f      	ldr	r2, [pc, #316]	; (80061a4 <SDO_geted+0x1a8>)
 8006068:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	4a4b      	ldr	r2, [pc, #300]	; (800619c <SDO_geted+0x1a0>)
 8006070:	4413      	add	r3, r2
 8006072:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	7953      	ldrb	r3, [r2, #5]
 8006078:	2103      	movs	r1, #3
 800607a:	f361 0303 	bfi	r3, r1, #0, #4
 800607e:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2200      	movs	r2, #0
 8006084:	719a      	strb	r2, [r3, #6]
 8006086:	2200      	movs	r2, #0
 8006088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608c:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	7a13      	ldrb	r3, [r2, #8]
 8006092:	2106      	movs	r1, #6
 8006094:	f361 0306 	bfi	r3, r1, #0, #7
 8006098:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	7a13      	ldrb	r3, [r2, #8]
 800609e:	f36f 13c7 	bfc	r3, #7, #1
 80060a2:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2200      	movs	r2, #0
 80060a8:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes (0);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2200      	movs	r2, #0
 80060ae:	729a      	strb	r2, [r3, #10]
 80060b0:	2200      	movs	r2, #0
 80060b2:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	8afa      	ldrh	r2, [r7, #22]
 80060b8:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	7d7a      	ldrb	r2, [r7, #21]
 80060be:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2207      	movs	r2, #7
 80060c4:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 80060c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	461a      	mov	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4413      	add	r3, r2
 80060d8:	885a      	ldrh	r2, [r3, #2]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 80060de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	461a      	mov	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4413      	add	r3, r2
 80060f0:	889a      	ldrh	r2, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->flags);
 80060f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	461a      	mov	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4413      	add	r3, r2
 8006108:	88da      	ldrh	r2, [r3, #6]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 800610e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	461a      	mov	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4413      	add	r3, r2
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	3316      	adds	r3, #22
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 800612a:	e00c      	b.n	8006146 <SDO_geted+0x14a>
            {
               *d = *s;
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	701a      	strb	r2, [r3, #0]
               n++;
 8006134:	7ffb      	ldrb	r3, [r7, #31]
 8006136:	3301      	adds	r3, #1
 8006138:	77fb      	strb	r3, [r7, #31]
               s++;
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	3301      	adds	r3, #1
 800613e:	623b      	str	r3, [r7, #32]
               d++;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	3301      	adds	r3, #1
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <SDO_geted+0x15e>
 800614e:	7ffa      	ldrb	r2, [r7, #31]
 8006150:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <SDO_geted+0x1a8>)
 8006152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006154:	3b16      	subs	r3, #22
 8006156:	429a      	cmp	r2, r3
 8006158:	d3e8      	bcc.n	800612c <SDO_geted+0x130>
            }
            *d = *s;
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	781a      	ldrb	r2, [r3, #0]
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes (0x10 + n);
 8006162:	7ffb      	ldrb	r3, [r7, #31]
 8006164:	b29b      	uxth	r3, r3
 8006166:	3310      	adds	r3, #16
 8006168:	b29a      	uxth	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	4a0d      	ldr	r2, [pc, #52]	; (80061a8 <SDO_geted+0x1ac>)
 8006172:	2103      	movs	r1, #3
 8006174:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <SDO_geted+0x1ac>)
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <SDO_geted+0x1a8>)
 800617e:	2200      	movs	r2, #0
 8006180:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8006184:	e006      	b.n	8006194 <SDO_geted+0x198>
         SDO_infoerror (ABORT_NOSUBINDEX);
 8006186:	4809      	ldr	r0, [pc, #36]	; (80061ac <SDO_geted+0x1b0>)
 8006188:	f7ff fc42 	bl	8005a10 <SDO_infoerror>
}
 800618c:	e002      	b.n	8006194 <SDO_geted+0x198>
      SDO_infoerror (ABORT_NOOBJECT);
 800618e:	4808      	ldr	r0, [pc, #32]	; (80061b0 <SDO_geted+0x1b4>)
 8006190:	f7ff fc3e 	bl	8005a10 <SDO_infoerror>
}
 8006194:	bf00      	nop
 8006196:	3728      	adds	r7, #40	; 0x28
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000e2c 	.word	0x20000e2c
 80061a0:	08012268 	.word	0x08012268
 80061a4:	200014a8 	.word	0x200014a8
 80061a8:	2000142c 	.word	0x2000142c
 80061ac:	06090011 	.word	0x06090011
 80061b0:	06020000 	.word	0x06020000

080061b4 <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint16_t service;
   if (ESCvar.MBXrun == 0)
 80061ba:	4b67      	ldr	r3, [pc, #412]	; (8006358 <ESC_coeprocess+0x1a4>)
 80061bc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80c4 	beq.w	800634e <ESC_coeprocess+0x19a>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 80061c6:	4b64      	ldr	r3, [pc, #400]	; (8006358 <ESC_coeprocess+0x1a4>)
 80061c8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d119      	bne.n	8006204 <ESC_coeprocess+0x50>
 80061d0:	4b62      	ldr	r3, [pc, #392]	; (800635c <ESC_coeprocess+0x1a8>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d115      	bne.n	8006204 <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 80061d8:	4b61      	ldr	r3, [pc, #388]	; (8006360 <ESC_coeprocess+0x1ac>)
 80061da:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	795b      	ldrb	r3, [r3, #5]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d10c      	bne.n	8006204 <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	d803      	bhi.n	80061fc <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 80061f4:	2008      	movs	r0, #8
 80061f6:	f7fd f955 	bl	80034a4 <MBX_error>
 80061fa:	e003      	b.n	8006204 <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 80061fc:	4b56      	ldr	r3, [pc, #344]	; (8006358 <ESC_coeprocess+0x1a4>)
 80061fe:	2203      	movs	r2, #3
 8006200:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 8006204:	4b54      	ldr	r3, [pc, #336]	; (8006358 <ESC_coeprocess+0x1a4>)
 8006206:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800620a:	2b13      	cmp	r3, #19
 800620c:	d106      	bne.n	800621c <ESC_coeprocess+0x68>
 800620e:	4b52      	ldr	r3, [pc, #328]	; (8006358 <ESC_coeprocess+0x1a4>)
 8006210:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 8006218:	f7ff fd56 	bl	8005cc8 <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 800621c:	4b4e      	ldr	r3, [pc, #312]	; (8006358 <ESC_coeprocess+0x1a4>)
 800621e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8006222:	2b03      	cmp	r3, #3
 8006224:	f040 8094 	bne.w	8006350 <ESC_coeprocess+0x19c>
   {
      coesdo = (_COEsdo *) &MBX[0];
 8006228:	4b4d      	ldr	r3, [pc, #308]	; (8006360 <ESC_coeprocess+0x1ac>)
 800622a:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 800622c:	4b4c      	ldr	r3, [pc, #304]	; (8006360 <ESC_coeprocess+0x1ac>)
 800622e:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	88db      	ldrh	r3, [r3, #6]
 8006234:	0b1b      	lsrs	r3, r3, #12
 8006236:	807b      	strh	r3, [r7, #2]
      if (service == COE_SDOREQUEST)
 8006238:	887b      	ldrh	r3, [r7, #2]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d142      	bne.n	80062c4 <ESC_coeprocess+0x110>
      {
         if ((SDO_COMMAND(coesdo->command) == COE_COMMAND_UPLOADREQUEST)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	7a1b      	ldrb	r3, [r3, #8]
 8006242:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d10f      	bne.n	800626a <ESC_coeprocess+0xb6>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	2b0a      	cmp	r3, #10
 8006250:	d10b      	bne.n	800626a <ESC_coeprocess+0xb6>
         {
            /* initiate SDO upload request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	7a1b      	ldrb	r3, [r3, #8]
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <ESC_coeprocess+0xb0>
            {
               SDO_upload_complete_access ();
 800625e:	f7fe fe3b 	bl	8004ed8 <SDO_upload_complete_access>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8006262:	e075      	b.n	8006350 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_upload ();
 8006264:	f7fe fa74 	bl	8004750 <SDO_upload>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8006268:	e072      	b.n	8006350 <ESC_coeprocess+0x19c>
            }
         }
         else if (((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	7a1b      	ldrb	r3, [r3, #8]
 800626e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006272:	2b60      	cmp	r3, #96	; 0x60
 8006274:	d10b      	bne.n	800628e <ESC_coeprocess+0xda>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	2b0a      	cmp	r3, #10
 800627c:	d107      	bne.n	800628e <ESC_coeprocess+0xda>
               && (ESCvar.segmented == MBXSEU))
 800627e:	4b36      	ldr	r3, [pc, #216]	; (8006358 <ESC_coeprocess+0x1a4>)
 8006280:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d102      	bne.n	800628e <ESC_coeprocess+0xda>
         {
            /* SDO upload segment request */
            SDO_uploadsegment ();
 8006288:	f7fe ff44 	bl	8005114 <SDO_uploadsegment>
 800628c:	e060      	b.n	8006350 <ESC_coeprocess+0x19c>
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADREQUEST)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	7a1b      	ldrb	r3, [r3, #8]
 8006292:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006296:	2b20      	cmp	r3, #32
 8006298:	d10b      	bne.n	80062b2 <ESC_coeprocess+0xfe>
         {
            /* initiate SDO download request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	7a1b      	ldrb	r3, [r3, #8]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <ESC_coeprocess+0xf8>
            {
               SDO_download_complete_access ();
 80062a6:	f7ff f9b3 	bl	8005610 <SDO_download_complete_access>
 80062aa:	e051      	b.n	8006350 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_download ();
 80062ac:	f7fe ffec 	bl	8005288 <SDO_download>
 80062b0:	e04e      	b.n	8006350 <ESC_coeprocess+0x19c>
            }
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADSEGREQ)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	7a1b      	ldrb	r3, [r3, #8]
 80062b6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d148      	bne.n	8006350 <ESC_coeprocess+0x19c>
         {
            /* SDO download segment request */
            SDO_downloadsegment ();
 80062be:	f7ff fabb 	bl	8005838 <SDO_downloadsegment>
 80062c2:	e045      	b.n	8006350 <ESC_coeprocess+0x19c>
         }
      }
      /* initiate SDO get OD list */
      else
      {
         if ((service == COE_SDOINFORMATION)
 80062c4:	887b      	ldrh	r3, [r7, #2]
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d109      	bne.n	80062de <ESC_coeprocess+0x12a>
               && (coeobjdesc->infoheader.opcode == 0x01))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	7a1b      	ldrb	r3, [r3, #8]
 80062ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d102      	bne.n	80062de <ESC_coeprocess+0x12a>
         {
            SDO_getodlist ();
 80062d8:	f7ff fbea 	bl	8005ab0 <SDO_getodlist>
 80062dc:	e038      	b.n	8006350 <ESC_coeprocess+0x19c>
         }
         /* initiate SDO get OD */
         else
         {
            if ((service == COE_SDOINFORMATION)
 80062de:	887b      	ldrh	r3, [r7, #2]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d109      	bne.n	80062f8 <ESC_coeprocess+0x144>
                  && (coeobjdesc->infoheader.opcode == 0x03))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	7a1b      	ldrb	r3, [r3, #8]
 80062e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d102      	bne.n	80062f8 <ESC_coeprocess+0x144>
            {
               SDO_getod ();
 80062f2:	f7ff fd89 	bl	8005e08 <SDO_getod>
 80062f6:	e02b      	b.n	8006350 <ESC_coeprocess+0x19c>
            }
            /* initiate SDO get ED */
            else
            {
               if ((service == COE_SDOINFORMATION)
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d109      	bne.n	8006312 <ESC_coeprocess+0x15e>
                     && (coeobjdesc->infoheader.opcode == 0x05))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	7a1b      	ldrb	r3, [r3, #8]
 8006302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b05      	cmp	r3, #5
 800630a:	d102      	bne.n	8006312 <ESC_coeprocess+0x15e>
               {
                  SDO_geted ();
 800630c:	f7ff fe76 	bl	8005ffc <SDO_geted>
 8006310:	e01e      	b.n	8006350 <ESC_coeprocess+0x19c>
               }
               else
               {
                  /* COE not recognised above */
                  if (ESCvar.xoe == MBXCOE)
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <ESC_coeprocess+0x1a4>)
 8006314:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8006318:	2b03      	cmp	r3, #3
 800631a:	d119      	bne.n	8006350 <ESC_coeprocess+0x19c>
                  {
                     if (service == 0)
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <ESC_coeprocess+0x176>
                     {
                        MBX_error (MBXERR_INVALIDHEADER);
 8006322:	2005      	movs	r0, #5
 8006324:	f7fd f8be 	bl	80034a4 <MBX_error>
 8006328:	e009      	b.n	800633e <ESC_coeprocess+0x18a>
                     }
                     else
                     {
                        SDO_abort (0, etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006330:	b299      	uxth	r1, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	7ada      	ldrb	r2, [r3, #11]
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <ESC_coeprocess+0x1b0>)
 8006338:	2000      	movs	r0, #0
 800633a:	f7fe f99f 	bl	800467c <SDO_abort>
                     }
                     MBXcontrol[0].state = MBXstate_idle;
 800633e:	4b07      	ldr	r3, [pc, #28]	; (800635c <ESC_coeprocess+0x1a8>)
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
                     ESCvar.xoe = 0;
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <ESC_coeprocess+0x1a4>)
 8006346:	2200      	movs	r2, #0
 8006348:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800634c:	e000      	b.n	8006350 <ESC_coeprocess+0x19c>
      return;
 800634e:	bf00      	nop
               }
            }
         }
      }
   }
}
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200014a8 	.word	0x200014a8
 800635c:	2000142c 	.word	0x2000142c
 8006360:	20000e2c 	.word	0x20000e2c
 8006364:	06010000 	.word	0x06010000

08006368 <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, unsigned int offset, unsigned int length)
{
 8006368:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800636c:	b092      	sub	sp, #72	; 0x48
 800636e:	af00      	add	r7, sp, #0
 8006370:	6278      	str	r0, [r7, #36]	; 0x24
 8006372:	6239      	str	r1, [r7, #32]
 8006374:	61fa      	str	r2, [r7, #28]
   const unsigned int word_offset = offset / 64;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	099b      	lsrs	r3, r3, #6
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
   const unsigned int bit_offset = offset % 64;
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	2b40      	cmp	r3, #64	; 0x40
 8006388:	d018      	beq.n	80063bc <COE_bitsliceGet+0x54>
 800638a:	f04f 0201 	mov.w	r2, #1
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	69fe      	ldr	r6, [r7, #28]
 8006394:	f1a6 0120 	sub.w	r1, r6, #32
 8006398:	f1c6 0020 	rsb	r0, r6, #32
 800639c:	fa03 f506 	lsl.w	r5, r3, r6
 80063a0:	fa02 f101 	lsl.w	r1, r2, r1
 80063a4:	430d      	orrs	r5, r1
 80063a6:	fa22 f000 	lsr.w	r0, r2, r0
 80063aa:	4305      	orrs	r5, r0
 80063ac:	fa02 f406 	lsl.w	r4, r2, r6
 80063b0:	1e63      	subs	r3, r4, #1
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e005      	b.n	80063c8 <COE_bitsliceGet+0x60>
 80063bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80063c4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80063c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80063cc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
   uint64_t w0;
   uint64_t w1 = 0;
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e2:	4413      	add	r3, r2
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   w0 = w0 >> bit_offset;
 80063ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f2:	f1c1 0420 	rsb	r4, r1, #32
 80063f6:	f1a1 0020 	sub.w	r0, r1, #32
 80063fa:	fa22 fa01 	lsr.w	sl, r2, r1
 80063fe:	fa03 f404 	lsl.w	r4, r3, r4
 8006402:	ea4a 0a04 	orr.w	sl, sl, r4
 8006406:	fa23 f000 	lsr.w	r0, r3, r0
 800640a:	ea4a 0a00 	orr.w	sl, sl, r0
 800640e:	fa23 fb01 	lsr.w	fp, r3, r1
 8006412:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	4413      	add	r3, r2
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d91f      	bls.n	8006460 <COE_bitsliceGet+0xf8>
   {
      w1 = bitmap[word_offset + 1];
 8006420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006422:	3301      	adds	r3, #1
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006428:	4413      	add	r3, r2
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      w1 = w1 << (64 - bit_offset);
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 8006438:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800643c:	f1a1 0420 	sub.w	r4, r1, #32
 8006440:	f1c1 0020 	rsb	r0, r1, #32
 8006444:	fa03 f901 	lsl.w	r9, r3, r1
 8006448:	fa02 f404 	lsl.w	r4, r2, r4
 800644c:	ea49 0904 	orr.w	r9, r9, r4
 8006450:	fa22 f000 	lsr.w	r0, r2, r0
 8006454:	ea49 0900 	orr.w	r9, r9, r0
 8006458:	fa02 f801 	lsl.w	r8, r2, r1
 800645c:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
   }

   w0 = (w1 | w0);
 8006460:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006464:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006468:	ea40 0402 	orr.w	r4, r0, r2
 800646c:	603c      	str	r4, [r7, #0]
 800646e:	430b      	orrs	r3, r1
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006476:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
   return (w0 & mask);
 800647a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800647e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006482:	ea00 0402 	and.w	r4, r0, r2
 8006486:	60bc      	str	r4, [r7, #8]
 8006488:	400b      	ands	r3, r1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	3748      	adds	r7, #72	; 0x48
 8006496:	46bd      	mov	sp, r7
 8006498:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800649c:	4770      	bx	lr

0800649e <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, unsigned int offset, unsigned int length,
                             uint64_t value)
{
 800649e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064a2:	b0aa      	sub	sp, #168	; 0xa8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6678      	str	r0, [r7, #100]	; 0x64
 80064a8:	6639      	str	r1, [r7, #96]	; 0x60
 80064aa:	65fa      	str	r2, [r7, #92]	; 0x5c
   const unsigned int word_offset = offset / 64;
 80064ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   const unsigned int bit_offset = offset % 64;
 80064b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 80064be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d018      	beq.n	80064f6 <COE_bitsliceSet+0x58>
 80064c4:	f04f 0201 	mov.w	r2, #1
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 80064ce:	f1a6 0120 	sub.w	r1, r6, #32
 80064d2:	f1c6 0020 	rsb	r0, r6, #32
 80064d6:	fa03 f506 	lsl.w	r5, r3, r6
 80064da:	fa02 f101 	lsl.w	r1, r2, r1
 80064de:	430d      	orrs	r5, r1
 80064e0:	fa22 f000 	lsr.w	r0, r2, r0
 80064e4:	4305      	orrs	r5, r0
 80064e6:	fa02 f406 	lsl.w	r4, r2, r6
 80064ea:	1e63      	subs	r3, r4, #1
 80064ec:	643b      	str	r3, [r7, #64]	; 0x40
 80064ee:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
 80064f2:	647b      	str	r3, [r7, #68]	; 0x44
 80064f4:	e005      	b.n	8006502 <COE_bitsliceSet+0x64>
 80064f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064fe:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8006502:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006506:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
   const uint64_t mask0 = mask << bit_offset;
 800650a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800650e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8006512:	f1a4 0120 	sub.w	r1, r4, #32
 8006516:	f1c4 0020 	rsb	r0, r4, #32
 800651a:	fa03 f904 	lsl.w	r9, r3, r4
 800651e:	fa02 f101 	lsl.w	r1, r2, r1
 8006522:	ea49 0901 	orr.w	r9, r9, r1
 8006526:	fa22 f000 	lsr.w	r0, r2, r0
 800652a:	ea49 0900 	orr.w	r9, r9, r0
 800652e:	fa02 f804 	lsl.w	r8, r2, r4
 8006532:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
   uint64_t v0 = value << bit_offset;
 8006536:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800653a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800653e:	f1a4 0120 	sub.w	r1, r4, #32
 8006542:	f1c4 0020 	rsb	r0, r4, #32
 8006546:	fa03 fb04 	lsl.w	fp, r3, r4
 800654a:	fa02 f101 	lsl.w	r1, r2, r1
 800654e:	ea4b 0b01 	orr.w	fp, fp, r1
 8006552:	fa22 f000 	lsr.w	r0, r2, r0
 8006556:	ea4b 0b00 	orr.w	fp, fp, r0
 800655a:	fa02 fa04 	lsl.w	sl, r2, r4
 800655e:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
   uint64_t w0 = bitmap[word_offset];
 8006562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006566:	00da      	lsls	r2, r3, #3
 8006568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800656a:	4413      	add	r3, r2
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 8006574:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006578:	43d1      	mvns	r1, r2
 800657a:	63b9      	str	r1, [r7, #56]	; 0x38
 800657c:	43db      	mvns	r3, r3
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006584:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8006588:	4621      	mov	r1, r4
 800658a:	4011      	ands	r1, r2
 800658c:	6339      	str	r1, [r7, #48]	; 0x30
 800658e:	4629      	mov	r1, r5
 8006590:	4019      	ands	r1, r3
 8006592:	6379      	str	r1, [r7, #52]	; 0x34
 8006594:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006598:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800659c:	ea00 0402 	and.w	r4, r0, r2
 80065a0:	62bc      	str	r4, [r7, #40]	; 0x28
 80065a2:	400b      	ands	r3, r1
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065aa:	4623      	mov	r3, r4
 80065ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065b0:	4602      	mov	r2, r0
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	462b      	mov	r3, r5
 80065b8:	460a      	mov	r2, r1
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80065c2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
   bitmap[word_offset] = w0;
 80065c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065ce:	18d1      	adds	r1, r2, r3
 80065d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80065d4:	e9c1 2300 	strd	r2, r3, [r1]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 80065d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065de:	4413      	add	r3, r2
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d976      	bls.n	80066d2 <COE_bitsliceSet+0x234>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 80065e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065e8:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
 80065ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80065f0:	f1c4 0120 	rsb	r1, r4, #32
 80065f4:	f1a4 0020 	sub.w	r0, r4, #32
 80065f8:	fa22 f504 	lsr.w	r5, r2, r4
 80065fc:	653d      	str	r5, [r7, #80]	; 0x50
 80065fe:	fa03 f101 	lsl.w	r1, r3, r1
 8006602:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8006604:	430d      	orrs	r5, r1
 8006606:	653d      	str	r5, [r7, #80]	; 0x50
 8006608:	fa23 f000 	lsr.w	r0, r3, r0
 800660c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800660e:	4301      	orrs	r1, r0
 8006610:	6539      	str	r1, [r7, #80]	; 0x50
 8006612:	40e3      	lsrs	r3, r4
 8006614:	657b      	str	r3, [r7, #84]	; 0x54
 8006616:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800661a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      uint64_t v1 = value >> (64 - bit_offset);
 800661e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006622:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
 8006626:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800662a:	f1c0 0420 	rsb	r4, r0, #32
 800662e:	f1a0 0120 	sub.w	r1, r0, #32
 8006632:	fa22 f500 	lsr.w	r5, r2, r0
 8006636:	64bd      	str	r5, [r7, #72]	; 0x48
 8006638:	fa03 f404 	lsl.w	r4, r3, r4
 800663c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800663e:	4325      	orrs	r5, r4
 8006640:	64bd      	str	r5, [r7, #72]	; 0x48
 8006642:	fa23 f101 	lsr.w	r1, r3, r1
 8006646:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006648:	430c      	orrs	r4, r1
 800664a:	64bc      	str	r4, [r7, #72]	; 0x48
 800664c:	40c3      	lsrs	r3, r0
 800664e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006650:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006654:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
      uint64_t w1 = bitmap[word_offset + 1];
 8006658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800665c:	3301      	adds	r3, #1
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006662:	4413      	add	r3, r2
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

      w1 = (w1 & ~mask1) | (v1 & mask1);
 800666c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006670:	43d1      	mvns	r1, r2
 8006672:	6239      	str	r1, [r7, #32]
 8006674:	43db      	mvns	r3, r3
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
 8006678:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800667c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006680:	4621      	mov	r1, r4
 8006682:	4011      	ands	r1, r2
 8006684:	61b9      	str	r1, [r7, #24]
 8006686:	4629      	mov	r1, r5
 8006688:	4019      	ands	r1, r3
 800668a:	61f9      	str	r1, [r7, #28]
 800668c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006690:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006694:	ea00 0402 	and.w	r4, r0, r2
 8006698:	613c      	str	r4, [r7, #16]
 800669a:	400b      	ands	r3, r1
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80066a2:	4623      	mov	r3, r4
 80066a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066a8:	4602      	mov	r2, r0
 80066aa:	4313      	orrs	r3, r2
 80066ac:	603b      	str	r3, [r7, #0]
 80066ae:	462b      	mov	r3, r5
 80066b0:	460a      	mov	r2, r1
 80066b2:	4313      	orrs	r3, r2
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80066ba:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
      bitmap[word_offset + 1] = w1;
 80066be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066c2:	3301      	adds	r3, #1
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066c8:	18d1      	adds	r1, r2, r3
 80066ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80066ce:	e9c1 2300 	strd	r2, r3, [r1]
   }
}
 80066d2:	bf00      	nop
 80066d4:	37a8      	adds	r7, #168	; 0xa8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066dc:	4770      	bx	lr
	...

080066e0 <COE_getValue>:
 *
 * @param[in] obj   = object description
 * @return object value
 */
static uint64_t COE_getValue (const _objd * obj)
{
 80066e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
   uint64_t value = 0;
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	e9c7 2302 	strd	r2, r3, [r7, #8]

   /* TODO: const data */

   switch(obj->datatype)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b36      	cmp	r3, #54	; 0x36
 80066fe:	f200 8095 	bhi.w	800682c <COE_getValue+0x14c>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <COE_getValue+0x28>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	080067e5 	.word	0x080067e5
 800670c:	080067e5 	.word	0x080067e5
 8006710:	080067f9 	.word	0x080067f9
 8006714:	0800680d 	.word	0x0800680d
 8006718:	080067e5 	.word	0x080067e5
 800671c:	080067f9 	.word	0x080067f9
 8006720:	0800680d 	.word	0x0800680d
 8006724:	0800680d 	.word	0x0800680d
 8006728:	0800682d 	.word	0x0800682d
 800672c:	0800682d 	.word	0x0800682d
 8006730:	0800682d 	.word	0x0800682d
 8006734:	0800682d 	.word	0x0800682d
 8006738:	0800682d 	.word	0x0800682d
 800673c:	0800682d 	.word	0x0800682d
 8006740:	0800682d 	.word	0x0800682d
 8006744:	0800682d 	.word	0x0800682d
 8006748:	0800681f 	.word	0x0800681f
 800674c:	0800682d 	.word	0x0800682d
 8006750:	0800682d 	.word	0x0800682d
 8006754:	0800682d 	.word	0x0800682d
 8006758:	0800681f 	.word	0x0800681f
 800675c:	0800682d 	.word	0x0800682d
 8006760:	0800682d 	.word	0x0800682d
 8006764:	0800682d 	.word	0x0800682d
 8006768:	0800682d 	.word	0x0800682d
 800676c:	0800682d 	.word	0x0800682d
 8006770:	0800681f 	.word	0x0800681f
 8006774:	0800682d 	.word	0x0800682d
 8006778:	0800682d 	.word	0x0800682d
 800677c:	0800682d 	.word	0x0800682d
 8006780:	0800682d 	.word	0x0800682d
 8006784:	0800682d 	.word	0x0800682d
 8006788:	0800682d 	.word	0x0800682d
 800678c:	0800682d 	.word	0x0800682d
 8006790:	0800682d 	.word	0x0800682d
 8006794:	0800682d 	.word	0x0800682d
 8006798:	0800682d 	.word	0x0800682d
 800679c:	0800682d 	.word	0x0800682d
 80067a0:	0800682d 	.word	0x0800682d
 80067a4:	0800682d 	.word	0x0800682d
 80067a8:	0800682d 	.word	0x0800682d
 80067ac:	0800682d 	.word	0x0800682d
 80067b0:	0800682d 	.word	0x0800682d
 80067b4:	0800682d 	.word	0x0800682d
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	080067f9 	.word	0x080067f9
 80067c0:	0800680d 	.word	0x0800680d
 80067c4:	080067e5 	.word	0x080067e5
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	080067e5 	.word	0x080067e5
 80067d0:	080067e5 	.word	0x080067e5
 80067d4:	080067e5 	.word	0x080067e5
 80067d8:	080067e5 	.word	0x080067e5
 80067dc:	080067e5 	.word	0x080067e5
 80067e0:	080067e5 	.word	0x080067e5
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      value = *(uint8_t *)obj->data;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2200      	movs	r2, #0
 80067ee:	469a      	mov	sl, r3
 80067f0:	4693      	mov	fp, r2
 80067f2:	e9c7 ab02 	strd	sl, fp, [r7, #8]
      break;
 80067f6:	e020      	b.n	800683a <COE_getValue+0x15a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      value = *(uint16_t *)obj->data;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2200      	movs	r2, #0
 8006802:	4698      	mov	r8, r3
 8006804:	4691      	mov	r9, r2
 8006806:	e9c7 8902 	strd	r8, r9, [r7, #8]
      break;
 800680a:	e016      	b.n	800683a <COE_getValue+0x15a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      value = *(uint32_t *)obj->data;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	461c      	mov	r4, r3
 8006816:	4615      	mov	r5, r2
 8006818:	e9c7 4502 	strd	r4, r5, [r7, #8]
      break;
 800681c:	e00d      	b.n	800683a <COE_getValue+0x15a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      value = *(uint64_t *)obj->data;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	e9c7 2302 	strd	r2, r3, [r7, #8]
      break;
 800682a:	e006      	b.n	800683a <COE_getValue+0x15a>

   default:
      CC_ASSERT (0);
 800682c:	4b07      	ldr	r3, [pc, #28]	; (800684c <COE_getValue+0x16c>)
 800682e:	4a08      	ldr	r2, [pc, #32]	; (8006850 <COE_getValue+0x170>)
 8006830:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 8006834:	4807      	ldr	r0, [pc, #28]	; (8006854 <COE_getValue+0x174>)
 8006836:	f009 fb79 	bl	800ff2c <__assert_func>
   }

   return value;
 800683a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800683e:	4610      	mov	r0, r2
 8006840:	4619      	mov	r1, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800684a:	bf00      	nop
 800684c:	080118fc 	.word	0x080118fc
 8006850:	08011bf8 	.word	0x08011bf8
 8006854:	08011900 	.word	0x08011900

08006858 <COE_setValue>:
 *
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	e9c7 2300 	strd	r2, r3, [r7]
   switch(obj->datatype)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	885b      	ldrh	r3, [r3, #2]
 8006868:	3b01      	subs	r3, #1
 800686a:	2b36      	cmp	r3, #54	; 0x36
 800686c:	f200 8088 	bhi.w	8006980 <COE_setValue+0x128>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <COE_setValue+0x20>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	08006955 	.word	0x08006955
 800687c:	08006955 	.word	0x08006955
 8006880:	0800695f 	.word	0x0800695f
 8006884:	08006969 	.word	0x08006969
 8006888:	08006955 	.word	0x08006955
 800688c:	0800695f 	.word	0x0800695f
 8006890:	08006969 	.word	0x08006969
 8006894:	08006969 	.word	0x08006969
 8006898:	08006981 	.word	0x08006981
 800689c:	08006981 	.word	0x08006981
 80068a0:	08006981 	.word	0x08006981
 80068a4:	08006981 	.word	0x08006981
 80068a8:	08006981 	.word	0x08006981
 80068ac:	08006981 	.word	0x08006981
 80068b0:	08006981 	.word	0x08006981
 80068b4:	08006981 	.word	0x08006981
 80068b8:	08006973 	.word	0x08006973
 80068bc:	08006981 	.word	0x08006981
 80068c0:	08006981 	.word	0x08006981
 80068c4:	08006981 	.word	0x08006981
 80068c8:	08006973 	.word	0x08006973
 80068cc:	08006981 	.word	0x08006981
 80068d0:	08006981 	.word	0x08006981
 80068d4:	08006981 	.word	0x08006981
 80068d8:	08006981 	.word	0x08006981
 80068dc:	08006981 	.word	0x08006981
 80068e0:	08006973 	.word	0x08006973
 80068e4:	08006981 	.word	0x08006981
 80068e8:	08006981 	.word	0x08006981
 80068ec:	08006981 	.word	0x08006981
 80068f0:	08006981 	.word	0x08006981
 80068f4:	08006981 	.word	0x08006981
 80068f8:	08006981 	.word	0x08006981
 80068fc:	08006981 	.word	0x08006981
 8006900:	08006981 	.word	0x08006981
 8006904:	08006981 	.word	0x08006981
 8006908:	08006981 	.word	0x08006981
 800690c:	08006981 	.word	0x08006981
 8006910:	08006981 	.word	0x08006981
 8006914:	08006981 	.word	0x08006981
 8006918:	08006981 	.word	0x08006981
 800691c:	08006981 	.word	0x08006981
 8006920:	08006981 	.word	0x08006981
 8006924:	08006981 	.word	0x08006981
 8006928:	08006955 	.word	0x08006955
 800692c:	0800695f 	.word	0x0800695f
 8006930:	08006969 	.word	0x08006969
 8006934:	08006955 	.word	0x08006955
 8006938:	08006955 	.word	0x08006955
 800693c:	08006955 	.word	0x08006955
 8006940:	08006955 	.word	0x08006955
 8006944:	08006955 	.word	0x08006955
 8006948:	08006955 	.word	0x08006955
 800694c:	08006955 	.word	0x08006955
 8006950:	08006955 	.word	0x08006955
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	783a      	ldrb	r2, [r7, #0]
 800695a:	701a      	strb	r2, [r3, #0]
      break;
 800695c:	e011      	b.n	8006982 <COE_setValue+0x12a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	883a      	ldrh	r2, [r7, #0]
 8006964:	801a      	strh	r2, [r3, #0]
      break;
 8006966:	e00c      	b.n	8006982 <COE_setValue+0x12a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	601a      	str	r2, [r3, #0]
      break;
 8006970:	e007      	b.n	8006982 <COE_setValue+0x12a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6919      	ldr	r1, [r3, #16]
 8006976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697a:	e9c1 2300 	strd	r2, r3, [r1]
      break;
 800697e:	e000      	b.n	8006982 <COE_setValue+0x12a>

   default:
      DPRINT ("ignored\n");
      break;
 8006980:	bf00      	nop
   }
}
 8006982:	bf00      	nop
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop

08006990 <COE_initDefaultValues>:

/**
 * Init default values for SDO objects
 */
void COE_initDefaultValues (void)
{
 8006990:	b5b0      	push	{r4, r5, r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Let application decide if initialization will be skipped */
   if (ESCvar.skip_default_initialization)
 8006996:	4b32      	ldr	r3, [pc, #200]	; (8006a60 <COE_initDefaultValues+0xd0>)
 8006998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	d15a      	bne.n	8006a56 <COE_initDefaultValues+0xc6>
   {
      return;
   }

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	60bb      	str	r3, [r7, #8]
 80069a4:	e046      	b.n	8006a34 <COE_initDefaultValues+0xa4>
   {
      objd = SDOobjects[n].objdesc;
 80069a6:	4a2f      	ldr	r2, [pc, #188]	; (8006a64 <COE_initDefaultValues+0xd4>)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	4413      	add	r3, r2
 80069ae:	330c      	adds	r3, #12
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	607b      	str	r3, [r7, #4]
      maxsub = SDOobjects[n].maxsub;
 80069b4:	4a2b      	ldr	r2, [pc, #172]	; (8006a64 <COE_initDefaultValues+0xd4>)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	4413      	add	r3, r2
 80069bc:	3304      	adds	r3, #4
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	70fb      	strb	r3, [r7, #3]

      i = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
      do
      {
         if (objd[i].data != NULL)
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	461a      	mov	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d018      	beq.n	8006a0e <COE_initDefaultValues+0x7e>
         {
            COE_setValue (&objd[i], objd[i].value);
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	1899      	adds	r1, r3, r2
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	461a      	mov	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4413      	add	r3, r2
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	461c      	mov	r4, r3
 8006a02:	4615      	mov	r5, r2
 8006a04:	4622      	mov	r2, r4
 8006a06:	462b      	mov	r3, r5
 8006a08:	4608      	mov	r0, r1
 8006a0a:	f7ff ff25 	bl	8006858 <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
         }
      } while (objd[i++].subindex < maxsub);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	60fa      	str	r2, [r7, #12]
 8006a14:	461a      	mov	r2, r3
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4413      	add	r3, r2
 8006a24:	881a      	ldrh	r2, [r3, #0]
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d3cb      	bcc.n	80069c6 <COE_initDefaultValues+0x36>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60bb      	str	r3, [r7, #8]
 8006a34:	4a0b      	ldr	r2, [pc, #44]	; (8006a64 <COE_initDefaultValues+0xd4>)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d1af      	bne.n	80069a6 <COE_initDefaultValues+0x16>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 8006a46:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <COE_initDefaultValues+0xd0>)
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <COE_initDefaultValues+0xc8>
   {
      ESCvar.set_defaults_hook();
 8006a4e:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <COE_initDefaultValues+0xd0>)
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	4798      	blx	r3
 8006a54:	e000      	b.n	8006a58 <COE_initDefaultValues+0xc8>
      return;
 8006a56:	bf00      	nop
   }
}
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	200014a8 	.word	0x200014a8
 8006a64:	08012268 	.word	0x08012268

08006a68 <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08c      	sub	sp, #48	; 0x30
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d006      	beq.n	8006a8c <COE_pdoPack+0x24>
 8006a7e:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <COE_pdoPack+0xb8>)
 8006a80:	4a28      	ldr	r2, [pc, #160]	; (8006b24 <COE_pdoPack+0xbc>)
 8006a82:	f240 61fa 	movw	r1, #1786	; 0x6fa
 8006a86:	4828      	ldr	r0, [pc, #160]	; (8006b28 <COE_pdoPack+0xc0>)
 8006a88:	f009 fa50 	bl	800ff2c <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a90:	e03c      	b.n	8006b0c <COE_pdoPack+0xa4>
   {
      const _objd * obj = mappings[ix].obj;
 8006a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a94:	4613      	mov	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 8006aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d022      	beq.n	8006b06 <COE_pdoPack+0x9e>
      {
         if (obj->bitlength > 64)
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	889b      	ldrh	r3, [r3, #4]
 8006ac4:	2b40      	cmp	r3, #64	; 0x40
 8006ac6:	d90d      	bls.n	8006ae4 <COE_pdoPack+0x7c>
         {
            memcpy (
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	08db      	lsrs	r3, r3, #3
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	18d0      	adds	r0, r2, r3
               obj->data,
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	6919      	ldr	r1, [r3, #16]
               BITS2BYTES (obj->bitlength)
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	889b      	ldrh	r3, [r3, #4]
 8006ad8:	3307      	adds	r3, #7
            memcpy (
 8006ada:	08db      	lsrs	r3, r3, #3
 8006adc:	461a      	mov	r2, r3
 8006ade:	f009 fb88 	bl	80101f2 <memcpy>
 8006ae2:	e010      	b.n	8006b06 <COE_pdoPack+0x9e>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 8006ae4:	6a38      	ldr	r0, [r7, #32]
 8006ae6:	f7ff fdfb 	bl	80066e0 <COE_getValue>
 8006aea:	e9c7 0104 	strd	r0, r1, [r7, #16]
            COE_bitsliceSet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength,
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	889b      	ldrh	r3, [r3, #4]
            COE_bitsliceSet (
 8006af2:	4619      	mov	r1, r3
 8006af4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006af8:	e9cd 2300 	strd	r2, r3, [sp]
 8006afc:	460a      	mov	r2, r1
 8006afe:	69f9      	ldr	r1, [r7, #28]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff fccc 	bl	800649e <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	3301      	adds	r3, #1
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	dbbe      	blt.n	8006a92 <COE_pdoPack+0x2a>
               value
            );
         }
      }
   }
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	3728      	adds	r7, #40	; 0x28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	08011928 	.word	0x08011928
 8006b24:	08011c08 	.word	0x08011c08
 8006b28:	08011900 	.word	0x08011900

08006b2c <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d006      	beq.n	8006b50 <COE_pdoUnpack+0x24>
 8006b42:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <COE_pdoUnpack+0xb0>)
 8006b44:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <COE_pdoUnpack+0xb4>)
 8006b46:	f240 7129 	movw	r1, #1833	; 0x729
 8006b4a:	4826      	ldr	r0, [pc, #152]	; (8006be4 <COE_pdoUnpack+0xb8>)
 8006b4c:	f009 f9ee 	bl	800ff2c <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
 8006b54:	e039      	b.n	8006bca <COE_pdoUnpack+0x9e>
   {
      const _objd * obj = mappings[ix].obj;
 8006b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b58:	4613      	mov	r3, r2
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	461a      	mov	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4413      	add	r3, r2
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 8006b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	461a      	mov	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01f      	beq.n	8006bc4 <COE_pdoUnpack+0x98>
      {
         if (obj->bitlength > 64)
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	889b      	ldrh	r3, [r3, #4]
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	d90d      	bls.n	8006ba8 <COE_pdoUnpack+0x7c>
         {
            memcpy (
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	6918      	ldr	r0, [r3, #16]
               obj->data,
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	08db      	lsrs	r3, r3, #3
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	18d1      	adds	r1, r2, r3
               BITS2BYTES (obj->bitlength)
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	889b      	ldrh	r3, [r3, #4]
 8006b9c:	3307      	adds	r3, #7
            memcpy (
 8006b9e:	08db      	lsrs	r3, r3, #3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f009 fb26 	bl	80101f2 <memcpy>
 8006ba6:	e00d      	b.n	8006bc4 <COE_pdoUnpack+0x98>
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	889b      	ldrh	r3, [r3, #4]
            uint64_t value = COE_bitsliceGet (
 8006bac:	461a      	mov	r2, r3
 8006bae:	69f9      	ldr	r1, [r7, #28]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f7ff fbd9 	bl	8006368 <COE_bitsliceGet>
 8006bb6:	e9c7 0104 	strd	r0, r1, [r7, #16]
            );
            COE_setValue (obj, value);
 8006bba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006bbe:	6a38      	ldr	r0, [r7, #32]
 8006bc0:	f7ff fe4a 	bl	8006858 <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	dbc1      	blt.n	8006b56 <COE_pdoUnpack+0x2a>
         }
      }
   }
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	3728      	adds	r7, #40	; 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	08011928 	.word	0x08011928
 8006be0:	08011c14 	.word	0x08011c14
 8006be4:	08011900 	.word	0x08011900

08006be8 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	80fb      	strh	r3, [r7, #6]
   int32_t nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fd fbb5 	bl	8004364 <SDO_findobject>
 8006bfa:	60f8      	str	r0, [r7, #12]
   if (nidx == -1)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c02:	d101      	bne.n	8006c08 <COE_maxSub+0x20>
      return 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e01b      	b.n	8006c40 <COE_maxSub+0x58>

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 8006c08:	4a0f      	ldr	r2, [pc, #60]	; (8006c48 <COE_maxSub+0x60>)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	4413      	add	r3, r2
 8006c10:	330c      	adds	r3, #12
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <COE_maxSub+0x44>
 8006c1a:	4a0b      	ldr	r2, [pc, #44]	; (8006c48 <COE_maxSub+0x60>)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	4413      	add	r3, r2
 8006c22:	330c      	adds	r3, #12
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	e007      	b.n	8006c3c <COE_maxSub+0x54>
 8006c2c:	4a06      	ldr	r2, [pc, #24]	; (8006c48 <COE_maxSub+0x60>)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	4413      	add	r3, r2
 8006c34:	330c      	adds	r3, #12
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	72fb      	strb	r3, [r7, #11]
   return maxsub;
 8006c3e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	08012268 	.word	0x08012268

08006c4c <ESC_read_hw>:
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

/* ESC read CSR function. */
static void ESC_read_hw (uint16_t address, void *buf, uint16_t len)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	80fb      	strh	r3, [r7, #6]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	80bb      	strh	r3, [r7, #4]
   /* Read data from address on tmc slave. */
   tmc8462_esc_read_data (&tmc8462, buf, address, len);
 8006c5c:	88bb      	ldrh	r3, [r7, #4]
 8006c5e:	88fa      	ldrh	r2, [r7, #6]
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	4803      	ldr	r0, [pc, #12]	; (8006c70 <ESC_read_hw+0x24>)
 8006c64:	f000 fa92 	bl	800718c <tmc8462_esc_read_data>
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	200023c0 	.word	0x200023c0

08006c74 <ESC_write_hw>:

/* ESC read CSR function. */
static void ESC_write_hw (uint16_t address, void *buf, uint16_t len)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	6039      	str	r1, [r7, #0]
 8006c7e:	80fb      	strh	r3, [r7, #6]
 8006c80:	4613      	mov	r3, r2
 8006c82:	80bb      	strh	r3, [r7, #4]
   /* Write data from address on tmc slave. */
   tmc8462_esc_write_data (&tmc8462, buf, address, len);
 8006c84:	88bb      	ldrh	r3, [r7, #4]
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	4803      	ldr	r0, [pc, #12]	; (8006c98 <ESC_write_hw+0x24>)
 8006c8c:	f000 fade 	bl	800724c <tmc8462_esc_write_data>
}
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	200023c0 	.word	0x200023c0

08006c9c <ESC_read>:
 * @param[in]   address     - address of ESC register to read
 * @param[out]  buf         - pointer to buffer to read in
 * @param[in]   len         - number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	80fb      	strh	r3, [r7, #6]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	80bb      	strh	r3, [r7, #4]
   uint16_t size = 0u;
 8006cac:	2300      	movs	r3, #0
 8006cae:	81fb      	strh	r3, [r7, #14]
   uint8_t *temp_buf = (uint8_t *)buf;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	60bb      	str	r3, [r7, #8]

   /* Select Read function depending on address, process data ram or not. */
   if (address >= (uint16_t)TMC8462_ESC_PROCESS_DATA_RAM)
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cba:	d339      	bcc.n	8006d30 <ESC_read+0x94>
   {
      /* Process read pram. */
      ESC_read_hw (address, temp_buf, len);
 8006cbc:	88ba      	ldrh	r2, [r7, #4]
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff ffc2 	bl	8006c4c <ESC_read_hw>
 8006cc8:	e035      	b.n	8006d36 <ESC_read+0x9a>
   else
   {
      while (0u < len)
      {
         /* We write maximum 4 bytes at the time. */
         size = (len > 4U) ? 4U : len;
 8006cca:	88bb      	ldrh	r3, [r7, #4]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	bf28      	it	cs
 8006cd0:	2304      	movcs	r3, #4
 8006cd2:	81fb      	strh	r3, [r7, #14]

         /* If we got an odd address size is 1, 01b 11b is captured. */
         if (BIT0 == (address & BIT0))
 8006cd4:	88fb      	ldrh	r3, [r7, #6]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <ESC_read+0x48>
         {
            size = 1u;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	81fb      	strh	r3, [r7, #14]
 8006ce2:	e013      	b.n	8006d0c <ESC_read+0x70>
         }
         /* If add 1xb and size != 1 and 3, allow size 2. */
         else if (BIT1 == (address & BIT1))
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <ESC_read+0x66>
         {
            size = (BIT0 == (size & BIT0)) ? 1u : 2u;
 8006cee:	89fb      	ldrh	r3, [r7, #14]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <ESC_read+0x60>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <ESC_read+0x62>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	81fb      	strh	r3, [r7, #14]
 8006d00:	e004      	b.n	8006d0c <ESC_read+0x70>
         }
         /* size 3 not valid. */
         else if (3u == size)
 8006d02:	89fb      	ldrh	r3, [r7, #14]
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d101      	bne.n	8006d0c <ESC_read+0x70>
         {
            size = 1;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	81fb      	strh	r3, [r7, #14]
         }

         /* Read data from slave. */
         ESC_read_hw (address, temp_buf, size);
 8006d0c:	89fa      	ldrh	r2, [r7, #14]
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff ff9a 	bl	8006c4c <ESC_read_hw>

         /* Next address. */
         len -= size;
 8006d18:	88ba      	ldrh	r2, [r7, #4]
 8006d1a:	89fb      	ldrh	r3, [r7, #14]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	4413      	add	r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]
         address += size;
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	89fb      	ldrh	r3, [r7, #14]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	80fb      	strh	r3, [r7, #6]
      while (0u < len)
 8006d30:	88bb      	ldrh	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1c9      	bne.n	8006cca <ESC_read+0x2e>
      }
   }

   /* Always providing AlEvent on every read or write. */
   ESC_read_hw (ESCREG_ALEVENT, (void* )&ESCvar.ALevent, sizeof(ESCvar.ALevent));
 8006d36:	2204      	movs	r2, #4
 8006d38:	4908      	ldr	r1, [pc, #32]	; (8006d5c <ESC_read+0xc0>)
 8006d3a:	f44f 7008 	mov.w	r0, #544	; 0x220
 8006d3e:	f7ff ff85 	bl	8006c4c <ESC_read_hw>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <ESC_read+0xc4>)
 8006d44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <ESC_read+0xc4>)
 8006d4e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	2000158c 	.word	0x2000158c
 8006d60:	200014a8 	.word	0x200014a8

08006d64 <ESC_write>:
 * @param[in]   address     - address of ESC register to write
 * @param[out]  buf         - pointer to buffer to read in
 * @param[in]   len         - number of bytes to read
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	6039      	str	r1, [r7, #0]
 8006d6e:	80fb      	strh	r3, [r7, #6]
 8006d70:	4613      	mov	r3, r2
 8006d72:	80bb      	strh	r3, [r7, #4]
   uint16_t size = 0u;
 8006d74:	2300      	movs	r3, #0
 8006d76:	81fb      	strh	r3, [r7, #14]
   uint8_t *temp_buf = (uint8_t *)buf;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	60bb      	str	r3, [r7, #8]

   /* Select Write function depending on address, process data ram or not */
   if (address >= (uint16_t)TMC8462_ESC_PROCESS_DATA_RAM)
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d82:	d339      	bcc.n	8006df8 <ESC_write+0x94>
   {
      /* Process read pram. */
      ESC_write_hw (address, temp_buf, len);
 8006d84:	88ba      	ldrh	r2, [r7, #4]
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff ff72 	bl	8006c74 <ESC_write_hw>
 8006d90:	e035      	b.n	8006dfe <ESC_write+0x9a>
   else 
   {
      while (0u < len)
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4u) ? 4u : len;
 8006d92:	88bb      	ldrh	r3, [r7, #4]
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	bf28      	it	cs
 8006d98:	2304      	movcs	r3, #4
 8006d9a:	81fb      	strh	r3, [r7, #14]

         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT0)
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <ESC_write+0x48>
         {
            size = 1;
 8006da6:	2301      	movs	r3, #1
 8006da8:	81fb      	strh	r3, [r7, #14]
 8006daa:	e013      	b.n	8006dd4 <ESC_write+0x70>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT1)
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <ESC_write+0x66>
         {
            size = (size & BIT0) ? 1u : 2u;
 8006db6:	89fb      	ldrh	r3, [r7, #14]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <ESC_write+0x60>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <ESC_write+0x62>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	81fb      	strh	r3, [r7, #14]
 8006dc8:	e004      	b.n	8006dd4 <ESC_write+0x70>
         }
         /* size 3 not valid */
         else if (3u == size)
 8006dca:	89fb      	ldrh	r3, [r7, #14]
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d101      	bne.n	8006dd4 <ESC_write+0x70>
         {
            size = 1u;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	81fb      	strh	r3, [r7, #14]
         }

         /* Write data to slave. */
         ESC_write_hw (address, temp_buf, size);
 8006dd4:	89fa      	ldrh	r2, [r7, #14]
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff ff4a 	bl	8006c74 <ESC_write_hw>

         /* next address */
         len -= size;
 8006de0:	88ba      	ldrh	r2, [r7, #4]
 8006de2:	89fb      	ldrh	r3, [r7, #14]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]
         address += size;
 8006df0:	88fa      	ldrh	r2, [r7, #6]
 8006df2:	89fb      	ldrh	r3, [r7, #14]
 8006df4:	4413      	add	r3, r2
 8006df6:	80fb      	strh	r3, [r7, #6]
      while (0u < len)
 8006df8:	88bb      	ldrh	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1c9      	bne.n	8006d92 <ESC_write+0x2e>
      }
   }

   /* Always providing AlEvent on every read or write. */
   ESC_write_hw (ESCREG_ALEVENT, (void* )&ESCvar.ALevent, sizeof(ESCvar.ALevent));
 8006dfe:	2204      	movs	r2, #4
 8006e00:	4908      	ldr	r1, [pc, #32]	; (8006e24 <ESC_write+0xc0>)
 8006e02:	f44f 7008 	mov.w	r0, #544	; 0x220
 8006e06:	f7ff ff35 	bl	8006c74 <ESC_write_hw>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 8006e0a:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <ESC_write+0xc4>)
 8006e0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <ESC_write+0xc4>)
 8006e16:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	2000158c 	.word	0x2000158c
 8006e28:	200014a8 	.word	0x200014a8

08006e2c <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
   /* Initialize the hw driver corresponding ic etherCat used in this project. */
   tmc8462_initConfig (&tmc8462, &tmc8462_config_esc, &tmc8462_config_mfc);
 8006e34:	4a04      	ldr	r2, [pc, #16]	; (8006e48 <ESC_init+0x1c>)
 8006e36:	4905      	ldr	r1, [pc, #20]	; (8006e4c <ESC_init+0x20>)
 8006e38:	4805      	ldr	r0, [pc, #20]	; (8006e50 <ESC_init+0x24>)
 8006e3a:	f000 fa47 	bl	80072cc <tmc8462_initConfig>

   /* TODO: Add function to reset data link layer of slave. */
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	200021ac 	.word	0x200021ac
 8006e4c:	20001f98 	.word	0x20001f98
 8006e50:	200023c0 	.word	0x200023c0

08006e54 <SpiDma_Init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

bool SpiDma_Init (tSpiDmaModule * const me)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
   bool ret = true;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]

   /* Create the spiDma event group. */
   spiDma_event = xEventGroupCreate();
 8006e60:	f006 fa62 	bl	800d328 <xEventGroupCreate>
 8006e64:	4603      	mov	r3, r0
 8006e66:	4a0e      	ldr	r2, [pc, #56]	; (8006ea0 <SpiDma_Init+0x4c>)
 8006e68:	6013      	str	r3, [r2, #0]

   /* Was the event group created successfully? */
   if (NULL == spiDma_event) {
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <SpiDma_Init+0x4c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <SpiDma_Init+0x22>
      ret = false;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]
   }

   /* Clear the buffer. */
   bzero (SPIDMA_Rx_Buffer, SPIDMA_RX_SIZE);
 8006e76:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <SpiDma_Init+0x50>)
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2100      	movs	r1, #0
 8006e82:	f009 f9c4 	bl	801020e <memset>
   bzero (SPIDMA_Tx_Buffer, SPIDMA_TX_SIZE);
 8006e86:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <SpiDma_Init+0x54>)
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e8e:	461a      	mov	r2, r3
 8006e90:	2100      	movs	r1, #0
 8006e92:	f009 f9bc 	bl	801020e <memset>

   return ret;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200023c8 	.word	0x200023c8
 8006ea4:	200080b8 	.word	0x200080b8
 8006ea8:	20007fb8 	.word	0x20007fb8

08006eac <SpiDma_CsPinChangeState>:
{
   return ((me->states != SPIDMA_IDLE) ? true : false);
}

void SpiDma_CsPinChangeState (tSpiDmaModule * const me, bool state)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
   GPIO_PinState pinSt = GPIO_PIN_RESET;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]

   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <SpiDma_CsPinChangeState+0x1c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	e006      	b.n	8006ed6 <SpiDma_CsPinChangeState+0x2a>
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	bf0c      	ite	eq
 8006ed0:	2301      	moveq	r3, #1
 8006ed2:	2300      	movne	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 8006ed6:	73fb      	strb	r3, [r7, #15]
   
   HAL_GPIO_WritePin (me->config.csPort, me->config.csPin, pinSt);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6858      	ldr	r0, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	891b      	ldrh	r3, [r3, #8]
 8006ee0:	7bfa      	ldrb	r2, [r7, #15]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f003 f93c 	bl	800a160 <HAL_GPIO_WritePin>
}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <SpiDma_write>:

bool SpiDma_write (tSpiDmaModule * const me, uint8_t * data_ptr, uint16_t len)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
   bool ret = true;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
   EventBits_t bits = (EventBits_t)0U; 
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]

   /* Verify the parameters input. */
   if (NULL == me)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <SpiDma_write+0x22>
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	75fb      	strb	r3, [r7, #23]
 8006f10:	e00a      	b.n	8006f28 <SpiDma_write+0x38>
   }
   else if (NULL == data_ptr)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <SpiDma_write+0x2e>
   {
      /* Pointer to data array is NULL. */
      ret = false;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	75fb      	strb	r3, [r7, #23]
 8006f1c:	e004      	b.n	8006f28 <SpiDma_write+0x38>
   }
   else if (0 >= len)
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <SpiDma_write+0x38>
   {
      /* The length of data input is equal 0. */
      ret = false;
 8006f24:	2300      	movs	r3, #0
 8006f26:	75fb      	strb	r3, [r7, #23]
   }

   /* If the params input are valid, send data to DMA to transfer this to slave.*/
   if (ret)
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d023      	beq.n	8006f76 <SpiDma_write+0x86>
   {
      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_ptr, len);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	88fa      	ldrh	r2, [r7, #6]
 8006f34:	68b9      	ldr	r1, [r7, #8]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f009 f95b 	bl	80101f2 <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_Transmit_DMA (me->spiModule, me->ptrTxArr, len);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6958      	ldr	r0, [r3, #20]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	88fa      	ldrh	r2, [r7, #6]
 8006f46:	4619      	mov	r1, r3
 8006f48:	f004 ff6c 	bl	800be24 <HAL_SPI_Transmit_DMA>

      /* Change state into TX when the Spi  */
      me->states = SPIDMA_TX;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	741a      	strb	r2, [r3, #16]

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_TX_DONE, pdTRUE, pdFALSE, (me->timeOut/portTICK_PERIOD_MS));
 8006f52:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <SpiDma_write+0x90>)
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8c1b      	ldrh	r3, [r3, #32]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2201      	movs	r2, #1
 8006f60:	2101      	movs	r1, #1
 8006f62:	f006 f9f9 	bl	800d358 <xEventGroupWaitBits>
 8006f66:	6138      	str	r0, [r7, #16]

      /* Update new state. */

      if (SPIDMA_TX_DONE != (bits & SPIDMA_TX_DONE))
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <SpiDma_write+0x86>
      {
         ret = false;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
      }
   }

   /* Return state. */
   return ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200023c8 	.word	0x200023c8

08006f84 <SpiDma_read>:

bool SpiDma_read (tSpiDmaModule * const me, uint8_t * data_rx_ptr, uint8_t * data_tx_dummy, uint16_t len)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	807b      	strh	r3, [r7, #2]
   bool ret = true;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
   EventBits_t bits = (EventBits_t)0U; 
 8006f96:	2300      	movs	r3, #0
 8006f98:	613b      	str	r3, [r7, #16]

   /* Verify the parameters input. */
   if (NULL == me)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <SpiDma_read+0x22>
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	75fb      	strb	r3, [r7, #23]
 8006fa4:	e00d      	b.n	8006fc2 <SpiDma_read+0x3e>
   }
   else if ((NULL == data_rx_ptr) || (NULL == data_tx_dummy))
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <SpiDma_read+0x2e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <SpiDma_read+0x34>
   {
      /* Pointer to data array is NULL. */
      ret = false;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	75fb      	strb	r3, [r7, #23]
 8006fb6:	e004      	b.n	8006fc2 <SpiDma_read+0x3e>
   }
   else if (0 >= len)
 8006fb8:	887b      	ldrh	r3, [r7, #2]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <SpiDma_read+0x3e>
   {
      /* The length of data input is equal 0. */
      ret = false;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]
   }
   
   /* If the params input are valid, send data to DMA to transfer dummy to read data from slave.*/
   if (ret)
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d02b      	beq.n	8007020 <SpiDma_read+0x9c>
   {
      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_tx_dummy, len);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	887a      	ldrh	r2, [r7, #2]
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f009 f90e 	bl	80101f2 <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_TransmitReceive_DMA (me->spiModule, me->ptrTxArr, me->ptrRxArr, len);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6958      	ldr	r0, [r3, #20]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6999      	ldr	r1, [r3, #24]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	887b      	ldrh	r3, [r7, #2]
 8006fe4:	f005 f82a 	bl	800c03c <HAL_SPI_TransmitReceive_DMA>

      /* Change state into TX. */
      me->states = SPIDMA_RX;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2202      	movs	r2, #2
 8006fec:	741a      	strb	r2, [r3, #16]

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_RX_DONE, pdTRUE, pdFALSE, (me->timeOut/portTICK_PERIOD_MS));
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <SpiDma_read+0xa8>)
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8c1b      	ldrh	r3, [r3, #32]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	2102      	movs	r1, #2
 8006ffe:	f006 f9ab 	bl	800d358 <xEventGroupWaitBits>
 8007002:	6138      	str	r0, [r7, #16]

      /* Update new state. */
      if (SPIDMA_RX_DONE != (bits & SPIDMA_RX_DONE))
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <SpiDma_read+0x8e>
      {
         ret = false;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]
      }

      /* Copy data to data array return. */
      memcpy (data_rx_ptr, me->ptrRxArr, len);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	4619      	mov	r1, r3
 800701a:	68b8      	ldr	r0, [r7, #8]
 800701c:	f009 f8e9 	bl	80101f2 <memcpy>
   }

   /* Return state. */
   return ret;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	200023c8 	.word	0x200023c8

08007030 <SpiDma_WriteCompleteIrq>:


void SpiDma_WriteCompleteIrq (tSpiDmaModule * const me)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]

   /* Write data complete, change the state of this module to TxEnd. */
   me->states = SPIDMA_IDLE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	741a      	strb	r2, [r3, #16]

   /* Set bit to inform the TX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_TX_DONE, &xHigherPriorityTaskWoken);
 8007042:	4b06      	ldr	r3, [pc, #24]	; (800705c <SpiDma_WriteCompleteIrq+0x2c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f107 020c 	add.w	r2, r7, #12
 800704a:	2101      	movs	r1, #1
 800704c:	4618      	mov	r0, r3
 800704e:	f006 fb0b 	bl	800d668 <xEventGroupSetBitsFromISR>
}  
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	200023c8 	.word	0x200023c8

08007060 <SpiDma_ReadCompleteIrq>:

void SpiDma_ReadCompleteIrq (tSpiDmaModule * const me)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]

   /* Read data complete, change the state of this module to RxEnd. */
   me->states = SPIDMA_IDLE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	741a      	strb	r2, [r3, #16]

   /* Set bit to inform the RX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_RX_DONE, &xHigherPriorityTaskWoken);
 8007072:	4b06      	ldr	r3, [pc, #24]	; (800708c <SpiDma_ReadCompleteIrq+0x2c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f107 020c 	add.w	r2, r7, #12
 800707a:	2102      	movs	r1, #2
 800707c:	4618      	mov	r0, r3
 800707e:	f006 faf3 	bl	800d668 <xEventGroupSetBitsFromISR>
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	200023c8 	.word	0x200023c8

08007090 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
   SpiDma_WriteCompleteIrq (&spiDmaModule);
 8007098:	4803      	ldr	r0, [pc, #12]	; (80070a8 <HAL_SPI_TxCpltCallback+0x18>)
 800709a:	f7ff ffc9 	bl	8007030 <SpiDma_WriteCompleteIrq>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000a24 	.word	0x20000a24

080070ac <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
   SpiDma_ReadCompleteIrq (&spiDmaModule);
 80070b4:	4803      	ldr	r0, [pc, #12]	; (80070c4 <HAL_SPI_TxRxCpltCallback+0x18>)
 80070b6:	f7ff ffd3 	bl	8007060 <SpiDma_ReadCompleteIrq>
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000a24 	.word	0x20000a24

080070c8 <tmc8462_esc_read>:

#include "TMC8462.h"
#include "spiDma.h"

void tmc8462_esc_read (TMC8462TypeDef *tmc8462, uint16_t address)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	807b      	strh	r3, [r7, #2]
   uint8_t command[4] = {0u};
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)(address >> 5U);
 80070d8:	887b      	ldrh	r3, [r7, #2]
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	b29b      	uxth	r3, r3
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	733b      	strb	r3, [r7, #12]
   command[1] = (uint8_t)((address << 3U) | TMC8462_CMD_ADDR_EXT);
 80070e2:	887b      	ldrh	r3, [r7, #2]
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	b25b      	sxtb	r3, r3
 80070e8:	f043 0306 	orr.w	r3, r3, #6
 80070ec:	b25b      	sxtb	r3, r3
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	737b      	strb	r3, [r7, #13]
   command[2] = (uint8_t)(((address >> 8U) & 0xE0U) | (TMC8462_CMD_READ_WAIT << 2U));
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	0a1b      	lsrs	r3, r3, #8
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	f023 031f 	bic.w	r3, r3, #31
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f043 030c 	orr.w	r3, r3, #12
 8007104:	b2db      	uxtb	r3, r3
 8007106:	73bb      	strb	r3, [r7, #14]
   command[3] = (uint8_t)(0xFFU);
 8007108:	23ff      	movs	r3, #255	; 0xff
 800710a:	73fb      	strb	r3, [r7, #15]
   
   /* Send the command to tmc slave. */
   SpiDma_write (&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800710c:	f107 030c 	add.w	r3, r7, #12
 8007110:	2204      	movs	r2, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4803      	ldr	r0, [pc, #12]	; (8007124 <tmc8462_esc_read+0x5c>)
 8007116:	f7ff feeb 	bl	8006ef0 <SpiDma_write>
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000a24 	.word	0x20000a24

08007128 <tmc8462_esc_write>:

void tmc8462_esc_write(TMC8462TypeDef *tmc8462, uint16_t address)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	807b      	strh	r3, [r7, #2]
   uint8_t command[3] = {0u};
 8007134:	4b13      	ldr	r3, [pc, #76]	; (8007184 <tmc8462_esc_write+0x5c>)
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	81bb      	strh	r3, [r7, #12]
 800713a:	2300      	movs	r3, #0
 800713c:	73bb      	strb	r3, [r7, #14]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)(address >> 5U);
 800713e:	887b      	ldrh	r3, [r7, #2]
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	b29b      	uxth	r3, r3
 8007144:	b2db      	uxtb	r3, r3
 8007146:	733b      	strb	r3, [r7, #12]
   command[1] = (uint8_t)((address << 3U) | TMC8462_CMD_ADDR_EXT);
 8007148:	887b      	ldrh	r3, [r7, #2]
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	b25b      	sxtb	r3, r3
 800714e:	f043 0306 	orr.w	r3, r3, #6
 8007152:	b25b      	sxtb	r3, r3
 8007154:	b2db      	uxtb	r3, r3
 8007156:	737b      	strb	r3, [r7, #13]
   command[2] = (uint8_t)(((address >> 8U) & 0xE0U) | (TMC8462_CMD_WRITE << 2U));
 8007158:	887b      	ldrh	r3, [r7, #2]
 800715a:	0a1b      	lsrs	r3, r3, #8
 800715c:	b29b      	uxth	r3, r3
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f023 031f 	bic.w	r3, r3, #31
 8007164:	b2db      	uxtb	r3, r3
 8007166:	f043 0310 	orr.w	r3, r3, #16
 800716a:	b2db      	uxtb	r3, r3
 800716c:	73bb      	strb	r3, [r7, #14]

   /* Send the command to tmc slave. */
   SpiDma_write (&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800716e:	f107 030c 	add.w	r3, r7, #12
 8007172:	2203      	movs	r2, #3
 8007174:	4619      	mov	r1, r3
 8007176:	4804      	ldr	r0, [pc, #16]	; (8007188 <tmc8462_esc_write+0x60>)
 8007178:	f7ff feba 	bl	8006ef0 <SpiDma_write>
}
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	08011948 	.word	0x08011948
 8007188:	20000a24 	.word	0x20000a24

0800718c <tmc8462_esc_read_data>:
	/* Send the command to tmc slave. */
	SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
}

void tmc8462_esc_read_data (TMC8462TypeDef *tmc8462, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4611      	mov	r1, r2
 8007198:	461a      	mov	r2, r3
 800719a:	460b      	mov	r3, r1
 800719c:	80fb      	strh	r3, [r7, #6]
 800719e:	4613      	mov	r3, r2
 80071a0:	80bb      	strh	r3, [r7, #4]
   uint16_t iter = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	82fb      	strh	r3, [r7, #22]
   uint8_t * tx_dummy_arr = pvPortMalloc(len);
 80071a6:	88bb      	ldrh	r3, [r7, #4]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f008 fcd5 	bl	800fb58 <pvPortMalloc>
 80071ae:	6138      	str	r0, [r7, #16]

   /* Prepare the tx data dummy. */
   for (iter = 0U; iter < len; iter++)
 80071b0:	2300      	movs	r3, #0
 80071b2:	82fb      	strh	r3, [r7, #22]
 80071b4:	e00f      	b.n	80071d6 <tmc8462_esc_read_data+0x4a>
   {
      tx_dummy_arr[iter] = (iter < (len - 1)) ? 0x00 : 0xFF;
 80071b6:	8afa      	ldrh	r2, [r7, #22]
 80071b8:	88bb      	ldrh	r3, [r7, #4]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	429a      	cmp	r2, r3
 80071be:	da01      	bge.n	80071c4 <tmc8462_esc_read_data+0x38>
 80071c0:	2100      	movs	r1, #0
 80071c2:	e000      	b.n	80071c6 <tmc8462_esc_read_data+0x3a>
 80071c4:	21ff      	movs	r1, #255	; 0xff
 80071c6:	8afb      	ldrh	r3, [r7, #22]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4413      	add	r3, r2
 80071cc:	460a      	mov	r2, r1
 80071ce:	701a      	strb	r2, [r3, #0]
   for (iter = 0U; iter < len; iter++)
 80071d0:	8afb      	ldrh	r3, [r7, #22]
 80071d2:	3301      	adds	r3, #1
 80071d4:	82fb      	strh	r3, [r7, #22]
 80071d6:	8afa      	ldrh	r2, [r7, #22]
 80071d8:	88bb      	ldrh	r3, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d3eb      	bcc.n	80071b6 <tmc8462_esc_read_data+0x2a>
   }
   
   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState (&spiDmaModule, true);
 80071de:	2101      	movs	r1, #1
 80071e0:	480c      	ldr	r0, [pc, #48]	; (8007214 <tmc8462_esc_read_data+0x88>)
 80071e2:	f7ff fe63 	bl	8006eac <SpiDma_CsPinChangeState>

   /* Send Read command to address. */
   tmc8462_esc_read (tmc8462, address);
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	4619      	mov	r1, r3
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff ff6c 	bl	80070c8 <tmc8462_esc_read>

   /* Read data. */
   SpiDma_read (&spiDmaModule, data_ptr, tx_dummy_arr, len);
 80071f0:	88bb      	ldrh	r3, [r7, #4]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	4807      	ldr	r0, [pc, #28]	; (8007214 <tmc8462_esc_read_data+0x88>)
 80071f8:	f7ff fec4 	bl	8006f84 <SpiDma_read>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState (&spiDmaModule, false);
 80071fc:	2100      	movs	r1, #0
 80071fe:	4805      	ldr	r0, [pc, #20]	; (8007214 <tmc8462_esc_read_data+0x88>)
 8007200:	f7ff fe54 	bl	8006eac <SpiDma_CsPinChangeState>

   /* Free the data. */
   vPortFree (tx_dummy_arr);
 8007204:	6938      	ldr	r0, [r7, #16]
 8007206:	f008 fd73 	bl	800fcf0 <vPortFree>
}
 800720a:	bf00      	nop
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000a24 	.word	0x20000a24

08007218 <tmc8462_esc_read_16>:

	return buffer;
}

uint16_t tmc8462_esc_read_16(TMC8462TypeDef *tmc8462, uint16_t address)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];

	tmc8462_esc_read_data(tmc8462, data, address, 2);
 8007224:	887a      	ldrh	r2, [r7, #2]
 8007226:	f107 010c 	add.w	r1, r7, #12
 800722a:	2302      	movs	r3, #2
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff ffad 	bl	800718c <tmc8462_esc_read_data>

	return _8_16(data[1], data[0]);
 8007232:	7b7b      	ldrb	r3, [r7, #13]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	b21a      	sxth	r2, r3
 8007238:	7b3b      	ldrb	r3, [r7, #12]
 800723a:	b21b      	sxth	r3, r3
 800723c:	4313      	orrs	r3, r2
 800723e:	b21b      	sxth	r3, r3
 8007240:	b29b      	uxth	r3, r3
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <tmc8462_esc_write_data>:

	return _8_32(data[3], data[2], data[1], data[0]);
}

void tmc8462_esc_write_data (TMC8462TypeDef *tmc8462, uint8_t *data_ptr, uint16_t address, uint16_t len)
{   
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4611      	mov	r1, r2
 8007258:	461a      	mov	r2, r3
 800725a:	460b      	mov	r3, r1
 800725c:	80fb      	strh	r3, [r7, #6]
 800725e:	4613      	mov	r3, r2
 8007260:	80bb      	strh	r3, [r7, #4]
   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState (&spiDmaModule, true);
 8007262:	2101      	movs	r1, #1
 8007264:	480a      	ldr	r0, [pc, #40]	; (8007290 <tmc8462_esc_write_data+0x44>)
 8007266:	f7ff fe21 	bl	8006eac <SpiDma_CsPinChangeState>

	/* Send request write. */
	tmc8462_esc_write (tmc8462, address);
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	4619      	mov	r1, r3
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ff5a 	bl	8007128 <tmc8462_esc_write>

	/* Send data to slave. */
	SpiDma_write (&spiDmaModule, data_ptr, len);
 8007274:	88bb      	ldrh	r3, [r7, #4]
 8007276:	461a      	mov	r2, r3
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	4805      	ldr	r0, [pc, #20]	; (8007290 <tmc8462_esc_write_data+0x44>)
 800727c:	f7ff fe38 	bl	8006ef0 <SpiDma_write>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState (&spiDmaModule, false);
 8007280:	2100      	movs	r1, #0
 8007282:	4803      	ldr	r0, [pc, #12]	; (8007290 <tmc8462_esc_write_data+0x44>)
 8007284:	f7ff fe12 	bl	8006eac <SpiDma_CsPinChangeState>
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20000a24 	.word	0x20000a24

08007294 <tmc8462_esc_write_16>:
{
	tmc8462_esc_write_data (tmc8462, &value, address, 1);
}

void tmc8462_esc_write_16 (TMC8462TypeDef *tmc8462, uint16_t address, uint16_t value)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	807b      	strh	r3, [r7, #2]
 80072a0:	4613      	mov	r3, r2
 80072a2:	803b      	strh	r3, [r7, #0]
	uint8_t data[2];

	data[0] = BYTE(value, 0);
 80072a4:	883b      	ldrh	r3, [r7, #0]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	733b      	strb	r3, [r7, #12]
	data[1] = BYTE(value, 1);
 80072aa:	883b      	ldrh	r3, [r7, #0]
 80072ac:	0a1b      	lsrs	r3, r3, #8
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	737b      	strb	r3, [r7, #13]
	tmc8462_esc_write_data (tmc8462, data, address, 2);
 80072b4:	887a      	ldrh	r2, [r7, #2]
 80072b6:	f107 010c 	add.w	r1, r7, #12
 80072ba:	2302      	movs	r3, #2
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff ffc5 	bl	800724c <tmc8462_esc_write_data>
}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <tmc8462_initConfig>:
		tmc8462_mfc_write_data(tmc8462, value, address, 4);
	}
}

void tmc8462_initConfig(TMC8462TypeDef *tmc8462, ConfigurationTypeDef *tmc8462_config_esc, ConfigurationTypeDef *tmc8462_config_mfc)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
	tmc8462->config_esc = tmc8462_config_esc;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	601a      	str	r2, [r3, #0]
	tmc8462->config_mfc = tmc8462_config_mfc;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	605a      	str	r2, [r3, #4]

	/* Initialize the SPI_DMA module. */
	SpiDma_Init (&spiDmaModule);
 80072e4:	4811      	ldr	r0, [pc, #68]	; (800732c <tmc8462_initConfig+0x60>)
 80072e6:	f7ff fdb5 	bl	8006e54 <SpiDma_Init>

	/* Verify the connection with tmc. */
	while (TMC8462_FIELD_READ(tmc8462, tmc8462_esc_read_16, TMC8462_ESC_PDI_CTRL, TMC8462_ESC_PDI_MODE_MASK, TMC8462_ESC_PDI_MODE_SHIFT) != TMC8462_PDI_SPI_SLAVE);
 80072ea:	bf00      	nop
 80072ec:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff ff91 	bl	8007218 <tmc8462_esc_read_16>
 80072f6:	4603      	mov	r3, r0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	d1f6      	bne.n	80072ec <tmc8462_initConfig+0x20>

	/* Reset all register status of slave. */
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_STATUS, FIELD_SET(TMC8462_EC_STATE_INIT, TMC8462_ESC_AL_ERROR_MASK, TMC8462_ESC_AL_ERROR_SHIFT, true));
 80072fe:	2211      	movs	r2, #17
 8007300:	f44f 7198 	mov.w	r1, #304	; 0x130
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff ffc5 	bl	8007294 <tmc8462_esc_write_16>
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_CODE, 0x0000);
 800730a:	2200      	movs	r2, #0
 800730c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff ffbf 	bl	8007294 <tmc8462_esc_write_16>
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_EVENT_MASK_LO, 0xFF0E);
 8007316:	f64f 720e 	movw	r2, #65294	; 0xff0e
 800731a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff ffb8 	bl	8007294 <tmc8462_esc_write_16>
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000a24 	.word	0x20000a24

08007330 <cb_get_inputs>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

void cb_get_inputs (void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
   /* Device receive new data from host. Determine which data member changed. */
   if (ethCat_data_receives.Dev_0_DataControl.Mode != Obj.Dev_0_DataControl.Mode)
 8007334:	4b2a      	ldr	r3, [pc, #168]	; (80073e0 <cb_get_inputs+0xb0>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4b2a      	ldr	r3, [pc, #168]	; (80073e4 <cb_get_inputs+0xb4>)
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	429a      	cmp	r2, r3
 800733e:	d00a      	beq.n	8007356 <cb_get_inputs+0x26>
   {
      /* Save the new data in local memory. */
      ethCat_data_receives.Dev_0_DataControl.Mode = Obj.Dev_0_DataControl.Mode;
 8007340:	4b28      	ldr	r3, [pc, #160]	; (80073e4 <cb_get_inputs+0xb4>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	4a26      	ldr	r2, [pc, #152]	; (80073e0 <cb_get_inputs+0xb0>)
 8007346:	6013      	str	r3, [r2, #0]

      /* Update new data to TX memory to send to master. */
      md80_ControlMd80Mode (&md80_dev1, ethCat_data_receives.Dev_0_DataControl.Mode);
 8007348:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <cb_get_inputs+0xb0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	4619      	mov	r1, r3
 8007350:	4825      	ldr	r0, [pc, #148]	; (80073e8 <cb_get_inputs+0xb8>)
 8007352:	f7fb f895 	bl	8002480 <md80_ControlMd80Mode>
   }

   /* Device receive new data from host. Determine which data member changed. */
   if (ethCat_data_receives.Dev_0_DataControl.Position != Obj.Dev_0_DataControl.Position)
 8007356:	4b22      	ldr	r3, [pc, #136]	; (80073e0 <cb_get_inputs+0xb0>)
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	4b22      	ldr	r3, [pc, #136]	; (80073e4 <cb_get_inputs+0xb4>)
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	429a      	cmp	r2, r3
 8007360:	d012      	beq.n	8007388 <cb_get_inputs+0x58>
   {
      /* Save the new data in local memory. */
      ethCat_data_receives.Dev_0_DataControl.Position = Obj.Dev_0_DataControl.Position;
 8007362:	4b20      	ldr	r3, [pc, #128]	; (80073e4 <cb_get_inputs+0xb4>)
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <cb_get_inputs+0xb0>)
 8007368:	6053      	str	r3, [r2, #4]

      /* Update new data to TX memory to send to master. */
      md80_SetTargetPosition (&md80_dev1, ((float)ethCat_data_receives.Dev_0_DataControl.Position / 100.0f));
 800736a:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <cb_get_inputs+0xb0>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80073ec <cb_get_inputs+0xbc>
 800737a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800737e:	eeb0 0a47 	vmov.f32	s0, s14
 8007382:	4819      	ldr	r0, [pc, #100]	; (80073e8 <cb_get_inputs+0xb8>)
 8007384:	f7fb f967 	bl	8002656 <md80_SetTargetPosition>
   }

   /* Device receive new data from host. Determine which data member changed. */
   if (ethCat_data_receives.Dev_0_DataControl.Velocity != Obj.Dev_0_DataControl.Velocity)
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <cb_get_inputs+0xb0>)
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <cb_get_inputs+0xb4>)
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	429a      	cmp	r2, r3
 8007392:	d00e      	beq.n	80073b2 <cb_get_inputs+0x82>
   {
      /* Save the new data in local memory. */
      ethCat_data_receives.Dev_0_DataControl.Velocity = Obj.Dev_0_DataControl.Velocity;
 8007394:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <cb_get_inputs+0xb4>)
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	4a11      	ldr	r2, [pc, #68]	; (80073e0 <cb_get_inputs+0xb0>)
 800739a:	6093      	str	r3, [r2, #8]

      /* Update new data to TX memory to send to master. */
      md80_SetTargetVelocity (&md80_dev1, (float)ethCat_data_receives.Dev_0_DataControl.Velocity);
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <cb_get_inputs+0xb0>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	ee07 3a90 	vmov	s15, r3
 80073a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a8:	eeb0 0a67 	vmov.f32	s0, s15
 80073ac:	480e      	ldr	r0, [pc, #56]	; (80073e8 <cb_get_inputs+0xb8>)
 80073ae:	f7fb f961 	bl	8002674 <md80_SetTargetVelocity>
   }

   /* Device receive new data from host. Determine which data member changed. */
   if (ethCat_data_receives.Dev_0_DataControl.Torque != Obj.Dev_0_DataControl.Torque)
 80073b2:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <cb_get_inputs+0xb0>)
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <cb_get_inputs+0xb4>)
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d00e      	beq.n	80073dc <cb_get_inputs+0xac>
   {
      /* Save the new data in local memory. */
      ethCat_data_receives.Dev_0_DataControl.Torque = Obj.Dev_0_DataControl.Torque;
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <cb_get_inputs+0xb4>)
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	4a07      	ldr	r2, [pc, #28]	; (80073e0 <cb_get_inputs+0xb0>)
 80073c4:	60d3      	str	r3, [r2, #12]

      /* Update new data to TX memory to send to master. */
      md80_SetTorque (&md80_dev1, (float)ethCat_data_receives.Dev_0_DataControl.Torque);
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <cb_get_inputs+0xb0>)
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eeb0 0a67 	vmov.f32	s0, s15
 80073d6:	4804      	ldr	r0, [pc, #16]	; (80073e8 <cb_get_inputs+0xb8>)
 80073d8:	f7fb f95b 	bl	8002692 <md80_SetTorque>
   }
}
 80073dc:	bf00      	nop
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	200023f8 	.word	0x200023f8
 80073e4:	200023cc 	.word	0x200023cc
 80073e8:	20002408 	.word	0x20002408
 80073ec:	42c80000 	.word	0x42c80000

080073f0 <cb_set_outputs>:

void cb_set_outputs (void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0

}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <ethCat_check_dc_handler>:

uint16_t ethCat_check_dc_handler (void)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
   uint16_t ret = 0u;
 8007404:	2300      	movs	r3, #0
 8007406:	80fb      	strh	r3, [r7, #6]

   return ret;
 8007408:	88fb      	ldrh	r3, [r7, #6]
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <ethCat_hw_eep_handler>:

void ethCat_hw_eep_handler (void)
{
 8007416:	b480      	push	{r7}
 8007418:	af00      	add	r7, sp, #0

}
 800741a:	bf00      	nop
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <ethCat_Init>:

void ethCat_Init (void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
      .esc_hw_eep_handler = ethCat_hw_eep_handler,
      .esc_check_dc_handler = ethCat_check_dc_handler,
   };

   /* Reset slave first. */
   HAL_GPIO_WritePin (TMC_NRESET_GPIO_Port, TMC_NRESET_Pin, GPIO_PIN_RESET);
 8007428:	2200      	movs	r2, #0
 800742a:	2101      	movs	r1, #1
 800742c:	482a      	ldr	r0, [pc, #168]	; (80074d8 <ethCat_Init+0xb4>)
 800742e:	f002 fe97 	bl	800a160 <HAL_GPIO_WritePin>

   /* Delay */
   osDelay(ETHCAT_REST_DURATION);
 8007432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007436:	f005 ff63 	bl	800d300 <osDelay>

   /* Turn on the etherCat IC. */
   HAL_GPIO_WritePin (TMC_NRESET_GPIO_Port, TMC_NRESET_Pin, GPIO_PIN_SET);
 800743a:	2201      	movs	r2, #1
 800743c:	2101      	movs	r1, #1
 800743e:	4826      	ldr	r0, [pc, #152]	; (80074d8 <ethCat_Init+0xb4>)
 8007440:	f002 fe8e 	bl	800a160 <HAL_GPIO_WritePin>

   /* Delay */
   osDelay(1);
 8007444:	2001      	movs	r0, #1
 8007446:	f005 ff5b 	bl	800d300 <osDelay>

   /* Initialize the EtherCat module. */
   ecat_slv_init (&ethCat_cfg);
 800744a:	4824      	ldr	r0, [pc, #144]	; (80074dc <ethCat_Init+0xb8>)
 800744c:	f7fb fbf8 	bl	8002c40 <ecat_slv_init>

   /* Reset encoder at current position */
   md80_SetEncoderZero (&md80_dev1);
 8007450:	4823      	ldr	r0, [pc, #140]	; (80074e0 <ethCat_Init+0xbc>)
 8007452:	f7fa ff61 	bl	8002318 <md80_SetEncoderZero>

   /* Set mode to position PID */
   md80_ControlMd80Mode (&md80_dev1, MD80_IMPEDANCE);
 8007456:	2104      	movs	r1, #4
 8007458:	4821      	ldr	r0, [pc, #132]	; (80074e0 <ethCat_Init+0xbc>)
 800745a:	f7fb f811 	bl	8002480 <md80_ControlMd80Mode>

   /* Enable the drive */
   md80_ControlMd80Enable (&md80_dev1, true);
 800745e:	2101      	movs	r1, #1
 8007460:	481f      	ldr	r0, [pc, #124]	; (80074e0 <ethCat_Init+0xbc>)
 8007462:	f7fb f837 	bl	80024d4 <md80_ControlMd80Enable>

   md80_SetPositionControllerParams(&md80_dev1, 20.0f, 0.2f, 0.0f, 15.0f);
 8007466:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 800746a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80074e4 <ethCat_Init+0xc0>
 800746e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80074e8 <ethCat_Init+0xc4>
 8007472:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8007476:	481a      	ldr	r0, [pc, #104]	; (80074e0 <ethCat_Init+0xbc>)
 8007478:	f7fb f86b 	bl	8002552 <md80_SetPositionControllerParams>
   md80_SetVelocityControllerParams (&md80_dev1, 0.5f, 0.1f, 0.0f, 1.5f);
 800747c:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 8007480:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80074e4 <ethCat_Init+0xc0>
 8007484:	eddf 0a19 	vldr	s1, [pc, #100]	; 80074ec <ethCat_Init+0xc8>
 8007488:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800748c:	4814      	ldr	r0, [pc, #80]	; (80074e0 <ethCat_Init+0xbc>)
 800748e:	f7fb f882 	bl	8002596 <md80_SetVelocityControllerParams>
   md80_SetImpedanceControllerParams(&md80_dev1, 20.0f, 0.2f);
 8007492:	eddf 0a15 	vldr	s1, [pc, #84]	; 80074e8 <ethCat_Init+0xc4>
 8007496:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800749a:	4811      	ldr	r0, [pc, #68]	; (80074e0 <ethCat_Init+0xbc>)
 800749c:	f7fb f89d 	bl	80025da <md80_SetImpedanceControllerParams>

   /* Set max torque: 50 Nm. */
   md80_SetMaxTorque (&md80_dev1, 10);
 80074a0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80074a4:	480e      	ldr	r0, [pc, #56]	; (80074e0 <ethCat_Init+0xbc>)
 80074a6:	f7fb f8b0 	bl	800260a <md80_SetMaxTorque>
   md80_SetTorque(&md80_dev1, 1);
 80074aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074ae:	480c      	ldr	r0, [pc, #48]	; (80074e0 <ethCat_Init+0xbc>)
 80074b0:	f7fb f8ef 	bl	8002692 <md80_SetTorque>

   /* Set velocity: 5 rad/s */
   md80_SetMaxVelocity (&md80_dev1, 20.0f);
 80074b4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80074b8:	4809      	ldr	r0, [pc, #36]	; (80074e0 <ethCat_Init+0xbc>)
 80074ba:	f7fb f8b9 	bl	8002630 <md80_SetMaxVelocity>
   md80_SetTargetVelocity(&md80_dev1, 5.0f);
 80074be:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80074c2:	4807      	ldr	r0, [pc, #28]	; (80074e0 <ethCat_Init+0xbc>)
 80074c4:	f7fb f8d6 	bl	8002674 <md80_SetTargetVelocity>
   md80_SetCurrentLimit (&md80_dev1, 1.0f);
 80074c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074cc:	4804      	ldr	r0, [pc, #16]	; (80074e0 <ethCat_Init+0xbc>)
 80074ce:	f7fa ff8b 	bl	80023e8 <md80_SetCurrentLimit>
}
 80074d2:	bf00      	nop
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	48000400 	.word	0x48000400
 80074dc:	20000a48 	.word	0x20000a48
 80074e0:	20002408 	.word	0x20002408
 80074e4:	00000000 	.word	0x00000000
 80074e8:	3e4ccccd 	.word	0x3e4ccccd
 80074ec:	3dcccccd 	.word	0x3dcccccd

080074f0 <ethCat_Task>:

void ethCat_Task (void const * argument)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
   /* Initialize the modules which used by this application. */
   ethCat_Init();
 80074f8:	f7ff ff94 	bl	8007424 <ethCat_Init>

   /* Sit in main loop of this task. */
   while (true)
   {
      ecat_slv();
 80074fc:	f7fb fb96 	bl	8002c2c <ecat_slv>

      md80_MainFunction (&md80_dev1);
 8007500:	4814      	ldr	r0, [pc, #80]	; (8007554 <ethCat_Task+0x64>)
 8007502:	f7fb f80d 	bl	8002520 <md80_MainFunction>

      Obj.Dev_0_DataReturn.Mode = md80_dev1.local.mode;
 8007506:	4b13      	ldr	r3, [pc, #76]	; (8007554 <ethCat_Task+0x64>)
 8007508:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800750c:	461a      	mov	r2, r3
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <ethCat_Task+0x68>)
 8007510:	605a      	str	r2, [r3, #4]
      Obj.Dev_0_DataReturn.Position = (uint32_t)(md80_dev1.local.position * 100.0f);
 8007512:	4b10      	ldr	r3, [pc, #64]	; (8007554 <ethCat_Task+0x64>)
 8007514:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007518:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800755c <ethCat_Task+0x6c>
 800751c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007524:	ee17 2a90 	vmov	r2, s15
 8007528:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <ethCat_Task+0x68>)
 800752a:	609a      	str	r2, [r3, #8]
      Obj.Dev_0_DataReturn.Velocity = md80_dev1.local.velocity;
 800752c:	4b09      	ldr	r3, [pc, #36]	; (8007554 <ethCat_Task+0x64>)
 800752e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007536:	ee17 2a90 	vmov	r2, s15
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <ethCat_Task+0x68>)
 800753c:	60da      	str	r2, [r3, #12]
      Obj.Dev_0_DataReturn.Torque = md80_dev1.local.torque;
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <ethCat_Task+0x64>)
 8007540:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007548:	ee17 2a90 	vmov	r2, s15
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <ethCat_Task+0x68>)
 800754e:	611a      	str	r2, [r3, #16]
      ecat_slv();
 8007550:	e7d4      	b.n	80074fc <ethCat_Task+0xc>
 8007552:	bf00      	nop
 8007554:	20002408 	.word	0x20002408
 8007558:	200023cc 	.word	0x200023cc
 800755c:	42c80000 	.word	0x42c80000

08007560 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8007564:	bf00      	nop
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
	...

08007570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007570:	b5b0      	push	{r4, r5, r7, lr}
 8007572:	b08a      	sub	sp, #40	; 0x28
 8007574:	af00      	add	r7, sp, #0
  /* definition and creation of appTestTask */
//  osThreadDef(appTestTask, testTask, osPriorityNormal, 0, 128);
//  appTestTaskHandle = osThreadCreate(osThread(appTestTask), NULL);

  /* definition and creation of ethCatSlvTask */
  osThreadDef(ethCatSlvTask, ethCat_Task, osPriorityHigh, 0, 1024);
 8007576:	4b12      	ldr	r3, [pc, #72]	; (80075c0 <MX_FREERTOS_Init+0x50>)
 8007578:	f107 0414 	add.w	r4, r7, #20
 800757c:	461d      	mov	r5, r3
 800757e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007582:	682b      	ldr	r3, [r5, #0]
 8007584:	6023      	str	r3, [r4, #0]
  ethCatSlvTaskHandle = osThreadCreate(osThread(ethCatSlvTask), NULL);
 8007586:	f107 0314 	add.w	r3, r7, #20
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f005 fe90 	bl	800d2b2 <osThreadCreate>
 8007592:	4603      	mov	r3, r0
 8007594:	4a0b      	ldr	r2, [pc, #44]	; (80075c4 <MX_FREERTOS_Init+0x54>)
 8007596:	6013      	str	r3, [r2, #0]

  /* definition and creation of canIdle */
  osThreadDef(canIdle, canIdleTask, osPriorityAboveNormal, 0, 1024);
 8007598:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <MX_FREERTOS_Init+0x58>)
 800759a:	463c      	mov	r4, r7
 800759c:	461d      	mov	r5, r3
 800759e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a2:	682b      	ldr	r3, [r5, #0]
 80075a4:	6023      	str	r3, [r4, #0]
  canIdleHandle = osThreadCreate(osThread(canIdle), NULL);
 80075a6:	463b      	mov	r3, r7
 80075a8:	2100      	movs	r1, #0
 80075aa:	4618      	mov	r0, r3
 80075ac:	f005 fe81 	bl	800d2b2 <osThreadCreate>
 80075b0:	4603      	mov	r3, r0
 80075b2:	4a06      	ldr	r2, [pc, #24]	; (80075cc <MX_FREERTOS_Init+0x5c>)
 80075b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80075b6:	bf00      	nop
 80075b8:	3728      	adds	r7, #40	; 0x28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bdb0      	pop	{r4, r5, r7, pc}
 80075be:	bf00      	nop
 80075c0:	0801199c 	.word	0x0801199c
 80075c4:	200025f0 	.word	0x200025f0
 80075c8:	080119b0 	.word	0x080119b0
 80075cc:	200025f4 	.word	0x200025f4

080075d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80075d6:	4b16      	ldr	r3, [pc, #88]	; (8007630 <MX_DMA_Init+0x60>)
 80075d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075da:	4a15      	ldr	r2, [pc, #84]	; (8007630 <MX_DMA_Init+0x60>)
 80075dc:	f043 0304 	orr.w	r3, r3, #4
 80075e0:	6493      	str	r3, [r2, #72]	; 0x48
 80075e2:	4b13      	ldr	r3, [pc, #76]	; (8007630 <MX_DMA_Init+0x60>)
 80075e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80075ee:	4b10      	ldr	r3, [pc, #64]	; (8007630 <MX_DMA_Init+0x60>)
 80075f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f2:	4a0f      	ldr	r2, [pc, #60]	; (8007630 <MX_DMA_Init+0x60>)
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	6493      	str	r3, [r2, #72]	; 0x48
 80075fa:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <MX_DMA_Init+0x60>)
 80075fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8007606:	2200      	movs	r2, #0
 8007608:	2105      	movs	r1, #5
 800760a:	200b      	movs	r0, #11
 800760c:	f000 fdfe 	bl	800820c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007610:	200b      	movs	r0, #11
 8007612:	f000 fe25 	bl	8008260 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8007616:	2200      	movs	r2, #0
 8007618:	2105      	movs	r1, #5
 800761a:	200c      	movs	r0, #12
 800761c:	f000 fdf6 	bl	800820c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007620:	200c      	movs	r0, #12
 8007622:	f000 fe1d 	bl	8008260 <HAL_NVIC_EnableIRQ>

}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40021000 	.word	0x40021000

08007634 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800763a:	4b30      	ldr	r3, [pc, #192]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 800763c:	4a30      	ldr	r2, [pc, #192]	; (8007700 <MX_FDCAN1_Init+0xcc>)
 800763e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8007640:	4b2e      	ldr	r3, [pc, #184]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007642:	2200      	movs	r2, #0
 8007644:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8007646:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800764c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800764e:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007650:	2200      	movs	r2, #0
 8007652:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8007654:	4b29      	ldr	r3, [pc, #164]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007656:	2201      	movs	r2, #1
 8007658:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 800765a:	4b28      	ldr	r3, [pc, #160]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 800765c:	2201      	movs	r2, #1
 800765e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8007660:	4b26      	ldr	r3, [pc, #152]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007662:	2200      	movs	r2, #0
 8007664:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8007666:	4b25      	ldr	r3, [pc, #148]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007668:	2201      	movs	r2, #1
 800766a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800766c:	4b23      	ldr	r3, [pc, #140]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 800766e:	2201      	movs	r2, #1
 8007670:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 146;
 8007672:	4b22      	ldr	r3, [pc, #136]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007674:	2292      	movs	r2, #146	; 0x92
 8007676:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8007678:	4b20      	ldr	r3, [pc, #128]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 800767a:	2203      	movs	r2, #3
 800767c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 800767e:	4b1f      	ldr	r3, [pc, #124]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007680:	2205      	movs	r2, #5
 8007682:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8007684:	4b1d      	ldr	r3, [pc, #116]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007686:	2204      	movs	r2, #4
 8007688:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 25;
 800768a:	4b1c      	ldr	r3, [pc, #112]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 800768c:	2219      	movs	r2, #25
 800768e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8007690:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007692:	2204      	movs	r2, #4
 8007694:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8007696:	4b19      	ldr	r3, [pc, #100]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 8007698:	2201      	movs	r2, #1
 800769a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800769c:	4b17      	ldr	r3, [pc, #92]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 800769e:	2200      	movs	r2, #0
 80076a0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80076a2:	4b16      	ldr	r3, [pc, #88]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80076a8:	4814      	ldr	r0, [pc, #80]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 80076aa:	f001 f963 	bl	8008974 <HAL_FDCAN_Init>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 80076b4:	f000 f9e6 	bl	8007a84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80076b8:	2300      	movs	r3, #0
 80076ba:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80076c0:	2302      	movs	r3, #2
 80076c2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80076c4:	2301      	movs	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x45;
 80076c8:	2345      	movs	r3, #69	; 0x45
 80076ca:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x45;
 80076cc:	2345      	movs	r3, #69	; 0x45
 80076ce:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80076d0:	463b      	mov	r3, r7
 80076d2:	4619      	mov	r1, r3
 80076d4:	4809      	ldr	r0, [pc, #36]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 80076d6:	f001 fbf1 	bl	8008ebc <HAL_FDCAN_ConfigFilter>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <MX_FDCAN1_Init+0xb0>
  {
     /* Filter configuration Error */
     Error_Handler();
 80076e0:	f000 f9d0 	bl	8007a84 <Error_Handler>
  }

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 80076e4:	2301      	movs	r3, #1
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	2301      	movs	r3, #1
 80076ea:	2202      	movs	r2, #2
 80076ec:	2102      	movs	r1, #2
 80076ee:	4803      	ldr	r0, [pc, #12]	; (80076fc <MX_FDCAN1_Init+0xc8>)
 80076f0:	f001 fcd4 	bl	800909c <HAL_FDCAN_ConfigGlobalFilter>


  /* USER CODE END FDCAN1_Init 2 */

}
 80076f4:	bf00      	nop
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	200025f8 	.word	0x200025f8
 8007700:	40006400 	.word	0x40006400

08007704 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b09e      	sub	sp, #120	; 0x78
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800770c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	609a      	str	r2, [r3, #8]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800771c:	f107 0310 	add.w	r3, r7, #16
 8007720:	2254      	movs	r2, #84	; 0x54
 8007722:	2100      	movs	r1, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f008 fd72 	bl	801020e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <HAL_FDCAN_MspInit+0xd4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d14c      	bne.n	80077ce <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8007734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007738:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800773a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800773e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007740:	f107 0310 	add.w	r3, r7, #16
 8007744:	4618      	mov	r0, r3
 8007746:	f003 fd09 	bl	800b15c <HAL_RCCEx_PeriphCLKConfig>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8007750:	f000 f998 	bl	8007a84 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8007754:	4b21      	ldr	r3, [pc, #132]	; (80077dc <HAL_FDCAN_MspInit+0xd8>)
 8007756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007758:	4a20      	ldr	r2, [pc, #128]	; (80077dc <HAL_FDCAN_MspInit+0xd8>)
 800775a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800775e:	6593      	str	r3, [r2, #88]	; 0x58
 8007760:	4b1e      	ldr	r3, [pc, #120]	; (80077dc <HAL_FDCAN_MspInit+0xd8>)
 8007762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800776c:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <HAL_FDCAN_MspInit+0xd8>)
 800776e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007770:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <HAL_FDCAN_MspInit+0xd8>)
 8007772:	f043 0302 	orr.w	r3, r3, #2
 8007776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007778:	4b18      	ldr	r3, [pc, #96]	; (80077dc <HAL_FDCAN_MspInit+0xd8>)
 800777a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN_RX_Pin|FDCAN_TX_Pin;
 8007784:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007788:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800778a:	2302      	movs	r3, #2
 800778c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778e:	2300      	movs	r3, #0
 8007790:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007792:	2302      	movs	r3, #2
 8007794:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8007796:	2309      	movs	r3, #9
 8007798:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800779a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800779e:	4619      	mov	r1, r3
 80077a0:	480f      	ldr	r0, [pc, #60]	; (80077e0 <HAL_FDCAN_MspInit+0xdc>)
 80077a2:	f002 fa87 	bl	8009cb4 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 80077a6:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <HAL_FDCAN_MspInit+0xe0>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	4a0e      	ldr	r2, [pc, #56]	; (80077e4 <HAL_FDCAN_MspInit+0xe0>)
 80077ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077b0:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80077b2:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <HAL_FDCAN_MspInit+0xe0>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	4a0b      	ldr	r2, [pc, #44]	; (80077e4 <HAL_FDCAN_MspInit+0xe0>)
 80077b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077bc:	6053      	str	r3, [r2, #4]

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80077be:	2200      	movs	r2, #0
 80077c0:	2105      	movs	r1, #5
 80077c2:	2015      	movs	r0, #21
 80077c4:	f000 fd22 	bl	800820c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80077c8:	2015      	movs	r0, #21
 80077ca:	f000 fd49 	bl	8008260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80077ce:	bf00      	nop
 80077d0:	3778      	adds	r7, #120	; 0x78
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40006400 	.word	0x40006400
 80077dc:	40021000 	.word	0x40021000
 80077e0:	48000400 	.word	0x48000400
 80077e4:	40010000 	.word	0x40010000

080077e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08c      	sub	sp, #48	; 0x30
 80077ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ee:	f107 031c 	add.w	r3, r7, #28
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	605a      	str	r2, [r3, #4]
 80077f8:	609a      	str	r2, [r3, #8]
 80077fa:	60da      	str	r2, [r3, #12]
 80077fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077fe:	4b64      	ldr	r3, [pc, #400]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007802:	4a63      	ldr	r2, [pc, #396]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007804:	f043 0304 	orr.w	r3, r3, #4
 8007808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800780a:	4b61      	ldr	r3, [pc, #388]	; (8007990 <MX_GPIO_Init+0x1a8>)
 800780c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007816:	4b5e      	ldr	r3, [pc, #376]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781a:	4a5d      	ldr	r2, [pc, #372]	; (8007990 <MX_GPIO_Init+0x1a8>)
 800781c:	f043 0320 	orr.w	r3, r3, #32
 8007820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007822:	4b5b      	ldr	r3, [pc, #364]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800782e:	4b58      	ldr	r3, [pc, #352]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007832:	4a57      	ldr	r2, [pc, #348]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800783a:	4b55      	ldr	r3, [pc, #340]	; (8007990 <MX_GPIO_Init+0x1a8>)
 800783c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007846:	4b52      	ldr	r3, [pc, #328]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784a:	4a51      	ldr	r2, [pc, #324]	; (8007990 <MX_GPIO_Init+0x1a8>)
 800784c:	f043 0301 	orr.w	r3, r3, #1
 8007850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007852:	4b4f      	ldr	r3, [pc, #316]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800785e:	4b4c      	ldr	r3, [pc, #304]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007862:	4a4b      	ldr	r2, [pc, #300]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007864:	f043 0302 	orr.w	r3, r3, #2
 8007868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800786a:	4b49      	ldr	r3, [pc, #292]	; (8007990 <MX_GPIO_Init+0x1a8>)
 800786c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	60bb      	str	r3, [r7, #8]
 8007874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007876:	4b46      	ldr	r3, [pc, #280]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787a:	4a45      	ldr	r2, [pc, #276]	; (8007990 <MX_GPIO_Init+0x1a8>)
 800787c:	f043 0308 	orr.w	r3, r3, #8
 8007880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007882:	4b43      	ldr	r3, [pc, #268]	; (8007990 <MX_GPIO_Init+0x1a8>)
 8007884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007886:	f003 0308 	and.w	r3, r3, #8
 800788a:	607b      	str	r3, [r7, #4]
 800788c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800788e:	2201      	movs	r2, #1
 8007890:	2110      	movs	r1, #16
 8007892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007896:	f002 fc63 	bl	800a160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800789a:	2200      	movs	r2, #0
 800789c:	2110      	movs	r1, #16
 800789e:	483d      	ldr	r0, [pc, #244]	; (8007994 <MX_GPIO_Init+0x1ac>)
 80078a0:	f002 fc5e 	bl	800a160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMC_NRESET_GPIO_Port, TMC_NRESET_Pin, GPIO_PIN_SET);
 80078a4:	2201      	movs	r2, #1
 80078a6:	2101      	movs	r1, #1
 80078a8:	483b      	ldr	r0, [pc, #236]	; (8007998 <MX_GPIO_Init+0x1b0>)
 80078aa:	f002 fc59 	bl	800a160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80078ae:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80078b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078b4:	2303      	movs	r3, #3
 80078b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078bc:	f107 031c 	add.w	r3, r7, #28
 80078c0:	4619      	mov	r1, r3
 80078c2:	4834      	ldr	r0, [pc, #208]	; (8007994 <MX_GPIO_Init+0x1ac>)
 80078c4:	f002 f9f6 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80078c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078ce:	2303      	movs	r3, #3
 80078d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80078d6:	f107 031c 	add.w	r3, r7, #28
 80078da:	4619      	mov	r1, r3
 80078dc:	482f      	ldr	r0, [pc, #188]	; (800799c <MX_GPIO_Init+0x1b4>)
 80078de:	f002 f9e9 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80078e2:	f649 730f 	movw	r3, #40719	; 0x9f0f
 80078e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078e8:	2303      	movs	r3, #3
 80078ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ec:	2300      	movs	r3, #0
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078f0:	f107 031c 	add.w	r3, r7, #28
 80078f4:	4619      	mov	r1, r3
 80078f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078fa:	f002 f9db 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80078fe:	2310      	movs	r3, #16
 8007900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007902:	2301      	movs	r3, #1
 8007904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007906:	2301      	movs	r3, #1
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800790a:	2302      	movs	r3, #2
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800790e:	f107 031c 	add.w	r3, r7, #28
 8007912:	4619      	mov	r1, r3
 8007914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007918:	f002 f9cc 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800791c:	2310      	movs	r3, #16
 800791e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007920:	2301      	movs	r3, #1
 8007922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007924:	2300      	movs	r3, #0
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007928:	2300      	movs	r3, #0
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800792c:	f107 031c 	add.w	r3, r7, #28
 8007930:	4619      	mov	r1, r3
 8007932:	4818      	ldr	r0, [pc, #96]	; (8007994 <MX_GPIO_Init+0x1ac>)
 8007934:	f002 f9be 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TMC_NRESET_Pin;
 8007938:	2301      	movs	r3, #1
 800793a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800793c:	2301      	movs	r3, #1
 800793e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007940:	2301      	movs	r3, #1
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007944:	2300      	movs	r3, #0
 8007946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TMC_NRESET_GPIO_Port, &GPIO_InitStruct);
 8007948:	f107 031c 	add.w	r3, r7, #28
 800794c:	4619      	mov	r1, r3
 800794e:	4812      	ldr	r0, [pc, #72]	; (8007998 <MX_GPIO_Init+0x1b0>)
 8007950:	f002 f9b0 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8007954:	f64f 43fe 	movw	r3, #64766	; 0xfcfe
 8007958:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800795a:	2303      	movs	r3, #3
 800795c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800795e:	2300      	movs	r3, #0
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007962:	f107 031c 	add.w	r3, r7, #28
 8007966:	4619      	mov	r1, r3
 8007968:	480b      	ldr	r0, [pc, #44]	; (8007998 <MX_GPIO_Init+0x1b0>)
 800796a:	f002 f9a3 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800796e:	2304      	movs	r3, #4
 8007970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007972:	2303      	movs	r3, #3
 8007974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007976:	2300      	movs	r3, #0
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800797a:	f107 031c 	add.w	r3, r7, #28
 800797e:	4619      	mov	r1, r3
 8007980:	4807      	ldr	r0, [pc, #28]	; (80079a0 <MX_GPIO_Init+0x1b8>)
 8007982:	f002 f997 	bl	8009cb4 <HAL_GPIO_Init>

}
 8007986:	bf00      	nop
 8007988:	3730      	adds	r7, #48	; 0x30
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40021000 	.word	0x40021000
 8007994:	48000800 	.word	0x48000800
 8007998:	48000400 	.word	0x48000400
 800799c:	48001800 	.word	0x48001800
 80079a0:	48000c00 	.word	0x48000c00

080079a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80079a8:	f000 fb2b 	bl	8008002 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80079ac:	f000 f80d 	bl	80079ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80079b0:	f7ff ff1a 	bl	80077e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80079b4:	f7ff fe0c 	bl	80075d0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80079b8:	f7ff fe3c 	bl	8007634 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80079bc:	f000 f872 	bl	8007aa4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80079c0:	f7ff fdd6 	bl	8007570 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80079c4:	f005 fc6e 	bl	800d2a4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80079c8:	e7fe      	b.n	80079c8 <main+0x24>

080079ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b094      	sub	sp, #80	; 0x50
 80079ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079d0:	f107 0318 	add.w	r3, r7, #24
 80079d4:	2238      	movs	r2, #56	; 0x38
 80079d6:	2100      	movs	r1, #0
 80079d8:	4618      	mov	r0, r3
 80079da:	f008 fc18 	bl	801020e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079de:	1d3b      	adds	r3, r7, #4
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079f0:	f002 fbe6 	bl	800a1c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80079f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079fe:	2302      	movs	r3, #2
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a02:	2303      	movs	r3, #3
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8007a06:	2304      	movs	r3, #4
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8007a0a:	234b      	movs	r3, #75	; 0x4b
 8007a0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007a12:	2302      	movs	r3, #2
 8007a14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007a16:	2302      	movs	r3, #2
 8007a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a1a:	f107 0318 	add.w	r3, r7, #24
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f002 fc82 	bl	800a328 <HAL_RCC_OscConfig>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <SystemClock_Config+0x64>
  {
    Error_Handler();
 8007a2a:	f000 f82b 	bl	8007a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a2e:	230f      	movs	r3, #15
 8007a30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a32:	2303      	movs	r3, #3
 8007a34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007a42:	1d3b      	adds	r3, r7, #4
 8007a44:	2104      	movs	r1, #4
 8007a46:	4618      	mov	r0, r3
 8007a48:	f003 f880 	bl	800ab4c <HAL_RCC_ClockConfig>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8007a52:	f000 f817 	bl	8007a84 <Error_Handler>
  }
}
 8007a56:	bf00      	nop
 8007a58:	3750      	adds	r7, #80	; 0x50
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a04      	ldr	r2, [pc, #16]	; (8007a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d101      	bne.n	8007a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007a72:	f000 fadf 	bl	8008034 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	40012c00 	.word	0x40012c00

08007a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007a88:	b672      	cpsid	i
}
 8007a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007a8c:	e7fe      	b.n	8007a8c <Error_Handler+0x8>

08007a8e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007aa8:	4b1b      	ldr	r3, [pc, #108]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <MX_SPI1_Init+0x78>)
 8007aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007aae:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007abc:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007abe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007ac4:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007aca:	4b13      	ldr	r3, [pc, #76]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ad6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ada:	2210      	movs	r2, #16
 8007adc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ade:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aea:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007af0:	4b09      	ldr	r3, [pc, #36]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007af2:	2207      	movs	r2, #7
 8007af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007af6:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007b02:	4805      	ldr	r0, [pc, #20]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007b04:	f003 ff90 	bl	800ba28 <HAL_SPI_Init>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007b0e:	f7ff ffb9 	bl	8007a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	2000265c 	.word	0x2000265c
 8007b1c:	40013000 	.word	0x40013000

08007b20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08a      	sub	sp, #40	; 0x28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b28:	f107 0314 	add.w	r3, r7, #20
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	605a      	str	r2, [r3, #4]
 8007b32:	609a      	str	r2, [r3, #8]
 8007b34:	60da      	str	r2, [r3, #12]
 8007b36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a41      	ldr	r2, [pc, #260]	; (8007c44 <HAL_SPI_MspInit+0x124>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d17c      	bne.n	8007c3c <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b42:	4b41      	ldr	r3, [pc, #260]	; (8007c48 <HAL_SPI_MspInit+0x128>)
 8007b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b46:	4a40      	ldr	r2, [pc, #256]	; (8007c48 <HAL_SPI_MspInit+0x128>)
 8007b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8007b4e:	4b3e      	ldr	r3, [pc, #248]	; (8007c48 <HAL_SPI_MspInit+0x128>)
 8007b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b5a:	4b3b      	ldr	r3, [pc, #236]	; (8007c48 <HAL_SPI_MspInit+0x128>)
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5e:	4a3a      	ldr	r2, [pc, #232]	; (8007c48 <HAL_SPI_MspInit+0x128>)
 8007b60:	f043 0301 	orr.w	r3, r3, #1
 8007b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b66:	4b38      	ldr	r3, [pc, #224]	; (8007c48 <HAL_SPI_MspInit+0x128>)
 8007b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007b72:	23e0      	movs	r3, #224	; 0xe0
 8007b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b76:	2302      	movs	r3, #2
 8007b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b82:	2305      	movs	r3, #5
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b86:	f107 0314 	add.w	r3, r7, #20
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b90:	f002 f890 	bl	8009cb4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8007b94:	4b2d      	ldr	r3, [pc, #180]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007b96:	4a2e      	ldr	r2, [pc, #184]	; (8007c50 <HAL_SPI_MspInit+0x130>)
 8007b98:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8007b9a:	4b2c      	ldr	r3, [pc, #176]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007b9c:	220a      	movs	r2, #10
 8007b9e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ba0:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ba6:	4b29      	ldr	r3, [pc, #164]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007bac:	4b27      	ldr	r3, [pc, #156]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007bae:	2280      	movs	r2, #128	; 0x80
 8007bb0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bb2:	4b26      	ldr	r3, [pc, #152]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bb8:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8007bbe:	4b23      	ldr	r3, [pc, #140]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007bc4:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8007bcc:	481f      	ldr	r0, [pc, #124]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007bce:	f000 fb5f 	bl	8008290 <HAL_DMA_Init>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8007bd8:	f7ff ff54 	bl	8007a84 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007be0:	659a      	str	r2, [r3, #88]	; 0x58
 8007be2:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <HAL_SPI_MspInit+0x12c>)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8007be8:	4b1a      	ldr	r3, [pc, #104]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007bea:	4a1b      	ldr	r2, [pc, #108]	; (8007c58 <HAL_SPI_MspInit+0x138>)
 8007bec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8007bee:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007bf0:	220b      	movs	r2, #11
 8007bf2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bf4:	4b17      	ldr	r3, [pc, #92]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bfa:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c00:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007c02:	2280      	movs	r2, #128	; 0x80
 8007c04:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c0c:	4b11      	ldr	r3, [pc, #68]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007c12:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007c18:	4b0e      	ldr	r3, [pc, #56]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007c1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007c20:	480c      	ldr	r0, [pc, #48]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007c22:	f000 fb35 	bl	8008290 <HAL_DMA_Init>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8007c2c:	f7ff ff2a 	bl	8007a84 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a08      	ldr	r2, [pc, #32]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007c34:	655a      	str	r2, [r3, #84]	; 0x54
 8007c36:	4a07      	ldr	r2, [pc, #28]	; (8007c54 <HAL_SPI_MspInit+0x134>)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	3728      	adds	r7, #40	; 0x28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	40013000 	.word	0x40013000
 8007c48:	40021000 	.word	0x40021000
 8007c4c:	200026c0 	.word	0x200026c0
 8007c50:	40020008 	.word	0x40020008
 8007c54:	20002720 	.word	0x20002720
 8007c58:	4002001c 	.word	0x4002001c

08007c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c62:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <HAL_MspInit+0x4c>)
 8007c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c66:	4a10      	ldr	r2, [pc, #64]	; (8007ca8 <HAL_MspInit+0x4c>)
 8007c68:	f043 0301 	orr.w	r3, r3, #1
 8007c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <HAL_MspInit+0x4c>)
 8007c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	607b      	str	r3, [r7, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <HAL_MspInit+0x4c>)
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <HAL_MspInit+0x4c>)
 8007c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c84:	6593      	str	r3, [r2, #88]	; 0x58
 8007c86:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <HAL_MspInit+0x4c>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c92:	2200      	movs	r2, #0
 8007c94:	210f      	movs	r1, #15
 8007c96:	f06f 0001 	mvn.w	r0, #1
 8007c9a:	f000 fab7 	bl	800820c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40021000 	.word	0x40021000

08007cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08c      	sub	sp, #48	; 0x30
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007cbc:	4b2c      	ldr	r3, [pc, #176]	; (8007d70 <HAL_InitTick+0xc4>)
 8007cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc0:	4a2b      	ldr	r2, [pc, #172]	; (8007d70 <HAL_InitTick+0xc4>)
 8007cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007cc6:	6613      	str	r3, [r2, #96]	; 0x60
 8007cc8:	4b29      	ldr	r3, [pc, #164]	; (8007d70 <HAL_InitTick+0xc4>)
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cd0:	60bb      	str	r3, [r7, #8]
 8007cd2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007cd4:	f107 020c 	add.w	r2, r7, #12
 8007cd8:	f107 0310 	add.w	r3, r7, #16
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f003 f9b6 	bl	800b050 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007ce4:	f003 f99e 	bl	800b024 <HAL_RCC_GetPCLK2Freq>
 8007ce8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <HAL_InitTick+0xc8>)
 8007cee:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf2:	0c9b      	lsrs	r3, r3, #18
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007cf8:	4b1f      	ldr	r3, [pc, #124]	; (8007d78 <HAL_InitTick+0xcc>)
 8007cfa:	4a20      	ldr	r2, [pc, #128]	; (8007d7c <HAL_InitTick+0xd0>)
 8007cfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007cfe:	4b1e      	ldr	r3, [pc, #120]	; (8007d78 <HAL_InitTick+0xcc>)
 8007d00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007d04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007d06:	4a1c      	ldr	r2, [pc, #112]	; (8007d78 <HAL_InitTick+0xcc>)
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <HAL_InitTick+0xcc>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d12:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <HAL_InitTick+0xcc>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8007d18:	4817      	ldr	r0, [pc, #92]	; (8007d78 <HAL_InitTick+0xcc>)
 8007d1a:	f004 fe61 	bl	800c9e0 <HAL_TIM_Base_Init>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d11b      	bne.n	8007d64 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007d2c:	4812      	ldr	r0, [pc, #72]	; (8007d78 <HAL_InitTick+0xcc>)
 8007d2e:	f004 ff4b 	bl	800cbc8 <HAL_TIM_Base_Start_IT>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d111      	bne.n	8007d64 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007d40:	2019      	movs	r0, #25
 8007d42:	f000 fa8d 	bl	8008260 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b0f      	cmp	r3, #15
 8007d4a:	d808      	bhi.n	8007d5e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	2019      	movs	r0, #25
 8007d52:	f000 fa5b 	bl	800820c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007d56:	4a0a      	ldr	r2, [pc, #40]	; (8007d80 <HAL_InitTick+0xd4>)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	e002      	b.n	8007d64 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007d64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3730      	adds	r7, #48	; 0x30
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	40021000 	.word	0x40021000
 8007d74:	431bde83 	.word	0x431bde83
 8007d78:	20002780 	.word	0x20002780
 8007d7c:	40012c00 	.word	0x40012c00
 8007d80:	20000a9c 	.word	0x20000a9c

08007d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d88:	e7fe      	b.n	8007d88 <NMI_Handler+0x4>

08007d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d8e:	e7fe      	b.n	8007d8e <HardFault_Handler+0x4>

08007d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d94:	e7fe      	b.n	8007d94 <MemManage_Handler+0x4>

08007d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d96:	b480      	push	{r7}
 8007d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d9a:	e7fe      	b.n	8007d9a <BusFault_Handler+0x4>

08007d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007da0:	e7fe      	b.n	8007da0 <UsageFault_Handler+0x4>

08007da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007da2:	b480      	push	{r7}
 8007da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007da6:	bf00      	nop
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007db4:	4802      	ldr	r0, [pc, #8]	; (8007dc0 <DMA1_Channel1_IRQHandler+0x10>)
 8007db6:	f000 fc8d 	bl	80086d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007dba:	bf00      	nop
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200026c0 	.word	0x200026c0

08007dc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007dc8:	4802      	ldr	r0, [pc, #8]	; (8007dd4 <DMA1_Channel2_IRQHandler+0x10>)
 8007dca:	f000 fc83 	bl	80086d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007dce:	bf00      	nop
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20002720 	.word	0x20002720

08007dd8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8007ddc:	4802      	ldr	r0, [pc, #8]	; (8007de8 <FDCAN1_IT0_IRQHandler+0x10>)
 8007dde:	f001 fcdf 	bl	80097a0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8007de2:	bf00      	nop
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	200025f8 	.word	0x200025f8

08007dec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007df0:	4802      	ldr	r0, [pc, #8]	; (8007dfc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007df2:	f004 ffa9 	bl	800cd48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007df6:	bf00      	nop
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20002780 	.word	0x20002780

08007e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  return 1;
 8007e04:	2301      	movs	r3, #1
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <_kill>:

int _kill(int pid, int sig)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007e1a:	f008 f8a5 	bl	800ff68 <__errno>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2216      	movs	r2, #22
 8007e22:	601a      	str	r2, [r3, #0]
  return -1;
 8007e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <_exit>:

void _exit (int status)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff ffe7 	bl	8007e10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007e42:	e7fe      	b.n	8007e42 <_exit+0x12>

08007e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	e00a      	b.n	8007e6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007e56:	f3af 8000 	nop.w
 8007e5a:	4601      	mov	r1, r0
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	60ba      	str	r2, [r7, #8]
 8007e62:	b2ca      	uxtb	r2, r1
 8007e64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	dbf0      	blt.n	8007e56 <_read+0x12>
  }

  return len;
 8007e74:	687b      	ldr	r3, [r7, #4]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	e009      	b.n	8007ea4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	60ba      	str	r2, [r7, #8]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	dbf1      	blt.n	8007e90 <_write+0x12>
  }
  return len;
 8007eac:	687b      	ldr	r3, [r7, #4]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <_close>:

int _close(int file)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ede:	605a      	str	r2, [r3, #4]
  return 0;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <_isatty>:

int _isatty(int file)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007ef6:	2301      	movs	r3, #1
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
	...

08007f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f28:	4a14      	ldr	r2, [pc, #80]	; (8007f7c <_sbrk+0x5c>)
 8007f2a:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <_sbrk+0x60>)
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f34:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <_sbrk+0x64>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d102      	bne.n	8007f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f3c:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <_sbrk+0x64>)
 8007f3e:	4a12      	ldr	r2, [pc, #72]	; (8007f88 <_sbrk+0x68>)
 8007f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f42:	4b10      	ldr	r3, [pc, #64]	; (8007f84 <_sbrk+0x64>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d207      	bcs.n	8007f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f50:	f008 f80a 	bl	800ff68 <__errno>
 8007f54:	4603      	mov	r3, r0
 8007f56:	220c      	movs	r2, #12
 8007f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f5e:	e009      	b.n	8007f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f60:	4b08      	ldr	r3, [pc, #32]	; (8007f84 <_sbrk+0x64>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f66:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <_sbrk+0x64>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	4a05      	ldr	r2, [pc, #20]	; (8007f84 <_sbrk+0x64>)
 8007f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f72:	68fb      	ldr	r3, [r7, #12]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20020000 	.word	0x20020000
 8007f80:	00000400 	.word	0x00000400
 8007f84:	200027cc 	.word	0x200027cc
 8007f88:	200079b8 	.word	0x200079b8

08007f8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <SystemInit+0x20>)
 8007f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f96:	4a05      	ldr	r2, [pc, #20]	; (8007fac <SystemInit+0x20>)
 8007f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007fa0:	bf00      	nop
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	e000ed00 	.word	0xe000ed00

08007fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007fb0:	480d      	ldr	r0, [pc, #52]	; (8007fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007fb2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007fb4:	480d      	ldr	r0, [pc, #52]	; (8007fec <LoopForever+0x6>)
  ldr r1, =_edata
 8007fb6:	490e      	ldr	r1, [pc, #56]	; (8007ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007fb8:	4a0e      	ldr	r2, [pc, #56]	; (8007ff4 <LoopForever+0xe>)
  movs r3, #0
 8007fba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007fbc:	e002      	b.n	8007fc4 <LoopCopyDataInit>

08007fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007fc2:	3304      	adds	r3, #4

08007fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007fc8:	d3f9      	bcc.n	8007fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007fca:	4a0b      	ldr	r2, [pc, #44]	; (8007ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007fcc:	4c0b      	ldr	r4, [pc, #44]	; (8007ffc <LoopForever+0x16>)
  movs r3, #0
 8007fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007fd0:	e001      	b.n	8007fd6 <LoopFillZerobss>

08007fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007fd4:	3204      	adds	r2, #4

08007fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007fd8:	d3fb      	bcc.n	8007fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007fda:	f7ff ffd7 	bl	8007f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fde:	f008 f8d1 	bl	8010184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007fe2:	f7ff fcdf 	bl	80079a4 <main>

08007fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8007fe6:	e7fe      	b.n	8007fe6 <LoopForever>
  ldr   r0, =_estack
 8007fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ff0:	20000b0c 	.word	0x20000b0c
  ldr r2, =_sidata
 8007ff4:	0801243c 	.word	0x0801243c
  ldr r2, =_sbss
 8007ff8:	20000b10 	.word	0x20000b10
  ldr r4, =_ebss
 8007ffc:	200079b4 	.word	0x200079b4

08008000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008000:	e7fe      	b.n	8008000 <ADC1_2_IRQHandler>

08008002 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800800c:	2003      	movs	r0, #3
 800800e:	f000 f8dd 	bl	80081cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008012:	200f      	movs	r0, #15
 8008014:	f7ff fe4a 	bl	8007cac <HAL_InitTick>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	71fb      	strb	r3, [r7, #7]
 8008022:	e001      	b.n	8008028 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008024:	f7ff fe1a 	bl	8007c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008028:	79fb      	ldrb	r3, [r7, #7]

}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <HAL_IncTick+0x1c>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HAL_IncTick+0x20>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4413      	add	r3, r2
 8008042:	4a03      	ldr	r2, [pc, #12]	; (8008050 <HAL_IncTick+0x1c>)
 8008044:	6013      	str	r3, [r2, #0]
}
 8008046:	bf00      	nop
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	200027d0 	.word	0x200027d0
 8008054:	20000aa0 	.word	0x20000aa0

08008058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  return uwTick;
 800805c:	4b03      	ldr	r3, [pc, #12]	; (800806c <HAL_GetTick+0x14>)
 800805e:	681b      	ldr	r3, [r3, #0]
}
 8008060:	4618      	mov	r0, r3
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	200027d0 	.word	0x200027d0

08008070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008080:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <__NVIC_SetPriorityGrouping+0x44>)
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800808c:	4013      	ands	r3, r2
 800808e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800809c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80080a2:	4a04      	ldr	r2, [pc, #16]	; (80080b4 <__NVIC_SetPriorityGrouping+0x44>)
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	60d3      	str	r3, [r2, #12]
}
 80080a8:	bf00      	nop
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	e000ed00 	.word	0xe000ed00

080080b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080bc:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <__NVIC_GetPriorityGrouping+0x18>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	0a1b      	lsrs	r3, r3, #8
 80080c2:	f003 0307 	and.w	r3, r3, #7
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	e000ed00 	.word	0xe000ed00

080080d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	db0b      	blt.n	80080fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	f003 021f 	and.w	r2, r3, #31
 80080ec:	4907      	ldr	r1, [pc, #28]	; (800810c <__NVIC_EnableIRQ+0x38>)
 80080ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	2001      	movs	r0, #1
 80080f6:	fa00 f202 	lsl.w	r2, r0, r2
 80080fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	e000e100 	.word	0xe000e100

08008110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800811c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008120:	2b00      	cmp	r3, #0
 8008122:	db0a      	blt.n	800813a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	b2da      	uxtb	r2, r3
 8008128:	490c      	ldr	r1, [pc, #48]	; (800815c <__NVIC_SetPriority+0x4c>)
 800812a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812e:	0112      	lsls	r2, r2, #4
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	440b      	add	r3, r1
 8008134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008138:	e00a      	b.n	8008150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	b2da      	uxtb	r2, r3
 800813e:	4908      	ldr	r1, [pc, #32]	; (8008160 <__NVIC_SetPriority+0x50>)
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	3b04      	subs	r3, #4
 8008148:	0112      	lsls	r2, r2, #4
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	440b      	add	r3, r1
 800814e:	761a      	strb	r2, [r3, #24]
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	e000e100 	.word	0xe000e100
 8008160:	e000ed00 	.word	0xe000ed00

08008164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008164:	b480      	push	{r7}
 8008166:	b089      	sub	sp, #36	; 0x24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f1c3 0307 	rsb	r3, r3, #7
 800817e:	2b04      	cmp	r3, #4
 8008180:	bf28      	it	cs
 8008182:	2304      	movcs	r3, #4
 8008184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	3304      	adds	r3, #4
 800818a:	2b06      	cmp	r3, #6
 800818c:	d902      	bls.n	8008194 <NVIC_EncodePriority+0x30>
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	3b03      	subs	r3, #3
 8008192:	e000      	b.n	8008196 <NVIC_EncodePriority+0x32>
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43da      	mvns	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	401a      	ands	r2, r3
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	fa01 f303 	lsl.w	r3, r1, r3
 80081b6:	43d9      	mvns	r1, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081bc:	4313      	orrs	r3, r2
         );
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3724      	adds	r7, #36	; 0x24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
	...

080081cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b07      	cmp	r3, #7
 80081d8:	d00f      	beq.n	80081fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b06      	cmp	r3, #6
 80081de:	d00c      	beq.n	80081fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b05      	cmp	r3, #5
 80081e4:	d009      	beq.n	80081fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d006      	beq.n	80081fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d003      	beq.n	80081fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80081f2:	21a6      	movs	r1, #166	; 0xa6
 80081f4:	4804      	ldr	r0, [pc, #16]	; (8008208 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80081f6:	f7ff fc4a 	bl	8007a8e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff ff38 	bl	8008070 <__NVIC_SetPriorityGrouping>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	080119c4 	.word	0x080119c4

0800820c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b0f      	cmp	r3, #15
 800821e:	d903      	bls.n	8008228 <HAL_NVIC_SetPriority+0x1c>
 8008220:	21be      	movs	r1, #190	; 0xbe
 8008222:	480e      	ldr	r0, [pc, #56]	; (800825c <HAL_NVIC_SetPriority+0x50>)
 8008224:	f7ff fc33 	bl	8007a8e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b0f      	cmp	r3, #15
 800822c:	d903      	bls.n	8008236 <HAL_NVIC_SetPriority+0x2a>
 800822e:	21bf      	movs	r1, #191	; 0xbf
 8008230:	480a      	ldr	r0, [pc, #40]	; (800825c <HAL_NVIC_SetPriority+0x50>)
 8008232:	f7ff fc2c 	bl	8007a8e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8008236:	f7ff ff3f 	bl	80080b8 <__NVIC_GetPriorityGrouping>
 800823a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	6978      	ldr	r0, [r7, #20]
 8008242:	f7ff ff8f 	bl	8008164 <NVIC_EncodePriority>
 8008246:	4602      	mov	r2, r0
 8008248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7ff ff5e 	bl	8008110 <__NVIC_SetPriority>
}
 8008254:	bf00      	nop
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	080119c4 	.word	0x080119c4

08008260 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800826a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800826e:	2b00      	cmp	r3, #0
 8008270:	da03      	bge.n	800827a <HAL_NVIC_EnableIRQ+0x1a>
 8008272:	21d2      	movs	r1, #210	; 0xd2
 8008274:	4805      	ldr	r0, [pc, #20]	; (800828c <HAL_NVIC_EnableIRQ+0x2c>)
 8008276:	f7ff fc0a 	bl	8007a8e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800827a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ff28 	bl	80080d4 <__NVIC_EnableIRQ>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	080119c4 	.word	0x080119c4

08008290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e184      	b.n	80085ac <HAL_DMA_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a70      	ldr	r2, [pc, #448]	; (8008468 <HAL_DMA_Init+0x1d8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d04e      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a6e      	ldr	r2, [pc, #440]	; (800846c <HAL_DMA_Init+0x1dc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d049      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a6d      	ldr	r2, [pc, #436]	; (8008470 <HAL_DMA_Init+0x1e0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d044      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a6b      	ldr	r2, [pc, #428]	; (8008474 <HAL_DMA_Init+0x1e4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d03f      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a6a      	ldr	r2, [pc, #424]	; (8008478 <HAL_DMA_Init+0x1e8>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d03a      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a68      	ldr	r2, [pc, #416]	; (800847c <HAL_DMA_Init+0x1ec>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d035      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a67      	ldr	r2, [pc, #412]	; (8008480 <HAL_DMA_Init+0x1f0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d030      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a65      	ldr	r2, [pc, #404]	; (8008484 <HAL_DMA_Init+0x1f4>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d02b      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a64      	ldr	r2, [pc, #400]	; (8008488 <HAL_DMA_Init+0x1f8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d026      	beq.n	800834a <HAL_DMA_Init+0xba>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a62      	ldr	r2, [pc, #392]	; (800848c <HAL_DMA_Init+0x1fc>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d021      	beq.n	800834a <HAL_DMA_Init+0xba>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a61      	ldr	r2, [pc, #388]	; (8008490 <HAL_DMA_Init+0x200>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d01c      	beq.n	800834a <HAL_DMA_Init+0xba>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a5f      	ldr	r2, [pc, #380]	; (8008494 <HAL_DMA_Init+0x204>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d017      	beq.n	800834a <HAL_DMA_Init+0xba>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a5e      	ldr	r2, [pc, #376]	; (8008498 <HAL_DMA_Init+0x208>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d012      	beq.n	800834a <HAL_DMA_Init+0xba>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a5c      	ldr	r2, [pc, #368]	; (800849c <HAL_DMA_Init+0x20c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d00d      	beq.n	800834a <HAL_DMA_Init+0xba>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a5b      	ldr	r2, [pc, #364]	; (80084a0 <HAL_DMA_Init+0x210>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d008      	beq.n	800834a <HAL_DMA_Init+0xba>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a59      	ldr	r2, [pc, #356]	; (80084a4 <HAL_DMA_Init+0x214>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d003      	beq.n	800834a <HAL_DMA_Init+0xba>
 8008342:	21a3      	movs	r1, #163	; 0xa3
 8008344:	4858      	ldr	r0, [pc, #352]	; (80084a8 <HAL_DMA_Init+0x218>)
 8008346:	f7ff fba2 	bl	8007a8e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00c      	beq.n	800836c <HAL_DMA_Init+0xdc>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	2b10      	cmp	r3, #16
 8008358:	d008      	beq.n	800836c <HAL_DMA_Init+0xdc>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008362:	d003      	beq.n	800836c <HAL_DMA_Init+0xdc>
 8008364:	21a4      	movs	r1, #164	; 0xa4
 8008366:	4850      	ldr	r0, [pc, #320]	; (80084a8 <HAL_DMA_Init+0x218>)
 8008368:	f7ff fb91 	bl	8007a8e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	2b40      	cmp	r3, #64	; 0x40
 8008372:	d007      	beq.n	8008384 <HAL_DMA_Init+0xf4>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <HAL_DMA_Init+0xf4>
 800837c:	21a5      	movs	r1, #165	; 0xa5
 800837e:	484a      	ldr	r0, [pc, #296]	; (80084a8 <HAL_DMA_Init+0x218>)
 8008380:	f7ff fb85 	bl	8007a8e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b80      	cmp	r3, #128	; 0x80
 800838a:	d007      	beq.n	800839c <HAL_DMA_Init+0x10c>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_DMA_Init+0x10c>
 8008394:	21a6      	movs	r1, #166	; 0xa6
 8008396:	4844      	ldr	r0, [pc, #272]	; (80084a8 <HAL_DMA_Init+0x218>)
 8008398:	f7ff fb79 	bl	8007a8e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00d      	beq.n	80083c0 <HAL_DMA_Init+0x130>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ac:	d008      	beq.n	80083c0 <HAL_DMA_Init+0x130>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b6:	d003      	beq.n	80083c0 <HAL_DMA_Init+0x130>
 80083b8:	21a7      	movs	r1, #167	; 0xa7
 80083ba:	483b      	ldr	r0, [pc, #236]	; (80084a8 <HAL_DMA_Init+0x218>)
 80083bc:	f7ff fb67 	bl	8007a8e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00d      	beq.n	80083e4 <HAL_DMA_Init+0x154>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d0:	d008      	beq.n	80083e4 <HAL_DMA_Init+0x154>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083da:	d003      	beq.n	80083e4 <HAL_DMA_Init+0x154>
 80083dc:	21a8      	movs	r1, #168	; 0xa8
 80083de:	4832      	ldr	r0, [pc, #200]	; (80084a8 <HAL_DMA_Init+0x218>)
 80083e0:	f7ff fb55 	bl	8007a8e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <HAL_DMA_Init+0x16c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d003      	beq.n	80083fc <HAL_DMA_Init+0x16c>
 80083f4:	21a9      	movs	r1, #169	; 0xa9
 80083f6:	482c      	ldr	r0, [pc, #176]	; (80084a8 <HAL_DMA_Init+0x218>)
 80083f8:	f7ff fb49 	bl	8007a8e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d012      	beq.n	800842a <HAL_DMA_Init+0x19a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840c:	d00d      	beq.n	800842a <HAL_DMA_Init+0x19a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008416:	d008      	beq.n	800842a <HAL_DMA_Init+0x19a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008420:	d003      	beq.n	800842a <HAL_DMA_Init+0x19a>
 8008422:	21aa      	movs	r1, #170	; 0xaa
 8008424:	4820      	ldr	r0, [pc, #128]	; (80084a8 <HAL_DMA_Init+0x218>)
 8008426:	f7ff fb32 	bl	8007a8e <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b73      	cmp	r3, #115	; 0x73
 8008430:	d903      	bls.n	800843a <HAL_DMA_Init+0x1aa>
 8008432:	21ac      	movs	r1, #172	; 0xac
 8008434:	481c      	ldr	r0, [pc, #112]	; (80084a8 <HAL_DMA_Init+0x218>)
 8008436:	f7ff fb2a 	bl	8007a8e <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <HAL_DMA_Init+0x21c>)
 8008442:	429a      	cmp	r2, r3
 8008444:	d83a      	bhi.n	80084bc <HAL_DMA_Init+0x22c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	4b18      	ldr	r3, [pc, #96]	; (80084b0 <HAL_DMA_Init+0x220>)
 800844e:	4413      	add	r3, r2
 8008450:	4a18      	ldr	r2, [pc, #96]	; (80084b4 <HAL_DMA_Init+0x224>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	091b      	lsrs	r3, r3, #4
 8008458:	009a      	lsls	r2, r3, #2
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <HAL_DMA_Init+0x228>)
 8008462:	641a      	str	r2, [r3, #64]	; 0x40
 8008464:	e039      	b.n	80084da <HAL_DMA_Init+0x24a>
 8008466:	bf00      	nop
 8008468:	40020008 	.word	0x40020008
 800846c:	4002001c 	.word	0x4002001c
 8008470:	40020030 	.word	0x40020030
 8008474:	40020044 	.word	0x40020044
 8008478:	40020058 	.word	0x40020058
 800847c:	4002006c 	.word	0x4002006c
 8008480:	40020080 	.word	0x40020080
 8008484:	40020094 	.word	0x40020094
 8008488:	40020408 	.word	0x40020408
 800848c:	4002041c 	.word	0x4002041c
 8008490:	40020430 	.word	0x40020430
 8008494:	40020444 	.word	0x40020444
 8008498:	40020458 	.word	0x40020458
 800849c:	4002046c 	.word	0x4002046c
 80084a0:	40020480 	.word	0x40020480
 80084a4:	40020494 	.word	0x40020494
 80084a8:	08011a00 	.word	0x08011a00
 80084ac:	40020407 	.word	0x40020407
 80084b0:	bffdfff8 	.word	0xbffdfff8
 80084b4:	cccccccd 	.word	0xcccccccd
 80084b8:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	4b3c      	ldr	r3, [pc, #240]	; (80085b4 <HAL_DMA_Init+0x324>)
 80084c4:	4413      	add	r3, r2
 80084c6:	4a3c      	ldr	r2, [pc, #240]	; (80085b8 <HAL_DMA_Init+0x328>)
 80084c8:	fba2 2303 	umull	r2, r3, r2, r3
 80084cc:	091b      	lsrs	r3, r3, #4
 80084ce:	009a      	lsls	r2, r3, #2
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a39      	ldr	r2, [pc, #228]	; (80085bc <HAL_DMA_Init+0x32c>)
 80084d8:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80084fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800850a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f9bf 	bl	80088b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800853a:	d102      	bne.n	8008542 <HAL_DMA_Init+0x2b2>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800854a:	b2d2      	uxtb	r2, r2
 800854c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008556:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d010      	beq.n	8008582 <HAL_DMA_Init+0x2f2>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	2b04      	cmp	r3, #4
 8008566:	d80c      	bhi.n	8008582 <HAL_DMA_Init+0x2f2>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f9df 	bl	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800857e:	605a      	str	r2, [r3, #4]
 8008580:	e008      	b.n	8008594 <HAL_DMA_Init+0x304>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	bffdfbf8 	.word	0xbffdfbf8
 80085b8:	cccccccd 	.word	0xcccccccd
 80085bc:	40020400 	.word	0x40020400

080085c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_DMA_Start_IT+0x20>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085de:	d304      	bcc.n	80085ea <HAL_DMA_Start_IT+0x2a>
 80085e0:	f240 11ab 	movw	r1, #427	; 0x1ab
 80085e4:	483a      	ldr	r0, [pc, #232]	; (80086d0 <HAL_DMA_Start_IT+0x110>)
 80085e6:	f7ff fa52 	bl	8007a8e <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d101      	bne.n	80085f8 <HAL_DMA_Start_IT+0x38>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e066      	b.n	80086c6 <HAL_DMA_Start_IT+0x106>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	d155      	bne.n	80086b8 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0201 	bic.w	r2, r2, #1
 8008628:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f8fe 	bl	8008832 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d008      	beq.n	8008650 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 020e 	orr.w	r2, r2, #14
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e00f      	b.n	8008670 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 0204 	bic.w	r2, r2, #4
 800865e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 020a 	orr.w	r2, r2, #10
 800866e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d007      	beq.n	800868e <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800868c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0201 	orr.w	r2, r2, #1
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	e005      	b.n	80086c4 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80086c0:	2302      	movs	r3, #2
 80086c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	08011a00 	.word	0x08011a00

080086d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f0:	f003 031f 	and.w	r3, r3, #31
 80086f4:	2204      	movs	r2, #4
 80086f6:	409a      	lsls	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d026      	beq.n	800874e <HAL_DMA_IRQHandler+0x7a>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	d021      	beq.n	800874e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	d107      	bne.n	8008728 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0204 	bic.w	r2, r2, #4
 8008726:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872c:	f003 021f 	and.w	r2, r3, #31
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	2104      	movs	r1, #4
 8008736:	fa01 f202 	lsl.w	r2, r1, r2
 800873a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d071      	beq.n	8008828 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800874c:	e06c      	b.n	8008828 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008752:	f003 031f 	and.w	r3, r3, #31
 8008756:	2202      	movs	r2, #2
 8008758:	409a      	lsls	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4013      	ands	r3, r2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d02e      	beq.n	80087c0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d029      	beq.n	80087c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 020a 	bic.w	r2, r2, #10
 8008788:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008796:	f003 021f 	and.w	r2, r3, #31
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	2102      	movs	r1, #2
 80087a0:	fa01 f202 	lsl.w	r2, r1, r2
 80087a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d038      	beq.n	8008828 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80087be:	e033      	b.n	8008828 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	f003 031f 	and.w	r3, r3, #31
 80087c8:	2208      	movs	r2, #8
 80087ca:	409a      	lsls	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4013      	ands	r3, r2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d02a      	beq.n	800882a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d025      	beq.n	800882a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 020e 	bic.w	r2, r2, #14
 80087ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f2:	f003 021f 	and.w	r2, r3, #31
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	2101      	movs	r1, #1
 80087fc:	fa01 f202 	lsl.w	r2, r1, r2
 8008800:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	d004      	beq.n	800882a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008828:	bf00      	nop
 800882a:	bf00      	nop
}
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	607a      	str	r2, [r7, #4]
 800883e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008848:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884e:	2b00      	cmp	r3, #0
 8008850:	d004      	beq.n	800885c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800885a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008860:	f003 021f 	and.w	r2, r3, #31
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	2101      	movs	r1, #1
 800886a:	fa01 f202 	lsl.w	r2, r1, r2
 800886e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	2b10      	cmp	r3, #16
 800887e:	d108      	bne.n	8008892 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008890:	e007      	b.n	80088a2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	60da      	str	r2, [r3, #12]
}
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	4b16      	ldr	r3, [pc, #88]	; (8008918 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d802      	bhi.n	80088ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80088c4:	4b15      	ldr	r3, [pc, #84]	; (800891c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	e001      	b.n	80088ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80088ca:	4b15      	ldr	r3, [pc, #84]	; (8008920 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80088cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	3b08      	subs	r3, #8
 80088da:	4a12      	ldr	r2, [pc, #72]	; (8008924 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80088dc:	fba2 2303 	umull	r2, r3, r2, r3
 80088e0:	091b      	lsrs	r3, r3, #4
 80088e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e8:	089b      	lsrs	r3, r3, #2
 80088ea:	009a      	lsls	r2, r3, #2
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	4413      	add	r3, r2
 80088f0:	461a      	mov	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a0b      	ldr	r2, [pc, #44]	; (8008928 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80088fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f003 031f 	and.w	r3, r3, #31
 8008902:	2201      	movs	r2, #1
 8008904:	409a      	lsls	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	651a      	str	r2, [r3, #80]	; 0x50
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40020407 	.word	0x40020407
 800891c:	40020800 	.word	0x40020800
 8008920:	40020820 	.word	0x40020820
 8008924:	cccccccd 	.word	0xcccccccd
 8008928:	40020880 	.word	0x40020880

0800892c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4b0b      	ldr	r3, [pc, #44]	; (800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	461a      	mov	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a08      	ldr	r2, [pc, #32]	; (8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800894e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b01      	subs	r3, #1
 8008954:	f003 031f 	and.w	r3, r3, #31
 8008958:	2201      	movs	r2, #1
 800895a:	409a      	lsls	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	1000823f 	.word	0x1000823f
 8008970:	40020940 	.word	0x40020940

08008974 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e296      	b.n	8008eb4 <HAL_FDCAN_Init+0x540>
  }

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a8f      	ldr	r2, [pc, #572]	; (8008bc8 <HAL_FDCAN_Init+0x254>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d00e      	beq.n	80089ae <HAL_FDCAN_Init+0x3a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a8d      	ldr	r2, [pc, #564]	; (8008bcc <HAL_FDCAN_Init+0x258>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d009      	beq.n	80089ae <HAL_FDCAN_Init+0x3a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a8c      	ldr	r2, [pc, #560]	; (8008bd0 <HAL_FDCAN_Init+0x25c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d004      	beq.n	80089ae <HAL_FDCAN_Init+0x3a>
 80089a4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80089a8:	488a      	ldr	r0, [pc, #552]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 80089aa:	f7ff f870 	bl	8007a8e <assert_failed>
  if (hfdcan->Instance == FDCAN1)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a85      	ldr	r2, [pc, #532]	; (8008bc8 <HAL_FDCAN_Init+0x254>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d144      	bne.n	8008a42 <HAL_FDCAN_Init+0xce>
  {
    assert_param(IS_FDCAN_CKDIV(hfdcan->Init.ClockDivider));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d040      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d03c      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d038      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d034      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d030      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	2b05      	cmp	r3, #5
 80089e6:	d02c      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b06      	cmp	r3, #6
 80089ee:	d028      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b07      	cmp	r3, #7
 80089f6:	d024      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	d020      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	2b09      	cmp	r3, #9
 8008a06:	d01c      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b0a      	cmp	r3, #10
 8008a0e:	d018      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	2b0b      	cmp	r3, #11
 8008a16:	d014      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	2b0c      	cmp	r3, #12
 8008a1e:	d010      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	2b0d      	cmp	r3, #13
 8008a26:	d00c      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	2b0e      	cmp	r3, #14
 8008a2e:	d008      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	2b0f      	cmp	r3, #15
 8008a36:	d004      	beq.n	8008a42 <HAL_FDCAN_Init+0xce>
 8008a38:	f240 112d 	movw	r1, #301	; 0x12d
 8008a3c:	4865      	ldr	r0, [pc, #404]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008a3e:	f7ff f826 	bl	8007a8e <assert_failed>
  }
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00e      	beq.n	8008a68 <HAL_FDCAN_Init+0xf4>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a52:	d009      	beq.n	8008a68 <HAL_FDCAN_Init+0xf4>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a5c:	d004      	beq.n	8008a68 <HAL_FDCAN_Init+0xf4>
 8008a5e:	f240 112f 	movw	r1, #303	; 0x12f
 8008a62:	485c      	ldr	r0, [pc, #368]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008a64:	f7ff f813 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d014      	beq.n	8008a9a <HAL_FDCAN_Init+0x126>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d010      	beq.n	8008a9a <HAL_FDCAN_Init+0x126>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d00c      	beq.n	8008a9a <HAL_FDCAN_Init+0x126>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d008      	beq.n	8008a9a <HAL_FDCAN_Init+0x126>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d004      	beq.n	8008a9a <HAL_FDCAN_Init+0x126>
 8008a90:	f44f 7198 	mov.w	r1, #304	; 0x130
 8008a94:	484f      	ldr	r0, [pc, #316]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008a96:	f7fe fffa 	bl	8007a8e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d008      	beq.n	8008ab4 <HAL_FDCAN_Init+0x140>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7c1b      	ldrb	r3, [r3, #16]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d004      	beq.n	8008ab4 <HAL_FDCAN_Init+0x140>
 8008aaa:	f240 1131 	movw	r1, #305	; 0x131
 8008aae:	4849      	ldr	r0, [pc, #292]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008ab0:	f7fe ffed 	bl	8007a8e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	7c5b      	ldrb	r3, [r3, #17]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_FDCAN_Init+0x15a>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	7c5b      	ldrb	r3, [r3, #17]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d004      	beq.n	8008ace <HAL_FDCAN_Init+0x15a>
 8008ac4:	f44f 7199 	mov.w	r1, #306	; 0x132
 8008ac8:	4842      	ldr	r0, [pc, #264]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008aca:	f7fe ffe0 	bl	8007a8e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7c9b      	ldrb	r3, [r3, #18]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d008      	beq.n	8008ae8 <HAL_FDCAN_Init+0x174>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7c9b      	ldrb	r3, [r3, #18]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d004      	beq.n	8008ae8 <HAL_FDCAN_Init+0x174>
 8008ade:	f240 1133 	movw	r1, #307	; 0x133
 8008ae2:	483c      	ldr	r0, [pc, #240]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008ae4:	f7fe ffd3 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d004      	beq.n	8008afa <HAL_FDCAN_Init+0x186>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af8:	d904      	bls.n	8008b04 <HAL_FDCAN_Init+0x190>
 8008afa:	f44f 719a 	mov.w	r1, #308	; 0x134
 8008afe:	4835      	ldr	r0, [pc, #212]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008b00:	f7fe ffc5 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <HAL_FDCAN_Init+0x1a0>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	2b80      	cmp	r3, #128	; 0x80
 8008b12:	d904      	bls.n	8008b1e <HAL_FDCAN_Init+0x1aa>
 8008b14:	f240 1135 	movw	r1, #309	; 0x135
 8008b18:	482e      	ldr	r0, [pc, #184]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008b1a:	f7fe ffb8 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <HAL_FDCAN_Init+0x1bc>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2e:	d904      	bls.n	8008b3a <HAL_FDCAN_Init+0x1c6>
 8008b30:	f44f 719b 	mov.w	r1, #310	; 0x136
 8008b34:	4827      	ldr	r0, [pc, #156]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008b36:	f7fe ffaa 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <HAL_FDCAN_Init+0x1d6>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d904      	bls.n	8008b54 <HAL_FDCAN_Init+0x1e0>
 8008b4a:	f240 1137 	movw	r1, #311	; 0x137
 8008b4e:	4821      	ldr	r0, [pc, #132]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008b50:	f7fe ff9d 	bl	8007a8e <assert_failed>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b5c:	d13c      	bne.n	8008bd8 <HAL_FDCAN_Init+0x264>
  {
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <HAL_FDCAN_Init+0x1fa>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	d904      	bls.n	8008b78 <HAL_FDCAN_Init+0x204>
 8008b6e:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8008b72:	4818      	ldr	r0, [pc, #96]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008b74:	f7fe ff8b 	bl	8007a8e <assert_failed>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <HAL_FDCAN_Init+0x214>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d904      	bls.n	8008b92 <HAL_FDCAN_Init+0x21e>
 8008b88:	f240 113b 	movw	r1, #315	; 0x13b
 8008b8c:	4811      	ldr	r0, [pc, #68]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008b8e:	f7fe ff7e 	bl	8007a8e <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_FDCAN_Init+0x22e>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d904      	bls.n	8008bac <HAL_FDCAN_Init+0x238>
 8008ba2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8008ba6:	480b      	ldr	r0, [pc, #44]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008ba8:	f7fe ff71 	bl	8007a8e <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <HAL_FDCAN_Init+0x248>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d90d      	bls.n	8008bd8 <HAL_FDCAN_Init+0x264>
 8008bbc:	f240 113d 	movw	r1, #317	; 0x13d
 8008bc0:	4804      	ldr	r0, [pc, #16]	; (8008bd4 <HAL_FDCAN_Init+0x260>)
 8008bc2:	f7fe ff64 	bl	8007a8e <assert_failed>
 8008bc6:	e007      	b.n	8008bd8 <HAL_FDCAN_Init+0x264>
 8008bc8:	40006400 	.word	0x40006400
 8008bcc:	40006800 	.word	0x40006800
 8008bd0:	40006c00 	.word	0x40006c00
 8008bd4:	08011a38 	.word	0x08011a38
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bdc:	2b1c      	cmp	r3, #28
 8008bde:	d904      	bls.n	8008bea <HAL_FDCAN_Init+0x276>
 8008be0:	f240 113f 	movw	r1, #319	; 0x13f
 8008be4:	4887      	ldr	r0, [pc, #540]	; (8008e04 <HAL_FDCAN_Init+0x490>)
 8008be6:	f7fe ff52 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d904      	bls.n	8008bfc <HAL_FDCAN_Init+0x288>
 8008bf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bf6:	4883      	ldr	r0, [pc, #524]	; (8008e04 <HAL_FDCAN_Init+0x490>)
 8008bf8:	f7fe ff49 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d009      	beq.n	8008c18 <HAL_FDCAN_Init+0x2a4>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c0c:	d004      	beq.n	8008c18 <HAL_FDCAN_Init+0x2a4>
 8008c0e:	f240 1141 	movw	r1, #321	; 0x141
 8008c12:	487c      	ldr	r0, [pc, #496]	; (8008e04 <HAL_FDCAN_Init+0x490>)
 8008c14:	f7fe ff3b 	bl	8007a8e <assert_failed>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d106      	bne.n	8008c32 <HAL_FDCAN_Init+0x2be>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7fe fd69 	bl	8007704 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	699a      	ldr	r2, [r3, #24]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0210 	bic.w	r2, r2, #16
 8008c40:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c42:	f7ff fa09 	bl	8008058 <HAL_GetTick>
 8008c46:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008c48:	e012      	b.n	8008c70 <HAL_FDCAN_Init+0x2fc>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008c4a:	f7ff fa05 	bl	8008058 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	2b0a      	cmp	r3, #10
 8008c56:	d90b      	bls.n	8008c70 <HAL_FDCAN_Init+0x2fc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c5c:	f043 0201 	orr.w	r2, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2203      	movs	r2, #3
 8008c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e121      	b.n	8008eb4 <HAL_FDCAN_Init+0x540>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d0e5      	beq.n	8008c4a <HAL_FDCAN_Init+0x2d6>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	699a      	ldr	r2, [r3, #24]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0201 	orr.w	r2, r2, #1
 8008c8c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c8e:	f7ff f9e3 	bl	8008058 <HAL_GetTick>
 8008c92:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008c94:	e012      	b.n	8008cbc <HAL_FDCAN_Init+0x348>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008c96:	f7ff f9df 	bl	8008058 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b0a      	cmp	r3, #10
 8008ca2:	d90b      	bls.n	8008cbc <HAL_FDCAN_Init+0x348>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca8:	f043 0201 	orr.w	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0fb      	b.n	8008eb4 <HAL_FDCAN_Init+0x540>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0e5      	beq.n	8008c96 <HAL_FDCAN_Init+0x322>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	699a      	ldr	r2, [r3, #24]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0202 	orr.w	r2, r2, #2
 8008cd8:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a4a      	ldr	r2, [pc, #296]	; (8008e08 <HAL_FDCAN_Init+0x494>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d103      	bne.n	8008cec <HAL_FDCAN_Init+0x378>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008ce4:	4a49      	ldr	r2, [pc, #292]	; (8008e0c <HAL_FDCAN_Init+0x498>)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7c1b      	ldrb	r3, [r3, #16]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d108      	bne.n	8008d06 <HAL_FDCAN_Init+0x392>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d02:	619a      	str	r2, [r3, #24]
 8008d04:	e007      	b.n	8008d16 <HAL_FDCAN_Init+0x3a2>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	699a      	ldr	r2, [r3, #24]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d14:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	7c5b      	ldrb	r3, [r3, #17]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d108      	bne.n	8008d30 <HAL_FDCAN_Init+0x3bc>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	699a      	ldr	r2, [r3, #24]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d2c:	619a      	str	r2, [r3, #24]
 8008d2e:	e007      	b.n	8008d40 <HAL_FDCAN_Init+0x3cc>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699a      	ldr	r2, [r3, #24]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d3e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	7c9b      	ldrb	r3, [r3, #18]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d108      	bne.n	8008d5a <HAL_FDCAN_Init+0x3e6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699a      	ldr	r2, [r3, #24]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d56:	619a      	str	r2, [r3, #24]
 8008d58:	e007      	b.n	8008d6a <HAL_FDCAN_Init+0x3f6>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	699a      	ldr	r2, [r3, #24]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d68:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699a      	ldr	r2, [r3, #24]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008d8e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0210 	bic.w	r2, r2, #16
 8008d9e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d108      	bne.n	8008dba <HAL_FDCAN_Init+0x446>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699a      	ldr	r2, [r3, #24]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0204 	orr.w	r2, r2, #4
 8008db6:	619a      	str	r2, [r3, #24]
 8008db8:	e032      	b.n	8008e20 <HAL_FDCAN_Init+0x4ac>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d02e      	beq.n	8008e20 <HAL_FDCAN_Init+0x4ac>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d022      	beq.n	8008e10 <HAL_FDCAN_Init+0x49c>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dd8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691a      	ldr	r2, [r3, #16]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f042 0210 	orr.w	r2, r2, #16
 8008de8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d116      	bne.n	8008e20 <HAL_FDCAN_Init+0x4ac>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699a      	ldr	r2, [r3, #24]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f042 0220 	orr.w	r2, r2, #32
 8008e00:	619a      	str	r2, [r3, #24]
 8008e02:	e00d      	b.n	8008e20 <HAL_FDCAN_Init+0x4ac>
 8008e04:	08011a38 	.word	0x08011a38
 8008e08:	40006400 	.word	0x40006400
 8008e0c:	40006500 	.word	0x40006500
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0220 	orr.w	r2, r2, #32
 8008e1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008e30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008e38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008e48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008e4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e54:	d115      	bne.n	8008e82 <HAL_FDCAN_Init+0x50e>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	3b01      	subs	r3, #1
 8008e62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008e64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008e6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	3b01      	subs	r3, #1
 8008e78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008e7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008e80:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fe23 	bl	8009ae4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ecc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d003      	beq.n	8008edc <HAL_FDCAN_ConfigFilter+0x20>
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	f040 80d3 	bne.w	8009082 <HAL_FDCAN_ConfigFilter+0x1c6>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d009      	beq.n	8008ef8 <HAL_FDCAN_ConfigFilter+0x3c>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eec:	d004      	beq.n	8008ef8 <HAL_FDCAN_ConfigFilter+0x3c>
 8008eee:	f240 5119 	movw	r1, #1305	; 0x519
 8008ef2:	4869      	ldr	r0, [pc, #420]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8008ef4:	f7fe fdcb 	bl	8007a8e <assert_failed>
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01c      	beq.n	8008f3a <HAL_FDCAN_ConfigFilter+0x7e>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d018      	beq.n	8008f3a <HAL_FDCAN_ConfigFilter+0x7e>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d014      	beq.n	8008f3a <HAL_FDCAN_ConfigFilter+0x7e>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d010      	beq.n	8008f3a <HAL_FDCAN_ConfigFilter+0x7e>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d00c      	beq.n	8008f3a <HAL_FDCAN_ConfigFilter+0x7e>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	2b05      	cmp	r3, #5
 8008f26:	d008      	beq.n	8008f3a <HAL_FDCAN_ConfigFilter+0x7e>
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b06      	cmp	r3, #6
 8008f2e:	d004      	beq.n	8008f3a <HAL_FDCAN_ConfigFilter+0x7e>
 8008f30:	f240 511a 	movw	r1, #1306	; 0x51a
 8008f34:	4858      	ldr	r0, [pc, #352]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8008f36:	f7fe fdaa 	bl	8007a8e <assert_failed>

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d14a      	bne.n	8008fd8 <HAL_FDCAN_ConfigFilter+0x11c>
    {
      /* Check function parameters */
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterIndex, (hfdcan->Init.StdFiltersNbr - 1U)));
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d904      	bls.n	8008f5a <HAL_FDCAN_ConfigFilter+0x9e>
 8008f50:	f240 511f 	movw	r1, #1311	; 0x51f
 8008f54:	4850      	ldr	r0, [pc, #320]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8008f56:	f7fe fd9a 	bl	8007a8e <assert_failed>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f62:	d304      	bcc.n	8008f6e <HAL_FDCAN_ConfigFilter+0xb2>
 8008f64:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8008f68:	484b      	ldr	r0, [pc, #300]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8008f6a:	f7fe fd90 	bl	8007a8e <assert_failed>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f76:	d304      	bcc.n	8008f82 <HAL_FDCAN_ConfigFilter+0xc6>
 8008f78:	f240 5121 	movw	r1, #1313	; 0x521
 8008f7c:	4846      	ldr	r0, [pc, #280]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8008f7e:	f7fe fd86 	bl	8007a8e <assert_failed>
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00c      	beq.n	8008fa4 <HAL_FDCAN_ConfigFilter+0xe8>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d008      	beq.n	8008fa4 <HAL_FDCAN_ConfigFilter+0xe8>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d004      	beq.n	8008fa4 <HAL_FDCAN_ConfigFilter+0xe8>
 8008f9a:	f240 5122 	movw	r1, #1314	; 0x522
 8008f9e:	483e      	ldr	r0, [pc, #248]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8008fa0:	f7fe fd75 	bl	8007a8e <assert_failed>

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008fb0:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8008fb8:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e052      	b.n	800907e <HAL_FDCAN_ConfigFilter+0x1c2>
    }
    else /* sFilterConfig->IdType == FDCAN_EXTENDED_ID */
    {
      /* Check function parameters */
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterIndex, (hfdcan->Init.ExtFiltersNbr - 1U)));
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d904      	bls.n	8008ff0 <HAL_FDCAN_ConfigFilter+0x134>
 8008fe6:	f240 5133 	movw	r1, #1331	; 0x533
 8008fea:	482b      	ldr	r0, [pc, #172]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8008fec:	f7fe fd4f 	bl	8007a8e <assert_failed>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff8:	d304      	bcc.n	8009004 <HAL_FDCAN_ConfigFilter+0x148>
 8008ffa:	f240 5134 	movw	r1, #1332	; 0x534
 8008ffe:	4826      	ldr	r0, [pc, #152]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8009000:	f7fe fd45 	bl	8007a8e <assert_failed>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800900c:	d304      	bcc.n	8009018 <HAL_FDCAN_ConfigFilter+0x15c>
 800900e:	f240 5135 	movw	r1, #1333	; 0x535
 8009012:	4821      	ldr	r0, [pc, #132]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 8009014:	f7fe fd3b 	bl	8007a8e <assert_failed>
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <HAL_FDCAN_ConfigFilter+0x186>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d00c      	beq.n	8009042 <HAL_FDCAN_ConfigFilter+0x186>
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b02      	cmp	r3, #2
 800902e:	d008      	beq.n	8009042 <HAL_FDCAN_ConfigFilter+0x186>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b03      	cmp	r3, #3
 8009036:	d004      	beq.n	8009042 <HAL_FDCAN_ConfigFilter+0x186>
 8009038:	f240 5136 	movw	r1, #1334	; 0x536
 800903c:	4816      	ldr	r0, [pc, #88]	; (8009098 <HAL_FDCAN_ConfigFilter+0x1dc>)
 800903e:	f7fe fd26 	bl	8007a8e <assert_failed>

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	075a      	lsls	r2, r3, #29
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	4313      	orrs	r3, r2
 800904e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	079a      	lsls	r2, r3, #30
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	4413      	add	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	3304      	adds	r3, #4
 8009076:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	e006      	b.n	8009090 <HAL_FDCAN_ConfigFilter+0x1d4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009086:	f043 0202 	orr.w	r2, r3, #2
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
  }
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	08011a38 	.word	0x08011a38

0800909c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	603b      	str	r3, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00a      	beq.n	80090c6 <HAL_FDCAN_ConfigGlobalFilter+0x2a>
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d007      	beq.n	80090c6 <HAL_FDCAN_ConfigGlobalFilter+0x2a>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d004      	beq.n	80090c6 <HAL_FDCAN_ConfigGlobalFilter+0x2a>
 80090bc:	f240 516a 	movw	r1, #1386	; 0x56a
 80090c0:	4827      	ldr	r0, [pc, #156]	; (8009160 <HAL_FDCAN_ConfigGlobalFilter+0xc4>)
 80090c2:	f7fe fce4 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00a      	beq.n	80090e2 <HAL_FDCAN_ConfigGlobalFilter+0x46>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d007      	beq.n	80090e2 <HAL_FDCAN_ConfigGlobalFilter+0x46>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d004      	beq.n	80090e2 <HAL_FDCAN_ConfigGlobalFilter+0x46>
 80090d8:	f240 516b 	movw	r1, #1387	; 0x56b
 80090dc:	4820      	ldr	r0, [pc, #128]	; (8009160 <HAL_FDCAN_ConfigGlobalFilter+0xc4>)
 80090de:	f7fe fcd6 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d007      	beq.n	80090f8 <HAL_FDCAN_ConfigGlobalFilter+0x5c>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d004      	beq.n	80090f8 <HAL_FDCAN_ConfigGlobalFilter+0x5c>
 80090ee:	f240 516c 	movw	r1, #1388	; 0x56c
 80090f2:	481b      	ldr	r0, [pc, #108]	; (8009160 <HAL_FDCAN_ConfigGlobalFilter+0xc4>)
 80090f4:	f7fe fccb 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <HAL_FDCAN_ConfigGlobalFilter+0x72>
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d004      	beq.n	800910e <HAL_FDCAN_ConfigGlobalFilter+0x72>
 8009104:	f240 516d 	movw	r1, #1389	; 0x56d
 8009108:	4815      	ldr	r0, [pc, #84]	; (8009160 <HAL_FDCAN_ConfigGlobalFilter+0xc4>)
 800910a:	f7fe fcc0 	bl	8007a8e <assert_failed>

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b01      	cmp	r3, #1
 8009118:	d116      	bne.n	8009148 <HAL_FDCAN_ConfigGlobalFilter+0xac>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009122:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	011a      	lsls	r2, r3, #4
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	431a      	orrs	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	431a      	orrs	r2, r3
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	431a      	orrs	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	e006      	b.n	8009156 <HAL_FDCAN_ConfigGlobalFilter+0xba>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914c:	f043 0204 	orr.w	r2, r3, #4
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
  }
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	08011a38 	.word	0x08011a38

08009164 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b01      	cmp	r3, #1
 8009176:	d110      	bne.n	800919a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0201 	bic.w	r2, r2, #1
 800918e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	e006      	b.n	80091a8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800919e:	f043 0204 	orr.w	r2, r3, #4
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
  }
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
  uint32_t PutIndex;

  /* Check function parameters */
  assert_param(IS_FDCAN_ID_TYPE(pTxHeader->IdType));
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d0:	d004      	beq.n	80091dc <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
 80091d2:	f44f 6104 	mov.w	r1, #2112	; 0x840
 80091d6:	487e      	ldr	r0, [pc, #504]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 80091d8:	f7fe fc59 	bl	8007a8e <assert_failed>
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <HAL_FDCAN_AddMessageToTxFifoQ+0x46>
  {
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x7FFU));
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ec:	d30f      	bcc.n	800920e <HAL_FDCAN_AddMessageToTxFifoQ+0x5a>
 80091ee:	f640 0143 	movw	r1, #2115	; 0x843
 80091f2:	4877      	ldr	r0, [pc, #476]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 80091f4:	f7fe fc4b 	bl	8007a8e <assert_failed>
 80091f8:	e009      	b.n	800920e <HAL_FDCAN_AddMessageToTxFifoQ+0x5a>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x1FFFFFFFU));
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009202:	d304      	bcc.n	800920e <HAL_FDCAN_AddMessageToTxFifoQ+0x5a>
 8009204:	f640 0147 	movw	r1, #2119	; 0x847
 8009208:	4871      	ldr	r0, [pc, #452]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800920a:	f7fe fc40 	bl	8007a8e <assert_failed>
  }
  assert_param(IS_FDCAN_FRAME_TYPE(pTxHeader->TxFrameType));
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d009      	beq.n	800922a <HAL_FDCAN_AddMessageToTxFifoQ+0x76>
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800921e:	d004      	beq.n	800922a <HAL_FDCAN_AddMessageToTxFifoQ+0x76>
 8009220:	f640 0149 	movw	r1, #2121	; 0x849
 8009224:	486a      	ldr	r0, [pc, #424]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 8009226:	f7fe fc32 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_DLC(pTxHeader->DataLength));
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d04f      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800923a:	d04a      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009244:	d045      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800924e:	d040      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009258:	d03b      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009262:	d036      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800926c:	d031      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8009276:	d02c      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009280:	d027      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 800928a:	d022      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8009294:	d01d      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800929e:	d018      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80092a8:	d013      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80092b2:	d00e      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80092bc:	d009      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80092c6:	d004      	beq.n	80092d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 80092c8:	f640 014a 	movw	r1, #2122	; 0x84a
 80092cc:	4840      	ldr	r0, [pc, #256]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 80092ce:	f7fe fbde 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <HAL_FDCAN_AddMessageToTxFifoQ+0x13a>
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092e2:	d004      	beq.n	80092ee <HAL_FDCAN_AddMessageToTxFifoQ+0x13a>
 80092e4:	f640 014b 	movw	r1, #2123	; 0x84b
 80092e8:	4839      	ldr	r0, [pc, #228]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 80092ea:	f7fe fbd0 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d009      	beq.n	800930a <HAL_FDCAN_AddMessageToTxFifoQ+0x156>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fe:	d004      	beq.n	800930a <HAL_FDCAN_AddMessageToTxFifoQ+0x156>
 8009300:	f640 014c 	movw	r1, #2124	; 0x84c
 8009304:	4832      	ldr	r0, [pc, #200]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 8009306:	f7fe fbc2 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d009      	beq.n	8009326 <HAL_FDCAN_AddMessageToTxFifoQ+0x172>
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800931a:	d004      	beq.n	8009326 <HAL_FDCAN_AddMessageToTxFifoQ+0x172>
 800931c:	f640 014d 	movw	r1, #2125	; 0x84d
 8009320:	482b      	ldr	r0, [pc, #172]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 8009322:	f7fe fbb4 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d009      	beq.n	8009342 <HAL_FDCAN_AddMessageToTxFifoQ+0x18e>
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009336:	d004      	beq.n	8009342 <HAL_FDCAN_AddMessageToTxFifoQ+0x18e>
 8009338:	f640 014e 	movw	r1, #2126	; 0x84e
 800933c:	4824      	ldr	r0, [pc, #144]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800933e:	f7fe fba6 	bl	8007a8e <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	2bff      	cmp	r3, #255	; 0xff
 8009348:	d904      	bls.n	8009354 <HAL_FDCAN_AddMessageToTxFifoQ+0x1a0>
 800934a:	f640 014f 	movw	r1, #2127	; 0x84f
 800934e:	4820      	ldr	r0, [pc, #128]	; (80093d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 8009350:	f7fe fb9d 	bl	8007a8e <assert_failed>

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b02      	cmp	r3, #2
 800935e:	d12c      	bne.n	80093ba <HAL_FDCAN_AddMessageToTxFifoQ+0x206>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <HAL_FDCAN_AddMessageToTxFifoQ+0x1cc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009374:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e023      	b.n	80093c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x214>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009388:	0c1b      	lsrs	r3, r3, #16
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 fc10 	bl	8009bbc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2101      	movs	r1, #1
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	fa01 f202 	lsl.w	r2, r1, r2
 80093a8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80093ac:	2201      	movs	r2, #1
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	409a      	lsls	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	e006      	b.n	80093c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x214>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093be:	f043 0208 	orr.w	r2, r3, #8
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
  }
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	08011a38 	.word	0x08011a38

080093d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08a      	sub	sp, #40	; 0x28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093e8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b40      	cmp	r3, #64	; 0x40
 80093ee:	d007      	beq.n	8009400 <HAL_FDCAN_GetRxMessage+0x2c>
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2b41      	cmp	r3, #65	; 0x41
 80093f4:	d004      	beq.n	8009400 <HAL_FDCAN_GetRxMessage+0x2c>
 80093f6:	f640 01b6 	movw	r1, #2230	; 0x8b6
 80093fa:	4867      	ldr	r0, [pc, #412]	; (8009598 <HAL_FDCAN_GetRxMessage+0x1c4>)
 80093fc:	f7fe fb47 	bl	8007a8e <assert_failed>

  if (state == HAL_FDCAN_STATE_BUSY)
 8009400:	7efb      	ldrb	r3, [r7, #27]
 8009402:	2b02      	cmp	r3, #2
 8009404:	f040 80bc 	bne.w	8009580 <HAL_FDCAN_GetRxMessage+0x1ac>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b40      	cmp	r3, #64	; 0x40
 800940c:	d121      	bne.n	8009452 <HAL_FDCAN_GetRxMessage+0x7e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009416:	f003 030f 	and.w	r3, r3, #15
 800941a:	2b00      	cmp	r3, #0
 800941c:	d107      	bne.n	800942e <HAL_FDCAN_GetRxMessage+0x5a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009422:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e0af      	b.n	800958e <HAL_FDCAN_GetRxMessage+0x1ba>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009436:	0a1b      	lsrs	r3, r3, #8
 8009438:	f003 0303 	and.w	r3, r3, #3
 800943c:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	4613      	mov	r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	4413      	add	r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	440b      	add	r3, r1
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
 8009450:	e020      	b.n	8009494 <HAL_FDCAN_GetRxMessage+0xc0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800945a:	f003 030f 	and.w	r3, r3, #15
 800945e:	2b00      	cmp	r3, #0
 8009460:	d107      	bne.n	8009472 <HAL_FDCAN_GetRxMessage+0x9e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009466:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e08d      	b.n	800958e <HAL_FDCAN_GetRxMessage+0x1ba>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	f003 0303 	and.w	r3, r3, #3
 8009480:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	4613      	mov	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4413      	add	r3, r2
 800948e:	00db      	lsls	r3, r3, #3
 8009490:	440b      	add	r3, r1
 8009492:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d107      	bne.n	80094b8 <HAL_FDCAN_GetRxMessage+0xe4>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	0c9b      	lsrs	r3, r3, #18
 80094ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e005      	b.n	80094c4 <HAL_FDCAN_GetRxMessage+0xf0>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	3304      	adds	r3, #4
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	0e1b      	lsrs	r3, r3, #24
 8009516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	0fda      	lsrs	r2, r3, #31
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	3304      	adds	r3, #4
 800952c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8009532:	2300      	movs	r3, #0
 8009534:	623b      	str	r3, [r7, #32]
 8009536:	e00a      	b.n	800954e <HAL_FDCAN_GetRxMessage+0x17a>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	441a      	add	r2, r3
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	440b      	add	r3, r1
 8009544:	7812      	ldrb	r2, [r2, #0]
 8009546:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	3301      	adds	r3, #1
 800954c:	623b      	str	r3, [r7, #32]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	0c1b      	lsrs	r3, r3, #16
 8009554:	4a11      	ldr	r2, [pc, #68]	; (800959c <HAL_FDCAN_GetRxMessage+0x1c8>)
 8009556:	5cd3      	ldrb	r3, [r2, r3]
 8009558:	461a      	mov	r2, r3
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	4293      	cmp	r3, r2
 800955e:	d3eb      	bcc.n	8009538 <HAL_FDCAN_GetRxMessage+0x164>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d105      	bne.n	8009572 <HAL_FDCAN_GetRxMessage+0x19e>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8009570:	e004      	b.n	800957c <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69fa      	ldr	r2, [r7, #28]
 8009578:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	e006      	b.n	800958e <HAL_FDCAN_GetRxMessage+0x1ba>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009584:	f043 0208 	orr.w	r2, r3, #8
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
  }
}
 800958e:	4618      	mov	r0, r3
 8009590:	3728      	adds	r7, #40	; 0x28
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	08011a38 	.word	0x08011a38
 800959c:	08012350 	.word	0x08012350

080095a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80095b2:	75fb      	strb	r3, [r7, #23]
  uint32_t ITs_lines_selection;

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d004      	beq.n	80095c8 <HAL_FDCAN_ActivateNotification+0x28>
 80095be:	f640 2189 	movw	r1, #2697	; 0xa89
 80095c2:	4876      	ldr	r0, [pc, #472]	; (800979c <HAL_FDCAN_ActivateNotification+0x1fc>)
 80095c4:	f7fe fa63 	bl	8007a8e <assert_failed>
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <HAL_FDCAN_ActivateNotification+0x48>
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <HAL_FDCAN_ActivateNotification+0x3e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b07      	cmp	r3, #7
 80095dc:	d904      	bls.n	80095e8 <HAL_FDCAN_ActivateNotification+0x48>
 80095de:	f640 218c 	movw	r1, #2700	; 0xa8c
 80095e2:	486e      	ldr	r0, [pc, #440]	; (800979c <HAL_FDCAN_ActivateNotification+0x1fc>)
 80095e4:	f7fe fa53 	bl	8007a8e <assert_failed>
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d003      	beq.n	80095f6 <HAL_FDCAN_ActivateNotification+0x56>
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	f040 80c8 	bne.w	8009786 <HAL_FDCAN_ActivateNotification+0x1e6>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095fc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <HAL_FDCAN_ActivateNotification+0x72>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d03b      	beq.n	800968a <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <HAL_FDCAN_ActivateNotification+0x86>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d031      	beq.n	800968a <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f003 0304 	and.w	r3, r3, #4
 8009636:	2b00      	cmp	r3, #0
 8009638:	d027      	beq.n	800968a <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <HAL_FDCAN_ActivateNotification+0xae>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f003 0308 	and.w	r3, r3, #8
 800964a:	2b00      	cmp	r3, #0
 800964c:	d01d      	beq.n	800968a <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8009654:	2b00      	cmp	r3, #0
 8009656:	d004      	beq.n	8009662 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f003 0310 	and.w	r3, r3, #16
 800965e:	2b00      	cmp	r3, #0
 8009660:	d013      	beq.n	800968a <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <HAL_FDCAN_ActivateNotification+0xd6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00c      	beq.n	800969a <HAL_FDCAN_ActivateNotification+0xfa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	d107      	bne.n	800969a <HAL_FDCAN_ActivateNotification+0xfa>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0201 	orr.w	r2, r2, #1
 8009698:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d004      	beq.n	80096ae <HAL_FDCAN_ActivateNotification+0x10e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d13b      	bne.n	8009726 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d004      	beq.n	80096c2 <HAL_FDCAN_ActivateNotification+0x122>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d131      	bne.n	8009726 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d004      	beq.n	80096d6 <HAL_FDCAN_ActivateNotification+0x136>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d127      	bne.n	8009726 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <HAL_FDCAN_ActivateNotification+0x14a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f003 0308 	and.w	r3, r3, #8
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d11d      	bne.n	8009726 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d004      	beq.n	80096fe <HAL_FDCAN_ActivateNotification+0x15e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d113      	bne.n	8009726 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8009704:	2b00      	cmp	r3, #0
 8009706:	d004      	beq.n	8009712 <HAL_FDCAN_ActivateNotification+0x172>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f003 0320 	and.w	r3, r3, #32
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00c      	beq.n	8009736 <HAL_FDCAN_ActivateNotification+0x196>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009722:	2b00      	cmp	r3, #0
 8009724:	d007      	beq.n	8009736 <HAL_FDCAN_ActivateNotification+0x196>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0202 	orr.w	r2, r2, #2
 8009734:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <HAL_FDCAN_ActivateNotification+0x1b4>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	430a      	orrs	r2, r1
 8009750:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <HAL_FDCAN_ActivateNotification+0x1d2>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	430a      	orrs	r2, r1
 800976e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	430a      	orrs	r2, r1
 8009780:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e006      	b.n	8009794 <HAL_FDCAN_ActivateNotification+0x1f4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978a:	f043 0202 	orr.w	r2, r3, #2
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
  }
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	08011a38 	.word	0x08011a38

080097a0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08a      	sub	sp, #40	; 0x28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ae:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097bc:	4013      	ands	r3, r2
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d2:	6a3a      	ldr	r2, [r7, #32]
 80097d4:	4013      	ands	r3, r2
 80097d6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097e2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	4013      	ands	r3, r2
 80097ee:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80097fa:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	4013      	ands	r3, r2
 8009806:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8009812:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4013      	ands	r3, r2
 800981e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00d      	beq.n	800984a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009838:	2b00      	cmp	r3, #0
 800983a:	d006      	beq.n	800984a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2240      	movs	r2, #64	; 0x40
 8009842:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f92e 	bl	8009aa6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01b      	beq.n	8009890 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009862:	2b00      	cmp	r3, #0
 8009864:	d014      	beq.n	8009890 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800986e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	4013      	ands	r3, r2
 800987c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009886:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009888:	6939      	ldr	r1, [r7, #16]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f8ec 	bl	8009a68 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	2b00      	cmp	r3, #0
 8009894:	d007      	beq.n	80098a6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800989c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800989e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f8b6 	bl	8009a12 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d007      	beq.n	80098bc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6a3a      	ldr	r2, [r7, #32]
 80098b2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80098b4:	6a39      	ldr	r1, [r7, #32]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7f7 f816 	bl	80008e8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d007      	beq.n	80098d2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80098ca:	69f9      	ldr	r1, [r7, #28]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f8ab 	bl	8009a28 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00e      	beq.n	80098fe <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d007      	beq.n	80098fe <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098f6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f8a0 	bl	8009a3e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01a      	beq.n	8009942 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009916:	2b00      	cmp	r3, #0
 8009918:	d013      	beq.n	8009942 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009922:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4013      	ands	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2280      	movs	r2, #128	; 0x80
 8009938:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800993a:	68f9      	ldr	r1, [r7, #12]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f888 	bl	8009a52 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00e      	beq.n	800996e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009966:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f888 	bl	8009a7e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00e      	beq.n	800999a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d007      	beq.n	800999a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009992:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f87c 	bl	8009a92 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d011      	beq.n	80099cc <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00a      	beq.n	80099cc <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d007      	beq.n	80099e2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80099da:	6979      	ldr	r1, [r7, #20]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f876 	bl	8009ace <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d009      	beq.n	80099fc <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f858 	bl	8009aba <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	3728      	adds	r7, #40	; 0x28
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009a32:	bf00      	nop
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009a72:	bf00      	nop
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009aae:	bf00      	nop
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009aec:	4b30      	ldr	r3, [pc, #192]	; (8009bb0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009aee:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a2f      	ldr	r2, [pc, #188]	; (8009bb4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d103      	bne.n	8009b02 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b00:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a2c      	ldr	r2, [pc, #176]	; (8009bb8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d103      	bne.n	8009b14 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8009b12:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b22:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2a:	041a      	lsls	r2, r3, #16
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	430a      	orrs	r2, r1
 8009b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b48:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	061a      	lsls	r2, r3, #24
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	e005      	b.n	8009b96 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3304      	adds	r3, #4
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d3f3      	bcc.n	8009b8a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8009ba2:	bf00      	nop
 8009ba4:	bf00      	nop
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	4000a400 	.word	0x4000a400
 8009bb4:	40006800 	.word	0x40006800
 8009bb8:	40006c00 	.word	0x40006c00

08009bbc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b089      	sub	sp, #36	; 0x24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009bda:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009be2:	4313      	orrs	r3, r2
 8009be4:	61fb      	str	r3, [r7, #28]
 8009be6:	e00a      	b.n	8009bfe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009bf0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8009bf6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bfc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009c08:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009c0e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009c14:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4613      	mov	r3, r2
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	4413      	add	r3, r2
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	440b      	add	r3, r1
 8009c2e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	69fa      	ldr	r2, [r7, #28]
 8009c34:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	3304      	adds	r3, #4
 8009c46:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	617b      	str	r3, [r7, #20]
 8009c4c:	e020      	b.n	8009c90 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	3303      	adds	r3, #3
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	4413      	add	r3, r2
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	440b      	add	r3, r1
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009c66:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	440b      	add	r3, r1
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009c74:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	440a      	add	r2, r1
 8009c7c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009c7e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	3304      	adds	r3, #4
 8009c88:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	0c1b      	lsrs	r3, r3, #16
 8009c96:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <FDCAN_CopyMessageToRAM+0xf4>)
 8009c98:	5cd3      	ldrb	r3, [r2, r3]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d3d5      	bcc.n	8009c4e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	3724      	adds	r7, #36	; 0x24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	08012350 	.word	0x08012350

08009cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009cc8:	d01b      	beq.n	8009d02 <HAL_GPIO_Init+0x4e>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a38      	ldr	r2, [pc, #224]	; (8009db0 <HAL_GPIO_Init+0xfc>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d017      	beq.n	8009d02 <HAL_GPIO_Init+0x4e>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a37      	ldr	r2, [pc, #220]	; (8009db4 <HAL_GPIO_Init+0x100>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d013      	beq.n	8009d02 <HAL_GPIO_Init+0x4e>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a36      	ldr	r2, [pc, #216]	; (8009db8 <HAL_GPIO_Init+0x104>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d00f      	beq.n	8009d02 <HAL_GPIO_Init+0x4e>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a35      	ldr	r2, [pc, #212]	; (8009dbc <HAL_GPIO_Init+0x108>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d00b      	beq.n	8009d02 <HAL_GPIO_Init+0x4e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a34      	ldr	r2, [pc, #208]	; (8009dc0 <HAL_GPIO_Init+0x10c>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d007      	beq.n	8009d02 <HAL_GPIO_Init+0x4e>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a33      	ldr	r2, [pc, #204]	; (8009dc4 <HAL_GPIO_Init+0x110>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d003      	beq.n	8009d02 <HAL_GPIO_Init+0x4e>
 8009cfa:	21a9      	movs	r1, #169	; 0xa9
 8009cfc:	4832      	ldr	r0, [pc, #200]	; (8009dc8 <HAL_GPIO_Init+0x114>)
 8009cfe:	f7fd fec6 	bl	8007a8e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <HAL_GPIO_Init+0x64>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	0c1b      	lsrs	r3, r3, #16
 8009d12:	041b      	lsls	r3, r3, #16
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d003      	beq.n	8009d20 <HAL_GPIO_Init+0x6c>
 8009d18:	21aa      	movs	r1, #170	; 0xaa
 8009d1a:	482b      	ldr	r0, [pc, #172]	; (8009dc8 <HAL_GPIO_Init+0x114>)
 8009d1c:	f7fd feb7 	bl	8007a8e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 820a 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	f000 8205 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	2b11      	cmp	r3, #17
 8009d3a:	f000 8200 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	f000 81fb 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	2b12      	cmp	r3, #18
 8009d4e:	f000 81f6 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8009d5a:	f000 81f0 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8009d66:	f000 81ea 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8009d72:	f000 81e4 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8009d7e:	f000 81de 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8009d8a:	f000 81d8 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8009d96:	f000 81d2 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	f000 81cd 	beq.w	800a13e <HAL_GPIO_Init+0x48a>
 8009da4:	21ab      	movs	r1, #171	; 0xab
 8009da6:	4808      	ldr	r0, [pc, #32]	; (8009dc8 <HAL_GPIO_Init+0x114>)
 8009da8:	f7fd fe71 	bl	8007a8e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009dac:	e1c7      	b.n	800a13e <HAL_GPIO_Init+0x48a>
 8009dae:	bf00      	nop
 8009db0:	48000400 	.word	0x48000400
 8009db4:	48000800 	.word	0x48000800
 8009db8:	48000c00 	.word	0x48000c00
 8009dbc:	48001000 	.word	0x48001000
 8009dc0:	48001400 	.word	0x48001400
 8009dc4:	48001800 	.word	0x48001800
 8009dc8:	08011a74 	.word	0x08011a74
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 81aa 	beq.w	800a138 <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f003 0303 	and.w	r3, r3, #3
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d005      	beq.n	8009dfc <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d144      	bne.n	8009e86 <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00f      	beq.n	8009e24 <HAL_GPIO_Init+0x170>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d00b      	beq.n	8009e24 <HAL_GPIO_Init+0x170>
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d007      	beq.n	8009e24 <HAL_GPIO_Init+0x170>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d003      	beq.n	8009e24 <HAL_GPIO_Init+0x170>
 8009e1c:	21bb      	movs	r1, #187	; 0xbb
 8009e1e:	488b      	ldr	r0, [pc, #556]	; (800a04c <HAL_GPIO_Init+0x398>)
 8009e20:	f7fd fe35 	bl	8007a8e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	2203      	movs	r2, #3
 8009e30:	fa02 f303 	lsl.w	r3, r2, r3
 8009e34:	43db      	mvns	r3, r3
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4013      	ands	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	68da      	ldr	r2, [r3, #12]
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	fa02 f303 	lsl.w	r3, r2, r3
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e62:	43db      	mvns	r3, r3
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	4013      	ands	r3, r2
 8009e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	091b      	lsrs	r3, r3, #4
 8009e70:	f003 0201 	and.w	r2, r3, #1
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	fa02 f303 	lsl.w	r3, r2, r3
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f003 0303 	and.w	r3, r3, #3
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d027      	beq.n	8009ee2 <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00b      	beq.n	8009eb2 <HAL_GPIO_Init+0x1fe>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d007      	beq.n	8009eb2 <HAL_GPIO_Init+0x1fe>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d003      	beq.n	8009eb2 <HAL_GPIO_Init+0x1fe>
 8009eaa:	21cc      	movs	r1, #204	; 0xcc
 8009eac:	4867      	ldr	r0, [pc, #412]	; (800a04c <HAL_GPIO_Init+0x398>)
 8009eae:	f7fd fdee 	bl	8007a8e <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec2:	43db      	mvns	r3, r3
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f003 0303 	and.w	r3, r3, #3
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d14b      	bne.n	8009f86 <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009ef4:	d01b      	beq.n	8009f2e <HAL_GPIO_Init+0x27a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a55      	ldr	r2, [pc, #340]	; (800a050 <HAL_GPIO_Init+0x39c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d017      	beq.n	8009f2e <HAL_GPIO_Init+0x27a>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a54      	ldr	r2, [pc, #336]	; (800a054 <HAL_GPIO_Init+0x3a0>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d013      	beq.n	8009f2e <HAL_GPIO_Init+0x27a>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a53      	ldr	r2, [pc, #332]	; (800a058 <HAL_GPIO_Init+0x3a4>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00f      	beq.n	8009f2e <HAL_GPIO_Init+0x27a>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a52      	ldr	r2, [pc, #328]	; (800a05c <HAL_GPIO_Init+0x3a8>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00b      	beq.n	8009f2e <HAL_GPIO_Init+0x27a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a51      	ldr	r2, [pc, #324]	; (800a060 <HAL_GPIO_Init+0x3ac>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d007      	beq.n	8009f2e <HAL_GPIO_Init+0x27a>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a50      	ldr	r2, [pc, #320]	; (800a064 <HAL_GPIO_Init+0x3b0>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d003      	beq.n	8009f2e <HAL_GPIO_Init+0x27a>
 8009f26:	21d9      	movs	r1, #217	; 0xd9
 8009f28:	4848      	ldr	r0, [pc, #288]	; (800a04c <HAL_GPIO_Init+0x398>)
 8009f2a:	f7fd fdb0 	bl	8007a8e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	2b0f      	cmp	r3, #15
 8009f34:	d903      	bls.n	8009f3e <HAL_GPIO_Init+0x28a>
 8009f36:	21da      	movs	r1, #218	; 0xda
 8009f38:	4844      	ldr	r0, [pc, #272]	; (800a04c <HAL_GPIO_Init+0x398>)
 8009f3a:	f7fd fda8 	bl	8007a8e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	08da      	lsrs	r2, r3, #3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3208      	adds	r2, #8
 8009f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	220f      	movs	r2, #15
 8009f56:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5a:	43db      	mvns	r3, r3
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	4013      	ands	r3, r2
 8009f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	691a      	ldr	r2, [r3, #16]
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	08da      	lsrs	r2, r3, #3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3208      	adds	r2, #8
 8009f80:	6939      	ldr	r1, [r7, #16]
 8009f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	2203      	movs	r2, #3
 8009f92:	fa02 f303 	lsl.w	r3, r2, r3
 8009f96:	43db      	mvns	r3, r3
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f003 0203 	and.w	r2, r3, #3
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	fa02 f303 	lsl.w	r3, r2, r3
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 80b8 	beq.w	800a138 <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fc8:	4b27      	ldr	r3, [pc, #156]	; (800a068 <HAL_GPIO_Init+0x3b4>)
 8009fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fcc:	4a26      	ldr	r2, [pc, #152]	; (800a068 <HAL_GPIO_Init+0x3b4>)
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8009fd4:	4b24      	ldr	r3, [pc, #144]	; (800a068 <HAL_GPIO_Init+0x3b4>)
 8009fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	60bb      	str	r3, [r7, #8]
 8009fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009fe0:	4a22      	ldr	r2, [pc, #136]	; (800a06c <HAL_GPIO_Init+0x3b8>)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	089b      	lsrs	r3, r3, #2
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	220f      	movs	r2, #15
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	43db      	mvns	r3, r3
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4013      	ands	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a00a:	d031      	beq.n	800a070 <HAL_GPIO_Init+0x3bc>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a10      	ldr	r2, [pc, #64]	; (800a050 <HAL_GPIO_Init+0x39c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d019      	beq.n	800a048 <HAL_GPIO_Init+0x394>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a0f      	ldr	r2, [pc, #60]	; (800a054 <HAL_GPIO_Init+0x3a0>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <HAL_GPIO_Init+0x390>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a0e      	ldr	r2, [pc, #56]	; (800a058 <HAL_GPIO_Init+0x3a4>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00d      	beq.n	800a040 <HAL_GPIO_Init+0x38c>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a0d      	ldr	r2, [pc, #52]	; (800a05c <HAL_GPIO_Init+0x3a8>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d007      	beq.n	800a03c <HAL_GPIO_Init+0x388>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a0c      	ldr	r2, [pc, #48]	; (800a060 <HAL_GPIO_Init+0x3ac>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d101      	bne.n	800a038 <HAL_GPIO_Init+0x384>
 800a034:	2305      	movs	r3, #5
 800a036:	e01c      	b.n	800a072 <HAL_GPIO_Init+0x3be>
 800a038:	2306      	movs	r3, #6
 800a03a:	e01a      	b.n	800a072 <HAL_GPIO_Init+0x3be>
 800a03c:	2304      	movs	r3, #4
 800a03e:	e018      	b.n	800a072 <HAL_GPIO_Init+0x3be>
 800a040:	2303      	movs	r3, #3
 800a042:	e016      	b.n	800a072 <HAL_GPIO_Init+0x3be>
 800a044:	2302      	movs	r3, #2
 800a046:	e014      	b.n	800a072 <HAL_GPIO_Init+0x3be>
 800a048:	2301      	movs	r3, #1
 800a04a:	e012      	b.n	800a072 <HAL_GPIO_Init+0x3be>
 800a04c:	08011a74 	.word	0x08011a74
 800a050:	48000400 	.word	0x48000400
 800a054:	48000800 	.word	0x48000800
 800a058:	48000c00 	.word	0x48000c00
 800a05c:	48001000 	.word	0x48001000
 800a060:	48001400 	.word	0x48001400
 800a064:	48001800 	.word	0x48001800
 800a068:	40021000 	.word	0x40021000
 800a06c:	40010000 	.word	0x40010000
 800a070:	2300      	movs	r3, #0
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	f002 0203 	and.w	r2, r2, #3
 800a078:	0092      	lsls	r2, r2, #2
 800a07a:	4093      	lsls	r3, r2
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	4313      	orrs	r3, r2
 800a080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a082:	4935      	ldr	r1, [pc, #212]	; (800a158 <HAL_GPIO_Init+0x4a4>)
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	089b      	lsrs	r3, r3, #2
 800a088:	3302      	adds	r3, #2
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a090:	4b32      	ldr	r3, [pc, #200]	; (800a15c <HAL_GPIO_Init+0x4a8>)
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	43db      	mvns	r3, r3
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	4013      	ands	r3, r2
 800a09e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d003      	beq.n	800a0b4 <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a0b4:	4a29      	ldr	r2, [pc, #164]	; (800a15c <HAL_GPIO_Init+0x4a8>)
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a0ba:	4b28      	ldr	r3, [pc, #160]	; (800a15c <HAL_GPIO_Init+0x4a8>)
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	43db      	mvns	r3, r3
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a0de:	4a1f      	ldr	r2, [pc, #124]	; (800a15c <HAL_GPIO_Init+0x4a8>)
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a0e4:	4b1d      	ldr	r3, [pc, #116]	; (800a15c <HAL_GPIO_Init+0x4a8>)
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	43db      	mvns	r3, r3
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d003      	beq.n	800a108 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4313      	orrs	r3, r2
 800a106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a108:	4a14      	ldr	r2, [pc, #80]	; (800a15c <HAL_GPIO_Init+0x4a8>)
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a10e:	4b13      	ldr	r3, [pc, #76]	; (800a15c <HAL_GPIO_Init+0x4a8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	43db      	mvns	r3, r3
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4013      	ands	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4313      	orrs	r3, r2
 800a130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a132:	4a0a      	ldr	r2, [pc, #40]	; (800a15c <HAL_GPIO_Init+0x4a8>)
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	3301      	adds	r3, #1
 800a13c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	fa22 f303 	lsr.w	r3, r2, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f47f ae3f 	bne.w	8009dcc <HAL_GPIO_Init+0x118>
  }
}
 800a14e:	bf00      	nop
 800a150:	bf00      	nop
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40010000 	.word	0x40010000
 800a15c:	40010400 	.word	0x40010400

0800a160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	807b      	strh	r3, [r7, #2]
 800a16c:	4613      	mov	r3, r2
 800a16e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a170:	887b      	ldrh	r3, [r7, #2]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d004      	beq.n	800a180 <HAL_GPIO_WritePin+0x20>
 800a176:	887b      	ldrh	r3, [r7, #2]
 800a178:	0c1b      	lsrs	r3, r3, #16
 800a17a:	041b      	lsls	r3, r3, #16
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <HAL_GPIO_WritePin+0x2a>
 800a180:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800a184:	480d      	ldr	r0, [pc, #52]	; (800a1bc <HAL_GPIO_WritePin+0x5c>)
 800a186:	f7fd fc82 	bl	8007a8e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800a18a:	787b      	ldrb	r3, [r7, #1]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d007      	beq.n	800a1a0 <HAL_GPIO_WritePin+0x40>
 800a190:	787b      	ldrb	r3, [r7, #1]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d004      	beq.n	800a1a0 <HAL_GPIO_WritePin+0x40>
 800a196:	f240 119b 	movw	r1, #411	; 0x19b
 800a19a:	4808      	ldr	r0, [pc, #32]	; (800a1bc <HAL_GPIO_WritePin+0x5c>)
 800a19c:	f7fd fc77 	bl	8007a8e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800a1a0:	787b      	ldrb	r3, [r7, #1]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a1a6:	887a      	ldrh	r2, [r7, #2]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a1ac:	e002      	b.n	800a1b4 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a1ae:	887a      	ldrh	r2, [r7, #2]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	08011a74 	.word	0x08011a74

0800a1c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00b      	beq.n	800a1e6 <HAL_PWREx_ControlVoltageScaling+0x26>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d4:	d007      	beq.n	800a1e6 <HAL_PWREx_ControlVoltageScaling+0x26>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1dc:	d003      	beq.n	800a1e6 <HAL_PWREx_ControlVoltageScaling+0x26>
 800a1de:	219d      	movs	r1, #157	; 0x9d
 800a1e0:	484d      	ldr	r0, [pc, #308]	; (800a318 <HAL_PWREx_ControlVoltageScaling+0x158>)
 800a1e2:	f7fd fc54 	bl	8007a8e <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d141      	bne.n	800a270 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a1ec:	4b4b      	ldr	r3, [pc, #300]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1f8:	d131      	bne.n	800a25e <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a1fa:	4b48      	ldr	r3, [pc, #288]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a200:	4a46      	ldr	r2, [pc, #280]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a206:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a20a:	4b44      	ldr	r3, [pc, #272]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a212:	4a42      	ldr	r2, [pc, #264]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a218:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a21a:	4b41      	ldr	r3, [pc, #260]	; (800a320 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2232      	movs	r2, #50	; 0x32
 800a220:	fb02 f303 	mul.w	r3, r2, r3
 800a224:	4a3f      	ldr	r2, [pc, #252]	; (800a324 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800a226:	fba2 2303 	umull	r2, r3, r2, r3
 800a22a:	0c9b      	lsrs	r3, r3, #18
 800a22c:	3301      	adds	r3, #1
 800a22e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a230:	e002      	b.n	800a238 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3b01      	subs	r3, #1
 800a236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a238:	4b38      	ldr	r3, [pc, #224]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a244:	d102      	bne.n	800a24c <HAL_PWREx_ControlVoltageScaling+0x8c>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1f2      	bne.n	800a232 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a24c:	4b33      	ldr	r3, [pc, #204]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a258:	d158      	bne.n	800a30c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e057      	b.n	800a30e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a25e:	4b2f      	ldr	r3, [pc, #188]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a264:	4a2d      	ldr	r2, [pc, #180]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a26a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a26e:	e04d      	b.n	800a30c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a276:	d141      	bne.n	800a2fc <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a278:	4b28      	ldr	r3, [pc, #160]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a284:	d131      	bne.n	800a2ea <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a286:	4b25      	ldr	r3, [pc, #148]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a28c:	4a23      	ldr	r2, [pc, #140]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a292:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a296:	4b21      	ldr	r3, [pc, #132]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a29e:	4a1f      	ldr	r2, [pc, #124]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a2a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a2a6:	4b1e      	ldr	r3, [pc, #120]	; (800a320 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2232      	movs	r2, #50	; 0x32
 800a2ac:	fb02 f303 	mul.w	r3, r2, r3
 800a2b0:	4a1c      	ldr	r2, [pc, #112]	; (800a324 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800a2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b6:	0c9b      	lsrs	r3, r3, #18
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a2bc:	e002      	b.n	800a2c4 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a2c4:	4b15      	ldr	r3, [pc, #84]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d0:	d102      	bne.n	800a2d8 <HAL_PWREx_ControlVoltageScaling+0x118>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1f2      	bne.n	800a2be <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a2d8:	4b10      	ldr	r3, [pc, #64]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2e4:	d112      	bne.n	800a30c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e011      	b.n	800a30e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2f0:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a2f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a2fa:	e007      	b.n	800a30c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a2fc:	4b07      	ldr	r3, [pc, #28]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a304:	4a05      	ldr	r2, [pc, #20]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a30a:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	08011ab0 	.word	0x08011ab0
 800a31c:	40007000 	.word	0x40007000
 800a320:	20000a98 	.word	0x20000a98
 800a324:	431bde83 	.word	0x431bde83

0800a328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d102      	bne.n	800a33c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	f000 bc02 	b.w	800ab40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d022      	beq.n	800a38a <HAL_RCC_OscConfig+0x62>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d11c      	bne.n	800a38a <HAL_RCC_OscConfig+0x62>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d116      	bne.n	800a38a <HAL_RCC_OscConfig+0x62>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0320 	and.w	r3, r3, #32
 800a364:	2b00      	cmp	r3, #0
 800a366:	d110      	bne.n	800a38a <HAL_RCC_OscConfig+0x62>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0308 	and.w	r3, r3, #8
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <HAL_RCC_OscConfig+0x62>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d104      	bne.n	800a38a <HAL_RCC_OscConfig+0x62>
 800a380:	f240 1145 	movw	r1, #325	; 0x145
 800a384:	4892      	ldr	r0, [pc, #584]	; (800a5d0 <HAL_RCC_OscConfig+0x2a8>)
 800a386:	f7fd fb82 	bl	8007a8e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 8089 	beq.w	800a4aa <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00e      	beq.n	800a3be <HAL_RCC_OscConfig+0x96>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a8:	d009      	beq.n	800a3be <HAL_RCC_OscConfig+0x96>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3b2:	d004      	beq.n	800a3be <HAL_RCC_OscConfig+0x96>
 800a3b4:	f240 114b 	movw	r1, #331	; 0x14b
 800a3b8:	4885      	ldr	r0, [pc, #532]	; (800a5d0 <HAL_RCC_OscConfig+0x2a8>)
 800a3ba:	f7fd fb68 	bl	8007a8e <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3be:	4b85      	ldr	r3, [pc, #532]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f003 030c 	and.w	r3, r3, #12
 800a3c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a3c8:	4b82      	ldr	r3, [pc, #520]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	f003 0303 	and.w	r3, r3, #3
 800a3d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	2b0c      	cmp	r3, #12
 800a3d6:	d102      	bne.n	800a3de <HAL_RCC_OscConfig+0xb6>
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	d002      	beq.n	800a3e4 <HAL_RCC_OscConfig+0xbc>
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	2b08      	cmp	r3, #8
 800a3e2:	d10b      	bne.n	800a3fc <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3e4:	4b7b      	ldr	r3, [pc, #492]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d05b      	beq.n	800a4a8 <HAL_RCC_OscConfig+0x180>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d157      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e3a1      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a404:	d106      	bne.n	800a414 <HAL_RCC_OscConfig+0xec>
 800a406:	4b73      	ldr	r3, [pc, #460]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a72      	ldr	r2, [pc, #456]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a40c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a410:	6013      	str	r3, [r2, #0]
 800a412:	e01d      	b.n	800a450 <HAL_RCC_OscConfig+0x128>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a41c:	d10c      	bne.n	800a438 <HAL_RCC_OscConfig+0x110>
 800a41e:	4b6d      	ldr	r3, [pc, #436]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a6c      	ldr	r2, [pc, #432]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a428:	6013      	str	r3, [r2, #0]
 800a42a:	4b6a      	ldr	r3, [pc, #424]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a69      	ldr	r2, [pc, #420]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	e00b      	b.n	800a450 <HAL_RCC_OscConfig+0x128>
 800a438:	4b66      	ldr	r3, [pc, #408]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a65      	ldr	r2, [pc, #404]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a43e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	4b63      	ldr	r3, [pc, #396]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a62      	ldr	r2, [pc, #392]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a44a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a44e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d013      	beq.n	800a480 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a458:	f7fd fdfe 	bl	8008058 <HAL_GetTick>
 800a45c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a45e:	e008      	b.n	800a472 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a460:	f7fd fdfa 	bl	8008058 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b64      	cmp	r3, #100	; 0x64
 800a46c:	d901      	bls.n	800a472 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e366      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a472:	4b58      	ldr	r3, [pc, #352]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0f0      	beq.n	800a460 <HAL_RCC_OscConfig+0x138>
 800a47e:	e014      	b.n	800a4aa <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a480:	f7fd fdea 	bl	8008058 <HAL_GetTick>
 800a484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a486:	e008      	b.n	800a49a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a488:	f7fd fde6 	bl	8008058 <HAL_GetTick>
 800a48c:	4602      	mov	r2, r0
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	2b64      	cmp	r3, #100	; 0x64
 800a494:	d901      	bls.n	800a49a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 800a496:	2303      	movs	r3, #3
 800a498:	e352      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a49a:	4b4e      	ldr	r3, [pc, #312]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1f0      	bne.n	800a488 <HAL_RCC_OscConfig+0x160>
 800a4a6:	e000      	b.n	800a4aa <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 8093 	beq.w	800a5de <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d009      	beq.n	800a4d4 <HAL_RCC_OscConfig+0x1ac>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c8:	d004      	beq.n	800a4d4 <HAL_RCC_OscConfig+0x1ac>
 800a4ca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a4ce:	4840      	ldr	r0, [pc, #256]	; (800a5d0 <HAL_RCC_OscConfig+0x2a8>)
 800a4d0:	f7fd fadd 	bl	8007a8e <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	2b7f      	cmp	r3, #127	; 0x7f
 800a4da:	d904      	bls.n	800a4e6 <HAL_RCC_OscConfig+0x1be>
 800a4dc:	f240 1181 	movw	r1, #385	; 0x181
 800a4e0:	483b      	ldr	r0, [pc, #236]	; (800a5d0 <HAL_RCC_OscConfig+0x2a8>)
 800a4e2:	f7fd fad4 	bl	8007a8e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4e6:	4b3b      	ldr	r3, [pc, #236]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	f003 030c 	and.w	r3, r3, #12
 800a4ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4f0:	4b38      	ldr	r3, [pc, #224]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	f003 0303 	and.w	r3, r3, #3
 800a4f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	2b0c      	cmp	r3, #12
 800a4fe:	d102      	bne.n	800a506 <HAL_RCC_OscConfig+0x1de>
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d002      	beq.n	800a50c <HAL_RCC_OscConfig+0x1e4>
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d11f      	bne.n	800a54c <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a50c:	4b31      	ldr	r3, [pc, #196]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <HAL_RCC_OscConfig+0x1fc>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e30d      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a524:	4b2b      	ldr	r3, [pc, #172]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	061b      	lsls	r3, r3, #24
 800a532:	4928      	ldr	r1, [pc, #160]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a534:	4313      	orrs	r3, r2
 800a536:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a538:	4b27      	ldr	r3, [pc, #156]	; (800a5d8 <HAL_RCC_OscConfig+0x2b0>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fd fbb5 	bl	8007cac <HAL_InitTick>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d049      	beq.n	800a5dc <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e2f9      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d023      	beq.n	800a59c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a554:	4b1f      	ldr	r3, [pc, #124]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a1e      	ldr	r2, [pc, #120]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a55a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a55e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a560:	f7fd fd7a 	bl	8008058 <HAL_GetTick>
 800a564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a566:	e008      	b.n	800a57a <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a568:	f7fd fd76 	bl	8008058 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	2b02      	cmp	r3, #2
 800a574:	d901      	bls.n	800a57a <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e2e2      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a57a:	4b16      	ldr	r3, [pc, #88]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0f0      	beq.n	800a568 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a586:	4b13      	ldr	r3, [pc, #76]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	061b      	lsls	r3, r3, #24
 800a594:	490f      	ldr	r1, [pc, #60]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a596:	4313      	orrs	r3, r2
 800a598:	604b      	str	r3, [r1, #4]
 800a59a:	e020      	b.n	800a5de <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a59c:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a0c      	ldr	r2, [pc, #48]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a8:	f7fd fd56 	bl	8008058 <HAL_GetTick>
 800a5ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a5ae:	e008      	b.n	800a5c2 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5b0:	f7fd fd52 	bl	8008058 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d901      	bls.n	800a5c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e2be      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a5c2:	4b04      	ldr	r3, [pc, #16]	; (800a5d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1f0      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x288>
 800a5ce:	e006      	b.n	800a5de <HAL_RCC_OscConfig+0x2b6>
 800a5d0:	08011aec 	.word	0x08011aec
 800a5d4:	40021000 	.word	0x40021000
 800a5d8:	20000a9c 	.word	0x20000a9c
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0308 	and.w	r3, r3, #8
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d049      	beq.n	800a67e <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d008      	beq.n	800a604 <HAL_RCC_OscConfig+0x2dc>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d004      	beq.n	800a604 <HAL_RCC_OscConfig+0x2dc>
 800a5fa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800a5fe:	48a3      	ldr	r0, [pc, #652]	; (800a88c <HAL_RCC_OscConfig+0x564>)
 800a600:	f7fd fa45 	bl	8007a8e <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	695b      	ldr	r3, [r3, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d01c      	beq.n	800a646 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a60c:	4ba0      	ldr	r3, [pc, #640]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a60e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a612:	4a9f      	ldr	r2, [pc, #636]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a614:	f043 0301 	orr.w	r3, r3, #1
 800a618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61c:	f7fd fd1c 	bl	8008058 <HAL_GetTick>
 800a620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a622:	e008      	b.n	800a636 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a624:	f7fd fd18 	bl	8008058 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d901      	bls.n	800a636 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e284      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a636:	4b96      	ldr	r3, [pc, #600]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0ef      	beq.n	800a624 <HAL_RCC_OscConfig+0x2fc>
 800a644:	e01b      	b.n	800a67e <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a646:	4b92      	ldr	r3, [pc, #584]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a64c:	4a90      	ldr	r2, [pc, #576]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a64e:	f023 0301 	bic.w	r3, r3, #1
 800a652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a656:	f7fd fcff 	bl	8008058 <HAL_GetTick>
 800a65a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a65c:	e008      	b.n	800a670 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a65e:	f7fd fcfb 	bl	8008058 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d901      	bls.n	800a670 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e267      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a670:	4b87      	ldr	r3, [pc, #540]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a676:	f003 0302 	and.w	r3, r3, #2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1ef      	bne.n	800a65e <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80b7 	beq.w	800a7fa <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a68c:	2300      	movs	r3, #0
 800a68e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00c      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x38a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d008      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x38a>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	2b05      	cmp	r3, #5
 800a6a6:	d004      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x38a>
 800a6a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6ac:	4877      	ldr	r0, [pc, #476]	; (800a88c <HAL_RCC_OscConfig+0x564>)
 800a6ae:	f7fd f9ee 	bl	8007a8e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a6b2:	4b77      	ldr	r3, [pc, #476]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x39a>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <HAL_RCC_OscConfig+0x39c>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00d      	beq.n	800a6e4 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6c8:	4b71      	ldr	r3, [pc, #452]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6cc:	4a70      	ldr	r2, [pc, #448]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a6ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d2:	6593      	str	r3, [r2, #88]	; 0x58
 800a6d4:	4b6e      	ldr	r3, [pc, #440]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a6d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6e4:	4b6b      	ldr	r3, [pc, #428]	; (800a894 <HAL_RCC_OscConfig+0x56c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d118      	bne.n	800a722 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a6f0:	4b68      	ldr	r3, [pc, #416]	; (800a894 <HAL_RCC_OscConfig+0x56c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a67      	ldr	r2, [pc, #412]	; (800a894 <HAL_RCC_OscConfig+0x56c>)
 800a6f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6fc:	f7fd fcac 	bl	8008058 <HAL_GetTick>
 800a700:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a702:	e008      	b.n	800a716 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a704:	f7fd fca8 	bl	8008058 <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d901      	bls.n	800a716 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e214      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a716:	4b5f      	ldr	r3, [pc, #380]	; (800a894 <HAL_RCC_OscConfig+0x56c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d0f0      	beq.n	800a704 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d108      	bne.n	800a73c <HAL_RCC_OscConfig+0x414>
 800a72a:	4b59      	ldr	r3, [pc, #356]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a730:	4a57      	ldr	r2, [pc, #348]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a732:	f043 0301 	orr.w	r3, r3, #1
 800a736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a73a:	e024      	b.n	800a786 <HAL_RCC_OscConfig+0x45e>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	2b05      	cmp	r3, #5
 800a742:	d110      	bne.n	800a766 <HAL_RCC_OscConfig+0x43e>
 800a744:	4b52      	ldr	r3, [pc, #328]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74a:	4a51      	ldr	r2, [pc, #324]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a74c:	f043 0304 	orr.w	r3, r3, #4
 800a750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a754:	4b4e      	ldr	r3, [pc, #312]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a75a:	4a4d      	ldr	r2, [pc, #308]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a75c:	f043 0301 	orr.w	r3, r3, #1
 800a760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a764:	e00f      	b.n	800a786 <HAL_RCC_OscConfig+0x45e>
 800a766:	4b4a      	ldr	r3, [pc, #296]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a76c:	4a48      	ldr	r2, [pc, #288]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a76e:	f023 0301 	bic.w	r3, r3, #1
 800a772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a776:	4b46      	ldr	r3, [pc, #280]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a77c:	4a44      	ldr	r2, [pc, #272]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a77e:	f023 0304 	bic.w	r3, r3, #4
 800a782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d016      	beq.n	800a7bc <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a78e:	f7fd fc63 	bl	8008058 <HAL_GetTick>
 800a792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a794:	e00a      	b.n	800a7ac <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a796:	f7fd fc5f 	bl	8008058 <HAL_GetTick>
 800a79a:	4602      	mov	r2, r0
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d901      	bls.n	800a7ac <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e1c9      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7ac:	4b38      	ldr	r3, [pc, #224]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7b2:	f003 0302 	and.w	r3, r3, #2
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0ed      	beq.n	800a796 <HAL_RCC_OscConfig+0x46e>
 800a7ba:	e015      	b.n	800a7e8 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7bc:	f7fd fc4c 	bl	8008058 <HAL_GetTick>
 800a7c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7c2:	e00a      	b.n	800a7da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7c4:	f7fd fc48 	bl	8008058 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d901      	bls.n	800a7da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e1b2      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7da:	4b2d      	ldr	r3, [pc, #180]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1ed      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a7e8:	7ffb      	ldrb	r3, [r7, #31]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d105      	bne.n	800a7fa <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7ee:	4b28      	ldr	r3, [pc, #160]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f2:	4a27      	ldr	r2, [pc, #156]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a7f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	2b00      	cmp	r3, #0
 800a804:	d04f      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d008      	beq.n	800a820 <HAL_RCC_OscConfig+0x4f8>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d004      	beq.n	800a820 <HAL_RCC_OscConfig+0x4f8>
 800a816:	f240 213b 	movw	r1, #571	; 0x23b
 800a81a:	481c      	ldr	r0, [pc, #112]	; (800a88c <HAL_RCC_OscConfig+0x564>)
 800a81c:	f7fd f937 	bl	8007a8e <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d01c      	beq.n	800a862 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a828:	4b19      	ldr	r3, [pc, #100]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a82a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a82e:	4a18      	ldr	r2, [pc, #96]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a838:	f7fd fc0e 	bl	8008058 <HAL_GetTick>
 800a83c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a83e:	e008      	b.n	800a852 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a840:	f7fd fc0a 	bl	8008058 <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e176      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a852:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0ef      	beq.n	800a840 <HAL_RCC_OscConfig+0x518>
 800a860:	e021      	b.n	800a8a6 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a862:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a868:	4a09      	ldr	r2, [pc, #36]	; (800a890 <HAL_RCC_OscConfig+0x568>)
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a872:	f7fd fbf1 	bl	8008058 <HAL_GetTick>
 800a876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a878:	e00e      	b.n	800a898 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a87a:	f7fd fbed 	bl	8008058 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d907      	bls.n	800a898 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e159      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
 800a88c:	08011aec 	.word	0x08011aec
 800a890:	40021000 	.word	0x40021000
 800a894:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a898:	4b89      	ldr	r3, [pc, #548]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800a89a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1e9      	bne.n	800a87a <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00c      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x5a0>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d008      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x5a0>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d004      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x5a0>
 800a8be:	f44f 7119 	mov.w	r1, #612	; 0x264
 800a8c2:	4880      	ldr	r0, [pc, #512]	; (800aac4 <HAL_RCC_OscConfig+0x79c>)
 800a8c4:	f7fd f8e3 	bl	8007a8e <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 8136 	beq.w	800ab3e <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a8d2:	4b7b      	ldr	r3, [pc, #492]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f003 030c 	and.w	r3, r3, #12
 800a8da:	2b0c      	cmp	r3, #12
 800a8dc:	f000 80ea 	beq.w	800aab4 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	f040 80bd 	bne.w	800aa64 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00c      	beq.n	800a90c <HAL_RCC_OscConfig+0x5e4>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d008      	beq.n	800a90c <HAL_RCC_OscConfig+0x5e4>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d004      	beq.n	800a90c <HAL_RCC_OscConfig+0x5e4>
 800a902:	f240 216e 	movw	r1, #622	; 0x26e
 800a906:	486f      	ldr	r0, [pc, #444]	; (800aac4 <HAL_RCC_OscConfig+0x79c>)
 800a908:	f7fd f8c1 	bl	8007a8e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	2b00      	cmp	r3, #0
 800a912:	d003      	beq.n	800a91c <HAL_RCC_OscConfig+0x5f4>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	2b10      	cmp	r3, #16
 800a91a:	d904      	bls.n	800a926 <HAL_RCC_OscConfig+0x5fe>
 800a91c:	f240 216f 	movw	r1, #623	; 0x26f
 800a920:	4868      	ldr	r0, [pc, #416]	; (800aac4 <HAL_RCC_OscConfig+0x79c>)
 800a922:	f7fd f8b4 	bl	8007a8e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92a:	2b07      	cmp	r3, #7
 800a92c:	d903      	bls.n	800a936 <HAL_RCC_OscConfig+0x60e>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a932:	2b7f      	cmp	r3, #127	; 0x7f
 800a934:	d904      	bls.n	800a940 <HAL_RCC_OscConfig+0x618>
 800a936:	f44f 711c 	mov.w	r1, #624	; 0x270
 800a93a:	4862      	ldr	r0, [pc, #392]	; (800aac4 <HAL_RCC_OscConfig+0x79c>)
 800a93c:	f7fd f8a7 	bl	8007a8e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	2b01      	cmp	r3, #1
 800a946:	d903      	bls.n	800a950 <HAL_RCC_OscConfig+0x628>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94c:	2b1f      	cmp	r3, #31
 800a94e:	d904      	bls.n	800a95a <HAL_RCC_OscConfig+0x632>
 800a950:	f240 2171 	movw	r1, #625	; 0x271
 800a954:	485b      	ldr	r0, [pc, #364]	; (800aac4 <HAL_RCC_OscConfig+0x79c>)
 800a956:	f7fd f89a 	bl	8007a8e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d010      	beq.n	800a984 <HAL_RCC_OscConfig+0x65c>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a966:	2b04      	cmp	r3, #4
 800a968:	d00c      	beq.n	800a984 <HAL_RCC_OscConfig+0x65c>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96e:	2b06      	cmp	r3, #6
 800a970:	d008      	beq.n	800a984 <HAL_RCC_OscConfig+0x65c>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a976:	2b08      	cmp	r3, #8
 800a978:	d004      	beq.n	800a984 <HAL_RCC_OscConfig+0x65c>
 800a97a:	f240 2172 	movw	r1, #626	; 0x272
 800a97e:	4851      	ldr	r0, [pc, #324]	; (800aac4 <HAL_RCC_OscConfig+0x79c>)
 800a980:	f7fd f885 	bl	8007a8e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d010      	beq.n	800a9ae <HAL_RCC_OscConfig+0x686>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a990:	2b04      	cmp	r3, #4
 800a992:	d00c      	beq.n	800a9ae <HAL_RCC_OscConfig+0x686>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a998:	2b06      	cmp	r3, #6
 800a99a:	d008      	beq.n	800a9ae <HAL_RCC_OscConfig+0x686>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a0:	2b08      	cmp	r3, #8
 800a9a2:	d004      	beq.n	800a9ae <HAL_RCC_OscConfig+0x686>
 800a9a4:	f240 2173 	movw	r1, #627	; 0x273
 800a9a8:	4846      	ldr	r0, [pc, #280]	; (800aac4 <HAL_RCC_OscConfig+0x79c>)
 800a9aa:	f7fd f870 	bl	8007a8e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9ae:	4b44      	ldr	r3, [pc, #272]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a43      	ldr	r2, [pc, #268]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800a9b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ba:	f7fd fb4d 	bl	8008058 <HAL_GetTick>
 800a9be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9c0:	e008      	b.n	800a9d4 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9c2:	f7fd fb49 	bl	8008058 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d901      	bls.n	800a9d4 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e0b5      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9d4:	4b3a      	ldr	r3, [pc, #232]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1f0      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9e0:	4b37      	ldr	r3, [pc, #220]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	4b38      	ldr	r3, [pc, #224]	; (800aac8 <HAL_RCC_OscConfig+0x7a0>)
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	6a11      	ldr	r1, [r2, #32]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a9f0:	3a01      	subs	r2, #1
 800a9f2:	0112      	lsls	r2, r2, #4
 800a9f4:	4311      	orrs	r1, r2
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9fa:	0212      	lsls	r2, r2, #8
 800a9fc:	4311      	orrs	r1, r2
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa02:	0852      	lsrs	r2, r2, #1
 800aa04:	3a01      	subs	r2, #1
 800aa06:	0552      	lsls	r2, r2, #21
 800aa08:	4311      	orrs	r1, r2
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa0e:	0852      	lsrs	r2, r2, #1
 800aa10:	3a01      	subs	r2, #1
 800aa12:	0652      	lsls	r2, r2, #25
 800aa14:	4311      	orrs	r1, r2
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aa1a:	06d2      	lsls	r2, r2, #27
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	4928      	ldr	r1, [pc, #160]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa20:	4313      	orrs	r3, r2
 800aa22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa24:	4b26      	ldr	r3, [pc, #152]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a25      	ldr	r2, [pc, #148]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aa30:	4b23      	ldr	r3, [pc, #140]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	4a22      	ldr	r2, [pc, #136]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa3c:	f7fd fb0c 	bl	8008058 <HAL_GetTick>
 800aa40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa42:	e008      	b.n	800aa56 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa44:	f7fd fb08 	bl	8008058 <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d901      	bls.n	800aa56 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e074      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa56:	4b1a      	ldr	r3, [pc, #104]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0f0      	beq.n	800aa44 <HAL_RCC_OscConfig+0x71c>
 800aa62:	e06c      	b.n	800ab3e <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa64:	4b16      	ldr	r3, [pc, #88]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a15      	ldr	r2, [pc, #84]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa6e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800aa70:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	4a12      	ldr	r2, [pc, #72]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa76:	f023 0303 	bic.w	r3, r3, #3
 800aa7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800aa7c:	4b10      	ldr	r3, [pc, #64]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	4a0f      	ldr	r2, [pc, #60]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aa82:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800aa86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa8c:	f7fd fae4 	bl	8008058 <HAL_GetTick>
 800aa90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa92:	e008      	b.n	800aaa6 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa94:	f7fd fae0 	bl	8008058 <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d901      	bls.n	800aaa6 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e04c      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aaa6:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <HAL_RCC_OscConfig+0x798>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1f0      	bne.n	800aa94 <HAL_RCC_OscConfig+0x76c>
 800aab2:	e044      	b.n	800ab3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d107      	bne.n	800aacc <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e03f      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
 800aac0:	40021000 	.word	0x40021000
 800aac4:	08011aec 	.word	0x08011aec
 800aac8:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800aacc:	4b1e      	ldr	r3, [pc, #120]	; (800ab48 <HAL_RCC_OscConfig+0x820>)
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f003 0203 	and.w	r2, r3, #3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d12c      	bne.n	800ab3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	3b01      	subs	r3, #1
 800aaec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d123      	bne.n	800ab3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d11b      	bne.n	800ab3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d113      	bne.n	800ab3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1c:	085b      	lsrs	r3, r3, #1
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d109      	bne.n	800ab3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab30:	085b      	lsrs	r3, r3, #1
 800ab32:	3b01      	subs	r3, #1
 800ab34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d001      	beq.n	800ab3e <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e000      	b.n	800ab40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3720      	adds	r7, #32
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	40021000 	.word	0x40021000

0800ab4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ab56:	2300      	movs	r3, #0
 800ab58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e1e2      	b.n	800af2a <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 030f 	and.w	r3, r3, #15
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <HAL_RCC_ClockConfig+0x30>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f023 030f 	bic.w	r3, r3, #15
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d004      	beq.n	800ab86 <HAL_RCC_ClockConfig+0x3a>
 800ab7c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800ab80:	4869      	ldr	r0, [pc, #420]	; (800ad28 <HAL_RCC_ClockConfig+0x1dc>)
 800ab82:	f7fc ff84 	bl	8007a8e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d031      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d02e      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d02b      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d028      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d025      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2b05      	cmp	r3, #5
 800aba8:	d022      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b06      	cmp	r3, #6
 800abae:	d01f      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b07      	cmp	r3, #7
 800abb4:	d01c      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d019      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b09      	cmp	r3, #9
 800abc0:	d016      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b0a      	cmp	r3, #10
 800abc6:	d013      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2b0b      	cmp	r3, #11
 800abcc:	d010      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b0c      	cmp	r3, #12
 800abd2:	d00d      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b0d      	cmp	r3, #13
 800abd8:	d00a      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b0e      	cmp	r3, #14
 800abde:	d007      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	2b0f      	cmp	r3, #15
 800abe4:	d004      	beq.n	800abf0 <HAL_RCC_ClockConfig+0xa4>
 800abe6:	f240 310d 	movw	r1, #781	; 0x30d
 800abea:	484f      	ldr	r0, [pc, #316]	; (800ad28 <HAL_RCC_ClockConfig+0x1dc>)
 800abec:	f7fc ff4f 	bl	8007a8e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abf0:	4b4e      	ldr	r3, [pc, #312]	; (800ad2c <HAL_RCC_ClockConfig+0x1e0>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 030f 	and.w	r3, r3, #15
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d910      	bls.n	800ac20 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abfe:	4b4b      	ldr	r3, [pc, #300]	; (800ad2c <HAL_RCC_ClockConfig+0x1e0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f023 020f 	bic.w	r2, r3, #15
 800ac06:	4949      	ldr	r1, [pc, #292]	; (800ad2c <HAL_RCC_ClockConfig+0x1e0>)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac0e:	4b47      	ldr	r3, [pc, #284]	; (800ad2c <HAL_RCC_ClockConfig+0x1e0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 030f 	and.w	r3, r3, #15
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d001      	beq.n	800ac20 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e184      	b.n	800af2a <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 808e 	beq.w	800ad4a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d00c      	beq.n	800ac50 <HAL_RCC_ClockConfig+0x104>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d008      	beq.n	800ac50 <HAL_RCC_ClockConfig+0x104>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	d004      	beq.n	800ac50 <HAL_RCC_ClockConfig+0x104>
 800ac46:	f44f 7149 	mov.w	r1, #804	; 0x324
 800ac4a:	4837      	ldr	r0, [pc, #220]	; (800ad28 <HAL_RCC_ClockConfig+0x1dc>)
 800ac4c:	f7fc ff1f 	bl	8007a8e <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d129      	bne.n	800acac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac58:	4b35      	ldr	r3, [pc, #212]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e160      	b.n	800af2a <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ac68:	f000 fa34 	bl	800b0d4 <RCC_GetSysClockFreqFromPLLSource>
 800ac6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	4a30      	ldr	r2, [pc, #192]	; (800ad34 <HAL_RCC_ClockConfig+0x1e8>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d93f      	bls.n	800acf6 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ac76:	4b2e      	ldr	r3, [pc, #184]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d009      	beq.n	800ac96 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d033      	beq.n	800acf6 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d12f      	bne.n	800acf6 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ac96:	4b26      	ldr	r3, [pc, #152]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac9e:	4a24      	ldr	r2, [pc, #144]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800aca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800aca6:	2380      	movs	r3, #128	; 0x80
 800aca8:	617b      	str	r3, [r7, #20]
 800acaa:	e024      	b.n	800acf6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d107      	bne.n	800acc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800acb4:	4b1e      	ldr	r3, [pc, #120]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d109      	bne.n	800acd4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e132      	b.n	800af2a <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800acc4:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e12a      	b.n	800af2a <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800acd4:	f000 f93a 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800acd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	4a15      	ldr	r2, [pc, #84]	; (800ad34 <HAL_RCC_ClockConfig+0x1e8>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d909      	bls.n	800acf6 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ace2:	4b13      	ldr	r3, [pc, #76]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acea:	4a11      	ldr	r2, [pc, #68]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800acec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800acf2:	2380      	movs	r3, #128	; 0x80
 800acf4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800acf6:	4b0e      	ldr	r3, [pc, #56]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f023 0203 	bic.w	r2, r3, #3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	490b      	ldr	r1, [pc, #44]	; (800ad30 <HAL_RCC_ClockConfig+0x1e4>)
 800ad04:	4313      	orrs	r3, r2
 800ad06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad08:	f7fd f9a6 	bl	8008058 <HAL_GetTick>
 800ad0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad0e:	e013      	b.n	800ad38 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad10:	f7fd f9a2 	bl	8008058 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d90a      	bls.n	800ad38 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e101      	b.n	800af2a <HAL_RCC_ClockConfig+0x3de>
 800ad26:	bf00      	nop
 800ad28:	08011aec 	.word	0x08011aec
 800ad2c:	40022000 	.word	0x40022000
 800ad30:	40021000 	.word	0x40021000
 800ad34:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad38:	4b7e      	ldr	r3, [pc, #504]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f003 020c 	and.w	r2, r3, #12
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d1e2      	bne.n	800ad10 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d04c      	beq.n	800adf0 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d005      	beq.n	800ad6e <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad62:	4b74      	ldr	r3, [pc, #464]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	4a73      	ldr	r2, [pc, #460]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800ad68:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad6c:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0308 	and.w	r3, r3, #8
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d007      	beq.n	800ad8a <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ad7a:	4b6e      	ldr	r3, [pc, #440]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad82:	4a6c      	ldr	r2, [pc, #432]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800ad84:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad88:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d024      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	2b80      	cmp	r3, #128	; 0x80
 800ad98:	d020      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	2b90      	cmp	r3, #144	; 0x90
 800ada0:	d01c      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	2ba0      	cmp	r3, #160	; 0xa0
 800ada8:	d018      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	2bb0      	cmp	r3, #176	; 0xb0
 800adb0:	d014      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	2bc0      	cmp	r3, #192	; 0xc0
 800adb8:	d010      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	2bd0      	cmp	r3, #208	; 0xd0
 800adc0:	d00c      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	2be0      	cmp	r3, #224	; 0xe0
 800adc8:	d008      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	2bf0      	cmp	r3, #240	; 0xf0
 800add0:	d004      	beq.n	800addc <HAL_RCC_ClockConfig+0x290>
 800add2:	f240 317b 	movw	r1, #891	; 0x37b
 800add6:	4858      	ldr	r0, [pc, #352]	; (800af38 <HAL_RCC_ClockConfig+0x3ec>)
 800add8:	f7fc fe59 	bl	8007a8e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800addc:	4b55      	ldr	r3, [pc, #340]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	4952      	ldr	r1, [pc, #328]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800adea:	4313      	orrs	r3, r2
 800adec:	608b      	str	r3, [r1, #8]
 800adee:	e008      	b.n	800ae02 <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2b80      	cmp	r3, #128	; 0x80
 800adf4:	d105      	bne.n	800ae02 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800adf6:	4b4f      	ldr	r3, [pc, #316]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	4a4e      	ldr	r2, [pc, #312]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800adfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae02:	4b4e      	ldr	r3, [pc, #312]	; (800af3c <HAL_RCC_ClockConfig+0x3f0>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 030f 	and.w	r3, r3, #15
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d21d      	bcs.n	800ae4c <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae10:	4b4a      	ldr	r3, [pc, #296]	; (800af3c <HAL_RCC_ClockConfig+0x3f0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f023 020f 	bic.w	r2, r3, #15
 800ae18:	4948      	ldr	r1, [pc, #288]	; (800af3c <HAL_RCC_ClockConfig+0x3f0>)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ae20:	f7fd f91a 	bl	8008058 <HAL_GetTick>
 800ae24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae26:	e00a      	b.n	800ae3e <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae28:	f7fd f916 	bl	8008058 <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d901      	bls.n	800ae3e <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e075      	b.n	800af2a <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae3e:	4b3f      	ldr	r3, [pc, #252]	; (800af3c <HAL_RCC_ClockConfig+0x3f0>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 030f 	and.w	r3, r3, #15
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d1ed      	bne.n	800ae28 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d025      	beq.n	800aea4 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d018      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x346>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae68:	d013      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x346>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800ae72:	d00e      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x346>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ae7c:	d009      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x346>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae86:	d004      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x346>
 800ae88:	f240 319d 	movw	r1, #925	; 0x39d
 800ae8c:	482a      	ldr	r0, [pc, #168]	; (800af38 <HAL_RCC_ClockConfig+0x3ec>)
 800ae8e:	f7fc fdfe 	bl	8007a8e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae92:	4b28      	ldr	r3, [pc, #160]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	4925      	ldr	r1, [pc, #148]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 0308 	and.w	r3, r3, #8
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d026      	beq.n	800aefe <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d018      	beq.n	800aeea <HAL_RCC_ClockConfig+0x39e>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aec0:	d013      	beq.n	800aeea <HAL_RCC_ClockConfig+0x39e>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800aeca:	d00e      	beq.n	800aeea <HAL_RCC_ClockConfig+0x39e>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aed4:	d009      	beq.n	800aeea <HAL_RCC_ClockConfig+0x39e>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aede:	d004      	beq.n	800aeea <HAL_RCC_ClockConfig+0x39e>
 800aee0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800aee4:	4814      	ldr	r0, [pc, #80]	; (800af38 <HAL_RCC_ClockConfig+0x3ec>)
 800aee6:	f7fc fdd2 	bl	8007a8e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aeea:	4b12      	ldr	r3, [pc, #72]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	00db      	lsls	r3, r3, #3
 800aef8:	490e      	ldr	r1, [pc, #56]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aefe:	f000 f825 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800af02:	4602      	mov	r2, r0
 800af04:	4b0b      	ldr	r3, [pc, #44]	; (800af34 <HAL_RCC_ClockConfig+0x3e8>)
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	091b      	lsrs	r3, r3, #4
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	490c      	ldr	r1, [pc, #48]	; (800af40 <HAL_RCC_ClockConfig+0x3f4>)
 800af10:	5ccb      	ldrb	r3, [r1, r3]
 800af12:	f003 031f 	and.w	r3, r3, #31
 800af16:	fa22 f303 	lsr.w	r3, r2, r3
 800af1a:	4a0a      	ldr	r2, [pc, #40]	; (800af44 <HAL_RCC_ClockConfig+0x3f8>)
 800af1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800af1e:	4b0a      	ldr	r3, [pc, #40]	; (800af48 <HAL_RCC_ClockConfig+0x3fc>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4618      	mov	r0, r3
 800af24:	f7fc fec2 	bl	8007cac <HAL_InitTick>
 800af28:	4603      	mov	r3, r0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	40021000 	.word	0x40021000
 800af38:	08011aec 	.word	0x08011aec
 800af3c:	40022000 	.word	0x40022000
 800af40:	08012338 	.word	0x08012338
 800af44:	20000a98 	.word	0x20000a98
 800af48:	20000a9c 	.word	0x20000a9c

0800af4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b087      	sub	sp, #28
 800af50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800af52:	4b2c      	ldr	r3, [pc, #176]	; (800b004 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f003 030c 	and.w	r3, r3, #12
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d102      	bne.n	800af64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800af5e:	4b2a      	ldr	r3, [pc, #168]	; (800b008 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af60:	613b      	str	r3, [r7, #16]
 800af62:	e047      	b.n	800aff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800af64:	4b27      	ldr	r3, [pc, #156]	; (800b004 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f003 030c 	and.w	r3, r3, #12
 800af6c:	2b08      	cmp	r3, #8
 800af6e:	d102      	bne.n	800af76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800af70:	4b25      	ldr	r3, [pc, #148]	; (800b008 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	e03e      	b.n	800aff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800af76:	4b23      	ldr	r3, [pc, #140]	; (800b004 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	f003 030c 	and.w	r3, r3, #12
 800af7e:	2b0c      	cmp	r3, #12
 800af80:	d136      	bne.n	800aff0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800af82:	4b20      	ldr	r3, [pc, #128]	; (800b004 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	f003 0303 	and.w	r3, r3, #3
 800af8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af8c:	4b1d      	ldr	r3, [pc, #116]	; (800b004 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	091b      	lsrs	r3, r3, #4
 800af92:	f003 030f 	and.w	r3, r3, #15
 800af96:	3301      	adds	r3, #1
 800af98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d10c      	bne.n	800afba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800afa0:	4a19      	ldr	r2, [pc, #100]	; (800b008 <HAL_RCC_GetSysClockFreq+0xbc>)
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa8:	4a16      	ldr	r2, [pc, #88]	; (800b004 <HAL_RCC_GetSysClockFreq+0xb8>)
 800afaa:	68d2      	ldr	r2, [r2, #12]
 800afac:	0a12      	lsrs	r2, r2, #8
 800afae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
 800afb6:	617b      	str	r3, [r7, #20]
      break;
 800afb8:	e00c      	b.n	800afd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800afba:	4a13      	ldr	r2, [pc, #76]	; (800b008 <HAL_RCC_GetSysClockFreq+0xbc>)
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc2:	4a10      	ldr	r2, [pc, #64]	; (800b004 <HAL_RCC_GetSysClockFreq+0xb8>)
 800afc4:	68d2      	ldr	r2, [r2, #12]
 800afc6:	0a12      	lsrs	r2, r2, #8
 800afc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800afcc:	fb02 f303 	mul.w	r3, r2, r3
 800afd0:	617b      	str	r3, [r7, #20]
      break;
 800afd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800afd4:	4b0b      	ldr	r3, [pc, #44]	; (800b004 <HAL_RCC_GetSysClockFreq+0xb8>)
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	0e5b      	lsrs	r3, r3, #25
 800afda:	f003 0303 	and.w	r3, r3, #3
 800afde:	3301      	adds	r3, #1
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afec:	613b      	str	r3, [r7, #16]
 800afee:	e001      	b.n	800aff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800aff0:	2300      	movs	r3, #0
 800aff2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800aff4:	693b      	ldr	r3, [r7, #16]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	40021000 	.word	0x40021000
 800b008:	00f42400 	.word	0x00f42400

0800b00c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b00c:	b480      	push	{r7}
 800b00e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b010:	4b03      	ldr	r3, [pc, #12]	; (800b020 <HAL_RCC_GetHCLKFreq+0x14>)
 800b012:	681b      	ldr	r3, [r3, #0]
}
 800b014:	4618      	mov	r0, r3
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	20000a98 	.word	0x20000a98

0800b024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b028:	f7ff fff0 	bl	800b00c <HAL_RCC_GetHCLKFreq>
 800b02c:	4602      	mov	r2, r0
 800b02e:	4b06      	ldr	r3, [pc, #24]	; (800b048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	0adb      	lsrs	r3, r3, #11
 800b034:	f003 0307 	and.w	r3, r3, #7
 800b038:	4904      	ldr	r1, [pc, #16]	; (800b04c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b03a:	5ccb      	ldrb	r3, [r1, r3]
 800b03c:	f003 031f 	and.w	r3, r3, #31
 800b040:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b044:	4618      	mov	r0, r3
 800b046:	bd80      	pop	{r7, pc}
 800b048:	40021000 	.word	0x40021000
 800b04c:	08012348 	.word	0x08012348

0800b050 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d104      	bne.n	800b06a <HAL_RCC_GetClockConfig+0x1a>
 800b060:	f240 41e4 	movw	r1, #1252	; 0x4e4
 800b064:	4818      	ldr	r0, [pc, #96]	; (800b0c8 <HAL_RCC_GetClockConfig+0x78>)
 800b066:	f7fc fd12 	bl	8007a8e <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d104      	bne.n	800b07a <HAL_RCC_GetClockConfig+0x2a>
 800b070:	f240 41e5 	movw	r1, #1253	; 0x4e5
 800b074:	4814      	ldr	r0, [pc, #80]	; (800b0c8 <HAL_RCC_GetClockConfig+0x78>)
 800b076:	f7fc fd0a 	bl	8007a8e <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	220f      	movs	r2, #15
 800b07e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b080:	4b12      	ldr	r3, [pc, #72]	; (800b0cc <HAL_RCC_GetClockConfig+0x7c>)
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f003 0203 	and.w	r2, r3, #3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b08c:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <HAL_RCC_GetClockConfig+0x7c>)
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b098:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <HAL_RCC_GetClockConfig+0x7c>)
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b0a4:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <HAL_RCC_GetClockConfig+0x7c>)
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	08db      	lsrs	r3, r3, #3
 800b0aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b0b2:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <HAL_RCC_GetClockConfig+0x80>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 020f 	and.w	r2, r3, #15
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	601a      	str	r2, [r3, #0]
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	08011aec 	.word	0x08011aec
 800b0cc:	40021000 	.word	0x40021000
 800b0d0:	40022000 	.word	0x40022000

0800b0d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b0da:	4b1e      	ldr	r3, [pc, #120]	; (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f003 0303 	and.w	r3, r3, #3
 800b0e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b0e4:	4b1b      	ldr	r3, [pc, #108]	; (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	091b      	lsrs	r3, r3, #4
 800b0ea:	f003 030f 	and.w	r3, r3, #15
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d10c      	bne.n	800b112 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0f8:	4a17      	ldr	r2, [pc, #92]	; (800b158 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b100:	4a14      	ldr	r2, [pc, #80]	; (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b102:	68d2      	ldr	r2, [r2, #12]
 800b104:	0a12      	lsrs	r2, r2, #8
 800b106:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b10a:	fb02 f303 	mul.w	r3, r2, r3
 800b10e:	617b      	str	r3, [r7, #20]
    break;
 800b110:	e00c      	b.n	800b12c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b112:	4a11      	ldr	r2, [pc, #68]	; (800b158 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11a:	4a0e      	ldr	r2, [pc, #56]	; (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b11c:	68d2      	ldr	r2, [r2, #12]
 800b11e:	0a12      	lsrs	r2, r2, #8
 800b120:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b124:	fb02 f303 	mul.w	r3, r2, r3
 800b128:	617b      	str	r3, [r7, #20]
    break;
 800b12a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b12c:	4b09      	ldr	r3, [pc, #36]	; (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	0e5b      	lsrs	r3, r3, #25
 800b132:	f003 0303 	and.w	r3, r3, #3
 800b136:	3301      	adds	r3, #1
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	fbb2 f3f3 	udiv	r3, r2, r3
 800b144:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b146:	687b      	ldr	r3, [r7, #4]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	371c      	adds	r7, #28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	40021000 	.word	0x40021000
 800b158:	00f42400 	.word	0x00f42400

0800b15c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b164:	2300      	movs	r3, #0
 800b166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b168:	2300      	movs	r3, #0
 800b16a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d175      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0302 	and.w	r3, r3, #2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d16f      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d169      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0308 	and.w	r3, r3, #8
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d163      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d15d      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0320 	and.w	r3, r3, #32
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d157      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d151      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d14b      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d145      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d13f      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d139      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d133      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b204:	2b00      	cmp	r3, #0
 800b206:	d12d      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d127      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d121      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d11b      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d115      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10f      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d109      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d103      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b25c:	2183      	movs	r1, #131	; 0x83
 800b25e:	4855      	ldr	r0, [pc, #340]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b260:	f7fc fc15 	bl	8007a8e <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80b2 	beq.w	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b272:	2300      	movs	r3, #0
 800b274:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d012      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b286:	d00d      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b290:	d008      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b29a:	d003      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b29c:	218b      	movs	r1, #139	; 0x8b
 800b29e:	4845      	ldr	r0, [pc, #276]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b2a0:	f7fc fbf5 	bl	8007a8e <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b2a4:	4b44      	ldr	r3, [pc, #272]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10d      	bne.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b2b0:	4b41      	ldr	r3, [pc, #260]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b2b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b4:	4a40      	ldr	r2, [pc, #256]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b2b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ba:	6593      	str	r3, [r2, #88]	; 0x58
 800b2bc:	4b3e      	ldr	r3, [pc, #248]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2c4:	60bb      	str	r3, [r7, #8]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2cc:	4b3b      	ldr	r3, [pc, #236]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a3a      	ldr	r2, [pc, #232]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2d8:	f7fc febe 	bl	8008058 <HAL_GetTick>
 800b2dc:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2de:	e009      	b.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2e0:	f7fc feba 	bl	8008058 <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d902      	bls.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	74fb      	strb	r3, [r7, #19]
        break;
 800b2f2:	e005      	b.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2f4:	4b31      	ldr	r3, [pc, #196]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d0ef      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800b300:	7cfb      	ldrb	r3, [r7, #19]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d15c      	bne.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b306:	4b2c      	ldr	r3, [pc, #176]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b30c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b310:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01e      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d019      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b322:	4b25      	ldr	r3, [pc, #148]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b32c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b32e:	4b22      	ldr	r3, [pc, #136]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b334:	4a20      	ldr	r2, [pc, #128]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b33a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b33e:	4b1e      	ldr	r3, [pc, #120]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b344:	4a1c      	ldr	r2, [pc, #112]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b34a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b34e:	4a1a      	ldr	r2, [pc, #104]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d016      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b360:	f7fc fe7a 	bl	8008058 <HAL_GetTick>
 800b364:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b366:	e00b      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b368:	f7fc fe76 	bl	8008058 <HAL_GetTick>
 800b36c:	4602      	mov	r2, r0
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	f241 3288 	movw	r2, #5000	; 0x1388
 800b376:	4293      	cmp	r3, r2
 800b378:	d902      	bls.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	74fb      	strb	r3, [r7, #19]
            break;
 800b37e:	e006      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b380:	4b0d      	ldr	r3, [pc, #52]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b386:	f003 0302 	and.w	r3, r3, #2
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0ec      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b38e:	7cfb      	ldrb	r3, [r7, #19]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10b      	bne.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b394:	4b08      	ldr	r3, [pc, #32]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b39a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a2:	4905      	ldr	r1, [pc, #20]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b3aa:	e00b      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3ac:	7cfb      	ldrb	r3, [r7, #19]
 800b3ae:	74bb      	strb	r3, [r7, #18]
 800b3b0:	e008      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800b3b2:	bf00      	nop
 800b3b4:	08011b24 	.word	0x08011b24
 800b3b8:	40021000 	.word	0x40021000
 800b3bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c0:	7cfb      	ldrb	r3, [r7, #19]
 800b3c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b3c4:	7c7b      	ldrb	r3, [r7, #17]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d105      	bne.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3ca:	4b9a      	ldr	r3, [pc, #616]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ce:	4a99      	ldr	r2, [pc, #612]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b3d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d01e      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00f      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d00b      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d007      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d003      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800b402:	21e0      	movs	r1, #224	; 0xe0
 800b404:	488c      	ldr	r0, [pc, #560]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b406:	f7fc fb42 	bl	8007a8e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b40a:	4b8a      	ldr	r3, [pc, #552]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b410:	f023 0203 	bic.w	r2, r3, #3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	4986      	ldr	r1, [pc, #536]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b41a:	4313      	orrs	r3, r2
 800b41c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d01e      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00f      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d00b      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	2b0c      	cmp	r3, #12
 800b442:	d007      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	2b08      	cmp	r3, #8
 800b44a:	d003      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b44c:	21ea      	movs	r1, #234	; 0xea
 800b44e:	487a      	ldr	r0, [pc, #488]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b450:	f7fc fb1d 	bl	8007a8e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b454:	4b77      	ldr	r3, [pc, #476]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b45a:	f023 020c 	bic.w	r2, r3, #12
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	4974      	ldr	r1, [pc, #464]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b464:	4313      	orrs	r3, r2
 800b466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 0304 	and.w	r3, r3, #4
 800b472:	2b00      	cmp	r3, #0
 800b474:	d01e      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00f      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	2b10      	cmp	r3, #16
 800b484:	d00b      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	2b30      	cmp	r3, #48	; 0x30
 800b48c:	d007      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	2b20      	cmp	r3, #32
 800b494:	d003      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b496:	21f4      	movs	r1, #244	; 0xf4
 800b498:	4867      	ldr	r0, [pc, #412]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b49a:	f7fc faf8 	bl	8007a8e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b49e:	4b65      	ldr	r3, [pc, #404]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	4961      	ldr	r1, [pc, #388]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0308 	and.w	r3, r3, #8
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d01e      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00f      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	2b40      	cmp	r3, #64	; 0x40
 800b4ce:	d00b      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	2bc0      	cmp	r3, #192	; 0xc0
 800b4d6:	d007      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	2b80      	cmp	r3, #128	; 0x80
 800b4de:	d003      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b4e0:	21ff      	movs	r1, #255	; 0xff
 800b4e2:	4855      	ldr	r0, [pc, #340]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b4e4:	f7fc fad3 	bl	8007a8e <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b4e8:	4b52      	ldr	r3, [pc, #328]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	494f      	ldr	r1, [pc, #316]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 0310 	and.w	r3, r3, #16
 800b506:	2b00      	cmp	r3, #0
 800b508:	d022      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d013      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b51a:	d00e      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	695b      	ldr	r3, [r3, #20]
 800b520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b524:	d009      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b52e:	d004      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b530:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800b534:	4840      	ldr	r0, [pc, #256]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b536:	f7fc faaa 	bl	8007a8e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b53a:	4b3e      	ldr	r3, [pc, #248]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	493a      	ldr	r1, [pc, #232]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0320 	and.w	r3, r3, #32
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d022      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d013      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b56c:	d00e      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b576:	d009      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b580:	d004      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b582:	f44f 718c 	mov.w	r1, #280	; 0x118
 800b586:	482c      	ldr	r0, [pc, #176]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b588:	f7fc fa81 	bl	8007a8e <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b58c:	4b29      	ldr	r3, [pc, #164]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b592:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	4926      	ldr	r1, [pc, #152]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d01d      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00e      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5be:	d009      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5c8:	d004      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5ca:	f44f 7191 	mov.w	r1, #290	; 0x122
 800b5ce:	481a      	ldr	r0, [pc, #104]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b5d0:	f7fc fa5d 	bl	8007a8e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b5d4:	4b17      	ldr	r3, [pc, #92]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	4914      	ldr	r1, [pc, #80]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d022      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00e      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b606:	d009      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a1b      	ldr	r3, [r3, #32]
 800b60c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b610:	d004      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800b612:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b616:	4808      	ldr	r0, [pc, #32]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b618:	f7fc fa39 	bl	8007a8e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b61c:	4b05      	ldr	r3, [pc, #20]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b622:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	4902      	ldr	r1, [pc, #8]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b62c:	4313      	orrs	r3, r2
 800b62e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b632:	e003      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b634:	40021000 	.word	0x40021000
 800b638:	08011b24 	.word	0x08011b24
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01d      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x512>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b658:	d009      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x512>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b662:	d004      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x512>
 800b664:	f44f 719b 	mov.w	r1, #310	; 0x136
 800b668:	489e      	ldr	r0, [pc, #632]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b66a:	f7fc fa10 	bl	8007a8e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b66e:	4b9e      	ldr	r3, [pc, #632]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	499a      	ldr	r1, [pc, #616]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b67e:	4313      	orrs	r3, r2
 800b680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d01b      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b694:	2b00      	cmp	r3, #0
 800b696:	d00c      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d008      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d004      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800b6a8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800b6ac:	488d      	ldr	r0, [pc, #564]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b6ae:	f7fc f9ee 	bl	8007a8e <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b6b2:	4b8d      	ldr	r3, [pc, #564]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b6b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6b8:	f023 0203 	bic.w	r2, r3, #3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c0:	4989      	ldr	r1, [pc, #548]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d022      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d013      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b6e4:	d00e      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b6ee:	d009      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b6f8:	d004      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800b6fa:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b6fe:	4879      	ldr	r0, [pc, #484]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b700:	f7fc f9c5 	bl	8007a8e <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b704:	4b78      	ldr	r3, [pc, #480]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b70a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b712:	4975      	ldr	r1, [pc, #468]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b714:	4313      	orrs	r3, r2
 800b716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b722:	2b00      	cmp	r3, #0
 800b724:	d02d      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d013      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b736:	d00e      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b740:	d009      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b74a:	d004      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800b74c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b750:	4864      	ldr	r0, [pc, #400]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b752:	f7fc f99c 	bl	8007a8e <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b756:	4b64      	ldr	r3, [pc, #400]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b75c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b764:	4960      	ldr	r1, [pc, #384]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b766:	4313      	orrs	r3, r2
 800b768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b774:	d105      	bne.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x626>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b776:	4b5c      	ldr	r3, [pc, #368]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	4a5b      	ldr	r2, [pc, #364]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b77c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b780:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d02d      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b792:	2b00      	cmp	r3, #0
 800b794:	d013      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b79e:	d00e      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b7a8:	d009      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b7b2:	d004      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b7b4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800b7b8:	484a      	ldr	r0, [pc, #296]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b7ba:	f7fc f968 	bl	8007a8e <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b7be:	4b4a      	ldr	r3, [pc, #296]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7cc:	4946      	ldr	r1, [pc, #280]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7dc:	d105      	bne.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7de:	4b42      	ldr	r3, [pc, #264]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	4a41      	ldr	r2, [pc, #260]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b7e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7e8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d028      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00e      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b806:	d009      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b810:	d004      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800b812:	f240 1179 	movw	r1, #377	; 0x179
 800b816:	4833      	ldr	r0, [pc, #204]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b818:	f7fc f939 	bl	8007a8e <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b81c:	4b32      	ldr	r3, [pc, #200]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b822:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	492f      	ldr	r1, [pc, #188]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b82c:	4313      	orrs	r3, r2
 800b82e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b83a:	d105      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b83c:	4b2a      	ldr	r3, [pc, #168]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	4a29      	ldr	r2, [pc, #164]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b846:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d023      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x740>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d009      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b864:	d004      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800b866:	f240 118b 	movw	r1, #395	; 0x18b
 800b86a:	481e      	ldr	r0, [pc, #120]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b86c:	f7fc f90f 	bl	8007a8e <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b870:	4b1d      	ldr	r3, [pc, #116]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b876:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87e:	491a      	ldr	r1, [pc, #104]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b880:	4313      	orrs	r3, r2
 800b882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b88e:	d105      	bne.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b890:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	4a14      	ldr	r2, [pc, #80]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b89a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d028      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d009      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8b8:	d004      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800b8ba:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800b8be:	4809      	ldr	r0, [pc, #36]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b8c0:	f7fc f8e5 	bl	8007a8e <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8c4:	4b08      	ldr	r3, [pc, #32]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d2:	4905      	ldr	r1, [pc, #20]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8e2:	e003      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x790>
 800b8e4:	08011b24 	.word	0x08011b24
 800b8e8:	40021000 	.word	0x40021000
 800b8ec:	d105      	bne.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8ee:	4b4c      	ldr	r3, [pc, #304]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	4a4b      	ldr	r2, [pc, #300]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b8f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b902:	2b00      	cmp	r3, #0
 800b904:	d028      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00e      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b916:	d009      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b920:	d004      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800b922:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800b926:	483f      	ldr	r0, [pc, #252]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800b928:	f7fc f8b1 	bl	8007a8e <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b92c:	4b3c      	ldr	r3, [pc, #240]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b932:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b93a:	4939      	ldr	r1, [pc, #228]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b94a:	d105      	bne.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b94c:	4b34      	ldr	r3, [pc, #208]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	4a33      	ldr	r2, [pc, #204]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b956:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d028      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00e      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b974:	d009      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b97a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b97e:	d004      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800b980:	f240 11b9 	movw	r1, #441	; 0x1b9
 800b984:	4827      	ldr	r0, [pc, #156]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800b986:	f7fc f882 	bl	8007a8e <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b98a:	4b25      	ldr	r3, [pc, #148]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b990:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b998:	4921      	ldr	r1, [pc, #132]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9a8:	d105      	bne.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b9aa:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	4a1c      	ldr	r2, [pc, #112]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b9b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9b4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d028      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9ca:	d00d      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d009      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9dc:	d004      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b9de:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800b9e2:	4810      	ldr	r0, [pc, #64]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800b9e4:	f7fc f853 	bl	8007a8e <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b9ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f6:	490a      	ldr	r1, [pc, #40]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba06:	d105      	bne.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba08:	4b05      	ldr	r3, [pc, #20]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	4a04      	ldr	r2, [pc, #16]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ba0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ba14:	7cbb      	ldrb	r3, [r7, #18]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	40021000 	.word	0x40021000
 800ba24:	08011b24 	.word	0x08011b24

0800ba28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e1ed      	b.n	800be16 <HAL_SPI_Init+0x3ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a7e      	ldr	r2, [pc, #504]	; (800bc38 <HAL_SPI_Init+0x210>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d013      	beq.n	800ba6c <HAL_SPI_Init+0x44>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a7c      	ldr	r2, [pc, #496]	; (800bc3c <HAL_SPI_Init+0x214>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d00e      	beq.n	800ba6c <HAL_SPI_Init+0x44>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a7b      	ldr	r2, [pc, #492]	; (800bc40 <HAL_SPI_Init+0x218>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d009      	beq.n	800ba6c <HAL_SPI_Init+0x44>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a79      	ldr	r2, [pc, #484]	; (800bc44 <HAL_SPI_Init+0x21c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d004      	beq.n	800ba6c <HAL_SPI_Init+0x44>
 800ba62:	f240 1145 	movw	r1, #325	; 0x145
 800ba66:	4878      	ldr	r0, [pc, #480]	; (800bc48 <HAL_SPI_Init+0x220>)
 800ba68:	f7fc f811 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d009      	beq.n	800ba88 <HAL_SPI_Init+0x60>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba7c:	d004      	beq.n	800ba88 <HAL_SPI_Init+0x60>
 800ba7e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800ba82:	4871      	ldr	r0, [pc, #452]	; (800bc48 <HAL_SPI_Init+0x220>)
 800ba84:	f7fc f803 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00e      	beq.n	800baae <HAL_SPI_Init+0x86>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba98:	d009      	beq.n	800baae <HAL_SPI_Init+0x86>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baa2:	d004      	beq.n	800baae <HAL_SPI_Init+0x86>
 800baa4:	f240 1147 	movw	r1, #327	; 0x147
 800baa8:	4867      	ldr	r0, [pc, #412]	; (800bc48 <HAL_SPI_Init+0x220>)
 800baaa:	f7fb fff0 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bab6:	d040      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800bac0:	d03b      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 800baca:	d036      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bad4:	d031      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800bade:	d02c      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800bae8:	d027      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800baf2:	d022      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bafc:	d01d      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb06:	d018      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bb10:	d013      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800bb1a:	d00e      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb24:	d009      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb2e:	d004      	beq.n	800bb3a <HAL_SPI_Init+0x112>
 800bb30:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800bb34:	4844      	ldr	r0, [pc, #272]	; (800bc48 <HAL_SPI_Init+0x220>)
 800bb36:	f7fb ffaa 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb42:	d00d      	beq.n	800bb60 <HAL_SPI_Init+0x138>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d009      	beq.n	800bb60 <HAL_SPI_Init+0x138>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb54:	d004      	beq.n	800bb60 <HAL_SPI_Init+0x138>
 800bb56:	f240 1149 	movw	r1, #329	; 0x149
 800bb5a:	483b      	ldr	r0, [pc, #236]	; (800bc48 <HAL_SPI_Init+0x220>)
 800bb5c:	f7fb ff97 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb64:	2b08      	cmp	r3, #8
 800bb66:	d008      	beq.n	800bb7a <HAL_SPI_Init+0x152>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <HAL_SPI_Init+0x152>
 800bb70:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800bb74:	4834      	ldr	r0, [pc, #208]	; (800bc48 <HAL_SPI_Init+0x220>)
 800bb76:	f7fb ff8a 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d020      	beq.n	800bbc4 <HAL_SPI_Init+0x19c>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	2b08      	cmp	r3, #8
 800bb88:	d01c      	beq.n	800bbc4 <HAL_SPI_Init+0x19c>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	2b10      	cmp	r3, #16
 800bb90:	d018      	beq.n	800bbc4 <HAL_SPI_Init+0x19c>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	2b18      	cmp	r3, #24
 800bb98:	d014      	beq.n	800bbc4 <HAL_SPI_Init+0x19c>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	2b20      	cmp	r3, #32
 800bba0:	d010      	beq.n	800bbc4 <HAL_SPI_Init+0x19c>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	2b28      	cmp	r3, #40	; 0x28
 800bba8:	d00c      	beq.n	800bbc4 <HAL_SPI_Init+0x19c>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	2b30      	cmp	r3, #48	; 0x30
 800bbb0:	d008      	beq.n	800bbc4 <HAL_SPI_Init+0x19c>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	2b38      	cmp	r3, #56	; 0x38
 800bbb8:	d004      	beq.n	800bbc4 <HAL_SPI_Init+0x19c>
 800bbba:	f240 114b 	movw	r1, #331	; 0x14b
 800bbbe:	4822      	ldr	r0, [pc, #136]	; (800bc48 <HAL_SPI_Init+0x220>)
 800bbc0:	f7fb ff65 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a1b      	ldr	r3, [r3, #32]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d008      	beq.n	800bbde <HAL_SPI_Init+0x1b6>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	2b80      	cmp	r3, #128	; 0x80
 800bbd2:	d004      	beq.n	800bbde <HAL_SPI_Init+0x1b6>
 800bbd4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800bbd8:	481b      	ldr	r0, [pc, #108]	; (800bc48 <HAL_SPI_Init+0x220>)
 800bbda:	f7fb ff58 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <HAL_SPI_Init+0x1d0>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b10      	cmp	r3, #16
 800bbec:	d004      	beq.n	800bbf8 <HAL_SPI_Init+0x1d0>
 800bbee:	f240 114d 	movw	r1, #333	; 0x14d
 800bbf2:	4815      	ldr	r0, [pc, #84]	; (800bc48 <HAL_SPI_Init+0x220>)
 800bbf4:	f7fb ff4b 	bl	8007a8e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d154      	bne.n	800bcaa <HAL_SPI_Init+0x282>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d008      	beq.n	800bc1a <HAL_SPI_Init+0x1f2>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d004      	beq.n	800bc1a <HAL_SPI_Init+0x1f2>
 800bc10:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800bc14:	480c      	ldr	r0, [pc, #48]	; (800bc48 <HAL_SPI_Init+0x220>)
 800bc16:	f7fb ff3a 	bl	8007a8e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d014      	beq.n	800bc4c <HAL_SPI_Init+0x224>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	695b      	ldr	r3, [r3, #20]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d010      	beq.n	800bc4c <HAL_SPI_Init+0x224>
 800bc2a:	f240 1151 	movw	r1, #337	; 0x151
 800bc2e:	4806      	ldr	r0, [pc, #24]	; (800bc48 <HAL_SPI_Init+0x220>)
 800bc30:	f7fb ff2d 	bl	8007a8e <assert_failed>
 800bc34:	e00a      	b.n	800bc4c <HAL_SPI_Init+0x224>
 800bc36:	bf00      	nop
 800bc38:	40013000 	.word	0x40013000
 800bc3c:	40003800 	.word	0x40003800
 800bc40:	40003c00 	.word	0x40003c00
 800bc44:	40013c00 	.word	0x40013c00
 800bc48:	08011b60 	.word	0x08011b60

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc54:	d125      	bne.n	800bca2 <HAL_SPI_Init+0x27a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	69db      	ldr	r3, [r3, #28]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d050      	beq.n	800bd00 <HAL_SPI_Init+0x2d8>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	69db      	ldr	r3, [r3, #28]
 800bc62:	2b08      	cmp	r3, #8
 800bc64:	d04c      	beq.n	800bd00 <HAL_SPI_Init+0x2d8>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	69db      	ldr	r3, [r3, #28]
 800bc6a:	2b10      	cmp	r3, #16
 800bc6c:	d048      	beq.n	800bd00 <HAL_SPI_Init+0x2d8>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	2b18      	cmp	r3, #24
 800bc74:	d044      	beq.n	800bd00 <HAL_SPI_Init+0x2d8>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	2b20      	cmp	r3, #32
 800bc7c:	d040      	beq.n	800bd00 <HAL_SPI_Init+0x2d8>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	69db      	ldr	r3, [r3, #28]
 800bc82:	2b28      	cmp	r3, #40	; 0x28
 800bc84:	d03c      	beq.n	800bd00 <HAL_SPI_Init+0x2d8>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	2b30      	cmp	r3, #48	; 0x30
 800bc8c:	d038      	beq.n	800bd00 <HAL_SPI_Init+0x2d8>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	2b38      	cmp	r3, #56	; 0x38
 800bc94:	d034      	beq.n	800bd00 <HAL_SPI_Init+0x2d8>
 800bc96:	f240 1155 	movw	r1, #341	; 0x155
 800bc9a:	4861      	ldr	r0, [pc, #388]	; (800be20 <HAL_SPI_Init+0x3f8>)
 800bc9c:	f7fb fef7 	bl	8007a8e <assert_failed>
 800bca0:	e02e      	b.n	800bd00 <HAL_SPI_Init+0x2d8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	61da      	str	r2, [r3, #28]
 800bca8:	e02a      	b.n	800bd00 <HAL_SPI_Init+0x2d8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	69db      	ldr	r3, [r3, #28]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d020      	beq.n	800bcf4 <HAL_SPI_Init+0x2cc>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	69db      	ldr	r3, [r3, #28]
 800bcb6:	2b08      	cmp	r3, #8
 800bcb8:	d01c      	beq.n	800bcf4 <HAL_SPI_Init+0x2cc>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	2b10      	cmp	r3, #16
 800bcc0:	d018      	beq.n	800bcf4 <HAL_SPI_Init+0x2cc>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	2b18      	cmp	r3, #24
 800bcc8:	d014      	beq.n	800bcf4 <HAL_SPI_Init+0x2cc>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	d010      	beq.n	800bcf4 <HAL_SPI_Init+0x2cc>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	2b28      	cmp	r3, #40	; 0x28
 800bcd8:	d00c      	beq.n	800bcf4 <HAL_SPI_Init+0x2cc>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	2b30      	cmp	r3, #48	; 0x30
 800bce0:	d008      	beq.n	800bcf4 <HAL_SPI_Init+0x2cc>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	2b38      	cmp	r3, #56	; 0x38
 800bce8:	d004      	beq.n	800bcf4 <HAL_SPI_Init+0x2cc>
 800bcea:	f240 115f 	movw	r1, #351	; 0x15f
 800bcee:	484c      	ldr	r0, [pc, #304]	; (800be20 <HAL_SPI_Init+0x3f8>)
 800bcf0:	f7fb fecd 	bl	8007a8e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <HAL_SPI_Init+0x2f8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7fb ff00 	bl	8007b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2202      	movs	r2, #2
 800bd24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd40:	d902      	bls.n	800bd48 <HAL_SPI_Init+0x320>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e002      	b.n	800bd4e <HAL_SPI_Init+0x326>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bd56:	d007      	beq.n	800bd68 <HAL_SPI_Init+0x340>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd60:	d002      	beq.n	800bd68 <HAL_SPI_Init+0x340>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	f003 0302 	and.w	r3, r3, #2
 800bd82:	431a      	orrs	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	f003 0301 	and.w	r3, r3, #1
 800bd8c:	431a      	orrs	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd96:	431a      	orrs	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	69db      	ldr	r3, [r3, #28]
 800bd9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bda0:	431a      	orrs	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdaa:	ea42 0103 	orr.w	r1, r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	0c1b      	lsrs	r3, r3, #16
 800bdc4:	f003 0204 	and.w	r2, r3, #4
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdcc:	f003 0310 	and.w	r3, r3, #16
 800bdd0:	431a      	orrs	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd6:	f003 0308 	and.w	r3, r3, #8
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bde4:	ea42 0103 	orr.w	r1, r2, r3
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	69da      	ldr	r2, [r3, #28]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	08011b60 	.word	0x08011b60

0800be24 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	4613      	mov	r3, r2
 800be30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	75fb      	strb	r3, [r7, #23]

  /* Check tx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d104      	bne.n	800be48 <HAL_SPI_Transmit_DMA+0x24>
 800be3e:	f240 7145 	movw	r1, #1861	; 0x745
 800be42:	487a      	ldr	r0, [pc, #488]	; (800c02c <HAL_SPI_Transmit_DMA+0x208>)
 800be44:	f7fb fe23 	bl	8007a8e <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d009      	beq.n	800be64 <HAL_SPI_Transmit_DMA+0x40>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be58:	d004      	beq.n	800be64 <HAL_SPI_Transmit_DMA+0x40>
 800be5a:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 800be5e:	4873      	ldr	r0, [pc, #460]	; (800c02c <HAL_SPI_Transmit_DMA+0x208>)
 800be60:	f7fb fe15 	bl	8007a8e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d101      	bne.n	800be72 <HAL_SPI_Transmit_DMA+0x4e>
 800be6e:	2302      	movs	r3, #2
 800be70:	e0d8      	b.n	800c024 <HAL_SPI_Transmit_DMA+0x200>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b01      	cmp	r3, #1
 800be84:	d002      	beq.n	800be8c <HAL_SPI_Transmit_DMA+0x68>
  {
    errorcode = HAL_BUSY;
 800be86:	2302      	movs	r3, #2
 800be88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be8a:	e0c6      	b.n	800c01a <HAL_SPI_Transmit_DMA+0x1f6>
  }

  if ((pData == NULL) || (Size == 0U))
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d002      	beq.n	800be98 <HAL_SPI_Transmit_DMA+0x74>
 800be92:	88fb      	ldrh	r3, [r7, #6]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d102      	bne.n	800be9e <HAL_SPI_Transmit_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be9c:	e0bd      	b.n	800c01a <HAL_SPI_Transmit_DMA+0x1f6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2203      	movs	r2, #3
 800bea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	88fa      	ldrh	r2, [r7, #6]
 800beb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	88fa      	ldrh	r2, [r7, #6]
 800bebc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bee8:	d10f      	bne.n	800bf0a <HAL_SPI_Transmit_DMA+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bef8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0e:	4a48      	ldr	r2, [pc, #288]	; (800c030 <HAL_SPI_Transmit_DMA+0x20c>)
 800bf10:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf16:	4a47      	ldr	r2, [pc, #284]	; (800c034 <HAL_SPI_Transmit_DMA+0x210>)
 800bf18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf1e:	4a46      	ldr	r2, [pc, #280]	; (800c038 <HAL_SPI_Transmit_DMA+0x214>)
 800bf20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf26:	2200      	movs	r2, #0
 800bf28:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf38:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf42:	d82d      	bhi.n	800bfa0 <HAL_SPI_Transmit_DMA+0x17c>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf48:	699b      	ldr	r3, [r3, #24]
 800bf4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf4e:	d127      	bne.n	800bfa0 <HAL_SPI_Transmit_DMA+0x17c>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10f      	bne.n	800bf7e <HAL_SPI_Transmit_DMA+0x15a>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf6c:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	085b      	lsrs	r3, r3, #1
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf7c:	e010      	b.n	800bfa0 <HAL_SPI_Transmit_DMA+0x17c>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf8c:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	085b      	lsrs	r3, r3, #1
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	3301      	adds	r3, #1
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	330c      	adds	r3, #12
 800bfb0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bfb8:	f7fc fb02 	bl	80085c0 <HAL_DMA_Start_IT>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00c      	beq.n	800bfdc <HAL_SPI_Transmit_DMA+0x1b8>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfc6:	f043 0210 	orr.w	r2, r3, #16
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800bfda:	e01e      	b.n	800c01a <HAL_SPI_Transmit_DMA+0x1f6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe6:	2b40      	cmp	r3, #64	; 0x40
 800bfe8:	d007      	beq.n	800bffa <HAL_SPI_Transmit_DMA+0x1d6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bff8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	685a      	ldr	r2, [r3, #4]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f042 0220 	orr.w	r2, r2, #32
 800c008:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f042 0202 	orr.w	r2, r2, #2
 800c018:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c022:	7dfb      	ldrb	r3, [r7, #23]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	08011b60 	.word	0x08011b60
 800c030:	0800c5d3 	.word	0x0800c5d3
 800c034:	0800c3f5 	.word	0x0800c3f5
 800c038:	0800c627 	.word	0x0800c627

0800c03c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	75fb      	strb	r3, [r7, #23]

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c052:	2b00      	cmp	r3, #0
 800c054:	d104      	bne.n	800c060 <HAL_SPI_TransmitReceive_DMA+0x24>
 800c056:	f640 0156 	movw	r1, #2134	; 0x856
 800c05a:	4880      	ldr	r0, [pc, #512]	; (800c25c <HAL_SPI_TransmitReceive_DMA+0x220>)
 800c05c:	f7fb fd17 	bl	8007a8e <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c064:	2b00      	cmp	r3, #0
 800c066:	d104      	bne.n	800c072 <HAL_SPI_TransmitReceive_DMA+0x36>
 800c068:	f640 0157 	movw	r1, #2135	; 0x857
 800c06c:	487b      	ldr	r0, [pc, #492]	; (800c25c <HAL_SPI_TransmitReceive_DMA+0x220>)
 800c06e:	f7fb fd0e 	bl	8007a8e <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d004      	beq.n	800c084 <HAL_SPI_TransmitReceive_DMA+0x48>
 800c07a:	f640 015a 	movw	r1, #2138	; 0x85a
 800c07e:	4877      	ldr	r0, [pc, #476]	; (800c25c <HAL_SPI_TransmitReceive_DMA+0x220>)
 800c080:	f7fb fd05 	bl	8007a8e <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d101      	bne.n	800c092 <HAL_SPI_TransmitReceive_DMA+0x56>
 800c08e:	2302      	movs	r3, #2
 800c090:	e173      	b.n	800c37a <HAL_SPI_TransmitReceive_DMA+0x33e>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c0a0:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c0a8:	7dbb      	ldrb	r3, [r7, #22]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d00d      	beq.n	800c0ca <HAL_SPI_TransmitReceive_DMA+0x8e>
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0b4:	d106      	bne.n	800c0c4 <HAL_SPI_TransmitReceive_DMA+0x88>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d102      	bne.n	800c0c4 <HAL_SPI_TransmitReceive_DMA+0x88>
 800c0be:	7dbb      	ldrb	r3, [r7, #22]
 800c0c0:	2b04      	cmp	r3, #4
 800c0c2:	d002      	beq.n	800c0ca <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_BUSY;
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0c8:	e152      	b.n	800c370 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d005      	beq.n	800c0dc <HAL_SPI_TransmitReceive_DMA+0xa0>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <HAL_SPI_TransmitReceive_DMA+0xa0>
 800c0d6:	887b      	ldrh	r3, [r7, #2]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d102      	bne.n	800c0e2 <HAL_SPI_TransmitReceive_DMA+0xa6>
  {
    errorcode = HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0e0:	e146      	b.n	800c370 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b04      	cmp	r3, #4
 800c0ec:	d003      	beq.n	800c0f6 <HAL_SPI_TransmitReceive_DMA+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2205      	movs	r2, #5
 800c0f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	887a      	ldrh	r2, [r7, #2]
 800c106:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	887a      	ldrh	r2, [r7, #2]
 800c10c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	887a      	ldrh	r2, [r7, #2]
 800c118:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	887a      	ldrh	r2, [r7, #2]
 800c120:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c13e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c148:	d908      	bls.n	800c15c <HAL_SPI_TransmitReceive_DMA+0x120>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c158:	605a      	str	r2, [r3, #4]
 800c15a:	e06f      	b.n	800c23c <HAL_SPI_TransmitReceive_DMA+0x200>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	685a      	ldr	r2, [r3, #4]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c16a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c176:	d126      	bne.n	800c1c6 <HAL_SPI_TransmitReceive_DMA+0x18a>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10f      	bne.n	800c1a4 <HAL_SPI_TransmitReceive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c192:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c198:	b29b      	uxth	r3, r3
 800c19a:	085b      	lsrs	r3, r3, #1
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c1a2:	e010      	b.n	800c1c6 <HAL_SPI_TransmitReceive_DMA+0x18a>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1b2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	085b      	lsrs	r3, r3, #1
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	3301      	adds	r3, #1
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1d0:	d134      	bne.n	800c23c <HAL_SPI_TransmitReceive_DMA+0x200>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c1e0:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	f003 0301 	and.w	r3, r3, #1
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d111      	bne.n	800c216 <HAL_SPI_TransmitReceive_DMA+0x1da>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c200:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c208:	b29b      	uxth	r3, r3
 800c20a:	085b      	lsrs	r3, r3, #1
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c214:	e012      	b.n	800c23c <HAL_SPI_TransmitReceive_DMA+0x200>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c224:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	085b      	lsrs	r3, r3, #1
 800c230:	b29b      	uxth	r3, r3
 800c232:	3301      	adds	r3, #1
 800c234:	b29a      	uxth	r2, r3
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b04      	cmp	r3, #4
 800c246:	d10f      	bne.n	800c268 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c24c:	4a04      	ldr	r2, [pc, #16]	; (800c260 <HAL_SPI_TransmitReceive_DMA+0x224>)
 800c24e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c254:	4a03      	ldr	r2, [pc, #12]	; (800c264 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800c256:	62da      	str	r2, [r3, #44]	; 0x2c
 800c258:	e00e      	b.n	800c278 <HAL_SPI_TransmitReceive_DMA+0x23c>
 800c25a:	bf00      	nop
 800c25c:	08011b60 	.word	0x08011b60
 800c260:	0800c5ef 	.word	0x0800c5ef
 800c264:	0800c49b 	.word	0x0800c49b
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c26c:	4a45      	ldr	r2, [pc, #276]	; (800c384 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800c26e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c274:	4a44      	ldr	r2, [pc, #272]	; (800c388 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 800c276:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c27c:	4a43      	ldr	r2, [pc, #268]	; (800c38c <HAL_SPI_TransmitReceive_DMA+0x350>)
 800c27e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c284:	2200      	movs	r2, #0
 800c286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	330c      	adds	r3, #12
 800c292:	4619      	mov	r1, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c298:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c2a2:	f7fc f98d 	bl	80085c0 <HAL_DMA_Start_IT>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00c      	beq.n	800c2c6 <HAL_SPI_TransmitReceive_DMA+0x28a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2b0:	f043 0210 	orr.w	r2, r3, #16
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c2c4:	e054      	b.n	800c370 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f042 0201 	orr.w	r2, r2, #1
 800c2d4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2da:	2200      	movs	r2, #0
 800c2dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	4619      	mov	r1, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	330c      	adds	r3, #12
 800c306:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c30c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c30e:	f7fc f957 	bl	80085c0 <HAL_DMA_Start_IT>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00c      	beq.n	800c332 <HAL_SPI_TransmitReceive_DMA+0x2f6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c31c:	f043 0210 	orr.w	r2, r3, #16
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c324:	2301      	movs	r3, #1
 800c326:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c330:	e01e      	b.n	800c370 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33c:	2b40      	cmp	r3, #64	; 0x40
 800c33e:	d007      	beq.n	800c350 <HAL_SPI_TransmitReceive_DMA+0x314>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c34e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f042 0220 	orr.w	r2, r2, #32
 800c35e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f042 0202 	orr.w	r2, r2, #2
 800c36e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c378:	7dfb      	ldrb	r3, [r7, #23]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3718      	adds	r7, #24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	0800c60b 	.word	0x0800c60b
 800c388:	0800c543 	.word	0x0800c543
 800c38c:	0800c627 	.word	0x0800c627

0800c390 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c400:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c402:	f7fb fe29 	bl	8008058 <HAL_GetTick>
 800c406:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 0320 	and.w	r3, r3, #32
 800c412:	2b20      	cmp	r3, #32
 800c414:	d03b      	beq.n	800c48e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f022 0220 	bic.w	r2, r2, #32
 800c424:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f022 0202 	bic.w	r2, r2, #2
 800c434:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	2164      	movs	r1, #100	; 0x64
 800c43a:	6978      	ldr	r0, [r7, #20]
 800c43c:	f000 fa8a 	bl	800c954 <SPI_EndRxTxTransaction>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d005      	beq.n	800c452 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c44a:	f043 0220 	orr.w	r2, r3, #32
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10a      	bne.n	800c470 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c45a:	2300      	movs	r3, #0
 800c45c:	60fb      	str	r3, [r7, #12]
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	2200      	movs	r2, #0
 800c474:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	2201      	movs	r2, #1
 800c47a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c486:	6978      	ldr	r0, [r7, #20]
 800c488:	f7ff ffaa 	bl	800c3e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c48c:	e002      	b.n	800c494 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c48e:	6978      	ldr	r0, [r7, #20]
 800c490:	f7fa fdfe 	bl	8007090 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c494:	3718      	adds	r7, #24
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4a8:	f7fb fdd6 	bl	8008058 <HAL_GetTick>
 800c4ac:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0320 	and.w	r3, r3, #32
 800c4b8:	2b20      	cmp	r3, #32
 800c4ba:	d03c      	beq.n	800c536 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0220 	bic.w	r2, r2, #32
 800c4ca:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10d      	bne.n	800c4f0 <SPI_DMAReceiveCplt+0x56>
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4dc:	d108      	bne.n	800c4f0 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	685a      	ldr	r2, [r3, #4]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f022 0203 	bic.w	r2, r2, #3
 800c4ec:	605a      	str	r2, [r3, #4]
 800c4ee:	e007      	b.n	800c500 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0201 	bic.w	r2, r2, #1
 800c4fe:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	2164      	movs	r1, #100	; 0x64
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f000 f9cd 	bl	800c8a4 <SPI_EndRxTransaction>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2220      	movs	r2, #32
 800c514:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2201      	movs	r2, #1
 800c522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d003      	beq.n	800c536 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f7ff ff56 	bl	800c3e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c534:	e002      	b.n	800c53c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7ff ff2a 	bl	800c390 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c550:	f7fb fd82 	bl	8008058 <HAL_GetTick>
 800c554:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 0320 	and.w	r3, r3, #32
 800c560:	2b20      	cmp	r3, #32
 800c562:	d030      	beq.n	800c5c6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	685a      	ldr	r2, [r3, #4]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f022 0220 	bic.w	r2, r2, #32
 800c572:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	2164      	movs	r1, #100	; 0x64
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f000 f9eb 	bl	800c954 <SPI_EndRxTxTransaction>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d005      	beq.n	800c590 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c588:	f043 0220 	orr.w	r2, r3, #32
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f022 0203 	bic.w	r2, r2, #3
 800c59e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d003      	beq.n	800c5c6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f7ff ff0e 	bl	800c3e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c5c4:	e002      	b.n	800c5cc <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f7fa fd70 	bl	80070ac <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5de:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f7ff fedf 	bl	800c3a4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5e6:	bf00      	nop
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f7ff fedb 	bl	800c3b8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c602:	bf00      	nop
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b084      	sub	sp, #16
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c616:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7ff fed7 	bl	800c3cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b084      	sub	sp, #16
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c632:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f022 0203 	bic.w	r2, r2, #3
 800c642:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c648:	f043 0210 	orr.w	r2, r3, #16
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7ff fec1 	bl	800c3e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c65e:	bf00      	nop
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
	...

0800c668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	603b      	str	r3, [r7, #0]
 800c674:	4613      	mov	r3, r2
 800c676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c678:	f7fb fcee 	bl	8008058 <HAL_GetTick>
 800c67c:	4602      	mov	r2, r0
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	1a9b      	subs	r3, r3, r2
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	4413      	add	r3, r2
 800c686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c688:	f7fb fce6 	bl	8008058 <HAL_GetTick>
 800c68c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c68e:	4b39      	ldr	r3, [pc, #228]	; (800c774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	015b      	lsls	r3, r3, #5
 800c694:	0d1b      	lsrs	r3, r3, #20
 800c696:	69fa      	ldr	r2, [r7, #28]
 800c698:	fb02 f303 	mul.w	r3, r2, r3
 800c69c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c69e:	e054      	b.n	800c74a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6a6:	d050      	beq.n	800c74a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c6a8:	f7fb fcd6 	bl	8008058 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	69fa      	ldr	r2, [r7, #28]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d902      	bls.n	800c6be <SPI_WaitFlagStateUntilTimeout+0x56>
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d13d      	bne.n	800c73a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c6cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6d6:	d111      	bne.n	800c6fc <SPI_WaitFlagStateUntilTimeout+0x94>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6e0:	d004      	beq.n	800c6ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ea:	d107      	bne.n	800c6fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c704:	d10f      	bne.n	800c726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c714:	601a      	str	r2, [r3, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c736:	2303      	movs	r3, #3
 800c738:	e017      	b.n	800c76a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	3b01      	subs	r3, #1
 800c748:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	689a      	ldr	r2, [r3, #8]
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	4013      	ands	r3, r2
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	429a      	cmp	r2, r3
 800c758:	bf0c      	ite	eq
 800c75a:	2301      	moveq	r3, #1
 800c75c:	2300      	movne	r3, #0
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	461a      	mov	r2, r3
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	429a      	cmp	r2, r3
 800c766:	d19b      	bne.n	800c6a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3720      	adds	r7, #32
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20000a98 	.word	0x20000a98

0800c778 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08a      	sub	sp, #40	; 0x28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c78a:	f7fb fc65 	bl	8008058 <HAL_GetTick>
 800c78e:	4602      	mov	r2, r0
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	1a9b      	subs	r3, r3, r2
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	4413      	add	r3, r2
 800c798:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c79a:	f7fb fc5d 	bl	8008058 <HAL_GetTick>
 800c79e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	330c      	adds	r3, #12
 800c7a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c7a8:	4b3d      	ldr	r3, [pc, #244]	; (800c8a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4413      	add	r3, r2
 800c7b2:	00da      	lsls	r2, r3, #3
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	0d1b      	lsrs	r3, r3, #20
 800c7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ba:	fb02 f303 	mul.w	r3, r2, r3
 800c7be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c7c0:	e060      	b.n	800c884 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c7c8:	d107      	bne.n	800c7da <SPI_WaitFifoStateUntilTimeout+0x62>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d104      	bne.n	800c7da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7e0:	d050      	beq.n	800c884 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c7e2:	f7fb fc39 	bl	8008058 <HAL_GetTick>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d902      	bls.n	800c7f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d13d      	bne.n	800c874 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c806:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c810:	d111      	bne.n	800c836 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c81a:	d004      	beq.n	800c826 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c824:	d107      	bne.n	800c836 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c834:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c83e:	d10f      	bne.n	800c860 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c84e:	601a      	str	r2, [r3, #0]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c85e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e010      	b.n	800c896 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c87a:	2300      	movs	r3, #0
 800c87c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	3b01      	subs	r3, #1
 800c882:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	689a      	ldr	r2, [r3, #8]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	4013      	ands	r3, r2
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	429a      	cmp	r2, r3
 800c892:	d196      	bne.n	800c7c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3728      	adds	r7, #40	; 0x28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000a98 	.word	0x20000a98

0800c8a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8b8:	d111      	bne.n	800c8de <SPI_EndRxTransaction+0x3a>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8c2:	d004      	beq.n	800c8ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8cc:	d107      	bne.n	800c8de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	2180      	movs	r1, #128	; 0x80
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f7ff febd 	bl	800c668 <SPI_WaitFlagStateUntilTimeout>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d007      	beq.n	800c904 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8f8:	f043 0220 	orr.w	r2, r3, #32
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c900:	2303      	movs	r3, #3
 800c902:	e023      	b.n	800c94c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c90c:	d11d      	bne.n	800c94a <SPI_EndRxTransaction+0xa6>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c916:	d004      	beq.n	800c922 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c920:	d113      	bne.n	800c94a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2200      	movs	r2, #0
 800c92a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f7ff ff22 	bl	800c778 <SPI_WaitFifoStateUntilTimeout>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d007      	beq.n	800c94a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c93e:	f043 0220 	orr.w	r2, r3, #32
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c946:	2303      	movs	r3, #3
 800c948:	e000      	b.n	800c94c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af02      	add	r7, sp, #8
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2200      	movs	r2, #0
 800c968:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f7ff ff03 	bl	800c778 <SPI_WaitFifoStateUntilTimeout>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d007      	beq.n	800c988 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c97c:	f043 0220 	orr.w	r2, r3, #32
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c984:	2303      	movs	r3, #3
 800c986:	e027      	b.n	800c9d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2200      	movs	r2, #0
 800c990:	2180      	movs	r1, #128	; 0x80
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f7ff fe68 	bl	800c668 <SPI_WaitFlagStateUntilTimeout>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d007      	beq.n	800c9ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9a2:	f043 0220 	orr.w	r2, r3, #32
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e014      	b.n	800c9d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f7ff fedc 	bl	800c778 <SPI_WaitFifoStateUntilTimeout>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d007      	beq.n	800c9d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9ca:	f043 0220 	orr.w	r2, r3, #32
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e000      	b.n	800c9d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d101      	bne.n	800c9f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e0c3      	b.n	800cb7a <HAL_TIM_Base_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a63      	ldr	r2, [pc, #396]	; (800cb84 <HAL_TIM_Base_Init+0x1a4>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d03b      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca04:	d036      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a5f      	ldr	r2, [pc, #380]	; (800cb88 <HAL_TIM_Base_Init+0x1a8>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d031      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a5d      	ldr	r2, [pc, #372]	; (800cb8c <HAL_TIM_Base_Init+0x1ac>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d02c      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a5c      	ldr	r2, [pc, #368]	; (800cb90 <HAL_TIM_Base_Init+0x1b0>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d027      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a5a      	ldr	r2, [pc, #360]	; (800cb94 <HAL_TIM_Base_Init+0x1b4>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d022      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a59      	ldr	r2, [pc, #356]	; (800cb98 <HAL_TIM_Base_Init+0x1b8>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d01d      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a57      	ldr	r2, [pc, #348]	; (800cb9c <HAL_TIM_Base_Init+0x1bc>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d018      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a56      	ldr	r2, [pc, #344]	; (800cba0 <HAL_TIM_Base_Init+0x1c0>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d013      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a54      	ldr	r2, [pc, #336]	; (800cba4 <HAL_TIM_Base_Init+0x1c4>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d00e      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a53      	ldr	r2, [pc, #332]	; (800cba8 <HAL_TIM_Base_Init+0x1c8>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d009      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a51      	ldr	r2, [pc, #324]	; (800cbac <HAL_TIM_Base_Init+0x1cc>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d004      	beq.n	800ca74 <HAL_TIM_Base_Init+0x94>
 800ca6a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800ca6e:	4850      	ldr	r0, [pc, #320]	; (800cbb0 <HAL_TIM_Base_Init+0x1d0>)
 800ca70:	f7fb f80d 	bl	8007a8e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d014      	beq.n	800caa6 <HAL_TIM_Base_Init+0xc6>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	2b10      	cmp	r3, #16
 800ca82:	d010      	beq.n	800caa6 <HAL_TIM_Base_Init+0xc6>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	2b20      	cmp	r3, #32
 800ca8a:	d00c      	beq.n	800caa6 <HAL_TIM_Base_Init+0xc6>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	2b40      	cmp	r3, #64	; 0x40
 800ca92:	d008      	beq.n	800caa6 <HAL_TIM_Base_Init+0xc6>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	2b60      	cmp	r3, #96	; 0x60
 800ca9a:	d004      	beq.n	800caa6 <HAL_TIM_Base_Init+0xc6>
 800ca9c:	f240 1123 	movw	r1, #291	; 0x123
 800caa0:	4843      	ldr	r0, [pc, #268]	; (800cbb0 <HAL_TIM_Base_Init+0x1d0>)
 800caa2:	f7fa fff4 	bl	8007a8e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00e      	beq.n	800cacc <HAL_TIM_Base_Init+0xec>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cab6:	d009      	beq.n	800cacc <HAL_TIM_Base_Init+0xec>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac0:	d004      	beq.n	800cacc <HAL_TIM_Base_Init+0xec>
 800cac2:	f44f 7192 	mov.w	r1, #292	; 0x124
 800cac6:	483a      	ldr	r0, [pc, #232]	; (800cbb0 <HAL_TIM_Base_Init+0x1d0>)
 800cac8:	f7fa ffe1 	bl	8007a8e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d008      	beq.n	800cae6 <HAL_TIM_Base_Init+0x106>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	2b80      	cmp	r3, #128	; 0x80
 800cada:	d004      	beq.n	800cae6 <HAL_TIM_Base_Init+0x106>
 800cadc:	f240 1125 	movw	r1, #293	; 0x125
 800cae0:	4833      	ldr	r0, [pc, #204]	; (800cbb0 <HAL_TIM_Base_Init+0x1d0>)
 800cae2:	f7fa ffd4 	bl	8007a8e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caec:	b2db      	uxtb	r3, r3
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <HAL_TIM_Base_Init+0x120>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f85a 	bl	800cbb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4619      	mov	r1, r3
 800cb12:	4610      	mov	r0, r2
 800cb14:	f000 fac0 	bl	800d098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2201      	movs	r2, #1
 800cb44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	40012c00 	.word	0x40012c00
 800cb88:	40000400 	.word	0x40000400
 800cb8c:	40000800 	.word	0x40000800
 800cb90:	40000c00 	.word	0x40000c00
 800cb94:	40001000 	.word	0x40001000
 800cb98:	40001400 	.word	0x40001400
 800cb9c:	40013400 	.word	0x40013400
 800cba0:	40014000 	.word	0x40014000
 800cba4:	40014400 	.word	0x40014400
 800cba8:	40014800 	.word	0x40014800
 800cbac:	40015000 	.word	0x40015000
 800cbb0:	08011b98 	.word	0x08011b98

0800cbb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a4f      	ldr	r2, [pc, #316]	; (800cd14 <HAL_TIM_Base_Start_IT+0x14c>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d03b      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbe2:	d036      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a4b      	ldr	r2, [pc, #300]	; (800cd18 <HAL_TIM_Base_Start_IT+0x150>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d031      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a4a      	ldr	r2, [pc, #296]	; (800cd1c <HAL_TIM_Base_Start_IT+0x154>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d02c      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a48      	ldr	r2, [pc, #288]	; (800cd20 <HAL_TIM_Base_Start_IT+0x158>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d027      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a47      	ldr	r2, [pc, #284]	; (800cd24 <HAL_TIM_Base_Start_IT+0x15c>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d022      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a45      	ldr	r2, [pc, #276]	; (800cd28 <HAL_TIM_Base_Start_IT+0x160>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d01d      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a44      	ldr	r2, [pc, #272]	; (800cd2c <HAL_TIM_Base_Start_IT+0x164>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d018      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a42      	ldr	r2, [pc, #264]	; (800cd30 <HAL_TIM_Base_Start_IT+0x168>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d013      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a41      	ldr	r2, [pc, #260]	; (800cd34 <HAL_TIM_Base_Start_IT+0x16c>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d00e      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a3f      	ldr	r2, [pc, #252]	; (800cd38 <HAL_TIM_Base_Start_IT+0x170>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d009      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a3e      	ldr	r2, [pc, #248]	; (800cd3c <HAL_TIM_Base_Start_IT+0x174>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d004      	beq.n	800cc52 <HAL_TIM_Base_Start_IT+0x8a>
 800cc48:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cc4c:	483c      	ldr	r0, [pc, #240]	; (800cd40 <HAL_TIM_Base_Start_IT+0x178>)
 800cc4e:	f7fa ff1e 	bl	8007a8e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d001      	beq.n	800cc62 <HAL_TIM_Base_Start_IT+0x9a>
  {
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e054      	b.n	800cd0c <HAL_TIM_Base_Start_IT+0x144>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2202      	movs	r2, #2
 800cc66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	68da      	ldr	r2, [r3, #12]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f042 0201 	orr.w	r2, r2, #1
 800cc78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a25      	ldr	r2, [pc, #148]	; (800cd14 <HAL_TIM_Base_Start_IT+0x14c>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d022      	beq.n	800ccca <HAL_TIM_Base_Start_IT+0x102>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc8c:	d01d      	beq.n	800ccca <HAL_TIM_Base_Start_IT+0x102>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a21      	ldr	r2, [pc, #132]	; (800cd18 <HAL_TIM_Base_Start_IT+0x150>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d018      	beq.n	800ccca <HAL_TIM_Base_Start_IT+0x102>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a1f      	ldr	r2, [pc, #124]	; (800cd1c <HAL_TIM_Base_Start_IT+0x154>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d013      	beq.n	800ccca <HAL_TIM_Base_Start_IT+0x102>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a1e      	ldr	r2, [pc, #120]	; (800cd20 <HAL_TIM_Base_Start_IT+0x158>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d00e      	beq.n	800ccca <HAL_TIM_Base_Start_IT+0x102>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a1e      	ldr	r2, [pc, #120]	; (800cd2c <HAL_TIM_Base_Start_IT+0x164>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d009      	beq.n	800ccca <HAL_TIM_Base_Start_IT+0x102>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a1d      	ldr	r2, [pc, #116]	; (800cd30 <HAL_TIM_Base_Start_IT+0x168>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d004      	beq.n	800ccca <HAL_TIM_Base_Start_IT+0x102>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a1d      	ldr	r2, [pc, #116]	; (800cd3c <HAL_TIM_Base_Start_IT+0x174>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d115      	bne.n	800ccf6 <HAL_TIM_Base_Start_IT+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	689a      	ldr	r2, [r3, #8]
 800ccd0:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <HAL_TIM_Base_Start_IT+0x17c>)
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2b06      	cmp	r3, #6
 800ccda:	d015      	beq.n	800cd08 <HAL_TIM_Base_Start_IT+0x140>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cce2:	d011      	beq.n	800cd08 <HAL_TIM_Base_Start_IT+0x140>
    {
      __HAL_TIM_ENABLE(htim);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f042 0201 	orr.w	r2, r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccf4:	e008      	b.n	800cd08 <HAL_TIM_Base_Start_IT+0x140>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f042 0201 	orr.w	r2, r2, #1
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	e000      	b.n	800cd0a <HAL_TIM_Base_Start_IT+0x142>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	40012c00 	.word	0x40012c00
 800cd18:	40000400 	.word	0x40000400
 800cd1c:	40000800 	.word	0x40000800
 800cd20:	40000c00 	.word	0x40000c00
 800cd24:	40001000 	.word	0x40001000
 800cd28:	40001400 	.word	0x40001400
 800cd2c:	40013400 	.word	0x40013400
 800cd30:	40014000 	.word	0x40014000
 800cd34:	40014400 	.word	0x40014400
 800cd38:	40014800 	.word	0x40014800
 800cd3c:	40015000 	.word	0x40015000
 800cd40:	08011b98 	.word	0x08011b98
 800cd44:	00010007 	.word	0x00010007

0800cd48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	f003 0302 	and.w	r3, r3, #2
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d122      	bne.n	800cda4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	f003 0302 	and.w	r3, r3, #2
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d11b      	bne.n	800cda4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f06f 0202 	mvn.w	r2, #2
 800cd74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	f003 0303 	and.w	r3, r3, #3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 f965 	bl	800d05a <HAL_TIM_IC_CaptureCallback>
 800cd90:	e005      	b.n	800cd9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 f957 	bl	800d046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 f968 	bl	800d06e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	f003 0304 	and.w	r3, r3, #4
 800cdae:	2b04      	cmp	r3, #4
 800cdb0:	d122      	bne.n	800cdf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	f003 0304 	and.w	r3, r3, #4
 800cdbc:	2b04      	cmp	r3, #4
 800cdbe:	d11b      	bne.n	800cdf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f06f 0204 	mvn.w	r2, #4
 800cdc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2202      	movs	r2, #2
 800cdce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f93b 	bl	800d05a <HAL_TIM_IC_CaptureCallback>
 800cde4:	e005      	b.n	800cdf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f92d 	bl	800d046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 f93e 	bl	800d06e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	f003 0308 	and.w	r3, r3, #8
 800ce02:	2b08      	cmp	r3, #8
 800ce04:	d122      	bne.n	800ce4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	f003 0308 	and.w	r3, r3, #8
 800ce10:	2b08      	cmp	r3, #8
 800ce12:	d11b      	bne.n	800ce4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f06f 0208 	mvn.w	r2, #8
 800ce1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2204      	movs	r2, #4
 800ce22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	69db      	ldr	r3, [r3, #28]
 800ce2a:	f003 0303 	and.w	r3, r3, #3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 f911 	bl	800d05a <HAL_TIM_IC_CaptureCallback>
 800ce38:	e005      	b.n	800ce46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f903 	bl	800d046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f914 	bl	800d06e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	f003 0310 	and.w	r3, r3, #16
 800ce56:	2b10      	cmp	r3, #16
 800ce58:	d122      	bne.n	800cea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	f003 0310 	and.w	r3, r3, #16
 800ce64:	2b10      	cmp	r3, #16
 800ce66:	d11b      	bne.n	800cea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f06f 0210 	mvn.w	r2, #16
 800ce70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2208      	movs	r2, #8
 800ce76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	69db      	ldr	r3, [r3, #28]
 800ce7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f8e7 	bl	800d05a <HAL_TIM_IC_CaptureCallback>
 800ce8c:	e005      	b.n	800ce9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 f8d9 	bl	800d046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f8ea 	bl	800d06e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	f003 0301 	and.w	r3, r3, #1
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d10e      	bne.n	800cecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d107      	bne.n	800cecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f06f 0201 	mvn.w	r2, #1
 800cec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7fa fdca 	bl	8007a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ced6:	2b80      	cmp	r3, #128	; 0x80
 800ced8:	d10e      	bne.n	800cef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee4:	2b80      	cmp	r3, #128	; 0x80
 800cee6:	d107      	bne.n	800cef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f982 	bl	800d1fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf06:	d10e      	bne.n	800cf26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf12:	2b80      	cmp	r3, #128	; 0x80
 800cf14:	d107      	bne.n	800cf26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cf1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f975 	bl	800d210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf30:	2b40      	cmp	r3, #64	; 0x40
 800cf32:	d10e      	bne.n	800cf52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf3e:	2b40      	cmp	r3, #64	; 0x40
 800cf40:	d107      	bne.n	800cf52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cf4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f898 	bl	800d082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	f003 0320 	and.w	r3, r3, #32
 800cf5c:	2b20      	cmp	r3, #32
 800cf5e:	d10e      	bne.n	800cf7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b20      	cmp	r3, #32
 800cf6c:	d107      	bne.n	800cf7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f06f 0220 	mvn.w	r2, #32
 800cf76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 f935 	bl	800d1e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	691b      	ldr	r3, [r3, #16]
 800cf84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf8c:	d10f      	bne.n	800cfae <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf9c:	d107      	bne.n	800cfae <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cfa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 f93b 	bl	800d224 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfbc:	d10f      	bne.n	800cfde <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfcc:	d107      	bne.n	800cfde <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cfd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 f92d 	bl	800d238 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfec:	d10f      	bne.n	800d00e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cffc:	d107      	bne.n	800d00e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f91f 	bl	800d24c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d01c:	d10f      	bne.n	800d03e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d02c:	d107      	bne.n	800d03e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 f911 	bl	800d260 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d03e:	bf00      	nop
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d046:	b480      	push	{r7}
 800d048:	b083      	sub	sp, #12
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d04e:	bf00      	nop
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d05a:	b480      	push	{r7}
 800d05c:	b083      	sub	sp, #12
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d062:	bf00      	nop
 800d064:	370c      	adds	r7, #12
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d06e:	b480      	push	{r7}
 800d070:	b083      	sub	sp, #12
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d076:	bf00      	nop
 800d078:	370c      	adds	r7, #12
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d08a:	bf00      	nop
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
	...

0800d098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a46      	ldr	r2, [pc, #280]	; (800d1c4 <TIM_Base_SetConfig+0x12c>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d017      	beq.n	800d0e0 <TIM_Base_SetConfig+0x48>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0b6:	d013      	beq.n	800d0e0 <TIM_Base_SetConfig+0x48>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a43      	ldr	r2, [pc, #268]	; (800d1c8 <TIM_Base_SetConfig+0x130>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d00f      	beq.n	800d0e0 <TIM_Base_SetConfig+0x48>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a42      	ldr	r2, [pc, #264]	; (800d1cc <TIM_Base_SetConfig+0x134>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d00b      	beq.n	800d0e0 <TIM_Base_SetConfig+0x48>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a41      	ldr	r2, [pc, #260]	; (800d1d0 <TIM_Base_SetConfig+0x138>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d007      	beq.n	800d0e0 <TIM_Base_SetConfig+0x48>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a40      	ldr	r2, [pc, #256]	; (800d1d4 <TIM_Base_SetConfig+0x13c>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d003      	beq.n	800d0e0 <TIM_Base_SetConfig+0x48>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a3f      	ldr	r2, [pc, #252]	; (800d1d8 <TIM_Base_SetConfig+0x140>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d108      	bne.n	800d0f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a33      	ldr	r2, [pc, #204]	; (800d1c4 <TIM_Base_SetConfig+0x12c>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d023      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d100:	d01f      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a30      	ldr	r2, [pc, #192]	; (800d1c8 <TIM_Base_SetConfig+0x130>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d01b      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a2f      	ldr	r2, [pc, #188]	; (800d1cc <TIM_Base_SetConfig+0x134>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d017      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a2e      	ldr	r2, [pc, #184]	; (800d1d0 <TIM_Base_SetConfig+0x138>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d013      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a2d      	ldr	r2, [pc, #180]	; (800d1d4 <TIM_Base_SetConfig+0x13c>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d00f      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a2d      	ldr	r2, [pc, #180]	; (800d1dc <TIM_Base_SetConfig+0x144>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d00b      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a2c      	ldr	r2, [pc, #176]	; (800d1e0 <TIM_Base_SetConfig+0x148>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d007      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a2b      	ldr	r2, [pc, #172]	; (800d1e4 <TIM_Base_SetConfig+0x14c>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d003      	beq.n	800d142 <TIM_Base_SetConfig+0xaa>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a26      	ldr	r2, [pc, #152]	; (800d1d8 <TIM_Base_SetConfig+0x140>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d108      	bne.n	800d154 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	4313      	orrs	r3, r2
 800d152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	4313      	orrs	r3, r2
 800d160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	689a      	ldr	r2, [r3, #8]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4a12      	ldr	r2, [pc, #72]	; (800d1c4 <TIM_Base_SetConfig+0x12c>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d013      	beq.n	800d1a8 <TIM_Base_SetConfig+0x110>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a14      	ldr	r2, [pc, #80]	; (800d1d4 <TIM_Base_SetConfig+0x13c>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d00f      	beq.n	800d1a8 <TIM_Base_SetConfig+0x110>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a14      	ldr	r2, [pc, #80]	; (800d1dc <TIM_Base_SetConfig+0x144>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d00b      	beq.n	800d1a8 <TIM_Base_SetConfig+0x110>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a13      	ldr	r2, [pc, #76]	; (800d1e0 <TIM_Base_SetConfig+0x148>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d007      	beq.n	800d1a8 <TIM_Base_SetConfig+0x110>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a12      	ldr	r2, [pc, #72]	; (800d1e4 <TIM_Base_SetConfig+0x14c>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d003      	beq.n	800d1a8 <TIM_Base_SetConfig+0x110>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a0d      	ldr	r2, [pc, #52]	; (800d1d8 <TIM_Base_SetConfig+0x140>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d103      	bne.n	800d1b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	691a      	ldr	r2, [r3, #16]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	615a      	str	r2, [r3, #20]
}
 800d1b6:	bf00      	nop
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	40012c00 	.word	0x40012c00
 800d1c8:	40000400 	.word	0x40000400
 800d1cc:	40000800 	.word	0x40000800
 800d1d0:	40000c00 	.word	0x40000c00
 800d1d4:	40013400 	.word	0x40013400
 800d1d8:	40015000 	.word	0x40015000
 800d1dc:	40014000 	.word	0x40014000
 800d1e0:	40014400 	.word	0x40014400
 800d1e4:	40014800 	.word	0x40014800

0800d1e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d218:	bf00      	nop
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d22c:	bf00      	nop
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	4603      	mov	r3, r0
 800d27c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d27e:	2300      	movs	r3, #0
 800d280:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d286:	2b84      	cmp	r3, #132	; 0x84
 800d288:	d005      	beq.n	800d296 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d28a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4413      	add	r3, r2
 800d292:	3303      	adds	r3, #3
 800d294:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d296:	68fb      	ldr	r3, [r7, #12]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3714      	adds	r7, #20
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d2a8:	f001 f8da 	bl	800e460 <vTaskStartScheduler>
  
  return osOK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d2b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2b4:	b087      	sub	sp, #28
 800d2b6:	af02      	add	r7, sp, #8
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685c      	ldr	r4, [r3, #4]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2c8:	b29e      	uxth	r6, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff ffcf 	bl	800d274 <makeFreeRtosPriority>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	f107 030c 	add.w	r3, r7, #12
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	9200      	str	r2, [sp, #0]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	4632      	mov	r2, r6
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f000 ff30 	bl	800e14c <xTaskCreate>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d001      	beq.n	800d2f6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	e000      	b.n	800d2f8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d300 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <osDelay+0x16>
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	e000      	b.n	800d318 <osDelay+0x18>
 800d316:	2301      	movs	r3, #1
 800d318:	4618      	mov	r0, r3
 800d31a:	f001 f86d 	bl	800e3f8 <vTaskDelay>
  
  return osOK;
 800d31e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d32e:	201c      	movs	r0, #28
 800d330:	f002 fc12 	bl	800fb58 <pvPortMalloc>
 800d334:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d007      	beq.n	800d34c <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3304      	adds	r3, #4
 800d346:	4618      	mov	r0, r3
 800d348:	f000 f9a2 	bl	800d690 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d34c:	687b      	ldr	r3, [r7, #4]
	}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b090      	sub	sp, #64	; 0x40
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
 800d364:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d36e:	2300      	movs	r3, #0
 800d370:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d10a      	bne.n	800d38e <xEventGroupWaitBits+0x36>
	__asm volatile
 800d378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	623b      	str	r3, [r7, #32]
}
 800d38a:	bf00      	nop
 800d38c:	e7fe      	b.n	800d38c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00a      	beq.n	800d3ae <xEventGroupWaitBits+0x56>
	__asm volatile
 800d398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	61fb      	str	r3, [r7, #28]
}
 800d3aa:	bf00      	nop
 800d3ac:	e7fe      	b.n	800d3ac <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10a      	bne.n	800d3ca <xEventGroupWaitBits+0x72>
	__asm volatile
 800d3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	61bb      	str	r3, [r7, #24]
}
 800d3c6:	bf00      	nop
 800d3c8:	e7fe      	b.n	800d3c8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3ca:	f001 fd05 	bl	800edd8 <xTaskGetSchedulerState>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d102      	bne.n	800d3da <xEventGroupWaitBits+0x82>
 800d3d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <xEventGroupWaitBits+0x86>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e000      	b.n	800d3e0 <xEventGroupWaitBits+0x88>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10a      	bne.n	800d3fa <xEventGroupWaitBits+0xa2>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	617b      	str	r3, [r7, #20]
}
 800d3f6:	bf00      	nop
 800d3f8:	e7fe      	b.n	800d3f8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800d3fa:	f001 f887 	bl	800e50c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d404:	683a      	ldr	r2, [r7, #0]
 800d406:	68b9      	ldr	r1, [r7, #8]
 800d408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d40a:	f000 f90b 	bl	800d624 <prvTestWaitCondition>
 800d40e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00e      	beq.n	800d434 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d418:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d028      	beq.n	800d476 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	43db      	mvns	r3, r3
 800d42c:	401a      	ands	r2, r3
 800d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	e020      	b.n	800d476 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d436:	2b00      	cmp	r3, #0
 800d438:	d104      	bne.n	800d444 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800d43e:	2301      	movs	r3, #1
 800d440:	633b      	str	r3, [r7, #48]	; 0x30
 800d442:	e018      	b.n	800d476 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d450:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d003      	beq.n	800d460 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d45e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d462:	1d18      	adds	r0, r3, #4
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d468:	4313      	orrs	r3, r2
 800d46a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d46c:	4619      	mov	r1, r3
 800d46e:	f001 fa45 	bl	800e8fc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d476:	f001 f857 	bl	800e528 <xTaskResumeAll>
 800d47a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d47c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d031      	beq.n	800d4e6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	2b00      	cmp	r3, #0
 800d486:	d107      	bne.n	800d498 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800d488:	4b19      	ldr	r3, [pc, #100]	; (800d4f0 <xEventGroupWaitBits+0x198>)
 800d48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d498:	f001 fd42 	bl	800ef20 <uxTaskResetEventItemValue>
 800d49c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d11a      	bne.n	800d4de <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800d4a8:	f002 fa34 	bl	800f914 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d4b2:	683a      	ldr	r2, [r7, #0]
 800d4b4:	68b9      	ldr	r1, [r7, #8]
 800d4b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4b8:	f000 f8b4 	bl	800d624 <prvTestWaitCondition>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d009      	beq.n	800d4d6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d006      	beq.n	800d4d6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	43db      	mvns	r3, r3
 800d4d0:	401a      	ands	r2, r3
 800d4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800d4da:	f002 fa4b 	bl	800f974 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3740      	adds	r7, #64	; 0x40
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	e000ed04 	.word	0xe000ed04

0800d4f4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b08e      	sub	sp, #56	; 0x38
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d4fe:	2300      	movs	r3, #0
 800d500:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800d506:	2300      	movs	r3, #0
 800d508:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10a      	bne.n	800d526 <xEventGroupSetBits+0x32>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	613b      	str	r3, [r7, #16]
}
 800d522:	bf00      	nop
 800d524:	e7fe      	b.n	800d524 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00a      	beq.n	800d546 <xEventGroupSetBits+0x52>
	__asm volatile
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	60fb      	str	r3, [r7, #12]
}
 800d542:	bf00      	nop
 800d544:	e7fe      	b.n	800d544 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d548:	3304      	adds	r3, #4
 800d54a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54e:	3308      	adds	r3, #8
 800d550:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d552:	f000 ffdb 	bl	800e50c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	431a      	orrs	r2, r3
 800d564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d566:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d568:	e03c      	b.n	800d5e4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d576:	2300      	movs	r3, #0
 800d578:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d580:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d588:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d590:	2b00      	cmp	r3, #0
 800d592:	d108      	bne.n	800d5a6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	4013      	ands	r3, r2
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00b      	beq.n	800d5b8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5a4:	e008      	b.n	800d5b8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	69ba      	ldr	r2, [r7, #24]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d101      	bne.n	800d5b8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d010      	beq.n	800d5e0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d003      	beq.n	800d5d0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5dc:	f001 fa58 	bl	800ea90 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800d5e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5e6:	6a3b      	ldr	r3, [r7, #32]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d1be      	bne.n	800d56a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	43db      	mvns	r3, r3
 800d5f4:	401a      	ands	r2, r3
 800d5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d5fa:	f000 ff95 	bl	800e528 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	681b      	ldr	r3, [r3, #0]
}
 800d602:	4618      	mov	r0, r3
 800d604:	3738      	adds	r7, #56	; 0x38
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b082      	sub	sp, #8
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d614:	6839      	ldr	r1, [r7, #0]
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff ff6c 	bl	800d4f4 <xEventGroupSetBits>
}
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d624:	b480      	push	{r7}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d630:	2300      	movs	r3, #0
 800d632:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d107      	bne.n	800d64a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	4013      	ands	r3, r2
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00a      	beq.n	800d65a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d644:	2301      	movs	r3, #1
 800d646:	617b      	str	r3, [r7, #20]
 800d648:	e007      	b.n	800d65a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	4013      	ands	r3, r2
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	429a      	cmp	r2, r3
 800d654:	d101      	bne.n	800d65a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d656:	2301      	movs	r3, #1
 800d658:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d65a:	697b      	ldr	r3, [r7, #20]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	371c      	adds	r7, #28
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	68f9      	ldr	r1, [r7, #12]
 800d67a:	4804      	ldr	r0, [pc, #16]	; (800d68c <xEventGroupSetBitsFromISR+0x24>)
 800d67c:	f001 fffc 	bl	800f678 <xTimerPendFunctionCallFromISR>
 800d680:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d682:	697b      	ldr	r3, [r7, #20]
	}
 800d684:	4618      	mov	r0, r3
 800d686:	3718      	adds	r7, #24
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	0800d60b 	.word	0x0800d60b

0800d690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f103 0208 	add.w	r2, r3, #8
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f103 0208 	add.w	r2, r3, #8
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f103 0208 	add.w	r2, r3, #8
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d6de:	bf00      	nop
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6ea:	b480      	push	{r7}
 800d6ec:	b085      	sub	sp, #20
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68fa      	ldr	r2, [r7, #12]
 800d6fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	689a      	ldr	r2, [r3, #8]
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	683a      	ldr	r2, [r7, #0]
 800d70e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	683a      	ldr	r2, [r7, #0]
 800d714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	1c5a      	adds	r2, r3, #1
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	601a      	str	r2, [r3, #0]
}
 800d726:	bf00      	nop
 800d728:	3714      	adds	r7, #20
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d732:	b480      	push	{r7}
 800d734:	b085      	sub	sp, #20
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
 800d73a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d748:	d103      	bne.n	800d752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	60fb      	str	r3, [r7, #12]
 800d750:	e00c      	b.n	800d76c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	3308      	adds	r3, #8
 800d756:	60fb      	str	r3, [r7, #12]
 800d758:	e002      	b.n	800d760 <vListInsert+0x2e>
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d2f6      	bcs.n	800d75a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	683a      	ldr	r2, [r7, #0]
 800d786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	601a      	str	r2, [r3, #0]
}
 800d798:	bf00      	nop
 800d79a:	3714      	adds	r7, #20
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	6892      	ldr	r2, [r2, #8]
 800d7ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	6852      	ldr	r2, [r2, #4]
 800d7c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d103      	bne.n	800d7d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	689a      	ldr	r2, [r3, #8]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	1e5a      	subs	r2, r3, #1
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3714      	adds	r7, #20
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <xQueueGenericReset+0x2a>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	60bb      	str	r3, [r7, #8]
}
 800d81e:	bf00      	nop
 800d820:	e7fe      	b.n	800d820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d822:	f002 f877 	bl	800f914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82e:	68f9      	ldr	r1, [r7, #12]
 800d830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d832:	fb01 f303 	mul.w	r3, r1, r3
 800d836:	441a      	add	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d852:	3b01      	subs	r3, #1
 800d854:	68f9      	ldr	r1, [r7, #12]
 800d856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d858:	fb01 f303 	mul.w	r3, r1, r3
 800d85c:	441a      	add	r2, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	22ff      	movs	r2, #255	; 0xff
 800d866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	22ff      	movs	r2, #255	; 0xff
 800d86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d114      	bne.n	800d8a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d01a      	beq.n	800d8b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	3310      	adds	r3, #16
 800d884:	4618      	mov	r0, r3
 800d886:	f001 f8a1 	bl	800e9cc <xTaskRemoveFromEventList>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d012      	beq.n	800d8b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d890:	4b0c      	ldr	r3, [pc, #48]	; (800d8c4 <xQueueGenericReset+0xcc>)
 800d892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d896:	601a      	str	r2, [r3, #0]
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	e009      	b.n	800d8b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3310      	adds	r3, #16
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7ff fef2 	bl	800d690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3324      	adds	r3, #36	; 0x24
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7ff feed 	bl	800d690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d8b6:	f002 f85d 	bl	800f974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d8ba:	2301      	movs	r3, #1
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	e000ed04 	.word	0xe000ed04

0800d8c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b08a      	sub	sp, #40	; 0x28
 800d8cc:	af02      	add	r7, sp, #8
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10a      	bne.n	800d8f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	613b      	str	r3, [r7, #16]
}
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	68ba      	ldr	r2, [r7, #8]
 800d8f6:	fb02 f303 	mul.w	r3, r2, r3
 800d8fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	3350      	adds	r3, #80	; 0x50
 800d900:	4618      	mov	r0, r3
 800d902:	f002 f929 	bl	800fb58 <pvPortMalloc>
 800d906:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00d      	beq.n	800d92a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	3350      	adds	r3, #80	; 0x50
 800d916:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d918:	79fa      	ldrb	r2, [r7, #7]
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	4613      	mov	r3, r2
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	68b9      	ldr	r1, [r7, #8]
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f000 f805 	bl	800d934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d92a:	69bb      	ldr	r3, [r7, #24]
	}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3720      	adds	r7, #32
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d103      	bne.n	800d950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	69ba      	ldr	r2, [r7, #24]
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	e002      	b.n	800d956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d962:	2101      	movs	r1, #1
 800d964:	69b8      	ldr	r0, [r7, #24]
 800d966:	f7ff ff47 	bl	800d7f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	78fa      	ldrb	r2, [r7, #3]
 800d96e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d972:	bf00      	nop
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
	...

0800d97c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b08e      	sub	sp, #56	; 0x38
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
 800d988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d98a:	2300      	movs	r3, #0
 800d98c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10a      	bne.n	800d9ae <xQueueGenericSend+0x32>
	__asm volatile
 800d998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d9aa:	bf00      	nop
 800d9ac:	e7fe      	b.n	800d9ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d103      	bne.n	800d9bc <xQueueGenericSend+0x40>
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <xQueueGenericSend+0x44>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e000      	b.n	800d9c2 <xQueueGenericSend+0x46>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10a      	bne.n	800d9dc <xQueueGenericSend+0x60>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9d8:	bf00      	nop
 800d9da:	e7fe      	b.n	800d9da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	d103      	bne.n	800d9ea <xQueueGenericSend+0x6e>
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d101      	bne.n	800d9ee <xQueueGenericSend+0x72>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e000      	b.n	800d9f0 <xQueueGenericSend+0x74>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10a      	bne.n	800da0a <xQueueGenericSend+0x8e>
	__asm volatile
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	623b      	str	r3, [r7, #32]
}
 800da06:	bf00      	nop
 800da08:	e7fe      	b.n	800da08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da0a:	f001 f9e5 	bl	800edd8 <xTaskGetSchedulerState>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <xQueueGenericSend+0x9e>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d101      	bne.n	800da1e <xQueueGenericSend+0xa2>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e000      	b.n	800da20 <xQueueGenericSend+0xa4>
 800da1e:	2300      	movs	r3, #0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10a      	bne.n	800da3a <xQueueGenericSend+0xbe>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	61fb      	str	r3, [r7, #28]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da3a:	f001 ff6b 	bl	800f914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da46:	429a      	cmp	r2, r3
 800da48:	d302      	bcc.n	800da50 <xQueueGenericSend+0xd4>
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d129      	bne.n	800daa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da50:	683a      	ldr	r2, [r7, #0]
 800da52:	68b9      	ldr	r1, [r7, #8]
 800da54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da56:	f000 fa0b 	bl	800de70 <prvCopyDataToQueue>
 800da5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da60:	2b00      	cmp	r3, #0
 800da62:	d010      	beq.n	800da86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da66:	3324      	adds	r3, #36	; 0x24
 800da68:	4618      	mov	r0, r3
 800da6a:	f000 ffaf 	bl	800e9cc <xTaskRemoveFromEventList>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d013      	beq.n	800da9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da74:	4b3f      	ldr	r3, [pc, #252]	; (800db74 <xQueueGenericSend+0x1f8>)
 800da76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da7a:	601a      	str	r2, [r3, #0]
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	e00a      	b.n	800da9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d007      	beq.n	800da9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da8c:	4b39      	ldr	r3, [pc, #228]	; (800db74 <xQueueGenericSend+0x1f8>)
 800da8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da92:	601a      	str	r2, [r3, #0]
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da9c:	f001 ff6a 	bl	800f974 <vPortExitCritical>
				return pdPASS;
 800daa0:	2301      	movs	r3, #1
 800daa2:	e063      	b.n	800db6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d103      	bne.n	800dab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800daaa:	f001 ff63 	bl	800f974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	e05c      	b.n	800db6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d106      	bne.n	800dac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dab8:	f107 0314 	add.w	r3, r7, #20
 800dabc:	4618      	mov	r0, r3
 800dabe:	f001 f849 	bl	800eb54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dac2:	2301      	movs	r3, #1
 800dac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dac6:	f001 ff55 	bl	800f974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800daca:	f000 fd1f 	bl	800e50c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dace:	f001 ff21 	bl	800f914 <vPortEnterCritical>
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dad8:	b25b      	sxtb	r3, r3
 800dada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dade:	d103      	bne.n	800dae8 <xQueueGenericSend+0x16c>
 800dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae2:	2200      	movs	r2, #0
 800dae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daee:	b25b      	sxtb	r3, r3
 800daf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daf4:	d103      	bne.n	800dafe <xQueueGenericSend+0x182>
 800daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dafe:	f001 ff39 	bl	800f974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db02:	1d3a      	adds	r2, r7, #4
 800db04:	f107 0314 	add.w	r3, r7, #20
 800db08:	4611      	mov	r1, r2
 800db0a:	4618      	mov	r0, r3
 800db0c:	f001 f838 	bl	800eb80 <xTaskCheckForTimeOut>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d124      	bne.n	800db60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800db16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db18:	f000 faa2 	bl	800e060 <prvIsQueueFull>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d018      	beq.n	800db54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db24:	3310      	adds	r3, #16
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	4611      	mov	r1, r2
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 fec2 	bl	800e8b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800db30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db32:	f000 fa2d 	bl	800df90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800db36:	f000 fcf7 	bl	800e528 <xTaskResumeAll>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f47f af7c 	bne.w	800da3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800db42:	4b0c      	ldr	r3, [pc, #48]	; (800db74 <xQueueGenericSend+0x1f8>)
 800db44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db48:	601a      	str	r2, [r3, #0]
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	e772      	b.n	800da3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db56:	f000 fa1b 	bl	800df90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db5a:	f000 fce5 	bl	800e528 <xTaskResumeAll>
 800db5e:	e76c      	b.n	800da3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800db60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db62:	f000 fa15 	bl	800df90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db66:	f000 fcdf 	bl	800e528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3738      	adds	r7, #56	; 0x38
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	e000ed04 	.word	0xe000ed04

0800db78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b090      	sub	sp, #64	; 0x40
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800db8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10a      	bne.n	800dba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d103      	bne.n	800dbb4 <xQueueGenericSendFromISR+0x3c>
 800dbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <xQueueGenericSendFromISR+0x40>
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e000      	b.n	800dbba <xQueueGenericSendFromISR+0x42>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10a      	bne.n	800dbd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dbd0:	bf00      	nop
 800dbd2:	e7fe      	b.n	800dbd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	d103      	bne.n	800dbe2 <xQueueGenericSendFromISR+0x6a>
 800dbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d101      	bne.n	800dbe6 <xQueueGenericSendFromISR+0x6e>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e000      	b.n	800dbe8 <xQueueGenericSendFromISR+0x70>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10a      	bne.n	800dc02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf0:	f383 8811 	msr	BASEPRI, r3
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	623b      	str	r3, [r7, #32]
}
 800dbfe:	bf00      	nop
 800dc00:	e7fe      	b.n	800dc00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc02:	f001 ff69 	bl	800fad8 <vPortValidateInterruptPriority>
	__asm volatile
 800dc06:	f3ef 8211 	mrs	r2, BASEPRI
 800dc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0e:	f383 8811 	msr	BASEPRI, r3
 800dc12:	f3bf 8f6f 	isb	sy
 800dc16:	f3bf 8f4f 	dsb	sy
 800dc1a:	61fa      	str	r2, [r7, #28]
 800dc1c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800dc1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d302      	bcc.n	800dc34 <xQueueGenericSendFromISR+0xbc>
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d12f      	bne.n	800dc94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	68b9      	ldr	r1, [r7, #8]
 800dc48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc4a:	f000 f911 	bl	800de70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dc4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dc52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc56:	d112      	bne.n	800dc7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d016      	beq.n	800dc8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	3324      	adds	r3, #36	; 0x24
 800dc64:	4618      	mov	r0, r3
 800dc66:	f000 feb1 	bl	800e9cc <xTaskRemoveFromEventList>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d00e      	beq.n	800dc8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00b      	beq.n	800dc8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	e007      	b.n	800dc8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc82:	3301      	adds	r3, #1
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	b25a      	sxtb	r2, r3
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dc92:	e001      	b.n	800dc98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc94:	2300      	movs	r3, #0
 800dc96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	f383 8811 	msr	BASEPRI, r3
}
 800dca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3740      	adds	r7, #64	; 0x40
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
	...

0800dcb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b08c      	sub	sp, #48	; 0x30
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10a      	bne.n	800dce0 <xQueueReceive+0x30>
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	623b      	str	r3, [r7, #32]
}
 800dcdc:	bf00      	nop
 800dcde:	e7fe      	b.n	800dcde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d103      	bne.n	800dcee <xQueueReceive+0x3e>
 800dce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d101      	bne.n	800dcf2 <xQueueReceive+0x42>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e000      	b.n	800dcf4 <xQueueReceive+0x44>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10a      	bne.n	800dd0e <xQueueReceive+0x5e>
	__asm volatile
 800dcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfc:	f383 8811 	msr	BASEPRI, r3
 800dd00:	f3bf 8f6f 	isb	sy
 800dd04:	f3bf 8f4f 	dsb	sy
 800dd08:	61fb      	str	r3, [r7, #28]
}
 800dd0a:	bf00      	nop
 800dd0c:	e7fe      	b.n	800dd0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd0e:	f001 f863 	bl	800edd8 <xTaskGetSchedulerState>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d102      	bne.n	800dd1e <xQueueReceive+0x6e>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d101      	bne.n	800dd22 <xQueueReceive+0x72>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e000      	b.n	800dd24 <xQueueReceive+0x74>
 800dd22:	2300      	movs	r3, #0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10a      	bne.n	800dd3e <xQueueReceive+0x8e>
	__asm volatile
 800dd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2c:	f383 8811 	msr	BASEPRI, r3
 800dd30:	f3bf 8f6f 	isb	sy
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	61bb      	str	r3, [r7, #24]
}
 800dd3a:	bf00      	nop
 800dd3c:	e7fe      	b.n	800dd3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd3e:	f001 fde9 	bl	800f914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d01f      	beq.n	800dd8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd4e:	68b9      	ldr	r1, [r7, #8]
 800dd50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd52:	f000 f8f7 	bl	800df44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd58:	1e5a      	subs	r2, r3, #1
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00f      	beq.n	800dd86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd68:	3310      	adds	r3, #16
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 fe2e 	bl	800e9cc <xTaskRemoveFromEventList>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d007      	beq.n	800dd86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd76:	4b3d      	ldr	r3, [pc, #244]	; (800de6c <xQueueReceive+0x1bc>)
 800dd78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd86:	f001 fdf5 	bl	800f974 <vPortExitCritical>
				return pdPASS;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e069      	b.n	800de62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d103      	bne.n	800dd9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd94:	f001 fdee 	bl	800f974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	e062      	b.n	800de62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d106      	bne.n	800ddb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dda2:	f107 0310 	add.w	r3, r7, #16
 800dda6:	4618      	mov	r0, r3
 800dda8:	f000 fed4 	bl	800eb54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddac:	2301      	movs	r3, #1
 800ddae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ddb0:	f001 fde0 	bl	800f974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ddb4:	f000 fbaa 	bl	800e50c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddb8:	f001 fdac 	bl	800f914 <vPortEnterCritical>
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddc2:	b25b      	sxtb	r3, r3
 800ddc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddc8:	d103      	bne.n	800ddd2 <xQueueReceive+0x122>
 800ddca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddd8:	b25b      	sxtb	r3, r3
 800ddda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddde:	d103      	bne.n	800dde8 <xQueueReceive+0x138>
 800dde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde2:	2200      	movs	r2, #0
 800dde4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dde8:	f001 fdc4 	bl	800f974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddec:	1d3a      	adds	r2, r7, #4
 800ddee:	f107 0310 	add.w	r3, r7, #16
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f000 fec3 	bl	800eb80 <xTaskCheckForTimeOut>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d123      	bne.n	800de48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de02:	f000 f917 	bl	800e034 <prvIsQueueEmpty>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d017      	beq.n	800de3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0e:	3324      	adds	r3, #36	; 0x24
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	4611      	mov	r1, r2
 800de14:	4618      	mov	r0, r3
 800de16:	f000 fd4d 	bl	800e8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de1c:	f000 f8b8 	bl	800df90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de20:	f000 fb82 	bl	800e528 <xTaskResumeAll>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d189      	bne.n	800dd3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800de2a:	4b10      	ldr	r3, [pc, #64]	; (800de6c <xQueueReceive+0x1bc>)
 800de2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	e780      	b.n	800dd3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800de3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de3e:	f000 f8a7 	bl	800df90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de42:	f000 fb71 	bl	800e528 <xTaskResumeAll>
 800de46:	e77a      	b.n	800dd3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800de48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de4a:	f000 f8a1 	bl	800df90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de4e:	f000 fb6b 	bl	800e528 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de54:	f000 f8ee 	bl	800e034 <prvIsQueueEmpty>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f43f af6f 	beq.w	800dd3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de62:	4618      	mov	r0, r3
 800de64:	3730      	adds	r7, #48	; 0x30
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	e000ed04 	.word	0xe000ed04

0800de70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de7c:	2300      	movs	r3, #0
 800de7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d10d      	bne.n	800deaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d14d      	bne.n	800df32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	4618      	mov	r0, r3
 800de9c:	f000 ffba 	bl	800ee14 <xTaskPriorityDisinherit>
 800dea0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2200      	movs	r2, #0
 800dea6:	609a      	str	r2, [r3, #8]
 800dea8:	e043      	b.n	800df32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d119      	bne.n	800dee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6858      	ldr	r0, [r3, #4]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb8:	461a      	mov	r2, r3
 800deba:	68b9      	ldr	r1, [r7, #8]
 800debc:	f002 f999 	bl	80101f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	685a      	ldr	r2, [r3, #4]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec8:	441a      	add	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d32b      	bcc.n	800df32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	605a      	str	r2, [r3, #4]
 800dee2:	e026      	b.n	800df32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	68d8      	ldr	r0, [r3, #12]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deec:	461a      	mov	r2, r3
 800deee:	68b9      	ldr	r1, [r7, #8]
 800def0:	f002 f97f 	bl	80101f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68da      	ldr	r2, [r3, #12]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defc:	425b      	negs	r3, r3
 800defe:	441a      	add	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	68da      	ldr	r2, [r3, #12]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d207      	bcs.n	800df20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	689a      	ldr	r2, [r3, #8]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df18:	425b      	negs	r3, r3
 800df1a:	441a      	add	r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b02      	cmp	r3, #2
 800df24:	d105      	bne.n	800df32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d002      	beq.n	800df32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	3b01      	subs	r3, #1
 800df30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800df3a:	697b      	ldr	r3, [r7, #20]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df52:	2b00      	cmp	r3, #0
 800df54:	d018      	beq.n	800df88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	68da      	ldr	r2, [r3, #12]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df5e:	441a      	add	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	68da      	ldr	r2, [r3, #12]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d303      	bcc.n	800df78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	68d9      	ldr	r1, [r3, #12]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df80:	461a      	mov	r2, r3
 800df82:	6838      	ldr	r0, [r7, #0]
 800df84:	f002 f935 	bl	80101f2 <memcpy>
	}
}
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df98:	f001 fcbc 	bl	800f914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfa4:	e011      	b.n	800dfca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d012      	beq.n	800dfd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	3324      	adds	r3, #36	; 0x24
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 fd0a 	bl	800e9cc <xTaskRemoveFromEventList>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dfbe:	f000 fe41 	bl	800ec44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dfc2:	7bfb      	ldrb	r3, [r7, #15]
 800dfc4:	3b01      	subs	r3, #1
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	dce9      	bgt.n	800dfa6 <prvUnlockQueue+0x16>
 800dfd2:	e000      	b.n	800dfd6 <prvUnlockQueue+0x46>
					break;
 800dfd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	22ff      	movs	r2, #255	; 0xff
 800dfda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dfde:	f001 fcc9 	bl	800f974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfe2:	f001 fc97 	bl	800f914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfee:	e011      	b.n	800e014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d012      	beq.n	800e01e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	3310      	adds	r3, #16
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 fce5 	bl	800e9cc <xTaskRemoveFromEventList>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e008:	f000 fe1c 	bl	800ec44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e00c:	7bbb      	ldrb	r3, [r7, #14]
 800e00e:	3b01      	subs	r3, #1
 800e010:	b2db      	uxtb	r3, r3
 800e012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	dce9      	bgt.n	800dff0 <prvUnlockQueue+0x60>
 800e01c:	e000      	b.n	800e020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e01e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	22ff      	movs	r2, #255	; 0xff
 800e024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e028:	f001 fca4 	bl	800f974 <vPortExitCritical>
}
 800e02c:	bf00      	nop
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e03c:	f001 fc6a 	bl	800f914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e044:	2b00      	cmp	r3, #0
 800e046:	d102      	bne.n	800e04e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	60fb      	str	r3, [r7, #12]
 800e04c:	e001      	b.n	800e052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e04e:	2300      	movs	r3, #0
 800e050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e052:	f001 fc8f 	bl	800f974 <vPortExitCritical>

	return xReturn;
 800e056:	68fb      	ldr	r3, [r7, #12]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e068:	f001 fc54 	bl	800f914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e074:	429a      	cmp	r2, r3
 800e076:	d102      	bne.n	800e07e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e078:	2301      	movs	r3, #1
 800e07a:	60fb      	str	r3, [r7, #12]
 800e07c:	e001      	b.n	800e082 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e07e:	2300      	movs	r3, #0
 800e080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e082:	f001 fc77 	bl	800f974 <vPortExitCritical>

	return xReturn;
 800e086:	68fb      	ldr	r3, [r7, #12]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e09a:	2300      	movs	r3, #0
 800e09c:	60fb      	str	r3, [r7, #12]
 800e09e:	e014      	b.n	800e0ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e0a0:	4a0f      	ldr	r2, [pc, #60]	; (800e0e0 <vQueueAddToRegistry+0x50>)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10b      	bne.n	800e0c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e0ac:	490c      	ldr	r1, [pc, #48]	; (800e0e0 <vQueueAddToRegistry+0x50>)
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e0b6:	4a0a      	ldr	r2, [pc, #40]	; (800e0e0 <vQueueAddToRegistry+0x50>)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	4413      	add	r3, r2
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e0c2:	e006      	b.n	800e0d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	60fb      	str	r3, [r7, #12]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b07      	cmp	r3, #7
 800e0ce:	d9e7      	bls.n	800e0a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0d0:	bf00      	nop
 800e0d2:	bf00      	nop
 800e0d4:	3714      	adds	r7, #20
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	200027d4 	.word	0x200027d4

0800e0e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b086      	sub	sp, #24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e0f4:	f001 fc0e 	bl	800f914 <vPortEnterCritical>
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0fe:	b25b      	sxtb	r3, r3
 800e100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e104:	d103      	bne.n	800e10e <vQueueWaitForMessageRestricted+0x2a>
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e114:	b25b      	sxtb	r3, r3
 800e116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e11a:	d103      	bne.n	800e124 <vQueueWaitForMessageRestricted+0x40>
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	2200      	movs	r2, #0
 800e120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e124:	f001 fc26 	bl	800f974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d106      	bne.n	800e13e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	3324      	adds	r3, #36	; 0x24
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	68b9      	ldr	r1, [r7, #8]
 800e138:	4618      	mov	r0, r3
 800e13a:	f000 fc1b 	bl	800e974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e13e:	6978      	ldr	r0, [r7, #20]
 800e140:	f7ff ff26 	bl	800df90 <prvUnlockQueue>
	}
 800e144:	bf00      	nop
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08c      	sub	sp, #48	; 0x30
 800e150:	af04      	add	r7, sp, #16
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	603b      	str	r3, [r7, #0]
 800e158:	4613      	mov	r3, r2
 800e15a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e15c:	88fb      	ldrh	r3, [r7, #6]
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4618      	mov	r0, r3
 800e162:	f001 fcf9 	bl	800fb58 <pvPortMalloc>
 800e166:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00e      	beq.n	800e18c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e16e:	20bc      	movs	r0, #188	; 0xbc
 800e170:	f001 fcf2 	bl	800fb58 <pvPortMalloc>
 800e174:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d003      	beq.n	800e184 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	631a      	str	r2, [r3, #48]	; 0x30
 800e182:	e005      	b.n	800e190 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e184:	6978      	ldr	r0, [r7, #20]
 800e186:	f001 fdb3 	bl	800fcf0 <vPortFree>
 800e18a:	e001      	b.n	800e190 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e18c:	2300      	movs	r3, #0
 800e18e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d013      	beq.n	800e1be <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e196:	88fa      	ldrh	r2, [r7, #6]
 800e198:	2300      	movs	r3, #0
 800e19a:	9303      	str	r3, [sp, #12]
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	9302      	str	r3, [sp, #8]
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	9301      	str	r3, [sp, #4]
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	68b9      	ldr	r1, [r7, #8]
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 f80f 	bl	800e1d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1b2:	69f8      	ldr	r0, [r7, #28]
 800e1b4:	f000 f8b2 	bl	800e31c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	61bb      	str	r3, [r7, #24]
 800e1bc:	e002      	b.n	800e1c4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e1c4:	69bb      	ldr	r3, [r7, #24]
	}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3720      	adds	r7, #32
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
	...

0800e1d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
 800e1dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	21a5      	movs	r1, #165	; 0xa5
 800e1ea:	f002 f810 	bl	801020e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	f023 0307 	bic.w	r3, r3, #7
 800e206:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	f003 0307 	and.w	r3, r3, #7
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00a      	beq.n	800e228 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	617b      	str	r3, [r7, #20]
}
 800e224:	bf00      	nop
 800e226:	e7fe      	b.n	800e226 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d01f      	beq.n	800e26e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e22e:	2300      	movs	r3, #0
 800e230:	61fb      	str	r3, [r7, #28]
 800e232:	e012      	b.n	800e25a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	4413      	add	r3, r2
 800e23a:	7819      	ldrb	r1, [r3, #0]
 800e23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	4413      	add	r3, r2
 800e242:	3334      	adds	r3, #52	; 0x34
 800e244:	460a      	mov	r2, r1
 800e246:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	4413      	add	r3, r2
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d006      	beq.n	800e262 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	3301      	adds	r3, #1
 800e258:	61fb      	str	r3, [r7, #28]
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	2b0f      	cmp	r3, #15
 800e25e:	d9e9      	bls.n	800e234 <prvInitialiseNewTask+0x64>
 800e260:	e000      	b.n	800e264 <prvInitialiseNewTask+0x94>
			{
				break;
 800e262:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e266:	2200      	movs	r2, #0
 800e268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e26c:	e003      	b.n	800e276 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e270:	2200      	movs	r2, #0
 800e272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	2b06      	cmp	r3, #6
 800e27a:	d901      	bls.n	800e280 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e27c:	2306      	movs	r3, #6
 800e27e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e284:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e28a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28e:	2200      	movs	r2, #0
 800e290:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e294:	3304      	adds	r3, #4
 800e296:	4618      	mov	r0, r3
 800e298:	f7ff fa1a 	bl	800d6d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29e:	3318      	adds	r3, #24
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7ff fa15 	bl	800d6d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	f1c3 0207 	rsb	r2, r3, #7
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ce:	3354      	adds	r3, #84	; 0x54
 800e2d0:	2260      	movs	r2, #96	; 0x60
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f001 ff9a 	bl	801020e <memset>
 800e2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2dc:	4a0c      	ldr	r2, [pc, #48]	; (800e310 <prvInitialiseNewTask+0x140>)
 800e2de:	659a      	str	r2, [r3, #88]	; 0x58
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e2:	4a0c      	ldr	r2, [pc, #48]	; (800e314 <prvInitialiseNewTask+0x144>)
 800e2e4:	65da      	str	r2, [r3, #92]	; 0x5c
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e8:	4a0b      	ldr	r2, [pc, #44]	; (800e318 <prvInitialiseNewTask+0x148>)
 800e2ea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	68f9      	ldr	r1, [r7, #12]
 800e2f0:	69b8      	ldr	r0, [r7, #24]
 800e2f2:	f001 f9e1 	bl	800f6b8 <pxPortInitialiseStack>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e306:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e308:	bf00      	nop
 800e30a:	3720      	adds	r7, #32
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	080123bc 	.word	0x080123bc
 800e314:	080123dc 	.word	0x080123dc
 800e318:	0801239c 	.word	0x0801239c

0800e31c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e324:	f001 faf6 	bl	800f914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e328:	4b2c      	ldr	r3, [pc, #176]	; (800e3dc <prvAddNewTaskToReadyList+0xc0>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	3301      	adds	r3, #1
 800e32e:	4a2b      	ldr	r2, [pc, #172]	; (800e3dc <prvAddNewTaskToReadyList+0xc0>)
 800e330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e332:	4b2b      	ldr	r3, [pc, #172]	; (800e3e0 <prvAddNewTaskToReadyList+0xc4>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d109      	bne.n	800e34e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e33a:	4a29      	ldr	r2, [pc, #164]	; (800e3e0 <prvAddNewTaskToReadyList+0xc4>)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e340:	4b26      	ldr	r3, [pc, #152]	; (800e3dc <prvAddNewTaskToReadyList+0xc0>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b01      	cmp	r3, #1
 800e346:	d110      	bne.n	800e36a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e348:	f000 fca2 	bl	800ec90 <prvInitialiseTaskLists>
 800e34c:	e00d      	b.n	800e36a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e34e:	4b25      	ldr	r3, [pc, #148]	; (800e3e4 <prvAddNewTaskToReadyList+0xc8>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d109      	bne.n	800e36a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e356:	4b22      	ldr	r3, [pc, #136]	; (800e3e0 <prvAddNewTaskToReadyList+0xc4>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e360:	429a      	cmp	r2, r3
 800e362:	d802      	bhi.n	800e36a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e364:	4a1e      	ldr	r2, [pc, #120]	; (800e3e0 <prvAddNewTaskToReadyList+0xc4>)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e36a:	4b1f      	ldr	r3, [pc, #124]	; (800e3e8 <prvAddNewTaskToReadyList+0xcc>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3301      	adds	r3, #1
 800e370:	4a1d      	ldr	r2, [pc, #116]	; (800e3e8 <prvAddNewTaskToReadyList+0xcc>)
 800e372:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e374:	4b1c      	ldr	r3, [pc, #112]	; (800e3e8 <prvAddNewTaskToReadyList+0xcc>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e380:	2201      	movs	r2, #1
 800e382:	409a      	lsls	r2, r3
 800e384:	4b19      	ldr	r3, [pc, #100]	; (800e3ec <prvAddNewTaskToReadyList+0xd0>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4313      	orrs	r3, r2
 800e38a:	4a18      	ldr	r2, [pc, #96]	; (800e3ec <prvAddNewTaskToReadyList+0xd0>)
 800e38c:	6013      	str	r3, [r2, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e392:	4613      	mov	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4a15      	ldr	r2, [pc, #84]	; (800e3f0 <prvAddNewTaskToReadyList+0xd4>)
 800e39c:	441a      	add	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	f7ff f9a0 	bl	800d6ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3aa:	f001 fae3 	bl	800f974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3ae:	4b0d      	ldr	r3, [pc, #52]	; (800e3e4 <prvAddNewTaskToReadyList+0xc8>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00e      	beq.n	800e3d4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3b6:	4b0a      	ldr	r3, [pc, #40]	; (800e3e0 <prvAddNewTaskToReadyList+0xc4>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d207      	bcs.n	800e3d4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3c4:	4b0b      	ldr	r3, [pc, #44]	; (800e3f4 <prvAddNewTaskToReadyList+0xd8>)
 800e3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ca:	601a      	str	r2, [r3, #0]
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3d4:	bf00      	nop
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	20002914 	.word	0x20002914
 800e3e0:	20002814 	.word	0x20002814
 800e3e4:	20002920 	.word	0x20002920
 800e3e8:	20002930 	.word	0x20002930
 800e3ec:	2000291c 	.word	0x2000291c
 800e3f0:	20002818 	.word	0x20002818
 800e3f4:	e000ed04 	.word	0xe000ed04

0800e3f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e400:	2300      	movs	r3, #0
 800e402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d017      	beq.n	800e43a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e40a:	4b13      	ldr	r3, [pc, #76]	; (800e458 <vTaskDelay+0x60>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00a      	beq.n	800e428 <vTaskDelay+0x30>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	60bb      	str	r3, [r7, #8]
}
 800e424:	bf00      	nop
 800e426:	e7fe      	b.n	800e426 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e428:	f000 f870 	bl	800e50c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e42c:	2100      	movs	r1, #0
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fd8e 	bl	800ef50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e434:	f000 f878 	bl	800e528 <xTaskResumeAll>
 800e438:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d107      	bne.n	800e450 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e440:	4b06      	ldr	r3, [pc, #24]	; (800e45c <vTaskDelay+0x64>)
 800e442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e446:	601a      	str	r2, [r3, #0]
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e450:	bf00      	nop
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	2000293c 	.word	0x2000293c
 800e45c:	e000ed04 	.word	0xe000ed04

0800e460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800e466:	4b21      	ldr	r3, [pc, #132]	; (800e4ec <vTaskStartScheduler+0x8c>)
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	2300      	movs	r3, #0
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	2300      	movs	r3, #0
 800e470:	2280      	movs	r2, #128	; 0x80
 800e472:	491f      	ldr	r1, [pc, #124]	; (800e4f0 <vTaskStartScheduler+0x90>)
 800e474:	481f      	ldr	r0, [pc, #124]	; (800e4f4 <vTaskStartScheduler+0x94>)
 800e476:	f7ff fe69 	bl	800e14c <xTaskCreate>
 800e47a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d102      	bne.n	800e488 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800e482:	f000 fdcb 	bl	800f01c <xTimerCreateTimerTask>
 800e486:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d11b      	bne.n	800e4c6 <vTaskStartScheduler+0x66>
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	60bb      	str	r3, [r7, #8]
}
 800e4a0:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e4a2:	4b15      	ldr	r3, [pc, #84]	; (800e4f8 <vTaskStartScheduler+0x98>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3354      	adds	r3, #84	; 0x54
 800e4a8:	4a14      	ldr	r2, [pc, #80]	; (800e4fc <vTaskStartScheduler+0x9c>)
 800e4aa:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e4ac:	4b14      	ldr	r3, [pc, #80]	; (800e500 <vTaskStartScheduler+0xa0>)
 800e4ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e4b4:	4b13      	ldr	r3, [pc, #76]	; (800e504 <vTaskStartScheduler+0xa4>)
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e4ba:	4b13      	ldr	r3, [pc, #76]	; (800e508 <vTaskStartScheduler+0xa8>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e4c0:	f001 f986 	bl	800f7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4c4:	e00e      	b.n	800e4e4 <vTaskStartScheduler+0x84>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4cc:	d10a      	bne.n	800e4e4 <vTaskStartScheduler+0x84>
	__asm volatile
 800e4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	607b      	str	r3, [r7, #4]
}
 800e4e0:	bf00      	nop
 800e4e2:	e7fe      	b.n	800e4e2 <vTaskStartScheduler+0x82>
}
 800e4e4:	bf00      	nop
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	20002938 	.word	0x20002938
 800e4f0:	08011bd0 	.word	0x08011bd0
 800e4f4:	0800ec5d 	.word	0x0800ec5d
 800e4f8:	20002814 	.word	0x20002814
 800e4fc:	20000aa8 	.word	0x20000aa8
 800e500:	20002934 	.word	0x20002934
 800e504:	20002920 	.word	0x20002920
 800e508:	20002918 	.word	0x20002918

0800e50c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e50c:	b480      	push	{r7}
 800e50e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e510:	4b04      	ldr	r3, [pc, #16]	; (800e524 <vTaskSuspendAll+0x18>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3301      	adds	r3, #1
 800e516:	4a03      	ldr	r2, [pc, #12]	; (800e524 <vTaskSuspendAll+0x18>)
 800e518:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e51a:	bf00      	nop
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	2000293c 	.word	0x2000293c

0800e528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e532:	2300      	movs	r3, #0
 800e534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e536:	4b41      	ldr	r3, [pc, #260]	; (800e63c <xTaskResumeAll+0x114>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10a      	bne.n	800e554 <xTaskResumeAll+0x2c>
	__asm volatile
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	603b      	str	r3, [r7, #0]
}
 800e550:	bf00      	nop
 800e552:	e7fe      	b.n	800e552 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e554:	f001 f9de 	bl	800f914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e558:	4b38      	ldr	r3, [pc, #224]	; (800e63c <xTaskResumeAll+0x114>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	4a37      	ldr	r2, [pc, #220]	; (800e63c <xTaskResumeAll+0x114>)
 800e560:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e562:	4b36      	ldr	r3, [pc, #216]	; (800e63c <xTaskResumeAll+0x114>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d161      	bne.n	800e62e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e56a:	4b35      	ldr	r3, [pc, #212]	; (800e640 <xTaskResumeAll+0x118>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d05d      	beq.n	800e62e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e572:	e02e      	b.n	800e5d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e574:	4b33      	ldr	r3, [pc, #204]	; (800e644 <xTaskResumeAll+0x11c>)
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	3318      	adds	r3, #24
 800e580:	4618      	mov	r0, r3
 800e582:	f7ff f90f 	bl	800d7a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3304      	adds	r3, #4
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7ff f90a 	bl	800d7a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e594:	2201      	movs	r2, #1
 800e596:	409a      	lsls	r2, r3
 800e598:	4b2b      	ldr	r3, [pc, #172]	; (800e648 <xTaskResumeAll+0x120>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	4a2a      	ldr	r2, [pc, #168]	; (800e648 <xTaskResumeAll+0x120>)
 800e5a0:	6013      	str	r3, [r2, #0]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4413      	add	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	4a27      	ldr	r2, [pc, #156]	; (800e64c <xTaskResumeAll+0x124>)
 800e5b0:	441a      	add	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3304      	adds	r3, #4
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	4610      	mov	r0, r2
 800e5ba:	f7ff f896 	bl	800d6ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c2:	4b23      	ldr	r3, [pc, #140]	; (800e650 <xTaskResumeAll+0x128>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d302      	bcc.n	800e5d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e5cc:	4b21      	ldr	r3, [pc, #132]	; (800e654 <xTaskResumeAll+0x12c>)
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5d2:	4b1c      	ldr	r3, [pc, #112]	; (800e644 <xTaskResumeAll+0x11c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1cc      	bne.n	800e574 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d001      	beq.n	800e5e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5e0:	f000 fbda 	bl	800ed98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e5e4:	4b1c      	ldr	r3, [pc, #112]	; (800e658 <xTaskResumeAll+0x130>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d010      	beq.n	800e612 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e5f0:	f000 f846 	bl	800e680 <xTaskIncrementTick>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d002      	beq.n	800e600 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e5fa:	4b16      	ldr	r3, [pc, #88]	; (800e654 <xTaskResumeAll+0x12c>)
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	3b01      	subs	r3, #1
 800e604:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d1f1      	bne.n	800e5f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e60c:	4b12      	ldr	r3, [pc, #72]	; (800e658 <xTaskResumeAll+0x130>)
 800e60e:	2200      	movs	r2, #0
 800e610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e612:	4b10      	ldr	r3, [pc, #64]	; (800e654 <xTaskResumeAll+0x12c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d009      	beq.n	800e62e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e61a:	2301      	movs	r3, #1
 800e61c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e61e:	4b0f      	ldr	r3, [pc, #60]	; (800e65c <xTaskResumeAll+0x134>)
 800e620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e624:	601a      	str	r2, [r3, #0]
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e62e:	f001 f9a1 	bl	800f974 <vPortExitCritical>

	return xAlreadyYielded;
 800e632:	68bb      	ldr	r3, [r7, #8]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	2000293c 	.word	0x2000293c
 800e640:	20002914 	.word	0x20002914
 800e644:	200028d4 	.word	0x200028d4
 800e648:	2000291c 	.word	0x2000291c
 800e64c:	20002818 	.word	0x20002818
 800e650:	20002814 	.word	0x20002814
 800e654:	20002928 	.word	0x20002928
 800e658:	20002924 	.word	0x20002924
 800e65c:	e000ed04 	.word	0xe000ed04

0800e660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e666:	4b05      	ldr	r3, [pc, #20]	; (800e67c <xTaskGetTickCount+0x1c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e66c:	687b      	ldr	r3, [r7, #4]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	20002918 	.word	0x20002918

0800e680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e686:	2300      	movs	r3, #0
 800e688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e68a:	4b4e      	ldr	r3, [pc, #312]	; (800e7c4 <xTaskIncrementTick+0x144>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	f040 808e 	bne.w	800e7b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e694:	4b4c      	ldr	r3, [pc, #304]	; (800e7c8 <xTaskIncrementTick+0x148>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3301      	adds	r3, #1
 800e69a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e69c:	4a4a      	ldr	r2, [pc, #296]	; (800e7c8 <xTaskIncrementTick+0x148>)
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d120      	bne.n	800e6ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6a8:	4b48      	ldr	r3, [pc, #288]	; (800e7cc <xTaskIncrementTick+0x14c>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00a      	beq.n	800e6c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b6:	f383 8811 	msr	BASEPRI, r3
 800e6ba:	f3bf 8f6f 	isb	sy
 800e6be:	f3bf 8f4f 	dsb	sy
 800e6c2:	603b      	str	r3, [r7, #0]
}
 800e6c4:	bf00      	nop
 800e6c6:	e7fe      	b.n	800e6c6 <xTaskIncrementTick+0x46>
 800e6c8:	4b40      	ldr	r3, [pc, #256]	; (800e7cc <xTaskIncrementTick+0x14c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	60fb      	str	r3, [r7, #12]
 800e6ce:	4b40      	ldr	r3, [pc, #256]	; (800e7d0 <xTaskIncrementTick+0x150>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4a3e      	ldr	r2, [pc, #248]	; (800e7cc <xTaskIncrementTick+0x14c>)
 800e6d4:	6013      	str	r3, [r2, #0]
 800e6d6:	4a3e      	ldr	r2, [pc, #248]	; (800e7d0 <xTaskIncrementTick+0x150>)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6013      	str	r3, [r2, #0]
 800e6dc:	4b3d      	ldr	r3, [pc, #244]	; (800e7d4 <xTaskIncrementTick+0x154>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	4a3c      	ldr	r2, [pc, #240]	; (800e7d4 <xTaskIncrementTick+0x154>)
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	f000 fb57 	bl	800ed98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e6ea:	4b3b      	ldr	r3, [pc, #236]	; (800e7d8 <xTaskIncrementTick+0x158>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d348      	bcc.n	800e786 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6f4:	4b35      	ldr	r3, [pc, #212]	; (800e7cc <xTaskIncrementTick+0x14c>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d104      	bne.n	800e708 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6fe:	4b36      	ldr	r3, [pc, #216]	; (800e7d8 <xTaskIncrementTick+0x158>)
 800e700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e704:	601a      	str	r2, [r3, #0]
					break;
 800e706:	e03e      	b.n	800e786 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e708:	4b30      	ldr	r3, [pc, #192]	; (800e7cc <xTaskIncrementTick+0x14c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e718:	693a      	ldr	r2, [r7, #16]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d203      	bcs.n	800e728 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e720:	4a2d      	ldr	r2, [pc, #180]	; (800e7d8 <xTaskIncrementTick+0x158>)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e726:	e02e      	b.n	800e786 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	3304      	adds	r3, #4
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7ff f839 	bl	800d7a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e736:	2b00      	cmp	r3, #0
 800e738:	d004      	beq.n	800e744 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	3318      	adds	r3, #24
 800e73e:	4618      	mov	r0, r3
 800e740:	f7ff f830 	bl	800d7a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e748:	2201      	movs	r2, #1
 800e74a:	409a      	lsls	r2, r3
 800e74c:	4b23      	ldr	r3, [pc, #140]	; (800e7dc <xTaskIncrementTick+0x15c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4313      	orrs	r3, r2
 800e752:	4a22      	ldr	r2, [pc, #136]	; (800e7dc <xTaskIncrementTick+0x15c>)
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75a:	4613      	mov	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4a1f      	ldr	r2, [pc, #124]	; (800e7e0 <xTaskIncrementTick+0x160>)
 800e764:	441a      	add	r2, r3
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	3304      	adds	r3, #4
 800e76a:	4619      	mov	r1, r3
 800e76c:	4610      	mov	r0, r2
 800e76e:	f7fe ffbc 	bl	800d6ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e776:	4b1b      	ldr	r3, [pc, #108]	; (800e7e4 <xTaskIncrementTick+0x164>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d3b9      	bcc.n	800e6f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e780:	2301      	movs	r3, #1
 800e782:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e784:	e7b6      	b.n	800e6f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e786:	4b17      	ldr	r3, [pc, #92]	; (800e7e4 <xTaskIncrementTick+0x164>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78c:	4914      	ldr	r1, [pc, #80]	; (800e7e0 <xTaskIncrementTick+0x160>)
 800e78e:	4613      	mov	r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4413      	add	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	440b      	add	r3, r1
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d901      	bls.n	800e7a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7a2:	4b11      	ldr	r3, [pc, #68]	; (800e7e8 <xTaskIncrementTick+0x168>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d007      	beq.n	800e7ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	617b      	str	r3, [r7, #20]
 800e7ae:	e004      	b.n	800e7ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7b0:	4b0e      	ldr	r3, [pc, #56]	; (800e7ec <xTaskIncrementTick+0x16c>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	4a0d      	ldr	r2, [pc, #52]	; (800e7ec <xTaskIncrementTick+0x16c>)
 800e7b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7ba:	697b      	ldr	r3, [r7, #20]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	2000293c 	.word	0x2000293c
 800e7c8:	20002918 	.word	0x20002918
 800e7cc:	200028cc 	.word	0x200028cc
 800e7d0:	200028d0 	.word	0x200028d0
 800e7d4:	2000292c 	.word	0x2000292c
 800e7d8:	20002934 	.word	0x20002934
 800e7dc:	2000291c 	.word	0x2000291c
 800e7e0:	20002818 	.word	0x20002818
 800e7e4:	20002814 	.word	0x20002814
 800e7e8:	20002928 	.word	0x20002928
 800e7ec:	20002924 	.word	0x20002924

0800e7f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b087      	sub	sp, #28
 800e7f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7f6:	4b29      	ldr	r3, [pc, #164]	; (800e89c <vTaskSwitchContext+0xac>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d003      	beq.n	800e806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e7fe:	4b28      	ldr	r3, [pc, #160]	; (800e8a0 <vTaskSwitchContext+0xb0>)
 800e800:	2201      	movs	r2, #1
 800e802:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e804:	e044      	b.n	800e890 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e806:	4b26      	ldr	r3, [pc, #152]	; (800e8a0 <vTaskSwitchContext+0xb0>)
 800e808:	2200      	movs	r2, #0
 800e80a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e80c:	4b25      	ldr	r3, [pc, #148]	; (800e8a4 <vTaskSwitchContext+0xb4>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	fab3 f383 	clz	r3, r3
 800e818:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e81a:	7afb      	ldrb	r3, [r7, #11]
 800e81c:	f1c3 031f 	rsb	r3, r3, #31
 800e820:	617b      	str	r3, [r7, #20]
 800e822:	4921      	ldr	r1, [pc, #132]	; (800e8a8 <vTaskSwitchContext+0xb8>)
 800e824:	697a      	ldr	r2, [r7, #20]
 800e826:	4613      	mov	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	4413      	add	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	440b      	add	r3, r1
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10a      	bne.n	800e84c <vTaskSwitchContext+0x5c>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	607b      	str	r3, [r7, #4]
}
 800e848:	bf00      	nop
 800e84a:	e7fe      	b.n	800e84a <vTaskSwitchContext+0x5a>
 800e84c:	697a      	ldr	r2, [r7, #20]
 800e84e:	4613      	mov	r3, r2
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	4413      	add	r3, r2
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	4a14      	ldr	r2, [pc, #80]	; (800e8a8 <vTaskSwitchContext+0xb8>)
 800e858:	4413      	add	r3, r2
 800e85a:	613b      	str	r3, [r7, #16]
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	685a      	ldr	r2, [r3, #4]
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	605a      	str	r2, [r3, #4]
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	685a      	ldr	r2, [r3, #4]
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	3308      	adds	r3, #8
 800e86e:	429a      	cmp	r2, r3
 800e870:	d104      	bne.n	800e87c <vTaskSwitchContext+0x8c>
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	685a      	ldr	r2, [r3, #4]
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	605a      	str	r2, [r3, #4]
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	4a0a      	ldr	r2, [pc, #40]	; (800e8ac <vTaskSwitchContext+0xbc>)
 800e884:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e886:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <vTaskSwitchContext+0xbc>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3354      	adds	r3, #84	; 0x54
 800e88c:	4a08      	ldr	r2, [pc, #32]	; (800e8b0 <vTaskSwitchContext+0xc0>)
 800e88e:	6013      	str	r3, [r2, #0]
}
 800e890:	bf00      	nop
 800e892:	371c      	adds	r7, #28
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	2000293c 	.word	0x2000293c
 800e8a0:	20002928 	.word	0x20002928
 800e8a4:	2000291c 	.word	0x2000291c
 800e8a8:	20002818 	.word	0x20002818
 800e8ac:	20002814 	.word	0x20002814
 800e8b0:	20000aa8 	.word	0x20000aa8

0800e8b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10a      	bne.n	800e8da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	60fb      	str	r3, [r7, #12]
}
 800e8d6:	bf00      	nop
 800e8d8:	e7fe      	b.n	800e8d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8da:	4b07      	ldr	r3, [pc, #28]	; (800e8f8 <vTaskPlaceOnEventList+0x44>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3318      	adds	r3, #24
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7fe ff25 	bl	800d732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	6838      	ldr	r0, [r7, #0]
 800e8ec:	f000 fb30 	bl	800ef50 <prvAddCurrentTaskToDelayedList>
}
 800e8f0:	bf00      	nop
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	20002814 	.word	0x20002814

0800e8fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b086      	sub	sp, #24
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10a      	bne.n	800e924 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	617b      	str	r3, [r7, #20]
}
 800e920:	bf00      	nop
 800e922:	e7fe      	b.n	800e922 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e924:	4b11      	ldr	r3, [pc, #68]	; (800e96c <vTaskPlaceOnUnorderedEventList+0x70>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10a      	bne.n	800e942 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e930:	f383 8811 	msr	BASEPRI, r3
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	613b      	str	r3, [r7, #16]
}
 800e93e:	bf00      	nop
 800e940:	e7fe      	b.n	800e940 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e942:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68ba      	ldr	r2, [r7, #8]
 800e948:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e94c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e94e:	4b08      	ldr	r3, [pc, #32]	; (800e970 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3318      	adds	r3, #24
 800e954:	4619      	mov	r1, r3
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f7fe fec7 	bl	800d6ea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e95c:	2101      	movs	r1, #1
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 faf6 	bl	800ef50 <prvAddCurrentTaskToDelayedList>
}
 800e964:	bf00      	nop
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	2000293c 	.word	0x2000293c
 800e970:	20002814 	.word	0x20002814

0800e974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d10a      	bne.n	800e99c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98a:	f383 8811 	msr	BASEPRI, r3
 800e98e:	f3bf 8f6f 	isb	sy
 800e992:	f3bf 8f4f 	dsb	sy
 800e996:	617b      	str	r3, [r7, #20]
}
 800e998:	bf00      	nop
 800e99a:	e7fe      	b.n	800e99a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e99c:	4b0a      	ldr	r3, [pc, #40]	; (800e9c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3318      	adds	r3, #24
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7fe fea0 	bl	800d6ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d002      	beq.n	800e9b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e9b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9b6:	6879      	ldr	r1, [r7, #4]
 800e9b8:	68b8      	ldr	r0, [r7, #8]
 800e9ba:	f000 fac9 	bl	800ef50 <prvAddCurrentTaskToDelayedList>
	}
 800e9be:	bf00      	nop
 800e9c0:	3718      	adds	r7, #24
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20002814 	.word	0x20002814

0800e9cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d10a      	bne.n	800e9f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	60fb      	str	r3, [r7, #12]
}
 800e9f4:	bf00      	nop
 800e9f6:	e7fe      	b.n	800e9f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	3318      	adds	r3, #24
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fe fed1 	bl	800d7a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea02:	4b1d      	ldr	r3, [pc, #116]	; (800ea78 <xTaskRemoveFromEventList+0xac>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d11c      	bne.n	800ea44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	3304      	adds	r3, #4
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fe fec8 	bl	800d7a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea18:	2201      	movs	r2, #1
 800ea1a:	409a      	lsls	r2, r3
 800ea1c:	4b17      	ldr	r3, [pc, #92]	; (800ea7c <xTaskRemoveFromEventList+0xb0>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	4a16      	ldr	r2, [pc, #88]	; (800ea7c <xTaskRemoveFromEventList+0xb0>)
 800ea24:	6013      	str	r3, [r2, #0]
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	4413      	add	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4a13      	ldr	r2, [pc, #76]	; (800ea80 <xTaskRemoveFromEventList+0xb4>)
 800ea34:	441a      	add	r2, r3
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	3304      	adds	r3, #4
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	f7fe fe54 	bl	800d6ea <vListInsertEnd>
 800ea42:	e005      	b.n	800ea50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	3318      	adds	r3, #24
 800ea48:	4619      	mov	r1, r3
 800ea4a:	480e      	ldr	r0, [pc, #56]	; (800ea84 <xTaskRemoveFromEventList+0xb8>)
 800ea4c:	f7fe fe4d 	bl	800d6ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea54:	4b0c      	ldr	r3, [pc, #48]	; (800ea88 <xTaskRemoveFromEventList+0xbc>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d905      	bls.n	800ea6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea62:	4b0a      	ldr	r3, [pc, #40]	; (800ea8c <xTaskRemoveFromEventList+0xc0>)
 800ea64:	2201      	movs	r2, #1
 800ea66:	601a      	str	r2, [r3, #0]
 800ea68:	e001      	b.n	800ea6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea6e:	697b      	ldr	r3, [r7, #20]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	2000293c 	.word	0x2000293c
 800ea7c:	2000291c 	.word	0x2000291c
 800ea80:	20002818 	.word	0x20002818
 800ea84:	200028d4 	.word	0x200028d4
 800ea88:	20002814 	.word	0x20002814
 800ea8c:	20002928 	.word	0x20002928

0800ea90 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ea9a:	4b29      	ldr	r3, [pc, #164]	; (800eb40 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10a      	bne.n	800eab8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800eaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa6:	f383 8811 	msr	BASEPRI, r3
 800eaaa:	f3bf 8f6f 	isb	sy
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	613b      	str	r3, [r7, #16]
}
 800eab4:	bf00      	nop
 800eab6:	e7fe      	b.n	800eab6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10a      	bne.n	800eae4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead2:	f383 8811 	msr	BASEPRI, r3
 800ead6:	f3bf 8f6f 	isb	sy
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	60fb      	str	r3, [r7, #12]
}
 800eae0:	bf00      	nop
 800eae2:	e7fe      	b.n	800eae2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7fe fe5d 	bl	800d7a4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	3304      	adds	r3, #4
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fe fe58 	bl	800d7a4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf8:	2201      	movs	r2, #1
 800eafa:	409a      	lsls	r2, r3
 800eafc:	4b11      	ldr	r3, [pc, #68]	; (800eb44 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4313      	orrs	r3, r2
 800eb02:	4a10      	ldr	r2, [pc, #64]	; (800eb44 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800eb04:	6013      	str	r3, [r2, #0]
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	4413      	add	r3, r2
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4a0d      	ldr	r2, [pc, #52]	; (800eb48 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800eb14:	441a      	add	r2, r3
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	3304      	adds	r3, #4
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	4610      	mov	r0, r2
 800eb1e:	f7fe fde4 	bl	800d6ea <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb26:	4b09      	ldr	r3, [pc, #36]	; (800eb4c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d902      	bls.n	800eb36 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800eb30:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800eb32:	2201      	movs	r2, #1
 800eb34:	601a      	str	r2, [r3, #0]
	}
}
 800eb36:	bf00      	nop
 800eb38:	3718      	adds	r7, #24
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	2000293c 	.word	0x2000293c
 800eb44:	2000291c 	.word	0x2000291c
 800eb48:	20002818 	.word	0x20002818
 800eb4c:	20002814 	.word	0x20002814
 800eb50:	20002928 	.word	0x20002928

0800eb54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb5c:	4b06      	ldr	r3, [pc, #24]	; (800eb78 <vTaskInternalSetTimeOutState+0x24>)
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb64:	4b05      	ldr	r3, [pc, #20]	; (800eb7c <vTaskInternalSetTimeOutState+0x28>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	605a      	str	r2, [r3, #4]
}
 800eb6c:	bf00      	nop
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr
 800eb78:	2000292c 	.word	0x2000292c
 800eb7c:	20002918 	.word	0x20002918

0800eb80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b088      	sub	sp, #32
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10a      	bne.n	800eba6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	f383 8811 	msr	BASEPRI, r3
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	613b      	str	r3, [r7, #16]
}
 800eba2:	bf00      	nop
 800eba4:	e7fe      	b.n	800eba4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10a      	bne.n	800ebc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	60fb      	str	r3, [r7, #12]
}
 800ebbe:	bf00      	nop
 800ebc0:	e7fe      	b.n	800ebc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ebc2:	f000 fea7 	bl	800f914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ebc6:	4b1d      	ldr	r3, [pc, #116]	; (800ec3c <xTaskCheckForTimeOut+0xbc>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	69ba      	ldr	r2, [r7, #24]
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebde:	d102      	bne.n	800ebe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	e023      	b.n	800ec2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	4b15      	ldr	r3, [pc, #84]	; (800ec40 <xTaskCheckForTimeOut+0xc0>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d007      	beq.n	800ec02 <xTaskCheckForTimeOut+0x82>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	69ba      	ldr	r2, [r7, #24]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d302      	bcc.n	800ec02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	61fb      	str	r3, [r7, #28]
 800ec00:	e015      	b.n	800ec2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d20b      	bcs.n	800ec24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	1ad2      	subs	r2, r2, r3
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff ff9b 	bl	800eb54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	61fb      	str	r3, [r7, #28]
 800ec22:	e004      	b.n	800ec2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	2200      	movs	r2, #0
 800ec28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec2e:	f000 fea1 	bl	800f974 <vPortExitCritical>

	return xReturn;
 800ec32:	69fb      	ldr	r3, [r7, #28]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3720      	adds	r7, #32
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	20002918 	.word	0x20002918
 800ec40:	2000292c 	.word	0x2000292c

0800ec44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec44:	b480      	push	{r7}
 800ec46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec48:	4b03      	ldr	r3, [pc, #12]	; (800ec58 <vTaskMissedYield+0x14>)
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	601a      	str	r2, [r3, #0]
}
 800ec4e:	bf00      	nop
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr
 800ec58:	20002928 	.word	0x20002928

0800ec5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec64:	f000 f854 	bl	800ed10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec68:	4b07      	ldr	r3, [pc, #28]	; (800ec88 <prvIdleTask+0x2c>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d907      	bls.n	800ec80 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ec70:	4b06      	ldr	r3, [pc, #24]	; (800ec8c <prvIdleTask+0x30>)
 800ec72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec76:	601a      	str	r2, [r3, #0]
 800ec78:	f3bf 8f4f 	dsb	sy
 800ec7c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ec80:	f7f8 fc6e 	bl	8007560 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ec84:	e7ee      	b.n	800ec64 <prvIdleTask+0x8>
 800ec86:	bf00      	nop
 800ec88:	20002818 	.word	0x20002818
 800ec8c:	e000ed04 	.word	0xe000ed04

0800ec90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec96:	2300      	movs	r3, #0
 800ec98:	607b      	str	r3, [r7, #4]
 800ec9a:	e00c      	b.n	800ecb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	4613      	mov	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4a12      	ldr	r2, [pc, #72]	; (800ecf0 <prvInitialiseTaskLists+0x60>)
 800eca8:	4413      	add	r3, r2
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fe fcf0 	bl	800d690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	607b      	str	r3, [r7, #4]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b06      	cmp	r3, #6
 800ecba:	d9ef      	bls.n	800ec9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ecbc:	480d      	ldr	r0, [pc, #52]	; (800ecf4 <prvInitialiseTaskLists+0x64>)
 800ecbe:	f7fe fce7 	bl	800d690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ecc2:	480d      	ldr	r0, [pc, #52]	; (800ecf8 <prvInitialiseTaskLists+0x68>)
 800ecc4:	f7fe fce4 	bl	800d690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ecc8:	480c      	ldr	r0, [pc, #48]	; (800ecfc <prvInitialiseTaskLists+0x6c>)
 800ecca:	f7fe fce1 	bl	800d690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ecce:	480c      	ldr	r0, [pc, #48]	; (800ed00 <prvInitialiseTaskLists+0x70>)
 800ecd0:	f7fe fcde 	bl	800d690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ecd4:	480b      	ldr	r0, [pc, #44]	; (800ed04 <prvInitialiseTaskLists+0x74>)
 800ecd6:	f7fe fcdb 	bl	800d690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ecda:	4b0b      	ldr	r3, [pc, #44]	; (800ed08 <prvInitialiseTaskLists+0x78>)
 800ecdc:	4a05      	ldr	r2, [pc, #20]	; (800ecf4 <prvInitialiseTaskLists+0x64>)
 800ecde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ece0:	4b0a      	ldr	r3, [pc, #40]	; (800ed0c <prvInitialiseTaskLists+0x7c>)
 800ece2:	4a05      	ldr	r2, [pc, #20]	; (800ecf8 <prvInitialiseTaskLists+0x68>)
 800ece4:	601a      	str	r2, [r3, #0]
}
 800ece6:	bf00      	nop
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	20002818 	.word	0x20002818
 800ecf4:	200028a4 	.word	0x200028a4
 800ecf8:	200028b8 	.word	0x200028b8
 800ecfc:	200028d4 	.word	0x200028d4
 800ed00:	200028e8 	.word	0x200028e8
 800ed04:	20002900 	.word	0x20002900
 800ed08:	200028cc 	.word	0x200028cc
 800ed0c:	200028d0 	.word	0x200028d0

0800ed10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed16:	e019      	b.n	800ed4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed18:	f000 fdfc 	bl	800f914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed1c:	4b10      	ldr	r3, [pc, #64]	; (800ed60 <prvCheckTasksWaitingTermination+0x50>)
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	3304      	adds	r3, #4
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7fe fd3b 	bl	800d7a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed2e:	4b0d      	ldr	r3, [pc, #52]	; (800ed64 <prvCheckTasksWaitingTermination+0x54>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	3b01      	subs	r3, #1
 800ed34:	4a0b      	ldr	r2, [pc, #44]	; (800ed64 <prvCheckTasksWaitingTermination+0x54>)
 800ed36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed38:	4b0b      	ldr	r3, [pc, #44]	; (800ed68 <prvCheckTasksWaitingTermination+0x58>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	3b01      	subs	r3, #1
 800ed3e:	4a0a      	ldr	r2, [pc, #40]	; (800ed68 <prvCheckTasksWaitingTermination+0x58>)
 800ed40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed42:	f000 fe17 	bl	800f974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f810 	bl	800ed6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed4c:	4b06      	ldr	r3, [pc, #24]	; (800ed68 <prvCheckTasksWaitingTermination+0x58>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e1      	bne.n	800ed18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	200028e8 	.word	0x200028e8
 800ed64:	20002914 	.word	0x20002914
 800ed68:	200028fc 	.word	0x200028fc

0800ed6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	3354      	adds	r3, #84	; 0x54
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f001 fde1 	bl	8010940 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 ffb4 	bl	800fcf0 <vPortFree>
			vPortFree( pxTCB );
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 ffb1 	bl	800fcf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed8e:	bf00      	nop
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
	...

0800ed98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed9e:	4b0c      	ldr	r3, [pc, #48]	; (800edd0 <prvResetNextTaskUnblockTime+0x38>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d104      	bne.n	800edb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eda8:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <prvResetNextTaskUnblockTime+0x3c>)
 800edaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800edae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800edb0:	e008      	b.n	800edc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edb2:	4b07      	ldr	r3, [pc, #28]	; (800edd0 <prvResetNextTaskUnblockTime+0x38>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	4a04      	ldr	r2, [pc, #16]	; (800edd4 <prvResetNextTaskUnblockTime+0x3c>)
 800edc2:	6013      	str	r3, [r2, #0]
}
 800edc4:	bf00      	nop
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	200028cc 	.word	0x200028cc
 800edd4:	20002934 	.word	0x20002934

0800edd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800edde:	4b0b      	ldr	r3, [pc, #44]	; (800ee0c <xTaskGetSchedulerState+0x34>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d102      	bne.n	800edec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ede6:	2301      	movs	r3, #1
 800ede8:	607b      	str	r3, [r7, #4]
 800edea:	e008      	b.n	800edfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edec:	4b08      	ldr	r3, [pc, #32]	; (800ee10 <xTaskGetSchedulerState+0x38>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d102      	bne.n	800edfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800edf4:	2302      	movs	r3, #2
 800edf6:	607b      	str	r3, [r7, #4]
 800edf8:	e001      	b.n	800edfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edfa:	2300      	movs	r3, #0
 800edfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edfe:	687b      	ldr	r3, [r7, #4]
	}
 800ee00:	4618      	mov	r0, r3
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr
 800ee0c:	20002920 	.word	0x20002920
 800ee10:	2000293c 	.word	0x2000293c

0800ee14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b086      	sub	sp, #24
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ee20:	2300      	movs	r3, #0
 800ee22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d06e      	beq.n	800ef08 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ee2a:	4b3a      	ldr	r3, [pc, #232]	; (800ef14 <xTaskPriorityDisinherit+0x100>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d00a      	beq.n	800ee4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	f383 8811 	msr	BASEPRI, r3
 800ee3c:	f3bf 8f6f 	isb	sy
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	60fb      	str	r3, [r7, #12]
}
 800ee46:	bf00      	nop
 800ee48:	e7fe      	b.n	800ee48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d10a      	bne.n	800ee68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ee52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	60bb      	str	r3, [r7, #8]
}
 800ee64:	bf00      	nop
 800ee66:	e7fe      	b.n	800ee66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee6c:	1e5a      	subs	r2, r3, #1
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d044      	beq.n	800ef08 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d140      	bne.n	800ef08 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	3304      	adds	r3, #4
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe fc8a 	bl	800d7a4 <uxListRemove>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d115      	bne.n	800eec2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9a:	491f      	ldr	r1, [pc, #124]	; (800ef18 <xTaskPriorityDisinherit+0x104>)
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	4413      	add	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	440b      	add	r3, r1
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d10a      	bne.n	800eec2 <xTaskPriorityDisinherit+0xae>
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	fa02 f303 	lsl.w	r3, r2, r3
 800eeb6:	43da      	mvns	r2, r3
 800eeb8:	4b18      	ldr	r3, [pc, #96]	; (800ef1c <xTaskPriorityDisinherit+0x108>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4013      	ands	r3, r2
 800eebe:	4a17      	ldr	r2, [pc, #92]	; (800ef1c <xTaskPriorityDisinherit+0x108>)
 800eec0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eece:	f1c3 0207 	rsb	r2, r3, #7
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeda:	2201      	movs	r2, #1
 800eedc:	409a      	lsls	r2, r3
 800eede:	4b0f      	ldr	r3, [pc, #60]	; (800ef1c <xTaskPriorityDisinherit+0x108>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	4a0d      	ldr	r2, [pc, #52]	; (800ef1c <xTaskPriorityDisinherit+0x108>)
 800eee6:	6013      	str	r3, [r2, #0]
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeec:	4613      	mov	r3, r2
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	4413      	add	r3, r2
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	4a08      	ldr	r2, [pc, #32]	; (800ef18 <xTaskPriorityDisinherit+0x104>)
 800eef6:	441a      	add	r2, r3
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	3304      	adds	r3, #4
 800eefc:	4619      	mov	r1, r3
 800eefe:	4610      	mov	r0, r2
 800ef00:	f7fe fbf3 	bl	800d6ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef04:	2301      	movs	r3, #1
 800ef06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef08:	697b      	ldr	r3, [r7, #20]
	}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3718      	adds	r7, #24
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	20002814 	.word	0x20002814
 800ef18:	20002818 	.word	0x20002818
 800ef1c:	2000291c 	.word	0x2000291c

0800ef20 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ef26:	4b09      	ldr	r3, [pc, #36]	; (800ef4c <uxTaskResetEventItemValue+0x2c>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	699b      	ldr	r3, [r3, #24]
 800ef2c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef2e:	4b07      	ldr	r3, [pc, #28]	; (800ef4c <uxTaskResetEventItemValue+0x2c>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef34:	4b05      	ldr	r3, [pc, #20]	; (800ef4c <uxTaskResetEventItemValue+0x2c>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f1c2 0207 	rsb	r2, r2, #7
 800ef3c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ef3e:	687b      	ldr	r3, [r7, #4]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	20002814 	.word	0x20002814

0800ef50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef5a:	4b29      	ldr	r3, [pc, #164]	; (800f000 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef60:	4b28      	ldr	r3, [pc, #160]	; (800f004 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	3304      	adds	r3, #4
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe fc1c 	bl	800d7a4 <uxListRemove>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d10b      	bne.n	800ef8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ef72:	4b24      	ldr	r3, [pc, #144]	; (800f004 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef78:	2201      	movs	r2, #1
 800ef7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef7e:	43da      	mvns	r2, r3
 800ef80:	4b21      	ldr	r3, [pc, #132]	; (800f008 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4013      	ands	r3, r2
 800ef86:	4a20      	ldr	r2, [pc, #128]	; (800f008 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef90:	d10a      	bne.n	800efa8 <prvAddCurrentTaskToDelayedList+0x58>
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d007      	beq.n	800efa8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef98:	4b1a      	ldr	r3, [pc, #104]	; (800f004 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3304      	adds	r3, #4
 800ef9e:	4619      	mov	r1, r3
 800efa0:	481a      	ldr	r0, [pc, #104]	; (800f00c <prvAddCurrentTaskToDelayedList+0xbc>)
 800efa2:	f7fe fba2 	bl	800d6ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800efa6:	e026      	b.n	800eff6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4413      	add	r3, r2
 800efae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800efb0:	4b14      	ldr	r3, [pc, #80]	; (800f004 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d209      	bcs.n	800efd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efc0:	4b13      	ldr	r3, [pc, #76]	; (800f010 <prvAddCurrentTaskToDelayedList+0xc0>)
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	4b0f      	ldr	r3, [pc, #60]	; (800f004 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	3304      	adds	r3, #4
 800efca:	4619      	mov	r1, r3
 800efcc:	4610      	mov	r0, r2
 800efce:	f7fe fbb0 	bl	800d732 <vListInsert>
}
 800efd2:	e010      	b.n	800eff6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efd4:	4b0f      	ldr	r3, [pc, #60]	; (800f014 <prvAddCurrentTaskToDelayedList+0xc4>)
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	4b0a      	ldr	r3, [pc, #40]	; (800f004 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	3304      	adds	r3, #4
 800efde:	4619      	mov	r1, r3
 800efe0:	4610      	mov	r0, r2
 800efe2:	f7fe fba6 	bl	800d732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efe6:	4b0c      	ldr	r3, [pc, #48]	; (800f018 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	429a      	cmp	r2, r3
 800efee:	d202      	bcs.n	800eff6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eff0:	4a09      	ldr	r2, [pc, #36]	; (800f018 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	6013      	str	r3, [r2, #0]
}
 800eff6:	bf00      	nop
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	20002918 	.word	0x20002918
 800f004:	20002814 	.word	0x20002814
 800f008:	2000291c 	.word	0x2000291c
 800f00c:	20002900 	.word	0x20002900
 800f010:	200028d0 	.word	0x200028d0
 800f014:	200028cc 	.word	0x200028cc
 800f018:	20002934 	.word	0x20002934

0800f01c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800f022:	2300      	movs	r3, #0
 800f024:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f026:	f000 faf1 	bl	800f60c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f02a:	4b11      	ldr	r3, [pc, #68]	; (800f070 <xTimerCreateTimerTask+0x54>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00b      	beq.n	800f04a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800f032:	4b10      	ldr	r3, [pc, #64]	; (800f074 <xTimerCreateTimerTask+0x58>)
 800f034:	9301      	str	r3, [sp, #4]
 800f036:	2302      	movs	r3, #2
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	2300      	movs	r3, #0
 800f03c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f040:	490d      	ldr	r1, [pc, #52]	; (800f078 <xTimerCreateTimerTask+0x5c>)
 800f042:	480e      	ldr	r0, [pc, #56]	; (800f07c <xTimerCreateTimerTask+0x60>)
 800f044:	f7ff f882 	bl	800e14c <xTaskCreate>
 800f048:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10a      	bne.n	800f066 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800f050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	603b      	str	r3, [r7, #0]
}
 800f062:	bf00      	nop
 800f064:	e7fe      	b.n	800f064 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800f066:	687b      	ldr	r3, [r7, #4]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	20002970 	.word	0x20002970
 800f074:	20002974 	.word	0x20002974
 800f078:	08011bd8 	.word	0x08011bd8
 800f07c:	0800f1b5 	.word	0x0800f1b5

0800f080 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	; 0x28
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f08e:	2300      	movs	r3, #0
 800f090:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d10a      	bne.n	800f0ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800f098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09c:	f383 8811 	msr	BASEPRI, r3
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	623b      	str	r3, [r7, #32]
}
 800f0aa:	bf00      	nop
 800f0ac:	e7fe      	b.n	800f0ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f0ae:	4b1a      	ldr	r3, [pc, #104]	; (800f118 <xTimerGenericCommand+0x98>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d02a      	beq.n	800f10c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b05      	cmp	r3, #5
 800f0c6:	dc18      	bgt.n	800f0fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0c8:	f7ff fe86 	bl	800edd8 <xTaskGetSchedulerState>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b02      	cmp	r3, #2
 800f0d0:	d109      	bne.n	800f0e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0d2:	4b11      	ldr	r3, [pc, #68]	; (800f118 <xTimerGenericCommand+0x98>)
 800f0d4:	6818      	ldr	r0, [r3, #0]
 800f0d6:	f107 0110 	add.w	r1, r7, #16
 800f0da:	2300      	movs	r3, #0
 800f0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0de:	f7fe fc4d 	bl	800d97c <xQueueGenericSend>
 800f0e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f0e4:	e012      	b.n	800f10c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0e6:	4b0c      	ldr	r3, [pc, #48]	; (800f118 <xTimerGenericCommand+0x98>)
 800f0e8:	6818      	ldr	r0, [r3, #0]
 800f0ea:	f107 0110 	add.w	r1, r7, #16
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f7fe fc43 	bl	800d97c <xQueueGenericSend>
 800f0f6:	6278      	str	r0, [r7, #36]	; 0x24
 800f0f8:	e008      	b.n	800f10c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f0fa:	4b07      	ldr	r3, [pc, #28]	; (800f118 <xTimerGenericCommand+0x98>)
 800f0fc:	6818      	ldr	r0, [r3, #0]
 800f0fe:	f107 0110 	add.w	r1, r7, #16
 800f102:	2300      	movs	r3, #0
 800f104:	683a      	ldr	r2, [r7, #0]
 800f106:	f7fe fd37 	bl	800db78 <xQueueGenericSendFromISR>
 800f10a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3728      	adds	r7, #40	; 0x28
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	20002970 	.word	0x20002970

0800f11c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b088      	sub	sp, #32
 800f120:	af02      	add	r7, sp, #8
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f126:	4b22      	ldr	r3, [pc, #136]	; (800f1b0 <prvProcessExpiredTimer+0x94>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	3304      	adds	r3, #4
 800f134:	4618      	mov	r0, r3
 800f136:	f7fe fb35 	bl	800d7a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f140:	f003 0304 	and.w	r3, r3, #4
 800f144:	2b00      	cmp	r3, #0
 800f146:	d022      	beq.n	800f18e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	699a      	ldr	r2, [r3, #24]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	18d1      	adds	r1, r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	6978      	ldr	r0, [r7, #20]
 800f156:	f000 f8d1 	bl	800f2fc <prvInsertTimerInActiveList>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d01f      	beq.n	800f1a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f160:	2300      	movs	r3, #0
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	2300      	movs	r3, #0
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	2100      	movs	r1, #0
 800f16a:	6978      	ldr	r0, [r7, #20]
 800f16c:	f7ff ff88 	bl	800f080 <xTimerGenericCommand>
 800f170:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d113      	bne.n	800f1a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17c:	f383 8811 	msr	BASEPRI, r3
 800f180:	f3bf 8f6f 	isb	sy
 800f184:	f3bf 8f4f 	dsb	sy
 800f188:	60fb      	str	r3, [r7, #12]
}
 800f18a:	bf00      	nop
 800f18c:	e7fe      	b.n	800f18c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f194:	f023 0301 	bic.w	r3, r3, #1
 800f198:	b2da      	uxtb	r2, r3
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	6978      	ldr	r0, [r7, #20]
 800f1a6:	4798      	blx	r3
}
 800f1a8:	bf00      	nop
 800f1aa:	3718      	adds	r7, #24
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20002968 	.word	0x20002968

0800f1b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1bc:	f107 0308 	add.w	r3, r7, #8
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 f857 	bl	800f274 <prvGetNextExpireTime>
 800f1c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f000 f803 	bl	800f1d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f1d2:	f000 f8d5 	bl	800f380 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1d6:	e7f1      	b.n	800f1bc <prvTimerTask+0x8>

0800f1d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f1e2:	f7ff f993 	bl	800e50c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1e6:	f107 0308 	add.w	r3, r7, #8
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 f866 	bl	800f2bc <prvSampleTimeNow>
 800f1f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d130      	bne.n	800f25a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10a      	bne.n	800f214 <prvProcessTimerOrBlockTask+0x3c>
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	429a      	cmp	r2, r3
 800f204:	d806      	bhi.n	800f214 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f206:	f7ff f98f 	bl	800e528 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f20a:	68f9      	ldr	r1, [r7, #12]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f7ff ff85 	bl	800f11c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f212:	e024      	b.n	800f25e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d008      	beq.n	800f22c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f21a:	4b13      	ldr	r3, [pc, #76]	; (800f268 <prvProcessTimerOrBlockTask+0x90>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d101      	bne.n	800f228 <prvProcessTimerOrBlockTask+0x50>
 800f224:	2301      	movs	r3, #1
 800f226:	e000      	b.n	800f22a <prvProcessTimerOrBlockTask+0x52>
 800f228:	2300      	movs	r3, #0
 800f22a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f22c:	4b0f      	ldr	r3, [pc, #60]	; (800f26c <prvProcessTimerOrBlockTask+0x94>)
 800f22e:	6818      	ldr	r0, [r3, #0]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	4619      	mov	r1, r3
 800f23a:	f7fe ff53 	bl	800e0e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f23e:	f7ff f973 	bl	800e528 <xTaskResumeAll>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10a      	bne.n	800f25e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f248:	4b09      	ldr	r3, [pc, #36]	; (800f270 <prvProcessTimerOrBlockTask+0x98>)
 800f24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f24e:	601a      	str	r2, [r3, #0]
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	f3bf 8f6f 	isb	sy
}
 800f258:	e001      	b.n	800f25e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f25a:	f7ff f965 	bl	800e528 <xTaskResumeAll>
}
 800f25e:	bf00      	nop
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	2000296c 	.word	0x2000296c
 800f26c:	20002970 	.word	0x20002970
 800f270:	e000ed04 	.word	0xe000ed04

0800f274 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f27c:	4b0e      	ldr	r3, [pc, #56]	; (800f2b8 <prvGetNextExpireTime+0x44>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d101      	bne.n	800f28a <prvGetNextExpireTime+0x16>
 800f286:	2201      	movs	r2, #1
 800f288:	e000      	b.n	800f28c <prvGetNextExpireTime+0x18>
 800f28a:	2200      	movs	r2, #0
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d105      	bne.n	800f2a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f298:	4b07      	ldr	r3, [pc, #28]	; (800f2b8 <prvGetNextExpireTime+0x44>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	e001      	b.n	800f2a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3714      	adds	r7, #20
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	20002968 	.word	0x20002968

0800f2bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f2c4:	f7ff f9cc 	bl	800e660 <xTaskGetTickCount>
 800f2c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f2ca:	4b0b      	ldr	r3, [pc, #44]	; (800f2f8 <prvSampleTimeNow+0x3c>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d205      	bcs.n	800f2e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f2d4:	f000 f936 	bl	800f544 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	e002      	b.n	800f2e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f2e6:	4a04      	ldr	r2, [pc, #16]	; (800f2f8 <prvSampleTimeNow+0x3c>)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20002978 	.word	0x20002978

0800f2fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f30a:	2300      	movs	r3, #0
 800f30c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d812      	bhi.n	800f348 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	1ad2      	subs	r2, r2, r3
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d302      	bcc.n	800f336 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f330:	2301      	movs	r3, #1
 800f332:	617b      	str	r3, [r7, #20]
 800f334:	e01b      	b.n	800f36e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f336:	4b10      	ldr	r3, [pc, #64]	; (800f378 <prvInsertTimerInActiveList+0x7c>)
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	3304      	adds	r3, #4
 800f33e:	4619      	mov	r1, r3
 800f340:	4610      	mov	r0, r2
 800f342:	f7fe f9f6 	bl	800d732 <vListInsert>
 800f346:	e012      	b.n	800f36e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d206      	bcs.n	800f35e <prvInsertTimerInActiveList+0x62>
 800f350:	68ba      	ldr	r2, [r7, #8]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d302      	bcc.n	800f35e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f358:	2301      	movs	r3, #1
 800f35a:	617b      	str	r3, [r7, #20]
 800f35c:	e007      	b.n	800f36e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f35e:	4b07      	ldr	r3, [pc, #28]	; (800f37c <prvInsertTimerInActiveList+0x80>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	3304      	adds	r3, #4
 800f366:	4619      	mov	r1, r3
 800f368:	4610      	mov	r0, r2
 800f36a:	f7fe f9e2 	bl	800d732 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f36e:	697b      	ldr	r3, [r7, #20]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3718      	adds	r7, #24
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	2000296c 	.word	0x2000296c
 800f37c:	20002968 	.word	0x20002968

0800f380 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b08e      	sub	sp, #56	; 0x38
 800f384:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f386:	e0ca      	b.n	800f51e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	da18      	bge.n	800f3c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f38e:	1d3b      	adds	r3, r7, #4
 800f390:	3304      	adds	r3, #4
 800f392:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	2b00      	cmp	r3, #0
 800f398:	d10a      	bne.n	800f3b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39e:	f383 8811 	msr	BASEPRI, r3
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	f3bf 8f4f 	dsb	sy
 800f3aa:	61fb      	str	r3, [r7, #28]
}
 800f3ac:	bf00      	nop
 800f3ae:	e7fe      	b.n	800f3ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3b6:	6850      	ldr	r0, [r2, #4]
 800f3b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3ba:	6892      	ldr	r2, [r2, #8]
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f2c0 80aa 	blt.w	800f51c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ce:	695b      	ldr	r3, [r3, #20]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d004      	beq.n	800f3de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d6:	3304      	adds	r3, #4
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7fe f9e3 	bl	800d7a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3de:	463b      	mov	r3, r7
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff ff6b 	bl	800f2bc <prvSampleTimeNow>
 800f3e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b09      	cmp	r3, #9
 800f3ec:	f200 8097 	bhi.w	800f51e <prvProcessReceivedCommands+0x19e>
 800f3f0:	a201      	add	r2, pc, #4	; (adr r2, 800f3f8 <prvProcessReceivedCommands+0x78>)
 800f3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f6:	bf00      	nop
 800f3f8:	0800f421 	.word	0x0800f421
 800f3fc:	0800f421 	.word	0x0800f421
 800f400:	0800f421 	.word	0x0800f421
 800f404:	0800f495 	.word	0x0800f495
 800f408:	0800f4a9 	.word	0x0800f4a9
 800f40c:	0800f4f3 	.word	0x0800f4f3
 800f410:	0800f421 	.word	0x0800f421
 800f414:	0800f421 	.word	0x0800f421
 800f418:	0800f495 	.word	0x0800f495
 800f41c:	0800f4a9 	.word	0x0800f4a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f426:	f043 0301 	orr.w	r3, r3, #1
 800f42a:	b2da      	uxtb	r2, r3
 800f42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f436:	699b      	ldr	r3, [r3, #24]
 800f438:	18d1      	adds	r1, r2, r3
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f440:	f7ff ff5c 	bl	800f2fc <prvInsertTimerInActiveList>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d069      	beq.n	800f51e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	6a1b      	ldr	r3, [r3, #32]
 800f44e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f450:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f458:	f003 0304 	and.w	r3, r3, #4
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d05e      	beq.n	800f51e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	699b      	ldr	r3, [r3, #24]
 800f466:	441a      	add	r2, r3
 800f468:	2300      	movs	r3, #0
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	2300      	movs	r3, #0
 800f46e:	2100      	movs	r1, #0
 800f470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f472:	f7ff fe05 	bl	800f080 <xTimerGenericCommand>
 800f476:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d14f      	bne.n	800f51e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	61bb      	str	r3, [r7, #24]
}
 800f490:	bf00      	nop
 800f492:	e7fe      	b.n	800f492 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f49a:	f023 0301 	bic.w	r3, r3, #1
 800f49e:	b2da      	uxtb	r2, r3
 800f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f4a6:	e03a      	b.n	800f51e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ae:	f043 0301 	orr.w	r3, r3, #1
 800f4b2:	b2da      	uxtb	r2, r3
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	699b      	ldr	r3, [r3, #24]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d10a      	bne.n	800f4de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4cc:	f383 8811 	msr	BASEPRI, r3
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	f3bf 8f4f 	dsb	sy
 800f4d8:	617b      	str	r3, [r7, #20]
}
 800f4da:	bf00      	nop
 800f4dc:	e7fe      	b.n	800f4dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	699a      	ldr	r2, [r3, #24]
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	18d1      	adds	r1, r2, r3
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4ec:	f7ff ff06 	bl	800f2fc <prvInsertTimerInActiveList>
					break;
 800f4f0:	e015      	b.n	800f51e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4f8:	f003 0302 	and.w	r3, r3, #2
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d103      	bne.n	800f508 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f502:	f000 fbf5 	bl	800fcf0 <vPortFree>
 800f506:	e00a      	b.n	800f51e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f50e:	f023 0301 	bic.w	r3, r3, #1
 800f512:	b2da      	uxtb	r2, r3
 800f514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f51a:	e000      	b.n	800f51e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f51c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f51e:	4b08      	ldr	r3, [pc, #32]	; (800f540 <prvProcessReceivedCommands+0x1c0>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	1d39      	adds	r1, r7, #4
 800f524:	2200      	movs	r2, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe fbc2 	bl	800dcb0 <xQueueReceive>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f47f af2a 	bne.w	800f388 <prvProcessReceivedCommands+0x8>
	}
}
 800f534:	bf00      	nop
 800f536:	bf00      	nop
 800f538:	3730      	adds	r7, #48	; 0x30
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	20002970 	.word	0x20002970

0800f544 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b088      	sub	sp, #32
 800f548:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f54a:	e048      	b.n	800f5de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f54c:	4b2d      	ldr	r3, [pc, #180]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f556:	4b2b      	ldr	r3, [pc, #172]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3304      	adds	r3, #4
 800f564:	4618      	mov	r0, r3
 800f566:	f7fe f91d 	bl	800d7a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	6a1b      	ldr	r3, [r3, #32]
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f578:	f003 0304 	and.w	r3, r3, #4
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d02e      	beq.n	800f5de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	699b      	ldr	r3, [r3, #24]
 800f584:	693a      	ldr	r2, [r7, #16]
 800f586:	4413      	add	r3, r2
 800f588:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d90e      	bls.n	800f5b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f59e:	4b19      	ldr	r3, [pc, #100]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	f7fe f8c2 	bl	800d732 <vListInsert>
 800f5ae:	e016      	b.n	800f5de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	693a      	ldr	r2, [r7, #16]
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f7ff fd60 	bl	800f080 <xTimerGenericCommand>
 800f5c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d10a      	bne.n	800f5de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5cc:	f383 8811 	msr	BASEPRI, r3
 800f5d0:	f3bf 8f6f 	isb	sy
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	603b      	str	r3, [r7, #0]
}
 800f5da:	bf00      	nop
 800f5dc:	e7fe      	b.n	800f5dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5de:	4b09      	ldr	r3, [pc, #36]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1b1      	bne.n	800f54c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f5e8:	4b06      	ldr	r3, [pc, #24]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f5ee:	4b06      	ldr	r3, [pc, #24]	; (800f608 <prvSwitchTimerLists+0xc4>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a04      	ldr	r2, [pc, #16]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f5f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f5f6:	4a04      	ldr	r2, [pc, #16]	; (800f608 <prvSwitchTimerLists+0xc4>)
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	6013      	str	r3, [r2, #0]
}
 800f5fc:	bf00      	nop
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	20002968 	.word	0x20002968
 800f608:	2000296c 	.word	0x2000296c

0800f60c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f610:	f000 f980 	bl	800f914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f614:	4b12      	ldr	r3, [pc, #72]	; (800f660 <prvCheckForValidListAndQueue+0x54>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d11d      	bne.n	800f658 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800f61c:	4811      	ldr	r0, [pc, #68]	; (800f664 <prvCheckForValidListAndQueue+0x58>)
 800f61e:	f7fe f837 	bl	800d690 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f622:	4811      	ldr	r0, [pc, #68]	; (800f668 <prvCheckForValidListAndQueue+0x5c>)
 800f624:	f7fe f834 	bl	800d690 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f628:	4b10      	ldr	r3, [pc, #64]	; (800f66c <prvCheckForValidListAndQueue+0x60>)
 800f62a:	4a0e      	ldr	r2, [pc, #56]	; (800f664 <prvCheckForValidListAndQueue+0x58>)
 800f62c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f62e:	4b10      	ldr	r3, [pc, #64]	; (800f670 <prvCheckForValidListAndQueue+0x64>)
 800f630:	4a0d      	ldr	r2, [pc, #52]	; (800f668 <prvCheckForValidListAndQueue+0x5c>)
 800f632:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f634:	2200      	movs	r2, #0
 800f636:	2110      	movs	r1, #16
 800f638:	200a      	movs	r0, #10
 800f63a:	f7fe f945 	bl	800d8c8 <xQueueGenericCreate>
 800f63e:	4603      	mov	r3, r0
 800f640:	4a07      	ldr	r2, [pc, #28]	; (800f660 <prvCheckForValidListAndQueue+0x54>)
 800f642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f644:	4b06      	ldr	r3, [pc, #24]	; (800f660 <prvCheckForValidListAndQueue+0x54>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d005      	beq.n	800f658 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f64c:	4b04      	ldr	r3, [pc, #16]	; (800f660 <prvCheckForValidListAndQueue+0x54>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4908      	ldr	r1, [pc, #32]	; (800f674 <prvCheckForValidListAndQueue+0x68>)
 800f652:	4618      	mov	r0, r3
 800f654:	f7fe fd1c 	bl	800e090 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f658:	f000 f98c 	bl	800f974 <vPortExitCritical>
}
 800f65c:	bf00      	nop
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	20002970 	.word	0x20002970
 800f664:	20002940 	.word	0x20002940
 800f668:	20002954 	.word	0x20002954
 800f66c:	20002968 	.word	0x20002968
 800f670:	2000296c 	.word	0x2000296c
 800f674:	08011be0 	.word	0x08011be0

0800f678 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b08a      	sub	sp, #40	; 0x28
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
 800f684:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f686:	f06f 0301 	mvn.w	r3, #1
 800f68a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f698:	4b06      	ldr	r3, [pc, #24]	; (800f6b4 <xTimerPendFunctionCallFromISR+0x3c>)
 800f69a:	6818      	ldr	r0, [r3, #0]
 800f69c:	f107 0114 	add.w	r1, r7, #20
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	f7fe fa68 	bl	800db78 <xQueueGenericSendFromISR>
 800f6a8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3728      	adds	r7, #40	; 0x28
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	20002970 	.word	0x20002970

0800f6b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	3b04      	subs	r3, #4
 800f6c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f6d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	3b04      	subs	r3, #4
 800f6d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	f023 0201 	bic.w	r2, r3, #1
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3b04      	subs	r3, #4
 800f6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6e8:	4a0c      	ldr	r2, [pc, #48]	; (800f71c <pxPortInitialiseStack+0x64>)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3b14      	subs	r3, #20
 800f6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	3b04      	subs	r3, #4
 800f6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f06f 0202 	mvn.w	r2, #2
 800f706:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	3b20      	subs	r3, #32
 800f70c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f70e:	68fb      	ldr	r3, [r7, #12]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3714      	adds	r7, #20
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr
 800f71c:	0800f721 	.word	0x0800f721

0800f720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f726:	2300      	movs	r3, #0
 800f728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f72a:	4b12      	ldr	r3, [pc, #72]	; (800f774 <prvTaskExitError+0x54>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f732:	d00a      	beq.n	800f74a <prvTaskExitError+0x2a>
	__asm volatile
 800f734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f738:	f383 8811 	msr	BASEPRI, r3
 800f73c:	f3bf 8f6f 	isb	sy
 800f740:	f3bf 8f4f 	dsb	sy
 800f744:	60fb      	str	r3, [r7, #12]
}
 800f746:	bf00      	nop
 800f748:	e7fe      	b.n	800f748 <prvTaskExitError+0x28>
	__asm volatile
 800f74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74e:	f383 8811 	msr	BASEPRI, r3
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	f3bf 8f4f 	dsb	sy
 800f75a:	60bb      	str	r3, [r7, #8]
}
 800f75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f75e:	bf00      	nop
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d0fc      	beq.n	800f760 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f766:	bf00      	nop
 800f768:	bf00      	nop
 800f76a:	3714      	adds	r7, #20
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr
 800f774:	20000aa4 	.word	0x20000aa4
	...

0800f780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f780:	4b07      	ldr	r3, [pc, #28]	; (800f7a0 <pxCurrentTCBConst2>)
 800f782:	6819      	ldr	r1, [r3, #0]
 800f784:	6808      	ldr	r0, [r1, #0]
 800f786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78a:	f380 8809 	msr	PSP, r0
 800f78e:	f3bf 8f6f 	isb	sy
 800f792:	f04f 0000 	mov.w	r0, #0
 800f796:	f380 8811 	msr	BASEPRI, r0
 800f79a:	4770      	bx	lr
 800f79c:	f3af 8000 	nop.w

0800f7a0 <pxCurrentTCBConst2>:
 800f7a0:	20002814 	.word	0x20002814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop

0800f7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7a8:	4808      	ldr	r0, [pc, #32]	; (800f7cc <prvPortStartFirstTask+0x24>)
 800f7aa:	6800      	ldr	r0, [r0, #0]
 800f7ac:	6800      	ldr	r0, [r0, #0]
 800f7ae:	f380 8808 	msr	MSP, r0
 800f7b2:	f04f 0000 	mov.w	r0, #0
 800f7b6:	f380 8814 	msr	CONTROL, r0
 800f7ba:	b662      	cpsie	i
 800f7bc:	b661      	cpsie	f
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	f3bf 8f6f 	isb	sy
 800f7c6:	df00      	svc	0
 800f7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7ca:	bf00      	nop
 800f7cc:	e000ed08 	.word	0xe000ed08

0800f7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b086      	sub	sp, #24
 800f7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f7d6:	4b46      	ldr	r3, [pc, #280]	; (800f8f0 <xPortStartScheduler+0x120>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a46      	ldr	r2, [pc, #280]	; (800f8f4 <xPortStartScheduler+0x124>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d10a      	bne.n	800f7f6 <xPortStartScheduler+0x26>
	__asm volatile
 800f7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e4:	f383 8811 	msr	BASEPRI, r3
 800f7e8:	f3bf 8f6f 	isb	sy
 800f7ec:	f3bf 8f4f 	dsb	sy
 800f7f0:	613b      	str	r3, [r7, #16]
}
 800f7f2:	bf00      	nop
 800f7f4:	e7fe      	b.n	800f7f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f7f6:	4b3e      	ldr	r3, [pc, #248]	; (800f8f0 <xPortStartScheduler+0x120>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a3f      	ldr	r2, [pc, #252]	; (800f8f8 <xPortStartScheduler+0x128>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d10a      	bne.n	800f816 <xPortStartScheduler+0x46>
	__asm volatile
 800f800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f804:	f383 8811 	msr	BASEPRI, r3
 800f808:	f3bf 8f6f 	isb	sy
 800f80c:	f3bf 8f4f 	dsb	sy
 800f810:	60fb      	str	r3, [r7, #12]
}
 800f812:	bf00      	nop
 800f814:	e7fe      	b.n	800f814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f816:	4b39      	ldr	r3, [pc, #228]	; (800f8fc <xPortStartScheduler+0x12c>)
 800f818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	22ff      	movs	r2, #255	; 0xff
 800f826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f830:	78fb      	ldrb	r3, [r7, #3]
 800f832:	b2db      	uxtb	r3, r3
 800f834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	4b31      	ldr	r3, [pc, #196]	; (800f900 <xPortStartScheduler+0x130>)
 800f83c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f83e:	4b31      	ldr	r3, [pc, #196]	; (800f904 <xPortStartScheduler+0x134>)
 800f840:	2207      	movs	r2, #7
 800f842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f844:	e009      	b.n	800f85a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f846:	4b2f      	ldr	r3, [pc, #188]	; (800f904 <xPortStartScheduler+0x134>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	4a2d      	ldr	r2, [pc, #180]	; (800f904 <xPortStartScheduler+0x134>)
 800f84e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f850:	78fb      	ldrb	r3, [r7, #3]
 800f852:	b2db      	uxtb	r3, r3
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	b2db      	uxtb	r3, r3
 800f858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f85a:	78fb      	ldrb	r3, [r7, #3]
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f862:	2b80      	cmp	r3, #128	; 0x80
 800f864:	d0ef      	beq.n	800f846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f866:	4b27      	ldr	r3, [pc, #156]	; (800f904 <xPortStartScheduler+0x134>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f1c3 0307 	rsb	r3, r3, #7
 800f86e:	2b04      	cmp	r3, #4
 800f870:	d00a      	beq.n	800f888 <xPortStartScheduler+0xb8>
	__asm volatile
 800f872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f876:	f383 8811 	msr	BASEPRI, r3
 800f87a:	f3bf 8f6f 	isb	sy
 800f87e:	f3bf 8f4f 	dsb	sy
 800f882:	60bb      	str	r3, [r7, #8]
}
 800f884:	bf00      	nop
 800f886:	e7fe      	b.n	800f886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f888:	4b1e      	ldr	r3, [pc, #120]	; (800f904 <xPortStartScheduler+0x134>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	021b      	lsls	r3, r3, #8
 800f88e:	4a1d      	ldr	r2, [pc, #116]	; (800f904 <xPortStartScheduler+0x134>)
 800f890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f892:	4b1c      	ldr	r3, [pc, #112]	; (800f904 <xPortStartScheduler+0x134>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f89a:	4a1a      	ldr	r2, [pc, #104]	; (800f904 <xPortStartScheduler+0x134>)
 800f89c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	b2da      	uxtb	r2, r3
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f8a6:	4b18      	ldr	r3, [pc, #96]	; (800f908 <xPortStartScheduler+0x138>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4a17      	ldr	r2, [pc, #92]	; (800f908 <xPortStartScheduler+0x138>)
 800f8ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f8b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f8b2:	4b15      	ldr	r3, [pc, #84]	; (800f908 <xPortStartScheduler+0x138>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a14      	ldr	r2, [pc, #80]	; (800f908 <xPortStartScheduler+0x138>)
 800f8b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f8bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f8be:	f000 f8dd 	bl	800fa7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f8c2:	4b12      	ldr	r3, [pc, #72]	; (800f90c <xPortStartScheduler+0x13c>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f8c8:	f000 f8fc 	bl	800fac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f8cc:	4b10      	ldr	r3, [pc, #64]	; (800f910 <xPortStartScheduler+0x140>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a0f      	ldr	r2, [pc, #60]	; (800f910 <xPortStartScheduler+0x140>)
 800f8d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f8d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f8d8:	f7ff ff66 	bl	800f7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8dc:	f7fe ff88 	bl	800e7f0 <vTaskSwitchContext>
	prvTaskExitError();
 800f8e0:	f7ff ff1e 	bl	800f720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3718      	adds	r7, #24
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	e000ed00 	.word	0xe000ed00
 800f8f4:	410fc271 	.word	0x410fc271
 800f8f8:	410fc270 	.word	0x410fc270
 800f8fc:	e000e400 	.word	0xe000e400
 800f900:	2000297c 	.word	0x2000297c
 800f904:	20002980 	.word	0x20002980
 800f908:	e000ed20 	.word	0xe000ed20
 800f90c:	20000aa4 	.word	0x20000aa4
 800f910:	e000ef34 	.word	0xe000ef34

0800f914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
	__asm volatile
 800f91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91e:	f383 8811 	msr	BASEPRI, r3
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	607b      	str	r3, [r7, #4]
}
 800f92c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f92e:	4b0f      	ldr	r3, [pc, #60]	; (800f96c <vPortEnterCritical+0x58>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	3301      	adds	r3, #1
 800f934:	4a0d      	ldr	r2, [pc, #52]	; (800f96c <vPortEnterCritical+0x58>)
 800f936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f938:	4b0c      	ldr	r3, [pc, #48]	; (800f96c <vPortEnterCritical+0x58>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d10f      	bne.n	800f960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f940:	4b0b      	ldr	r3, [pc, #44]	; (800f970 <vPortEnterCritical+0x5c>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	b2db      	uxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00a      	beq.n	800f960 <vPortEnterCritical+0x4c>
	__asm volatile
 800f94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94e:	f383 8811 	msr	BASEPRI, r3
 800f952:	f3bf 8f6f 	isb	sy
 800f956:	f3bf 8f4f 	dsb	sy
 800f95a:	603b      	str	r3, [r7, #0]
}
 800f95c:	bf00      	nop
 800f95e:	e7fe      	b.n	800f95e <vPortEnterCritical+0x4a>
	}
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr
 800f96c:	20000aa4 	.word	0x20000aa4
 800f970:	e000ed04 	.word	0xe000ed04

0800f974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f97a:	4b12      	ldr	r3, [pc, #72]	; (800f9c4 <vPortExitCritical+0x50>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d10a      	bne.n	800f998 <vPortExitCritical+0x24>
	__asm volatile
 800f982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f986:	f383 8811 	msr	BASEPRI, r3
 800f98a:	f3bf 8f6f 	isb	sy
 800f98e:	f3bf 8f4f 	dsb	sy
 800f992:	607b      	str	r3, [r7, #4]
}
 800f994:	bf00      	nop
 800f996:	e7fe      	b.n	800f996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f998:	4b0a      	ldr	r3, [pc, #40]	; (800f9c4 <vPortExitCritical+0x50>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	4a09      	ldr	r2, [pc, #36]	; (800f9c4 <vPortExitCritical+0x50>)
 800f9a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9a2:	4b08      	ldr	r3, [pc, #32]	; (800f9c4 <vPortExitCritical+0x50>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d105      	bne.n	800f9b6 <vPortExitCritical+0x42>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	f383 8811 	msr	BASEPRI, r3
}
 800f9b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9b6:	bf00      	nop
 800f9b8:	370c      	adds	r7, #12
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	20000aa4 	.word	0x20000aa4
	...

0800f9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f9d0:	f3ef 8009 	mrs	r0, PSP
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	4b15      	ldr	r3, [pc, #84]	; (800fa30 <pxCurrentTCBConst>)
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	f01e 0f10 	tst.w	lr, #16
 800f9e0:	bf08      	it	eq
 800f9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ea:	6010      	str	r0, [r2, #0]
 800f9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f9f4:	f380 8811 	msr	BASEPRI, r0
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f7fe fef6 	bl	800e7f0 <vTaskSwitchContext>
 800fa04:	f04f 0000 	mov.w	r0, #0
 800fa08:	f380 8811 	msr	BASEPRI, r0
 800fa0c:	bc09      	pop	{r0, r3}
 800fa0e:	6819      	ldr	r1, [r3, #0]
 800fa10:	6808      	ldr	r0, [r1, #0]
 800fa12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa16:	f01e 0f10 	tst.w	lr, #16
 800fa1a:	bf08      	it	eq
 800fa1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa20:	f380 8809 	msr	PSP, r0
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	f3af 8000 	nop.w

0800fa30 <pxCurrentTCBConst>:
 800fa30:	20002814 	.word	0x20002814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa34:	bf00      	nop
 800fa36:	bf00      	nop

0800fa38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	607b      	str	r3, [r7, #4]
}
 800fa50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa52:	f7fe fe15 	bl	800e680 <xTaskIncrementTick>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d003      	beq.n	800fa64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa5c:	4b06      	ldr	r3, [pc, #24]	; (800fa78 <SysTick_Handler+0x40>)
 800fa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa62:	601a      	str	r2, [r3, #0]
 800fa64:	2300      	movs	r3, #0
 800fa66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	f383 8811 	msr	BASEPRI, r3
}
 800fa6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa70:	bf00      	nop
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	e000ed04 	.word	0xe000ed04

0800fa7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fa80:	4b0b      	ldr	r3, [pc, #44]	; (800fab0 <vPortSetupTimerInterrupt+0x34>)
 800fa82:	2200      	movs	r2, #0
 800fa84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa86:	4b0b      	ldr	r3, [pc, #44]	; (800fab4 <vPortSetupTimerInterrupt+0x38>)
 800fa88:	2200      	movs	r2, #0
 800fa8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa8c:	4b0a      	ldr	r3, [pc, #40]	; (800fab8 <vPortSetupTimerInterrupt+0x3c>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a0a      	ldr	r2, [pc, #40]	; (800fabc <vPortSetupTimerInterrupt+0x40>)
 800fa92:	fba2 2303 	umull	r2, r3, r2, r3
 800fa96:	099b      	lsrs	r3, r3, #6
 800fa98:	4a09      	ldr	r2, [pc, #36]	; (800fac0 <vPortSetupTimerInterrupt+0x44>)
 800fa9a:	3b01      	subs	r3, #1
 800fa9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa9e:	4b04      	ldr	r3, [pc, #16]	; (800fab0 <vPortSetupTimerInterrupt+0x34>)
 800faa0:	2207      	movs	r2, #7
 800faa2:	601a      	str	r2, [r3, #0]
}
 800faa4:	bf00      	nop
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	e000e010 	.word	0xe000e010
 800fab4:	e000e018 	.word	0xe000e018
 800fab8:	20000a98 	.word	0x20000a98
 800fabc:	10624dd3 	.word	0x10624dd3
 800fac0:	e000e014 	.word	0xe000e014

0800fac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fad4 <vPortEnableVFP+0x10>
 800fac8:	6801      	ldr	r1, [r0, #0]
 800faca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800face:	6001      	str	r1, [r0, #0]
 800fad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fad2:	bf00      	nop
 800fad4:	e000ed88 	.word	0xe000ed88

0800fad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fad8:	b480      	push	{r7}
 800fada:	b085      	sub	sp, #20
 800fadc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fade:	f3ef 8305 	mrs	r3, IPSR
 800fae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2b0f      	cmp	r3, #15
 800fae8:	d914      	bls.n	800fb14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800faea:	4a17      	ldr	r2, [pc, #92]	; (800fb48 <vPortValidateInterruptPriority+0x70>)
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	4413      	add	r3, r2
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800faf4:	4b15      	ldr	r3, [pc, #84]	; (800fb4c <vPortValidateInterruptPriority+0x74>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	7afa      	ldrb	r2, [r7, #11]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d20a      	bcs.n	800fb14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	607b      	str	r3, [r7, #4]
}
 800fb10:	bf00      	nop
 800fb12:	e7fe      	b.n	800fb12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb14:	4b0e      	ldr	r3, [pc, #56]	; (800fb50 <vPortValidateInterruptPriority+0x78>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb1c:	4b0d      	ldr	r3, [pc, #52]	; (800fb54 <vPortValidateInterruptPriority+0x7c>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d90a      	bls.n	800fb3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb28:	f383 8811 	msr	BASEPRI, r3
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	603b      	str	r3, [r7, #0]
}
 800fb36:	bf00      	nop
 800fb38:	e7fe      	b.n	800fb38 <vPortValidateInterruptPriority+0x60>
	}
 800fb3a:	bf00      	nop
 800fb3c:	3714      	adds	r7, #20
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
 800fb46:	bf00      	nop
 800fb48:	e000e3f0 	.word	0xe000e3f0
 800fb4c:	2000297c 	.word	0x2000297c
 800fb50:	e000ed0c 	.word	0xe000ed0c
 800fb54:	20002980 	.word	0x20002980

0800fb58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b08a      	sub	sp, #40	; 0x28
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb60:	2300      	movs	r3, #0
 800fb62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb64:	f7fe fcd2 	bl	800e50c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb68:	4b5b      	ldr	r3, [pc, #364]	; (800fcd8 <pvPortMalloc+0x180>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb70:	f000 f920 	bl	800fdb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb74:	4b59      	ldr	r3, [pc, #356]	; (800fcdc <pvPortMalloc+0x184>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4013      	ands	r3, r2
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	f040 8093 	bne.w	800fca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d01d      	beq.n	800fbc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fb88:	2208      	movs	r2, #8
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f003 0307 	and.w	r3, r3, #7
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d014      	beq.n	800fbc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f023 0307 	bic.w	r3, r3, #7
 800fba0:	3308      	adds	r3, #8
 800fba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f003 0307 	and.w	r3, r3, #7
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00a      	beq.n	800fbc4 <pvPortMalloc+0x6c>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	617b      	str	r3, [r7, #20]
}
 800fbc0:	bf00      	nop
 800fbc2:	e7fe      	b.n	800fbc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d06e      	beq.n	800fca8 <pvPortMalloc+0x150>
 800fbca:	4b45      	ldr	r3, [pc, #276]	; (800fce0 <pvPortMalloc+0x188>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d869      	bhi.n	800fca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fbd4:	4b43      	ldr	r3, [pc, #268]	; (800fce4 <pvPortMalloc+0x18c>)
 800fbd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fbd8:	4b42      	ldr	r3, [pc, #264]	; (800fce4 <pvPortMalloc+0x18c>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbde:	e004      	b.n	800fbea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d903      	bls.n	800fbfc <pvPortMalloc+0xa4>
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1f1      	bne.n	800fbe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fbfc:	4b36      	ldr	r3, [pc, #216]	; (800fcd8 <pvPortMalloc+0x180>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d050      	beq.n	800fca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc06:	6a3b      	ldr	r3, [r7, #32]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2208      	movs	r2, #8
 800fc0c:	4413      	add	r3, r2
 800fc0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	6a3b      	ldr	r3, [r7, #32]
 800fc16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1a:	685a      	ldr	r2, [r3, #4]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	1ad2      	subs	r2, r2, r3
 800fc20:	2308      	movs	r3, #8
 800fc22:	005b      	lsls	r3, r3, #1
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d91f      	bls.n	800fc68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	f003 0307 	and.w	r3, r3, #7
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d00a      	beq.n	800fc50 <pvPortMalloc+0xf8>
	__asm volatile
 800fc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3e:	f383 8811 	msr	BASEPRI, r3
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	613b      	str	r3, [r7, #16]
}
 800fc4c:	bf00      	nop
 800fc4e:	e7fe      	b.n	800fc4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc52:	685a      	ldr	r2, [r3, #4]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	1ad2      	subs	r2, r2, r3
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc62:	69b8      	ldr	r0, [r7, #24]
 800fc64:	f000 f908 	bl	800fe78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc68:	4b1d      	ldr	r3, [pc, #116]	; (800fce0 <pvPortMalloc+0x188>)
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	4a1b      	ldr	r2, [pc, #108]	; (800fce0 <pvPortMalloc+0x188>)
 800fc74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc76:	4b1a      	ldr	r3, [pc, #104]	; (800fce0 <pvPortMalloc+0x188>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	4b1b      	ldr	r3, [pc, #108]	; (800fce8 <pvPortMalloc+0x190>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d203      	bcs.n	800fc8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc82:	4b17      	ldr	r3, [pc, #92]	; (800fce0 <pvPortMalloc+0x188>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4a18      	ldr	r2, [pc, #96]	; (800fce8 <pvPortMalloc+0x190>)
 800fc88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8c:	685a      	ldr	r2, [r3, #4]
 800fc8e:	4b13      	ldr	r3, [pc, #76]	; (800fcdc <pvPortMalloc+0x184>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	431a      	orrs	r2, r3
 800fc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fc9e:	4b13      	ldr	r3, [pc, #76]	; (800fcec <pvPortMalloc+0x194>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	3301      	adds	r3, #1
 800fca4:	4a11      	ldr	r2, [pc, #68]	; (800fcec <pvPortMalloc+0x194>)
 800fca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fca8:	f7fe fc3e 	bl	800e528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	f003 0307 	and.w	r3, r3, #7
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00a      	beq.n	800fccc <pvPortMalloc+0x174>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	60fb      	str	r3, [r7, #12]
}
 800fcc8:	bf00      	nop
 800fcca:	e7fe      	b.n	800fcca <pvPortMalloc+0x172>
	return pvReturn;
 800fccc:	69fb      	ldr	r3, [r7, #28]
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3728      	adds	r7, #40	; 0x28
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	2000798c 	.word	0x2000798c
 800fcdc:	200079a0 	.word	0x200079a0
 800fce0:	20007990 	.word	0x20007990
 800fce4:	20007984 	.word	0x20007984
 800fce8:	20007994 	.word	0x20007994
 800fcec:	20007998 	.word	0x20007998

0800fcf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b086      	sub	sp, #24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d04d      	beq.n	800fd9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd02:	2308      	movs	r3, #8
 800fd04:	425b      	negs	r3, r3
 800fd06:	697a      	ldr	r2, [r7, #20]
 800fd08:	4413      	add	r3, r2
 800fd0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	685a      	ldr	r2, [r3, #4]
 800fd14:	4b24      	ldr	r3, [pc, #144]	; (800fda8 <vPortFree+0xb8>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4013      	ands	r3, r2
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10a      	bne.n	800fd34 <vPortFree+0x44>
	__asm volatile
 800fd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	60fb      	str	r3, [r7, #12]
}
 800fd30:	bf00      	nop
 800fd32:	e7fe      	b.n	800fd32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00a      	beq.n	800fd52 <vPortFree+0x62>
	__asm volatile
 800fd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd40:	f383 8811 	msr	BASEPRI, r3
 800fd44:	f3bf 8f6f 	isb	sy
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	60bb      	str	r3, [r7, #8]
}
 800fd4e:	bf00      	nop
 800fd50:	e7fe      	b.n	800fd50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	685a      	ldr	r2, [r3, #4]
 800fd56:	4b14      	ldr	r3, [pc, #80]	; (800fda8 <vPortFree+0xb8>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4013      	ands	r3, r2
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d01e      	beq.n	800fd9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d11a      	bne.n	800fd9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	4b0e      	ldr	r3, [pc, #56]	; (800fda8 <vPortFree+0xb8>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	43db      	mvns	r3, r3
 800fd72:	401a      	ands	r2, r3
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd78:	f7fe fbc8 	bl	800e50c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	685a      	ldr	r2, [r3, #4]
 800fd80:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <vPortFree+0xbc>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4413      	add	r3, r2
 800fd86:	4a09      	ldr	r2, [pc, #36]	; (800fdac <vPortFree+0xbc>)
 800fd88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd8a:	6938      	ldr	r0, [r7, #16]
 800fd8c:	f000 f874 	bl	800fe78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fd90:	4b07      	ldr	r3, [pc, #28]	; (800fdb0 <vPortFree+0xc0>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	3301      	adds	r3, #1
 800fd96:	4a06      	ldr	r2, [pc, #24]	; (800fdb0 <vPortFree+0xc0>)
 800fd98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fd9a:	f7fe fbc5 	bl	800e528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd9e:	bf00      	nop
 800fda0:	3718      	adds	r7, #24
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	200079a0 	.word	0x200079a0
 800fdac:	20007990 	.word	0x20007990
 800fdb0:	2000799c 	.word	0x2000799c

0800fdb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fdba:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800fdbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fdc0:	4b27      	ldr	r3, [pc, #156]	; (800fe60 <prvHeapInit+0xac>)
 800fdc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f003 0307 	and.w	r3, r3, #7
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d00c      	beq.n	800fde8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	3307      	adds	r3, #7
 800fdd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f023 0307 	bic.w	r3, r3, #7
 800fdda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fddc:	68ba      	ldr	r2, [r7, #8]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	4a1f      	ldr	r2, [pc, #124]	; (800fe60 <prvHeapInit+0xac>)
 800fde4:	4413      	add	r3, r2
 800fde6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdec:	4a1d      	ldr	r2, [pc, #116]	; (800fe64 <prvHeapInit+0xb0>)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdf2:	4b1c      	ldr	r3, [pc, #112]	; (800fe64 <prvHeapInit+0xb0>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	68ba      	ldr	r2, [r7, #8]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe00:	2208      	movs	r2, #8
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	1a9b      	subs	r3, r3, r2
 800fe06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f023 0307 	bic.w	r3, r3, #7
 800fe0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	4a15      	ldr	r2, [pc, #84]	; (800fe68 <prvHeapInit+0xb4>)
 800fe14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe16:	4b14      	ldr	r3, [pc, #80]	; (800fe68 <prvHeapInit+0xb4>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe1e:	4b12      	ldr	r3, [pc, #72]	; (800fe68 <prvHeapInit+0xb4>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2200      	movs	r2, #0
 800fe24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	1ad2      	subs	r2, r2, r3
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe34:	4b0c      	ldr	r3, [pc, #48]	; (800fe68 <prvHeapInit+0xb4>)
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	4a0a      	ldr	r2, [pc, #40]	; (800fe6c <prvHeapInit+0xb8>)
 800fe42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <prvHeapInit+0xbc>)
 800fe4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe4c:	4b09      	ldr	r3, [pc, #36]	; (800fe74 <prvHeapInit+0xc0>)
 800fe4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe52:	601a      	str	r2, [r3, #0]
}
 800fe54:	bf00      	nop
 800fe56:	3714      	adds	r7, #20
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr
 800fe60:	20002984 	.word	0x20002984
 800fe64:	20007984 	.word	0x20007984
 800fe68:	2000798c 	.word	0x2000798c
 800fe6c:	20007994 	.word	0x20007994
 800fe70:	20007990 	.word	0x20007990
 800fe74:	200079a0 	.word	0x200079a0

0800fe78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b085      	sub	sp, #20
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe80:	4b28      	ldr	r3, [pc, #160]	; (800ff24 <prvInsertBlockIntoFreeList+0xac>)
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	e002      	b.n	800fe8c <prvInsertBlockIntoFreeList+0x14>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	60fb      	str	r3, [r7, #12]
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d8f7      	bhi.n	800fe86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	4413      	add	r3, r2
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d108      	bne.n	800feba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	441a      	add	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	441a      	add	r2, r3
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d118      	bne.n	800ff00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681a      	ldr	r2, [r3, #0]
 800fed2:	4b15      	ldr	r3, [pc, #84]	; (800ff28 <prvInsertBlockIntoFreeList+0xb0>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d00d      	beq.n	800fef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	441a      	add	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	e008      	b.n	800ff08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fef6:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <prvInsertBlockIntoFreeList+0xb0>)
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	601a      	str	r2, [r3, #0]
 800fefe:	e003      	b.n	800ff08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d002      	beq.n	800ff16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff16:	bf00      	nop
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	20007984 	.word	0x20007984
 800ff28:	2000798c 	.word	0x2000798c

0800ff2c <__assert_func>:
 800ff2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff2e:	4614      	mov	r4, r2
 800ff30:	461a      	mov	r2, r3
 800ff32:	4b09      	ldr	r3, [pc, #36]	; (800ff58 <__assert_func+0x2c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4605      	mov	r5, r0
 800ff38:	68d8      	ldr	r0, [r3, #12]
 800ff3a:	b14c      	cbz	r4, 800ff50 <__assert_func+0x24>
 800ff3c:	4b07      	ldr	r3, [pc, #28]	; (800ff5c <__assert_func+0x30>)
 800ff3e:	9100      	str	r1, [sp, #0]
 800ff40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff44:	4906      	ldr	r1, [pc, #24]	; (800ff60 <__assert_func+0x34>)
 800ff46:	462b      	mov	r3, r5
 800ff48:	f000 f8ea 	bl	8010120 <fiprintf>
 800ff4c:	f000 fe9a 	bl	8010c84 <abort>
 800ff50:	4b04      	ldr	r3, [pc, #16]	; (800ff64 <__assert_func+0x38>)
 800ff52:	461c      	mov	r4, r3
 800ff54:	e7f3      	b.n	800ff3e <__assert_func+0x12>
 800ff56:	bf00      	nop
 800ff58:	20000aa8 	.word	0x20000aa8
 800ff5c:	08012360 	.word	0x08012360
 800ff60:	0801236d 	.word	0x0801236d
 800ff64:	0801239b 	.word	0x0801239b

0800ff68 <__errno>:
 800ff68:	4b01      	ldr	r3, [pc, #4]	; (800ff70 <__errno+0x8>)
 800ff6a:	6818      	ldr	r0, [r3, #0]
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	20000aa8 	.word	0x20000aa8

0800ff74 <std>:
 800ff74:	2300      	movs	r3, #0
 800ff76:	b510      	push	{r4, lr}
 800ff78:	4604      	mov	r4, r0
 800ff7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ff7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff82:	6083      	str	r3, [r0, #8]
 800ff84:	8181      	strh	r1, [r0, #12]
 800ff86:	6643      	str	r3, [r0, #100]	; 0x64
 800ff88:	81c2      	strh	r2, [r0, #14]
 800ff8a:	6183      	str	r3, [r0, #24]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	2208      	movs	r2, #8
 800ff90:	305c      	adds	r0, #92	; 0x5c
 800ff92:	f000 f93c 	bl	801020e <memset>
 800ff96:	4b05      	ldr	r3, [pc, #20]	; (800ffac <std+0x38>)
 800ff98:	6263      	str	r3, [r4, #36]	; 0x24
 800ff9a:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <std+0x3c>)
 800ff9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff9e:	4b05      	ldr	r3, [pc, #20]	; (800ffb4 <std+0x40>)
 800ffa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ffa2:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <std+0x44>)
 800ffa4:	6224      	str	r4, [r4, #32]
 800ffa6:	6323      	str	r3, [r4, #48]	; 0x30
 800ffa8:	bd10      	pop	{r4, pc}
 800ffaa:	bf00      	nop
 800ffac:	08010a59 	.word	0x08010a59
 800ffb0:	08010a7b 	.word	0x08010a7b
 800ffb4:	08010ab3 	.word	0x08010ab3
 800ffb8:	08010ad7 	.word	0x08010ad7

0800ffbc <_cleanup_r>:
 800ffbc:	4901      	ldr	r1, [pc, #4]	; (800ffc4 <_cleanup_r+0x8>)
 800ffbe:	f000 b8c1 	b.w	8010144 <_fwalk_reent>
 800ffc2:	bf00      	nop
 800ffc4:	08010dc1 	.word	0x08010dc1

0800ffc8 <__sfmoreglue>:
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	2268      	movs	r2, #104	; 0x68
 800ffcc:	1e4d      	subs	r5, r1, #1
 800ffce:	4355      	muls	r5, r2
 800ffd0:	460e      	mov	r6, r1
 800ffd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ffd6:	f000 f943 	bl	8010260 <_malloc_r>
 800ffda:	4604      	mov	r4, r0
 800ffdc:	b140      	cbz	r0, 800fff0 <__sfmoreglue+0x28>
 800ffde:	2100      	movs	r1, #0
 800ffe0:	e9c0 1600 	strd	r1, r6, [r0]
 800ffe4:	300c      	adds	r0, #12
 800ffe6:	60a0      	str	r0, [r4, #8]
 800ffe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ffec:	f000 f90f 	bl	801020e <memset>
 800fff0:	4620      	mov	r0, r4
 800fff2:	bd70      	pop	{r4, r5, r6, pc}

0800fff4 <__sfp_lock_acquire>:
 800fff4:	4801      	ldr	r0, [pc, #4]	; (800fffc <__sfp_lock_acquire+0x8>)
 800fff6:	f000 b8ea 	b.w	80101ce <__retarget_lock_acquire_recursive>
 800fffa:	bf00      	nop
 800fffc:	200079a5 	.word	0x200079a5

08010000 <__sfp_lock_release>:
 8010000:	4801      	ldr	r0, [pc, #4]	; (8010008 <__sfp_lock_release+0x8>)
 8010002:	f000 b8e5 	b.w	80101d0 <__retarget_lock_release_recursive>
 8010006:	bf00      	nop
 8010008:	200079a5 	.word	0x200079a5

0801000c <__sinit_lock_acquire>:
 801000c:	4801      	ldr	r0, [pc, #4]	; (8010014 <__sinit_lock_acquire+0x8>)
 801000e:	f000 b8de 	b.w	80101ce <__retarget_lock_acquire_recursive>
 8010012:	bf00      	nop
 8010014:	200079a6 	.word	0x200079a6

08010018 <__sinit_lock_release>:
 8010018:	4801      	ldr	r0, [pc, #4]	; (8010020 <__sinit_lock_release+0x8>)
 801001a:	f000 b8d9 	b.w	80101d0 <__retarget_lock_release_recursive>
 801001e:	bf00      	nop
 8010020:	200079a6 	.word	0x200079a6

08010024 <__sinit>:
 8010024:	b510      	push	{r4, lr}
 8010026:	4604      	mov	r4, r0
 8010028:	f7ff fff0 	bl	801000c <__sinit_lock_acquire>
 801002c:	69a3      	ldr	r3, [r4, #24]
 801002e:	b11b      	cbz	r3, 8010038 <__sinit+0x14>
 8010030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010034:	f7ff bff0 	b.w	8010018 <__sinit_lock_release>
 8010038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801003c:	6523      	str	r3, [r4, #80]	; 0x50
 801003e:	4b13      	ldr	r3, [pc, #76]	; (801008c <__sinit+0x68>)
 8010040:	4a13      	ldr	r2, [pc, #76]	; (8010090 <__sinit+0x6c>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	62a2      	str	r2, [r4, #40]	; 0x28
 8010046:	42a3      	cmp	r3, r4
 8010048:	bf04      	itt	eq
 801004a:	2301      	moveq	r3, #1
 801004c:	61a3      	streq	r3, [r4, #24]
 801004e:	4620      	mov	r0, r4
 8010050:	f000 f820 	bl	8010094 <__sfp>
 8010054:	6060      	str	r0, [r4, #4]
 8010056:	4620      	mov	r0, r4
 8010058:	f000 f81c 	bl	8010094 <__sfp>
 801005c:	60a0      	str	r0, [r4, #8]
 801005e:	4620      	mov	r0, r4
 8010060:	f000 f818 	bl	8010094 <__sfp>
 8010064:	2200      	movs	r2, #0
 8010066:	60e0      	str	r0, [r4, #12]
 8010068:	2104      	movs	r1, #4
 801006a:	6860      	ldr	r0, [r4, #4]
 801006c:	f7ff ff82 	bl	800ff74 <std>
 8010070:	68a0      	ldr	r0, [r4, #8]
 8010072:	2201      	movs	r2, #1
 8010074:	2109      	movs	r1, #9
 8010076:	f7ff ff7d 	bl	800ff74 <std>
 801007a:	68e0      	ldr	r0, [r4, #12]
 801007c:	2202      	movs	r2, #2
 801007e:	2112      	movs	r1, #18
 8010080:	f7ff ff78 	bl	800ff74 <std>
 8010084:	2301      	movs	r3, #1
 8010086:	61a3      	str	r3, [r4, #24]
 8010088:	e7d2      	b.n	8010030 <__sinit+0xc>
 801008a:	bf00      	nop
 801008c:	080123fc 	.word	0x080123fc
 8010090:	0800ffbd 	.word	0x0800ffbd

08010094 <__sfp>:
 8010094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010096:	4607      	mov	r7, r0
 8010098:	f7ff ffac 	bl	800fff4 <__sfp_lock_acquire>
 801009c:	4b1e      	ldr	r3, [pc, #120]	; (8010118 <__sfp+0x84>)
 801009e:	681e      	ldr	r6, [r3, #0]
 80100a0:	69b3      	ldr	r3, [r6, #24]
 80100a2:	b913      	cbnz	r3, 80100aa <__sfp+0x16>
 80100a4:	4630      	mov	r0, r6
 80100a6:	f7ff ffbd 	bl	8010024 <__sinit>
 80100aa:	3648      	adds	r6, #72	; 0x48
 80100ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80100b0:	3b01      	subs	r3, #1
 80100b2:	d503      	bpl.n	80100bc <__sfp+0x28>
 80100b4:	6833      	ldr	r3, [r6, #0]
 80100b6:	b30b      	cbz	r3, 80100fc <__sfp+0x68>
 80100b8:	6836      	ldr	r6, [r6, #0]
 80100ba:	e7f7      	b.n	80100ac <__sfp+0x18>
 80100bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100c0:	b9d5      	cbnz	r5, 80100f8 <__sfp+0x64>
 80100c2:	4b16      	ldr	r3, [pc, #88]	; (801011c <__sfp+0x88>)
 80100c4:	60e3      	str	r3, [r4, #12]
 80100c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100ca:	6665      	str	r5, [r4, #100]	; 0x64
 80100cc:	f000 f87e 	bl	80101cc <__retarget_lock_init_recursive>
 80100d0:	f7ff ff96 	bl	8010000 <__sfp_lock_release>
 80100d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80100d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80100dc:	6025      	str	r5, [r4, #0]
 80100de:	61a5      	str	r5, [r4, #24]
 80100e0:	2208      	movs	r2, #8
 80100e2:	4629      	mov	r1, r5
 80100e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80100e8:	f000 f891 	bl	801020e <memset>
 80100ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80100f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80100f4:	4620      	mov	r0, r4
 80100f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100f8:	3468      	adds	r4, #104	; 0x68
 80100fa:	e7d9      	b.n	80100b0 <__sfp+0x1c>
 80100fc:	2104      	movs	r1, #4
 80100fe:	4638      	mov	r0, r7
 8010100:	f7ff ff62 	bl	800ffc8 <__sfmoreglue>
 8010104:	4604      	mov	r4, r0
 8010106:	6030      	str	r0, [r6, #0]
 8010108:	2800      	cmp	r0, #0
 801010a:	d1d5      	bne.n	80100b8 <__sfp+0x24>
 801010c:	f7ff ff78 	bl	8010000 <__sfp_lock_release>
 8010110:	230c      	movs	r3, #12
 8010112:	603b      	str	r3, [r7, #0]
 8010114:	e7ee      	b.n	80100f4 <__sfp+0x60>
 8010116:	bf00      	nop
 8010118:	080123fc 	.word	0x080123fc
 801011c:	ffff0001 	.word	0xffff0001

08010120 <fiprintf>:
 8010120:	b40e      	push	{r1, r2, r3}
 8010122:	b503      	push	{r0, r1, lr}
 8010124:	4601      	mov	r1, r0
 8010126:	ab03      	add	r3, sp, #12
 8010128:	4805      	ldr	r0, [pc, #20]	; (8010140 <fiprintf+0x20>)
 801012a:	f853 2b04 	ldr.w	r2, [r3], #4
 801012e:	6800      	ldr	r0, [r0, #0]
 8010130:	9301      	str	r3, [sp, #4]
 8010132:	f000 f933 	bl	801039c <_vfiprintf_r>
 8010136:	b002      	add	sp, #8
 8010138:	f85d eb04 	ldr.w	lr, [sp], #4
 801013c:	b003      	add	sp, #12
 801013e:	4770      	bx	lr
 8010140:	20000aa8 	.word	0x20000aa8

08010144 <_fwalk_reent>:
 8010144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010148:	4606      	mov	r6, r0
 801014a:	4688      	mov	r8, r1
 801014c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010150:	2700      	movs	r7, #0
 8010152:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010156:	f1b9 0901 	subs.w	r9, r9, #1
 801015a:	d505      	bpl.n	8010168 <_fwalk_reent+0x24>
 801015c:	6824      	ldr	r4, [r4, #0]
 801015e:	2c00      	cmp	r4, #0
 8010160:	d1f7      	bne.n	8010152 <_fwalk_reent+0xe>
 8010162:	4638      	mov	r0, r7
 8010164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010168:	89ab      	ldrh	r3, [r5, #12]
 801016a:	2b01      	cmp	r3, #1
 801016c:	d907      	bls.n	801017e <_fwalk_reent+0x3a>
 801016e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010172:	3301      	adds	r3, #1
 8010174:	d003      	beq.n	801017e <_fwalk_reent+0x3a>
 8010176:	4629      	mov	r1, r5
 8010178:	4630      	mov	r0, r6
 801017a:	47c0      	blx	r8
 801017c:	4307      	orrs	r7, r0
 801017e:	3568      	adds	r5, #104	; 0x68
 8010180:	e7e9      	b.n	8010156 <_fwalk_reent+0x12>
	...

08010184 <__libc_init_array>:
 8010184:	b570      	push	{r4, r5, r6, lr}
 8010186:	4d0d      	ldr	r5, [pc, #52]	; (80101bc <__libc_init_array+0x38>)
 8010188:	4c0d      	ldr	r4, [pc, #52]	; (80101c0 <__libc_init_array+0x3c>)
 801018a:	1b64      	subs	r4, r4, r5
 801018c:	10a4      	asrs	r4, r4, #2
 801018e:	2600      	movs	r6, #0
 8010190:	42a6      	cmp	r6, r4
 8010192:	d109      	bne.n	80101a8 <__libc_init_array+0x24>
 8010194:	4d0b      	ldr	r5, [pc, #44]	; (80101c4 <__libc_init_array+0x40>)
 8010196:	4c0c      	ldr	r4, [pc, #48]	; (80101c8 <__libc_init_array+0x44>)
 8010198:	f001 f942 	bl	8011420 <_init>
 801019c:	1b64      	subs	r4, r4, r5
 801019e:	10a4      	asrs	r4, r4, #2
 80101a0:	2600      	movs	r6, #0
 80101a2:	42a6      	cmp	r6, r4
 80101a4:	d105      	bne.n	80101b2 <__libc_init_array+0x2e>
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
 80101a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80101ac:	4798      	blx	r3
 80101ae:	3601      	adds	r6, #1
 80101b0:	e7ee      	b.n	8010190 <__libc_init_array+0xc>
 80101b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80101b6:	4798      	blx	r3
 80101b8:	3601      	adds	r6, #1
 80101ba:	e7f2      	b.n	80101a2 <__libc_init_array+0x1e>
 80101bc:	08012434 	.word	0x08012434
 80101c0:	08012434 	.word	0x08012434
 80101c4:	08012434 	.word	0x08012434
 80101c8:	08012438 	.word	0x08012438

080101cc <__retarget_lock_init_recursive>:
 80101cc:	4770      	bx	lr

080101ce <__retarget_lock_acquire_recursive>:
 80101ce:	4770      	bx	lr

080101d0 <__retarget_lock_release_recursive>:
 80101d0:	4770      	bx	lr

080101d2 <memcmp>:
 80101d2:	b510      	push	{r4, lr}
 80101d4:	3901      	subs	r1, #1
 80101d6:	4402      	add	r2, r0
 80101d8:	4290      	cmp	r0, r2
 80101da:	d101      	bne.n	80101e0 <memcmp+0xe>
 80101dc:	2000      	movs	r0, #0
 80101de:	e005      	b.n	80101ec <memcmp+0x1a>
 80101e0:	7803      	ldrb	r3, [r0, #0]
 80101e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80101e6:	42a3      	cmp	r3, r4
 80101e8:	d001      	beq.n	80101ee <memcmp+0x1c>
 80101ea:	1b18      	subs	r0, r3, r4
 80101ec:	bd10      	pop	{r4, pc}
 80101ee:	3001      	adds	r0, #1
 80101f0:	e7f2      	b.n	80101d8 <memcmp+0x6>

080101f2 <memcpy>:
 80101f2:	440a      	add	r2, r1
 80101f4:	4291      	cmp	r1, r2
 80101f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80101fa:	d100      	bne.n	80101fe <memcpy+0xc>
 80101fc:	4770      	bx	lr
 80101fe:	b510      	push	{r4, lr}
 8010200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010208:	4291      	cmp	r1, r2
 801020a:	d1f9      	bne.n	8010200 <memcpy+0xe>
 801020c:	bd10      	pop	{r4, pc}

0801020e <memset>:
 801020e:	4402      	add	r2, r0
 8010210:	4603      	mov	r3, r0
 8010212:	4293      	cmp	r3, r2
 8010214:	d100      	bne.n	8010218 <memset+0xa>
 8010216:	4770      	bx	lr
 8010218:	f803 1b01 	strb.w	r1, [r3], #1
 801021c:	e7f9      	b.n	8010212 <memset+0x4>
	...

08010220 <sbrk_aligned>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	4e0e      	ldr	r6, [pc, #56]	; (801025c <sbrk_aligned+0x3c>)
 8010224:	460c      	mov	r4, r1
 8010226:	6831      	ldr	r1, [r6, #0]
 8010228:	4605      	mov	r5, r0
 801022a:	b911      	cbnz	r1, 8010232 <sbrk_aligned+0x12>
 801022c:	f000 fbe4 	bl	80109f8 <_sbrk_r>
 8010230:	6030      	str	r0, [r6, #0]
 8010232:	4621      	mov	r1, r4
 8010234:	4628      	mov	r0, r5
 8010236:	f000 fbdf 	bl	80109f8 <_sbrk_r>
 801023a:	1c43      	adds	r3, r0, #1
 801023c:	d00a      	beq.n	8010254 <sbrk_aligned+0x34>
 801023e:	1cc4      	adds	r4, r0, #3
 8010240:	f024 0403 	bic.w	r4, r4, #3
 8010244:	42a0      	cmp	r0, r4
 8010246:	d007      	beq.n	8010258 <sbrk_aligned+0x38>
 8010248:	1a21      	subs	r1, r4, r0
 801024a:	4628      	mov	r0, r5
 801024c:	f000 fbd4 	bl	80109f8 <_sbrk_r>
 8010250:	3001      	adds	r0, #1
 8010252:	d101      	bne.n	8010258 <sbrk_aligned+0x38>
 8010254:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010258:	4620      	mov	r0, r4
 801025a:	bd70      	pop	{r4, r5, r6, pc}
 801025c:	200079ac 	.word	0x200079ac

08010260 <_malloc_r>:
 8010260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010264:	1ccd      	adds	r5, r1, #3
 8010266:	f025 0503 	bic.w	r5, r5, #3
 801026a:	3508      	adds	r5, #8
 801026c:	2d0c      	cmp	r5, #12
 801026e:	bf38      	it	cc
 8010270:	250c      	movcc	r5, #12
 8010272:	2d00      	cmp	r5, #0
 8010274:	4607      	mov	r7, r0
 8010276:	db01      	blt.n	801027c <_malloc_r+0x1c>
 8010278:	42a9      	cmp	r1, r5
 801027a:	d905      	bls.n	8010288 <_malloc_r+0x28>
 801027c:	230c      	movs	r3, #12
 801027e:	603b      	str	r3, [r7, #0]
 8010280:	2600      	movs	r6, #0
 8010282:	4630      	mov	r0, r6
 8010284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010288:	4e2e      	ldr	r6, [pc, #184]	; (8010344 <_malloc_r+0xe4>)
 801028a:	f000 fe67 	bl	8010f5c <__malloc_lock>
 801028e:	6833      	ldr	r3, [r6, #0]
 8010290:	461c      	mov	r4, r3
 8010292:	bb34      	cbnz	r4, 80102e2 <_malloc_r+0x82>
 8010294:	4629      	mov	r1, r5
 8010296:	4638      	mov	r0, r7
 8010298:	f7ff ffc2 	bl	8010220 <sbrk_aligned>
 801029c:	1c43      	adds	r3, r0, #1
 801029e:	4604      	mov	r4, r0
 80102a0:	d14d      	bne.n	801033e <_malloc_r+0xde>
 80102a2:	6834      	ldr	r4, [r6, #0]
 80102a4:	4626      	mov	r6, r4
 80102a6:	2e00      	cmp	r6, #0
 80102a8:	d140      	bne.n	801032c <_malloc_r+0xcc>
 80102aa:	6823      	ldr	r3, [r4, #0]
 80102ac:	4631      	mov	r1, r6
 80102ae:	4638      	mov	r0, r7
 80102b0:	eb04 0803 	add.w	r8, r4, r3
 80102b4:	f000 fba0 	bl	80109f8 <_sbrk_r>
 80102b8:	4580      	cmp	r8, r0
 80102ba:	d13a      	bne.n	8010332 <_malloc_r+0xd2>
 80102bc:	6821      	ldr	r1, [r4, #0]
 80102be:	3503      	adds	r5, #3
 80102c0:	1a6d      	subs	r5, r5, r1
 80102c2:	f025 0503 	bic.w	r5, r5, #3
 80102c6:	3508      	adds	r5, #8
 80102c8:	2d0c      	cmp	r5, #12
 80102ca:	bf38      	it	cc
 80102cc:	250c      	movcc	r5, #12
 80102ce:	4629      	mov	r1, r5
 80102d0:	4638      	mov	r0, r7
 80102d2:	f7ff ffa5 	bl	8010220 <sbrk_aligned>
 80102d6:	3001      	adds	r0, #1
 80102d8:	d02b      	beq.n	8010332 <_malloc_r+0xd2>
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	442b      	add	r3, r5
 80102de:	6023      	str	r3, [r4, #0]
 80102e0:	e00e      	b.n	8010300 <_malloc_r+0xa0>
 80102e2:	6822      	ldr	r2, [r4, #0]
 80102e4:	1b52      	subs	r2, r2, r5
 80102e6:	d41e      	bmi.n	8010326 <_malloc_r+0xc6>
 80102e8:	2a0b      	cmp	r2, #11
 80102ea:	d916      	bls.n	801031a <_malloc_r+0xba>
 80102ec:	1961      	adds	r1, r4, r5
 80102ee:	42a3      	cmp	r3, r4
 80102f0:	6025      	str	r5, [r4, #0]
 80102f2:	bf18      	it	ne
 80102f4:	6059      	strne	r1, [r3, #4]
 80102f6:	6863      	ldr	r3, [r4, #4]
 80102f8:	bf08      	it	eq
 80102fa:	6031      	streq	r1, [r6, #0]
 80102fc:	5162      	str	r2, [r4, r5]
 80102fe:	604b      	str	r3, [r1, #4]
 8010300:	4638      	mov	r0, r7
 8010302:	f104 060b 	add.w	r6, r4, #11
 8010306:	f000 fe2f 	bl	8010f68 <__malloc_unlock>
 801030a:	f026 0607 	bic.w	r6, r6, #7
 801030e:	1d23      	adds	r3, r4, #4
 8010310:	1af2      	subs	r2, r6, r3
 8010312:	d0b6      	beq.n	8010282 <_malloc_r+0x22>
 8010314:	1b9b      	subs	r3, r3, r6
 8010316:	50a3      	str	r3, [r4, r2]
 8010318:	e7b3      	b.n	8010282 <_malloc_r+0x22>
 801031a:	6862      	ldr	r2, [r4, #4]
 801031c:	42a3      	cmp	r3, r4
 801031e:	bf0c      	ite	eq
 8010320:	6032      	streq	r2, [r6, #0]
 8010322:	605a      	strne	r2, [r3, #4]
 8010324:	e7ec      	b.n	8010300 <_malloc_r+0xa0>
 8010326:	4623      	mov	r3, r4
 8010328:	6864      	ldr	r4, [r4, #4]
 801032a:	e7b2      	b.n	8010292 <_malloc_r+0x32>
 801032c:	4634      	mov	r4, r6
 801032e:	6876      	ldr	r6, [r6, #4]
 8010330:	e7b9      	b.n	80102a6 <_malloc_r+0x46>
 8010332:	230c      	movs	r3, #12
 8010334:	603b      	str	r3, [r7, #0]
 8010336:	4638      	mov	r0, r7
 8010338:	f000 fe16 	bl	8010f68 <__malloc_unlock>
 801033c:	e7a1      	b.n	8010282 <_malloc_r+0x22>
 801033e:	6025      	str	r5, [r4, #0]
 8010340:	e7de      	b.n	8010300 <_malloc_r+0xa0>
 8010342:	bf00      	nop
 8010344:	200079a8 	.word	0x200079a8

08010348 <__sfputc_r>:
 8010348:	6893      	ldr	r3, [r2, #8]
 801034a:	3b01      	subs	r3, #1
 801034c:	2b00      	cmp	r3, #0
 801034e:	b410      	push	{r4}
 8010350:	6093      	str	r3, [r2, #8]
 8010352:	da08      	bge.n	8010366 <__sfputc_r+0x1e>
 8010354:	6994      	ldr	r4, [r2, #24]
 8010356:	42a3      	cmp	r3, r4
 8010358:	db01      	blt.n	801035e <__sfputc_r+0x16>
 801035a:	290a      	cmp	r1, #10
 801035c:	d103      	bne.n	8010366 <__sfputc_r+0x1e>
 801035e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010362:	f000 bbbd 	b.w	8010ae0 <__swbuf_r>
 8010366:	6813      	ldr	r3, [r2, #0]
 8010368:	1c58      	adds	r0, r3, #1
 801036a:	6010      	str	r0, [r2, #0]
 801036c:	7019      	strb	r1, [r3, #0]
 801036e:	4608      	mov	r0, r1
 8010370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010374:	4770      	bx	lr

08010376 <__sfputs_r>:
 8010376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010378:	4606      	mov	r6, r0
 801037a:	460f      	mov	r7, r1
 801037c:	4614      	mov	r4, r2
 801037e:	18d5      	adds	r5, r2, r3
 8010380:	42ac      	cmp	r4, r5
 8010382:	d101      	bne.n	8010388 <__sfputs_r+0x12>
 8010384:	2000      	movs	r0, #0
 8010386:	e007      	b.n	8010398 <__sfputs_r+0x22>
 8010388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801038c:	463a      	mov	r2, r7
 801038e:	4630      	mov	r0, r6
 8010390:	f7ff ffda 	bl	8010348 <__sfputc_r>
 8010394:	1c43      	adds	r3, r0, #1
 8010396:	d1f3      	bne.n	8010380 <__sfputs_r+0xa>
 8010398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801039c <_vfiprintf_r>:
 801039c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a0:	460d      	mov	r5, r1
 80103a2:	b09d      	sub	sp, #116	; 0x74
 80103a4:	4614      	mov	r4, r2
 80103a6:	4698      	mov	r8, r3
 80103a8:	4606      	mov	r6, r0
 80103aa:	b118      	cbz	r0, 80103b4 <_vfiprintf_r+0x18>
 80103ac:	6983      	ldr	r3, [r0, #24]
 80103ae:	b90b      	cbnz	r3, 80103b4 <_vfiprintf_r+0x18>
 80103b0:	f7ff fe38 	bl	8010024 <__sinit>
 80103b4:	4b89      	ldr	r3, [pc, #548]	; (80105dc <_vfiprintf_r+0x240>)
 80103b6:	429d      	cmp	r5, r3
 80103b8:	d11b      	bne.n	80103f2 <_vfiprintf_r+0x56>
 80103ba:	6875      	ldr	r5, [r6, #4]
 80103bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103be:	07d9      	lsls	r1, r3, #31
 80103c0:	d405      	bmi.n	80103ce <_vfiprintf_r+0x32>
 80103c2:	89ab      	ldrh	r3, [r5, #12]
 80103c4:	059a      	lsls	r2, r3, #22
 80103c6:	d402      	bmi.n	80103ce <_vfiprintf_r+0x32>
 80103c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ca:	f7ff ff00 	bl	80101ce <__retarget_lock_acquire_recursive>
 80103ce:	89ab      	ldrh	r3, [r5, #12]
 80103d0:	071b      	lsls	r3, r3, #28
 80103d2:	d501      	bpl.n	80103d8 <_vfiprintf_r+0x3c>
 80103d4:	692b      	ldr	r3, [r5, #16]
 80103d6:	b9eb      	cbnz	r3, 8010414 <_vfiprintf_r+0x78>
 80103d8:	4629      	mov	r1, r5
 80103da:	4630      	mov	r0, r6
 80103dc:	f000 fbe4 	bl	8010ba8 <__swsetup_r>
 80103e0:	b1c0      	cbz	r0, 8010414 <_vfiprintf_r+0x78>
 80103e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103e4:	07dc      	lsls	r4, r3, #31
 80103e6:	d50e      	bpl.n	8010406 <_vfiprintf_r+0x6a>
 80103e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103ec:	b01d      	add	sp, #116	; 0x74
 80103ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f2:	4b7b      	ldr	r3, [pc, #492]	; (80105e0 <_vfiprintf_r+0x244>)
 80103f4:	429d      	cmp	r5, r3
 80103f6:	d101      	bne.n	80103fc <_vfiprintf_r+0x60>
 80103f8:	68b5      	ldr	r5, [r6, #8]
 80103fa:	e7df      	b.n	80103bc <_vfiprintf_r+0x20>
 80103fc:	4b79      	ldr	r3, [pc, #484]	; (80105e4 <_vfiprintf_r+0x248>)
 80103fe:	429d      	cmp	r5, r3
 8010400:	bf08      	it	eq
 8010402:	68f5      	ldreq	r5, [r6, #12]
 8010404:	e7da      	b.n	80103bc <_vfiprintf_r+0x20>
 8010406:	89ab      	ldrh	r3, [r5, #12]
 8010408:	0598      	lsls	r0, r3, #22
 801040a:	d4ed      	bmi.n	80103e8 <_vfiprintf_r+0x4c>
 801040c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801040e:	f7ff fedf 	bl	80101d0 <__retarget_lock_release_recursive>
 8010412:	e7e9      	b.n	80103e8 <_vfiprintf_r+0x4c>
 8010414:	2300      	movs	r3, #0
 8010416:	9309      	str	r3, [sp, #36]	; 0x24
 8010418:	2320      	movs	r3, #32
 801041a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801041e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010422:	2330      	movs	r3, #48	; 0x30
 8010424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80105e8 <_vfiprintf_r+0x24c>
 8010428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801042c:	f04f 0901 	mov.w	r9, #1
 8010430:	4623      	mov	r3, r4
 8010432:	469a      	mov	sl, r3
 8010434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010438:	b10a      	cbz	r2, 801043e <_vfiprintf_r+0xa2>
 801043a:	2a25      	cmp	r2, #37	; 0x25
 801043c:	d1f9      	bne.n	8010432 <_vfiprintf_r+0x96>
 801043e:	ebba 0b04 	subs.w	fp, sl, r4
 8010442:	d00b      	beq.n	801045c <_vfiprintf_r+0xc0>
 8010444:	465b      	mov	r3, fp
 8010446:	4622      	mov	r2, r4
 8010448:	4629      	mov	r1, r5
 801044a:	4630      	mov	r0, r6
 801044c:	f7ff ff93 	bl	8010376 <__sfputs_r>
 8010450:	3001      	adds	r0, #1
 8010452:	f000 80aa 	beq.w	80105aa <_vfiprintf_r+0x20e>
 8010456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010458:	445a      	add	r2, fp
 801045a:	9209      	str	r2, [sp, #36]	; 0x24
 801045c:	f89a 3000 	ldrb.w	r3, [sl]
 8010460:	2b00      	cmp	r3, #0
 8010462:	f000 80a2 	beq.w	80105aa <_vfiprintf_r+0x20e>
 8010466:	2300      	movs	r3, #0
 8010468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801046c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010470:	f10a 0a01 	add.w	sl, sl, #1
 8010474:	9304      	str	r3, [sp, #16]
 8010476:	9307      	str	r3, [sp, #28]
 8010478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801047c:	931a      	str	r3, [sp, #104]	; 0x68
 801047e:	4654      	mov	r4, sl
 8010480:	2205      	movs	r2, #5
 8010482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010486:	4858      	ldr	r0, [pc, #352]	; (80105e8 <_vfiprintf_r+0x24c>)
 8010488:	f7ef feca 	bl	8000220 <memchr>
 801048c:	9a04      	ldr	r2, [sp, #16]
 801048e:	b9d8      	cbnz	r0, 80104c8 <_vfiprintf_r+0x12c>
 8010490:	06d1      	lsls	r1, r2, #27
 8010492:	bf44      	itt	mi
 8010494:	2320      	movmi	r3, #32
 8010496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801049a:	0713      	lsls	r3, r2, #28
 801049c:	bf44      	itt	mi
 801049e:	232b      	movmi	r3, #43	; 0x2b
 80104a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104a4:	f89a 3000 	ldrb.w	r3, [sl]
 80104a8:	2b2a      	cmp	r3, #42	; 0x2a
 80104aa:	d015      	beq.n	80104d8 <_vfiprintf_r+0x13c>
 80104ac:	9a07      	ldr	r2, [sp, #28]
 80104ae:	4654      	mov	r4, sl
 80104b0:	2000      	movs	r0, #0
 80104b2:	f04f 0c0a 	mov.w	ip, #10
 80104b6:	4621      	mov	r1, r4
 80104b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104bc:	3b30      	subs	r3, #48	; 0x30
 80104be:	2b09      	cmp	r3, #9
 80104c0:	d94e      	bls.n	8010560 <_vfiprintf_r+0x1c4>
 80104c2:	b1b0      	cbz	r0, 80104f2 <_vfiprintf_r+0x156>
 80104c4:	9207      	str	r2, [sp, #28]
 80104c6:	e014      	b.n	80104f2 <_vfiprintf_r+0x156>
 80104c8:	eba0 0308 	sub.w	r3, r0, r8
 80104cc:	fa09 f303 	lsl.w	r3, r9, r3
 80104d0:	4313      	orrs	r3, r2
 80104d2:	9304      	str	r3, [sp, #16]
 80104d4:	46a2      	mov	sl, r4
 80104d6:	e7d2      	b.n	801047e <_vfiprintf_r+0xe2>
 80104d8:	9b03      	ldr	r3, [sp, #12]
 80104da:	1d19      	adds	r1, r3, #4
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	9103      	str	r1, [sp, #12]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	bfbb      	ittet	lt
 80104e4:	425b      	neglt	r3, r3
 80104e6:	f042 0202 	orrlt.w	r2, r2, #2
 80104ea:	9307      	strge	r3, [sp, #28]
 80104ec:	9307      	strlt	r3, [sp, #28]
 80104ee:	bfb8      	it	lt
 80104f0:	9204      	strlt	r2, [sp, #16]
 80104f2:	7823      	ldrb	r3, [r4, #0]
 80104f4:	2b2e      	cmp	r3, #46	; 0x2e
 80104f6:	d10c      	bne.n	8010512 <_vfiprintf_r+0x176>
 80104f8:	7863      	ldrb	r3, [r4, #1]
 80104fa:	2b2a      	cmp	r3, #42	; 0x2a
 80104fc:	d135      	bne.n	801056a <_vfiprintf_r+0x1ce>
 80104fe:	9b03      	ldr	r3, [sp, #12]
 8010500:	1d1a      	adds	r2, r3, #4
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	9203      	str	r2, [sp, #12]
 8010506:	2b00      	cmp	r3, #0
 8010508:	bfb8      	it	lt
 801050a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801050e:	3402      	adds	r4, #2
 8010510:	9305      	str	r3, [sp, #20]
 8010512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80105f8 <_vfiprintf_r+0x25c>
 8010516:	7821      	ldrb	r1, [r4, #0]
 8010518:	2203      	movs	r2, #3
 801051a:	4650      	mov	r0, sl
 801051c:	f7ef fe80 	bl	8000220 <memchr>
 8010520:	b140      	cbz	r0, 8010534 <_vfiprintf_r+0x198>
 8010522:	2340      	movs	r3, #64	; 0x40
 8010524:	eba0 000a 	sub.w	r0, r0, sl
 8010528:	fa03 f000 	lsl.w	r0, r3, r0
 801052c:	9b04      	ldr	r3, [sp, #16]
 801052e:	4303      	orrs	r3, r0
 8010530:	3401      	adds	r4, #1
 8010532:	9304      	str	r3, [sp, #16]
 8010534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010538:	482c      	ldr	r0, [pc, #176]	; (80105ec <_vfiprintf_r+0x250>)
 801053a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801053e:	2206      	movs	r2, #6
 8010540:	f7ef fe6e 	bl	8000220 <memchr>
 8010544:	2800      	cmp	r0, #0
 8010546:	d03f      	beq.n	80105c8 <_vfiprintf_r+0x22c>
 8010548:	4b29      	ldr	r3, [pc, #164]	; (80105f0 <_vfiprintf_r+0x254>)
 801054a:	bb1b      	cbnz	r3, 8010594 <_vfiprintf_r+0x1f8>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	3307      	adds	r3, #7
 8010550:	f023 0307 	bic.w	r3, r3, #7
 8010554:	3308      	adds	r3, #8
 8010556:	9303      	str	r3, [sp, #12]
 8010558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801055a:	443b      	add	r3, r7
 801055c:	9309      	str	r3, [sp, #36]	; 0x24
 801055e:	e767      	b.n	8010430 <_vfiprintf_r+0x94>
 8010560:	fb0c 3202 	mla	r2, ip, r2, r3
 8010564:	460c      	mov	r4, r1
 8010566:	2001      	movs	r0, #1
 8010568:	e7a5      	b.n	80104b6 <_vfiprintf_r+0x11a>
 801056a:	2300      	movs	r3, #0
 801056c:	3401      	adds	r4, #1
 801056e:	9305      	str	r3, [sp, #20]
 8010570:	4619      	mov	r1, r3
 8010572:	f04f 0c0a 	mov.w	ip, #10
 8010576:	4620      	mov	r0, r4
 8010578:	f810 2b01 	ldrb.w	r2, [r0], #1
 801057c:	3a30      	subs	r2, #48	; 0x30
 801057e:	2a09      	cmp	r2, #9
 8010580:	d903      	bls.n	801058a <_vfiprintf_r+0x1ee>
 8010582:	2b00      	cmp	r3, #0
 8010584:	d0c5      	beq.n	8010512 <_vfiprintf_r+0x176>
 8010586:	9105      	str	r1, [sp, #20]
 8010588:	e7c3      	b.n	8010512 <_vfiprintf_r+0x176>
 801058a:	fb0c 2101 	mla	r1, ip, r1, r2
 801058e:	4604      	mov	r4, r0
 8010590:	2301      	movs	r3, #1
 8010592:	e7f0      	b.n	8010576 <_vfiprintf_r+0x1da>
 8010594:	ab03      	add	r3, sp, #12
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	462a      	mov	r2, r5
 801059a:	4b16      	ldr	r3, [pc, #88]	; (80105f4 <_vfiprintf_r+0x258>)
 801059c:	a904      	add	r1, sp, #16
 801059e:	4630      	mov	r0, r6
 80105a0:	f3af 8000 	nop.w
 80105a4:	4607      	mov	r7, r0
 80105a6:	1c78      	adds	r0, r7, #1
 80105a8:	d1d6      	bne.n	8010558 <_vfiprintf_r+0x1bc>
 80105aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105ac:	07d9      	lsls	r1, r3, #31
 80105ae:	d405      	bmi.n	80105bc <_vfiprintf_r+0x220>
 80105b0:	89ab      	ldrh	r3, [r5, #12]
 80105b2:	059a      	lsls	r2, r3, #22
 80105b4:	d402      	bmi.n	80105bc <_vfiprintf_r+0x220>
 80105b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105b8:	f7ff fe0a 	bl	80101d0 <__retarget_lock_release_recursive>
 80105bc:	89ab      	ldrh	r3, [r5, #12]
 80105be:	065b      	lsls	r3, r3, #25
 80105c0:	f53f af12 	bmi.w	80103e8 <_vfiprintf_r+0x4c>
 80105c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105c6:	e711      	b.n	80103ec <_vfiprintf_r+0x50>
 80105c8:	ab03      	add	r3, sp, #12
 80105ca:	9300      	str	r3, [sp, #0]
 80105cc:	462a      	mov	r2, r5
 80105ce:	4b09      	ldr	r3, [pc, #36]	; (80105f4 <_vfiprintf_r+0x258>)
 80105d0:	a904      	add	r1, sp, #16
 80105d2:	4630      	mov	r0, r6
 80105d4:	f000 f880 	bl	80106d8 <_printf_i>
 80105d8:	e7e4      	b.n	80105a4 <_vfiprintf_r+0x208>
 80105da:	bf00      	nop
 80105dc:	080123bc 	.word	0x080123bc
 80105e0:	080123dc 	.word	0x080123dc
 80105e4:	0801239c 	.word	0x0801239c
 80105e8:	08012400 	.word	0x08012400
 80105ec:	0801240a 	.word	0x0801240a
 80105f0:	00000000 	.word	0x00000000
 80105f4:	08010377 	.word	0x08010377
 80105f8:	08012406 	.word	0x08012406

080105fc <_printf_common>:
 80105fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010600:	4616      	mov	r6, r2
 8010602:	4699      	mov	r9, r3
 8010604:	688a      	ldr	r2, [r1, #8]
 8010606:	690b      	ldr	r3, [r1, #16]
 8010608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801060c:	4293      	cmp	r3, r2
 801060e:	bfb8      	it	lt
 8010610:	4613      	movlt	r3, r2
 8010612:	6033      	str	r3, [r6, #0]
 8010614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010618:	4607      	mov	r7, r0
 801061a:	460c      	mov	r4, r1
 801061c:	b10a      	cbz	r2, 8010622 <_printf_common+0x26>
 801061e:	3301      	adds	r3, #1
 8010620:	6033      	str	r3, [r6, #0]
 8010622:	6823      	ldr	r3, [r4, #0]
 8010624:	0699      	lsls	r1, r3, #26
 8010626:	bf42      	ittt	mi
 8010628:	6833      	ldrmi	r3, [r6, #0]
 801062a:	3302      	addmi	r3, #2
 801062c:	6033      	strmi	r3, [r6, #0]
 801062e:	6825      	ldr	r5, [r4, #0]
 8010630:	f015 0506 	ands.w	r5, r5, #6
 8010634:	d106      	bne.n	8010644 <_printf_common+0x48>
 8010636:	f104 0a19 	add.w	sl, r4, #25
 801063a:	68e3      	ldr	r3, [r4, #12]
 801063c:	6832      	ldr	r2, [r6, #0]
 801063e:	1a9b      	subs	r3, r3, r2
 8010640:	42ab      	cmp	r3, r5
 8010642:	dc26      	bgt.n	8010692 <_printf_common+0x96>
 8010644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010648:	1e13      	subs	r3, r2, #0
 801064a:	6822      	ldr	r2, [r4, #0]
 801064c:	bf18      	it	ne
 801064e:	2301      	movne	r3, #1
 8010650:	0692      	lsls	r2, r2, #26
 8010652:	d42b      	bmi.n	80106ac <_printf_common+0xb0>
 8010654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010658:	4649      	mov	r1, r9
 801065a:	4638      	mov	r0, r7
 801065c:	47c0      	blx	r8
 801065e:	3001      	adds	r0, #1
 8010660:	d01e      	beq.n	80106a0 <_printf_common+0xa4>
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	68e5      	ldr	r5, [r4, #12]
 8010666:	6832      	ldr	r2, [r6, #0]
 8010668:	f003 0306 	and.w	r3, r3, #6
 801066c:	2b04      	cmp	r3, #4
 801066e:	bf08      	it	eq
 8010670:	1aad      	subeq	r5, r5, r2
 8010672:	68a3      	ldr	r3, [r4, #8]
 8010674:	6922      	ldr	r2, [r4, #16]
 8010676:	bf0c      	ite	eq
 8010678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801067c:	2500      	movne	r5, #0
 801067e:	4293      	cmp	r3, r2
 8010680:	bfc4      	itt	gt
 8010682:	1a9b      	subgt	r3, r3, r2
 8010684:	18ed      	addgt	r5, r5, r3
 8010686:	2600      	movs	r6, #0
 8010688:	341a      	adds	r4, #26
 801068a:	42b5      	cmp	r5, r6
 801068c:	d11a      	bne.n	80106c4 <_printf_common+0xc8>
 801068e:	2000      	movs	r0, #0
 8010690:	e008      	b.n	80106a4 <_printf_common+0xa8>
 8010692:	2301      	movs	r3, #1
 8010694:	4652      	mov	r2, sl
 8010696:	4649      	mov	r1, r9
 8010698:	4638      	mov	r0, r7
 801069a:	47c0      	blx	r8
 801069c:	3001      	adds	r0, #1
 801069e:	d103      	bne.n	80106a8 <_printf_common+0xac>
 80106a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106a8:	3501      	adds	r5, #1
 80106aa:	e7c6      	b.n	801063a <_printf_common+0x3e>
 80106ac:	18e1      	adds	r1, r4, r3
 80106ae:	1c5a      	adds	r2, r3, #1
 80106b0:	2030      	movs	r0, #48	; 0x30
 80106b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106b6:	4422      	add	r2, r4
 80106b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106c0:	3302      	adds	r3, #2
 80106c2:	e7c7      	b.n	8010654 <_printf_common+0x58>
 80106c4:	2301      	movs	r3, #1
 80106c6:	4622      	mov	r2, r4
 80106c8:	4649      	mov	r1, r9
 80106ca:	4638      	mov	r0, r7
 80106cc:	47c0      	blx	r8
 80106ce:	3001      	adds	r0, #1
 80106d0:	d0e6      	beq.n	80106a0 <_printf_common+0xa4>
 80106d2:	3601      	adds	r6, #1
 80106d4:	e7d9      	b.n	801068a <_printf_common+0x8e>
	...

080106d8 <_printf_i>:
 80106d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106dc:	7e0f      	ldrb	r7, [r1, #24]
 80106de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106e0:	2f78      	cmp	r7, #120	; 0x78
 80106e2:	4691      	mov	r9, r2
 80106e4:	4680      	mov	r8, r0
 80106e6:	460c      	mov	r4, r1
 80106e8:	469a      	mov	sl, r3
 80106ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80106ee:	d807      	bhi.n	8010700 <_printf_i+0x28>
 80106f0:	2f62      	cmp	r7, #98	; 0x62
 80106f2:	d80a      	bhi.n	801070a <_printf_i+0x32>
 80106f4:	2f00      	cmp	r7, #0
 80106f6:	f000 80d8 	beq.w	80108aa <_printf_i+0x1d2>
 80106fa:	2f58      	cmp	r7, #88	; 0x58
 80106fc:	f000 80a3 	beq.w	8010846 <_printf_i+0x16e>
 8010700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010708:	e03a      	b.n	8010780 <_printf_i+0xa8>
 801070a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801070e:	2b15      	cmp	r3, #21
 8010710:	d8f6      	bhi.n	8010700 <_printf_i+0x28>
 8010712:	a101      	add	r1, pc, #4	; (adr r1, 8010718 <_printf_i+0x40>)
 8010714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010718:	08010771 	.word	0x08010771
 801071c:	08010785 	.word	0x08010785
 8010720:	08010701 	.word	0x08010701
 8010724:	08010701 	.word	0x08010701
 8010728:	08010701 	.word	0x08010701
 801072c:	08010701 	.word	0x08010701
 8010730:	08010785 	.word	0x08010785
 8010734:	08010701 	.word	0x08010701
 8010738:	08010701 	.word	0x08010701
 801073c:	08010701 	.word	0x08010701
 8010740:	08010701 	.word	0x08010701
 8010744:	08010891 	.word	0x08010891
 8010748:	080107b5 	.word	0x080107b5
 801074c:	08010873 	.word	0x08010873
 8010750:	08010701 	.word	0x08010701
 8010754:	08010701 	.word	0x08010701
 8010758:	080108b3 	.word	0x080108b3
 801075c:	08010701 	.word	0x08010701
 8010760:	080107b5 	.word	0x080107b5
 8010764:	08010701 	.word	0x08010701
 8010768:	08010701 	.word	0x08010701
 801076c:	0801087b 	.word	0x0801087b
 8010770:	682b      	ldr	r3, [r5, #0]
 8010772:	1d1a      	adds	r2, r3, #4
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	602a      	str	r2, [r5, #0]
 8010778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801077c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010780:	2301      	movs	r3, #1
 8010782:	e0a3      	b.n	80108cc <_printf_i+0x1f4>
 8010784:	6820      	ldr	r0, [r4, #0]
 8010786:	6829      	ldr	r1, [r5, #0]
 8010788:	0606      	lsls	r6, r0, #24
 801078a:	f101 0304 	add.w	r3, r1, #4
 801078e:	d50a      	bpl.n	80107a6 <_printf_i+0xce>
 8010790:	680e      	ldr	r6, [r1, #0]
 8010792:	602b      	str	r3, [r5, #0]
 8010794:	2e00      	cmp	r6, #0
 8010796:	da03      	bge.n	80107a0 <_printf_i+0xc8>
 8010798:	232d      	movs	r3, #45	; 0x2d
 801079a:	4276      	negs	r6, r6
 801079c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107a0:	485e      	ldr	r0, [pc, #376]	; (801091c <_printf_i+0x244>)
 80107a2:	230a      	movs	r3, #10
 80107a4:	e019      	b.n	80107da <_printf_i+0x102>
 80107a6:	680e      	ldr	r6, [r1, #0]
 80107a8:	602b      	str	r3, [r5, #0]
 80107aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80107ae:	bf18      	it	ne
 80107b0:	b236      	sxthne	r6, r6
 80107b2:	e7ef      	b.n	8010794 <_printf_i+0xbc>
 80107b4:	682b      	ldr	r3, [r5, #0]
 80107b6:	6820      	ldr	r0, [r4, #0]
 80107b8:	1d19      	adds	r1, r3, #4
 80107ba:	6029      	str	r1, [r5, #0]
 80107bc:	0601      	lsls	r1, r0, #24
 80107be:	d501      	bpl.n	80107c4 <_printf_i+0xec>
 80107c0:	681e      	ldr	r6, [r3, #0]
 80107c2:	e002      	b.n	80107ca <_printf_i+0xf2>
 80107c4:	0646      	lsls	r6, r0, #25
 80107c6:	d5fb      	bpl.n	80107c0 <_printf_i+0xe8>
 80107c8:	881e      	ldrh	r6, [r3, #0]
 80107ca:	4854      	ldr	r0, [pc, #336]	; (801091c <_printf_i+0x244>)
 80107cc:	2f6f      	cmp	r7, #111	; 0x6f
 80107ce:	bf0c      	ite	eq
 80107d0:	2308      	moveq	r3, #8
 80107d2:	230a      	movne	r3, #10
 80107d4:	2100      	movs	r1, #0
 80107d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107da:	6865      	ldr	r5, [r4, #4]
 80107dc:	60a5      	str	r5, [r4, #8]
 80107de:	2d00      	cmp	r5, #0
 80107e0:	bfa2      	ittt	ge
 80107e2:	6821      	ldrge	r1, [r4, #0]
 80107e4:	f021 0104 	bicge.w	r1, r1, #4
 80107e8:	6021      	strge	r1, [r4, #0]
 80107ea:	b90e      	cbnz	r6, 80107f0 <_printf_i+0x118>
 80107ec:	2d00      	cmp	r5, #0
 80107ee:	d04d      	beq.n	801088c <_printf_i+0x1b4>
 80107f0:	4615      	mov	r5, r2
 80107f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80107f6:	fb03 6711 	mls	r7, r3, r1, r6
 80107fa:	5dc7      	ldrb	r7, [r0, r7]
 80107fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010800:	4637      	mov	r7, r6
 8010802:	42bb      	cmp	r3, r7
 8010804:	460e      	mov	r6, r1
 8010806:	d9f4      	bls.n	80107f2 <_printf_i+0x11a>
 8010808:	2b08      	cmp	r3, #8
 801080a:	d10b      	bne.n	8010824 <_printf_i+0x14c>
 801080c:	6823      	ldr	r3, [r4, #0]
 801080e:	07de      	lsls	r6, r3, #31
 8010810:	d508      	bpl.n	8010824 <_printf_i+0x14c>
 8010812:	6923      	ldr	r3, [r4, #16]
 8010814:	6861      	ldr	r1, [r4, #4]
 8010816:	4299      	cmp	r1, r3
 8010818:	bfde      	ittt	le
 801081a:	2330      	movle	r3, #48	; 0x30
 801081c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010824:	1b52      	subs	r2, r2, r5
 8010826:	6122      	str	r2, [r4, #16]
 8010828:	f8cd a000 	str.w	sl, [sp]
 801082c:	464b      	mov	r3, r9
 801082e:	aa03      	add	r2, sp, #12
 8010830:	4621      	mov	r1, r4
 8010832:	4640      	mov	r0, r8
 8010834:	f7ff fee2 	bl	80105fc <_printf_common>
 8010838:	3001      	adds	r0, #1
 801083a:	d14c      	bne.n	80108d6 <_printf_i+0x1fe>
 801083c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010840:	b004      	add	sp, #16
 8010842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010846:	4835      	ldr	r0, [pc, #212]	; (801091c <_printf_i+0x244>)
 8010848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801084c:	6829      	ldr	r1, [r5, #0]
 801084e:	6823      	ldr	r3, [r4, #0]
 8010850:	f851 6b04 	ldr.w	r6, [r1], #4
 8010854:	6029      	str	r1, [r5, #0]
 8010856:	061d      	lsls	r5, r3, #24
 8010858:	d514      	bpl.n	8010884 <_printf_i+0x1ac>
 801085a:	07df      	lsls	r7, r3, #31
 801085c:	bf44      	itt	mi
 801085e:	f043 0320 	orrmi.w	r3, r3, #32
 8010862:	6023      	strmi	r3, [r4, #0]
 8010864:	b91e      	cbnz	r6, 801086e <_printf_i+0x196>
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	f023 0320 	bic.w	r3, r3, #32
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	2310      	movs	r3, #16
 8010870:	e7b0      	b.n	80107d4 <_printf_i+0xfc>
 8010872:	6823      	ldr	r3, [r4, #0]
 8010874:	f043 0320 	orr.w	r3, r3, #32
 8010878:	6023      	str	r3, [r4, #0]
 801087a:	2378      	movs	r3, #120	; 0x78
 801087c:	4828      	ldr	r0, [pc, #160]	; (8010920 <_printf_i+0x248>)
 801087e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010882:	e7e3      	b.n	801084c <_printf_i+0x174>
 8010884:	0659      	lsls	r1, r3, #25
 8010886:	bf48      	it	mi
 8010888:	b2b6      	uxthmi	r6, r6
 801088a:	e7e6      	b.n	801085a <_printf_i+0x182>
 801088c:	4615      	mov	r5, r2
 801088e:	e7bb      	b.n	8010808 <_printf_i+0x130>
 8010890:	682b      	ldr	r3, [r5, #0]
 8010892:	6826      	ldr	r6, [r4, #0]
 8010894:	6961      	ldr	r1, [r4, #20]
 8010896:	1d18      	adds	r0, r3, #4
 8010898:	6028      	str	r0, [r5, #0]
 801089a:	0635      	lsls	r5, r6, #24
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	d501      	bpl.n	80108a4 <_printf_i+0x1cc>
 80108a0:	6019      	str	r1, [r3, #0]
 80108a2:	e002      	b.n	80108aa <_printf_i+0x1d2>
 80108a4:	0670      	lsls	r0, r6, #25
 80108a6:	d5fb      	bpl.n	80108a0 <_printf_i+0x1c8>
 80108a8:	8019      	strh	r1, [r3, #0]
 80108aa:	2300      	movs	r3, #0
 80108ac:	6123      	str	r3, [r4, #16]
 80108ae:	4615      	mov	r5, r2
 80108b0:	e7ba      	b.n	8010828 <_printf_i+0x150>
 80108b2:	682b      	ldr	r3, [r5, #0]
 80108b4:	1d1a      	adds	r2, r3, #4
 80108b6:	602a      	str	r2, [r5, #0]
 80108b8:	681d      	ldr	r5, [r3, #0]
 80108ba:	6862      	ldr	r2, [r4, #4]
 80108bc:	2100      	movs	r1, #0
 80108be:	4628      	mov	r0, r5
 80108c0:	f7ef fcae 	bl	8000220 <memchr>
 80108c4:	b108      	cbz	r0, 80108ca <_printf_i+0x1f2>
 80108c6:	1b40      	subs	r0, r0, r5
 80108c8:	6060      	str	r0, [r4, #4]
 80108ca:	6863      	ldr	r3, [r4, #4]
 80108cc:	6123      	str	r3, [r4, #16]
 80108ce:	2300      	movs	r3, #0
 80108d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108d4:	e7a8      	b.n	8010828 <_printf_i+0x150>
 80108d6:	6923      	ldr	r3, [r4, #16]
 80108d8:	462a      	mov	r2, r5
 80108da:	4649      	mov	r1, r9
 80108dc:	4640      	mov	r0, r8
 80108de:	47d0      	blx	sl
 80108e0:	3001      	adds	r0, #1
 80108e2:	d0ab      	beq.n	801083c <_printf_i+0x164>
 80108e4:	6823      	ldr	r3, [r4, #0]
 80108e6:	079b      	lsls	r3, r3, #30
 80108e8:	d413      	bmi.n	8010912 <_printf_i+0x23a>
 80108ea:	68e0      	ldr	r0, [r4, #12]
 80108ec:	9b03      	ldr	r3, [sp, #12]
 80108ee:	4298      	cmp	r0, r3
 80108f0:	bfb8      	it	lt
 80108f2:	4618      	movlt	r0, r3
 80108f4:	e7a4      	b.n	8010840 <_printf_i+0x168>
 80108f6:	2301      	movs	r3, #1
 80108f8:	4632      	mov	r2, r6
 80108fa:	4649      	mov	r1, r9
 80108fc:	4640      	mov	r0, r8
 80108fe:	47d0      	blx	sl
 8010900:	3001      	adds	r0, #1
 8010902:	d09b      	beq.n	801083c <_printf_i+0x164>
 8010904:	3501      	adds	r5, #1
 8010906:	68e3      	ldr	r3, [r4, #12]
 8010908:	9903      	ldr	r1, [sp, #12]
 801090a:	1a5b      	subs	r3, r3, r1
 801090c:	42ab      	cmp	r3, r5
 801090e:	dcf2      	bgt.n	80108f6 <_printf_i+0x21e>
 8010910:	e7eb      	b.n	80108ea <_printf_i+0x212>
 8010912:	2500      	movs	r5, #0
 8010914:	f104 0619 	add.w	r6, r4, #25
 8010918:	e7f5      	b.n	8010906 <_printf_i+0x22e>
 801091a:	bf00      	nop
 801091c:	08012411 	.word	0x08012411
 8010920:	08012422 	.word	0x08012422

08010924 <cleanup_glue>:
 8010924:	b538      	push	{r3, r4, r5, lr}
 8010926:	460c      	mov	r4, r1
 8010928:	6809      	ldr	r1, [r1, #0]
 801092a:	4605      	mov	r5, r0
 801092c:	b109      	cbz	r1, 8010932 <cleanup_glue+0xe>
 801092e:	f7ff fff9 	bl	8010924 <cleanup_glue>
 8010932:	4621      	mov	r1, r4
 8010934:	4628      	mov	r0, r5
 8010936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801093a:	f000 bb1b 	b.w	8010f74 <_free_r>
	...

08010940 <_reclaim_reent>:
 8010940:	4b2c      	ldr	r3, [pc, #176]	; (80109f4 <_reclaim_reent+0xb4>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4283      	cmp	r3, r0
 8010946:	b570      	push	{r4, r5, r6, lr}
 8010948:	4604      	mov	r4, r0
 801094a:	d051      	beq.n	80109f0 <_reclaim_reent+0xb0>
 801094c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801094e:	b143      	cbz	r3, 8010962 <_reclaim_reent+0x22>
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d14a      	bne.n	80109ec <_reclaim_reent+0xac>
 8010956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010958:	6819      	ldr	r1, [r3, #0]
 801095a:	b111      	cbz	r1, 8010962 <_reclaim_reent+0x22>
 801095c:	4620      	mov	r0, r4
 801095e:	f000 fb09 	bl	8010f74 <_free_r>
 8010962:	6961      	ldr	r1, [r4, #20]
 8010964:	b111      	cbz	r1, 801096c <_reclaim_reent+0x2c>
 8010966:	4620      	mov	r0, r4
 8010968:	f000 fb04 	bl	8010f74 <_free_r>
 801096c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801096e:	b111      	cbz	r1, 8010976 <_reclaim_reent+0x36>
 8010970:	4620      	mov	r0, r4
 8010972:	f000 faff 	bl	8010f74 <_free_r>
 8010976:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010978:	b111      	cbz	r1, 8010980 <_reclaim_reent+0x40>
 801097a:	4620      	mov	r0, r4
 801097c:	f000 fafa 	bl	8010f74 <_free_r>
 8010980:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010982:	b111      	cbz	r1, 801098a <_reclaim_reent+0x4a>
 8010984:	4620      	mov	r0, r4
 8010986:	f000 faf5 	bl	8010f74 <_free_r>
 801098a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801098c:	b111      	cbz	r1, 8010994 <_reclaim_reent+0x54>
 801098e:	4620      	mov	r0, r4
 8010990:	f000 faf0 	bl	8010f74 <_free_r>
 8010994:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010996:	b111      	cbz	r1, 801099e <_reclaim_reent+0x5e>
 8010998:	4620      	mov	r0, r4
 801099a:	f000 faeb 	bl	8010f74 <_free_r>
 801099e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80109a0:	b111      	cbz	r1, 80109a8 <_reclaim_reent+0x68>
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 fae6 	bl	8010f74 <_free_r>
 80109a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109aa:	b111      	cbz	r1, 80109b2 <_reclaim_reent+0x72>
 80109ac:	4620      	mov	r0, r4
 80109ae:	f000 fae1 	bl	8010f74 <_free_r>
 80109b2:	69a3      	ldr	r3, [r4, #24]
 80109b4:	b1e3      	cbz	r3, 80109f0 <_reclaim_reent+0xb0>
 80109b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80109b8:	4620      	mov	r0, r4
 80109ba:	4798      	blx	r3
 80109bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80109be:	b1b9      	cbz	r1, 80109f0 <_reclaim_reent+0xb0>
 80109c0:	4620      	mov	r0, r4
 80109c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109c6:	f7ff bfad 	b.w	8010924 <cleanup_glue>
 80109ca:	5949      	ldr	r1, [r1, r5]
 80109cc:	b941      	cbnz	r1, 80109e0 <_reclaim_reent+0xa0>
 80109ce:	3504      	adds	r5, #4
 80109d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109d2:	2d80      	cmp	r5, #128	; 0x80
 80109d4:	68d9      	ldr	r1, [r3, #12]
 80109d6:	d1f8      	bne.n	80109ca <_reclaim_reent+0x8a>
 80109d8:	4620      	mov	r0, r4
 80109da:	f000 facb 	bl	8010f74 <_free_r>
 80109de:	e7ba      	b.n	8010956 <_reclaim_reent+0x16>
 80109e0:	680e      	ldr	r6, [r1, #0]
 80109e2:	4620      	mov	r0, r4
 80109e4:	f000 fac6 	bl	8010f74 <_free_r>
 80109e8:	4631      	mov	r1, r6
 80109ea:	e7ef      	b.n	80109cc <_reclaim_reent+0x8c>
 80109ec:	2500      	movs	r5, #0
 80109ee:	e7ef      	b.n	80109d0 <_reclaim_reent+0x90>
 80109f0:	bd70      	pop	{r4, r5, r6, pc}
 80109f2:	bf00      	nop
 80109f4:	20000aa8 	.word	0x20000aa8

080109f8 <_sbrk_r>:
 80109f8:	b538      	push	{r3, r4, r5, lr}
 80109fa:	4d06      	ldr	r5, [pc, #24]	; (8010a14 <_sbrk_r+0x1c>)
 80109fc:	2300      	movs	r3, #0
 80109fe:	4604      	mov	r4, r0
 8010a00:	4608      	mov	r0, r1
 8010a02:	602b      	str	r3, [r5, #0]
 8010a04:	f7f7 fa8c 	bl	8007f20 <_sbrk>
 8010a08:	1c43      	adds	r3, r0, #1
 8010a0a:	d102      	bne.n	8010a12 <_sbrk_r+0x1a>
 8010a0c:	682b      	ldr	r3, [r5, #0]
 8010a0e:	b103      	cbz	r3, 8010a12 <_sbrk_r+0x1a>
 8010a10:	6023      	str	r3, [r4, #0]
 8010a12:	bd38      	pop	{r3, r4, r5, pc}
 8010a14:	200079b0 	.word	0x200079b0

08010a18 <siprintf>:
 8010a18:	b40e      	push	{r1, r2, r3}
 8010a1a:	b500      	push	{lr}
 8010a1c:	b09c      	sub	sp, #112	; 0x70
 8010a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8010a20:	9002      	str	r0, [sp, #8]
 8010a22:	9006      	str	r0, [sp, #24]
 8010a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a28:	4809      	ldr	r0, [pc, #36]	; (8010a50 <siprintf+0x38>)
 8010a2a:	9107      	str	r1, [sp, #28]
 8010a2c:	9104      	str	r1, [sp, #16]
 8010a2e:	4909      	ldr	r1, [pc, #36]	; (8010a54 <siprintf+0x3c>)
 8010a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a34:	9105      	str	r1, [sp, #20]
 8010a36:	6800      	ldr	r0, [r0, #0]
 8010a38:	9301      	str	r3, [sp, #4]
 8010a3a:	a902      	add	r1, sp, #8
 8010a3c:	f000 fb70 	bl	8011120 <_svfiprintf_r>
 8010a40:	9b02      	ldr	r3, [sp, #8]
 8010a42:	2200      	movs	r2, #0
 8010a44:	701a      	strb	r2, [r3, #0]
 8010a46:	b01c      	add	sp, #112	; 0x70
 8010a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a4c:	b003      	add	sp, #12
 8010a4e:	4770      	bx	lr
 8010a50:	20000aa8 	.word	0x20000aa8
 8010a54:	ffff0208 	.word	0xffff0208

08010a58 <__sread>:
 8010a58:	b510      	push	{r4, lr}
 8010a5a:	460c      	mov	r4, r1
 8010a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a60:	f000 fc5e 	bl	8011320 <_read_r>
 8010a64:	2800      	cmp	r0, #0
 8010a66:	bfab      	itete	ge
 8010a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8010a6c:	181b      	addge	r3, r3, r0
 8010a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a72:	bfac      	ite	ge
 8010a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a76:	81a3      	strhlt	r3, [r4, #12]
 8010a78:	bd10      	pop	{r4, pc}

08010a7a <__swrite>:
 8010a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a7e:	461f      	mov	r7, r3
 8010a80:	898b      	ldrh	r3, [r1, #12]
 8010a82:	05db      	lsls	r3, r3, #23
 8010a84:	4605      	mov	r5, r0
 8010a86:	460c      	mov	r4, r1
 8010a88:	4616      	mov	r6, r2
 8010a8a:	d505      	bpl.n	8010a98 <__swrite+0x1e>
 8010a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a90:	2302      	movs	r3, #2
 8010a92:	2200      	movs	r2, #0
 8010a94:	f000 f9d0 	bl	8010e38 <_lseek_r>
 8010a98:	89a3      	ldrh	r3, [r4, #12]
 8010a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010aa2:	81a3      	strh	r3, [r4, #12]
 8010aa4:	4632      	mov	r2, r6
 8010aa6:	463b      	mov	r3, r7
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aae:	f000 b869 	b.w	8010b84 <_write_r>

08010ab2 <__sseek>:
 8010ab2:	b510      	push	{r4, lr}
 8010ab4:	460c      	mov	r4, r1
 8010ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aba:	f000 f9bd 	bl	8010e38 <_lseek_r>
 8010abe:	1c43      	adds	r3, r0, #1
 8010ac0:	89a3      	ldrh	r3, [r4, #12]
 8010ac2:	bf15      	itete	ne
 8010ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ace:	81a3      	strheq	r3, [r4, #12]
 8010ad0:	bf18      	it	ne
 8010ad2:	81a3      	strhne	r3, [r4, #12]
 8010ad4:	bd10      	pop	{r4, pc}

08010ad6 <__sclose>:
 8010ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ada:	f000 b8db 	b.w	8010c94 <_close_r>
	...

08010ae0 <__swbuf_r>:
 8010ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ae2:	460e      	mov	r6, r1
 8010ae4:	4614      	mov	r4, r2
 8010ae6:	4605      	mov	r5, r0
 8010ae8:	b118      	cbz	r0, 8010af2 <__swbuf_r+0x12>
 8010aea:	6983      	ldr	r3, [r0, #24]
 8010aec:	b90b      	cbnz	r3, 8010af2 <__swbuf_r+0x12>
 8010aee:	f7ff fa99 	bl	8010024 <__sinit>
 8010af2:	4b21      	ldr	r3, [pc, #132]	; (8010b78 <__swbuf_r+0x98>)
 8010af4:	429c      	cmp	r4, r3
 8010af6:	d12b      	bne.n	8010b50 <__swbuf_r+0x70>
 8010af8:	686c      	ldr	r4, [r5, #4]
 8010afa:	69a3      	ldr	r3, [r4, #24]
 8010afc:	60a3      	str	r3, [r4, #8]
 8010afe:	89a3      	ldrh	r3, [r4, #12]
 8010b00:	071a      	lsls	r2, r3, #28
 8010b02:	d52f      	bpl.n	8010b64 <__swbuf_r+0x84>
 8010b04:	6923      	ldr	r3, [r4, #16]
 8010b06:	b36b      	cbz	r3, 8010b64 <__swbuf_r+0x84>
 8010b08:	6923      	ldr	r3, [r4, #16]
 8010b0a:	6820      	ldr	r0, [r4, #0]
 8010b0c:	1ac0      	subs	r0, r0, r3
 8010b0e:	6963      	ldr	r3, [r4, #20]
 8010b10:	b2f6      	uxtb	r6, r6
 8010b12:	4283      	cmp	r3, r0
 8010b14:	4637      	mov	r7, r6
 8010b16:	dc04      	bgt.n	8010b22 <__swbuf_r+0x42>
 8010b18:	4621      	mov	r1, r4
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f000 f950 	bl	8010dc0 <_fflush_r>
 8010b20:	bb30      	cbnz	r0, 8010b70 <__swbuf_r+0x90>
 8010b22:	68a3      	ldr	r3, [r4, #8]
 8010b24:	3b01      	subs	r3, #1
 8010b26:	60a3      	str	r3, [r4, #8]
 8010b28:	6823      	ldr	r3, [r4, #0]
 8010b2a:	1c5a      	adds	r2, r3, #1
 8010b2c:	6022      	str	r2, [r4, #0]
 8010b2e:	701e      	strb	r6, [r3, #0]
 8010b30:	6963      	ldr	r3, [r4, #20]
 8010b32:	3001      	adds	r0, #1
 8010b34:	4283      	cmp	r3, r0
 8010b36:	d004      	beq.n	8010b42 <__swbuf_r+0x62>
 8010b38:	89a3      	ldrh	r3, [r4, #12]
 8010b3a:	07db      	lsls	r3, r3, #31
 8010b3c:	d506      	bpl.n	8010b4c <__swbuf_r+0x6c>
 8010b3e:	2e0a      	cmp	r6, #10
 8010b40:	d104      	bne.n	8010b4c <__swbuf_r+0x6c>
 8010b42:	4621      	mov	r1, r4
 8010b44:	4628      	mov	r0, r5
 8010b46:	f000 f93b 	bl	8010dc0 <_fflush_r>
 8010b4a:	b988      	cbnz	r0, 8010b70 <__swbuf_r+0x90>
 8010b4c:	4638      	mov	r0, r7
 8010b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b50:	4b0a      	ldr	r3, [pc, #40]	; (8010b7c <__swbuf_r+0x9c>)
 8010b52:	429c      	cmp	r4, r3
 8010b54:	d101      	bne.n	8010b5a <__swbuf_r+0x7a>
 8010b56:	68ac      	ldr	r4, [r5, #8]
 8010b58:	e7cf      	b.n	8010afa <__swbuf_r+0x1a>
 8010b5a:	4b09      	ldr	r3, [pc, #36]	; (8010b80 <__swbuf_r+0xa0>)
 8010b5c:	429c      	cmp	r4, r3
 8010b5e:	bf08      	it	eq
 8010b60:	68ec      	ldreq	r4, [r5, #12]
 8010b62:	e7ca      	b.n	8010afa <__swbuf_r+0x1a>
 8010b64:	4621      	mov	r1, r4
 8010b66:	4628      	mov	r0, r5
 8010b68:	f000 f81e 	bl	8010ba8 <__swsetup_r>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d0cb      	beq.n	8010b08 <__swbuf_r+0x28>
 8010b70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010b74:	e7ea      	b.n	8010b4c <__swbuf_r+0x6c>
 8010b76:	bf00      	nop
 8010b78:	080123bc 	.word	0x080123bc
 8010b7c:	080123dc 	.word	0x080123dc
 8010b80:	0801239c 	.word	0x0801239c

08010b84 <_write_r>:
 8010b84:	b538      	push	{r3, r4, r5, lr}
 8010b86:	4d07      	ldr	r5, [pc, #28]	; (8010ba4 <_write_r+0x20>)
 8010b88:	4604      	mov	r4, r0
 8010b8a:	4608      	mov	r0, r1
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	2200      	movs	r2, #0
 8010b90:	602a      	str	r2, [r5, #0]
 8010b92:	461a      	mov	r2, r3
 8010b94:	f7f7 f973 	bl	8007e7e <_write>
 8010b98:	1c43      	adds	r3, r0, #1
 8010b9a:	d102      	bne.n	8010ba2 <_write_r+0x1e>
 8010b9c:	682b      	ldr	r3, [r5, #0]
 8010b9e:	b103      	cbz	r3, 8010ba2 <_write_r+0x1e>
 8010ba0:	6023      	str	r3, [r4, #0]
 8010ba2:	bd38      	pop	{r3, r4, r5, pc}
 8010ba4:	200079b0 	.word	0x200079b0

08010ba8 <__swsetup_r>:
 8010ba8:	4b32      	ldr	r3, [pc, #200]	; (8010c74 <__swsetup_r+0xcc>)
 8010baa:	b570      	push	{r4, r5, r6, lr}
 8010bac:	681d      	ldr	r5, [r3, #0]
 8010bae:	4606      	mov	r6, r0
 8010bb0:	460c      	mov	r4, r1
 8010bb2:	b125      	cbz	r5, 8010bbe <__swsetup_r+0x16>
 8010bb4:	69ab      	ldr	r3, [r5, #24]
 8010bb6:	b913      	cbnz	r3, 8010bbe <__swsetup_r+0x16>
 8010bb8:	4628      	mov	r0, r5
 8010bba:	f7ff fa33 	bl	8010024 <__sinit>
 8010bbe:	4b2e      	ldr	r3, [pc, #184]	; (8010c78 <__swsetup_r+0xd0>)
 8010bc0:	429c      	cmp	r4, r3
 8010bc2:	d10f      	bne.n	8010be4 <__swsetup_r+0x3c>
 8010bc4:	686c      	ldr	r4, [r5, #4]
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bcc:	0719      	lsls	r1, r3, #28
 8010bce:	d42c      	bmi.n	8010c2a <__swsetup_r+0x82>
 8010bd0:	06dd      	lsls	r5, r3, #27
 8010bd2:	d411      	bmi.n	8010bf8 <__swsetup_r+0x50>
 8010bd4:	2309      	movs	r3, #9
 8010bd6:	6033      	str	r3, [r6, #0]
 8010bd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010bdc:	81a3      	strh	r3, [r4, #12]
 8010bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010be2:	e03e      	b.n	8010c62 <__swsetup_r+0xba>
 8010be4:	4b25      	ldr	r3, [pc, #148]	; (8010c7c <__swsetup_r+0xd4>)
 8010be6:	429c      	cmp	r4, r3
 8010be8:	d101      	bne.n	8010bee <__swsetup_r+0x46>
 8010bea:	68ac      	ldr	r4, [r5, #8]
 8010bec:	e7eb      	b.n	8010bc6 <__swsetup_r+0x1e>
 8010bee:	4b24      	ldr	r3, [pc, #144]	; (8010c80 <__swsetup_r+0xd8>)
 8010bf0:	429c      	cmp	r4, r3
 8010bf2:	bf08      	it	eq
 8010bf4:	68ec      	ldreq	r4, [r5, #12]
 8010bf6:	e7e6      	b.n	8010bc6 <__swsetup_r+0x1e>
 8010bf8:	0758      	lsls	r0, r3, #29
 8010bfa:	d512      	bpl.n	8010c22 <__swsetup_r+0x7a>
 8010bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bfe:	b141      	cbz	r1, 8010c12 <__swsetup_r+0x6a>
 8010c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c04:	4299      	cmp	r1, r3
 8010c06:	d002      	beq.n	8010c0e <__swsetup_r+0x66>
 8010c08:	4630      	mov	r0, r6
 8010c0a:	f000 f9b3 	bl	8010f74 <_free_r>
 8010c0e:	2300      	movs	r3, #0
 8010c10:	6363      	str	r3, [r4, #52]	; 0x34
 8010c12:	89a3      	ldrh	r3, [r4, #12]
 8010c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c18:	81a3      	strh	r3, [r4, #12]
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	6063      	str	r3, [r4, #4]
 8010c1e:	6923      	ldr	r3, [r4, #16]
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	89a3      	ldrh	r3, [r4, #12]
 8010c24:	f043 0308 	orr.w	r3, r3, #8
 8010c28:	81a3      	strh	r3, [r4, #12]
 8010c2a:	6923      	ldr	r3, [r4, #16]
 8010c2c:	b94b      	cbnz	r3, 8010c42 <__swsetup_r+0x9a>
 8010c2e:	89a3      	ldrh	r3, [r4, #12]
 8010c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c38:	d003      	beq.n	8010c42 <__swsetup_r+0x9a>
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f000 f933 	bl	8010ea8 <__smakebuf_r>
 8010c42:	89a0      	ldrh	r0, [r4, #12]
 8010c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c48:	f010 0301 	ands.w	r3, r0, #1
 8010c4c:	d00a      	beq.n	8010c64 <__swsetup_r+0xbc>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	60a3      	str	r3, [r4, #8]
 8010c52:	6963      	ldr	r3, [r4, #20]
 8010c54:	425b      	negs	r3, r3
 8010c56:	61a3      	str	r3, [r4, #24]
 8010c58:	6923      	ldr	r3, [r4, #16]
 8010c5a:	b943      	cbnz	r3, 8010c6e <__swsetup_r+0xc6>
 8010c5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c60:	d1ba      	bne.n	8010bd8 <__swsetup_r+0x30>
 8010c62:	bd70      	pop	{r4, r5, r6, pc}
 8010c64:	0781      	lsls	r1, r0, #30
 8010c66:	bf58      	it	pl
 8010c68:	6963      	ldrpl	r3, [r4, #20]
 8010c6a:	60a3      	str	r3, [r4, #8]
 8010c6c:	e7f4      	b.n	8010c58 <__swsetup_r+0xb0>
 8010c6e:	2000      	movs	r0, #0
 8010c70:	e7f7      	b.n	8010c62 <__swsetup_r+0xba>
 8010c72:	bf00      	nop
 8010c74:	20000aa8 	.word	0x20000aa8
 8010c78:	080123bc 	.word	0x080123bc
 8010c7c:	080123dc 	.word	0x080123dc
 8010c80:	0801239c 	.word	0x0801239c

08010c84 <abort>:
 8010c84:	b508      	push	{r3, lr}
 8010c86:	2006      	movs	r0, #6
 8010c88:	f000 fb84 	bl	8011394 <raise>
 8010c8c:	2001      	movs	r0, #1
 8010c8e:	f7f7 f8cf 	bl	8007e30 <_exit>
	...

08010c94 <_close_r>:
 8010c94:	b538      	push	{r3, r4, r5, lr}
 8010c96:	4d06      	ldr	r5, [pc, #24]	; (8010cb0 <_close_r+0x1c>)
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	4608      	mov	r0, r1
 8010c9e:	602b      	str	r3, [r5, #0]
 8010ca0:	f7f7 f909 	bl	8007eb6 <_close>
 8010ca4:	1c43      	adds	r3, r0, #1
 8010ca6:	d102      	bne.n	8010cae <_close_r+0x1a>
 8010ca8:	682b      	ldr	r3, [r5, #0]
 8010caa:	b103      	cbz	r3, 8010cae <_close_r+0x1a>
 8010cac:	6023      	str	r3, [r4, #0]
 8010cae:	bd38      	pop	{r3, r4, r5, pc}
 8010cb0:	200079b0 	.word	0x200079b0

08010cb4 <__sflush_r>:
 8010cb4:	898a      	ldrh	r2, [r1, #12]
 8010cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cba:	4605      	mov	r5, r0
 8010cbc:	0710      	lsls	r0, r2, #28
 8010cbe:	460c      	mov	r4, r1
 8010cc0:	d458      	bmi.n	8010d74 <__sflush_r+0xc0>
 8010cc2:	684b      	ldr	r3, [r1, #4]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	dc05      	bgt.n	8010cd4 <__sflush_r+0x20>
 8010cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	dc02      	bgt.n	8010cd4 <__sflush_r+0x20>
 8010cce:	2000      	movs	r0, #0
 8010cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cd6:	2e00      	cmp	r6, #0
 8010cd8:	d0f9      	beq.n	8010cce <__sflush_r+0x1a>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ce0:	682f      	ldr	r7, [r5, #0]
 8010ce2:	602b      	str	r3, [r5, #0]
 8010ce4:	d032      	beq.n	8010d4c <__sflush_r+0x98>
 8010ce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ce8:	89a3      	ldrh	r3, [r4, #12]
 8010cea:	075a      	lsls	r2, r3, #29
 8010cec:	d505      	bpl.n	8010cfa <__sflush_r+0x46>
 8010cee:	6863      	ldr	r3, [r4, #4]
 8010cf0:	1ac0      	subs	r0, r0, r3
 8010cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cf4:	b10b      	cbz	r3, 8010cfa <__sflush_r+0x46>
 8010cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cf8:	1ac0      	subs	r0, r0, r3
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d00:	6a21      	ldr	r1, [r4, #32]
 8010d02:	4628      	mov	r0, r5
 8010d04:	47b0      	blx	r6
 8010d06:	1c43      	adds	r3, r0, #1
 8010d08:	89a3      	ldrh	r3, [r4, #12]
 8010d0a:	d106      	bne.n	8010d1a <__sflush_r+0x66>
 8010d0c:	6829      	ldr	r1, [r5, #0]
 8010d0e:	291d      	cmp	r1, #29
 8010d10:	d82c      	bhi.n	8010d6c <__sflush_r+0xb8>
 8010d12:	4a2a      	ldr	r2, [pc, #168]	; (8010dbc <__sflush_r+0x108>)
 8010d14:	40ca      	lsrs	r2, r1
 8010d16:	07d6      	lsls	r6, r2, #31
 8010d18:	d528      	bpl.n	8010d6c <__sflush_r+0xb8>
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	6062      	str	r2, [r4, #4]
 8010d1e:	04d9      	lsls	r1, r3, #19
 8010d20:	6922      	ldr	r2, [r4, #16]
 8010d22:	6022      	str	r2, [r4, #0]
 8010d24:	d504      	bpl.n	8010d30 <__sflush_r+0x7c>
 8010d26:	1c42      	adds	r2, r0, #1
 8010d28:	d101      	bne.n	8010d2e <__sflush_r+0x7a>
 8010d2a:	682b      	ldr	r3, [r5, #0]
 8010d2c:	b903      	cbnz	r3, 8010d30 <__sflush_r+0x7c>
 8010d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8010d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d32:	602f      	str	r7, [r5, #0]
 8010d34:	2900      	cmp	r1, #0
 8010d36:	d0ca      	beq.n	8010cce <__sflush_r+0x1a>
 8010d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d3c:	4299      	cmp	r1, r3
 8010d3e:	d002      	beq.n	8010d46 <__sflush_r+0x92>
 8010d40:	4628      	mov	r0, r5
 8010d42:	f000 f917 	bl	8010f74 <_free_r>
 8010d46:	2000      	movs	r0, #0
 8010d48:	6360      	str	r0, [r4, #52]	; 0x34
 8010d4a:	e7c1      	b.n	8010cd0 <__sflush_r+0x1c>
 8010d4c:	6a21      	ldr	r1, [r4, #32]
 8010d4e:	2301      	movs	r3, #1
 8010d50:	4628      	mov	r0, r5
 8010d52:	47b0      	blx	r6
 8010d54:	1c41      	adds	r1, r0, #1
 8010d56:	d1c7      	bne.n	8010ce8 <__sflush_r+0x34>
 8010d58:	682b      	ldr	r3, [r5, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d0c4      	beq.n	8010ce8 <__sflush_r+0x34>
 8010d5e:	2b1d      	cmp	r3, #29
 8010d60:	d001      	beq.n	8010d66 <__sflush_r+0xb2>
 8010d62:	2b16      	cmp	r3, #22
 8010d64:	d101      	bne.n	8010d6a <__sflush_r+0xb6>
 8010d66:	602f      	str	r7, [r5, #0]
 8010d68:	e7b1      	b.n	8010cce <__sflush_r+0x1a>
 8010d6a:	89a3      	ldrh	r3, [r4, #12]
 8010d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d70:	81a3      	strh	r3, [r4, #12]
 8010d72:	e7ad      	b.n	8010cd0 <__sflush_r+0x1c>
 8010d74:	690f      	ldr	r7, [r1, #16]
 8010d76:	2f00      	cmp	r7, #0
 8010d78:	d0a9      	beq.n	8010cce <__sflush_r+0x1a>
 8010d7a:	0793      	lsls	r3, r2, #30
 8010d7c:	680e      	ldr	r6, [r1, #0]
 8010d7e:	bf08      	it	eq
 8010d80:	694b      	ldreq	r3, [r1, #20]
 8010d82:	600f      	str	r7, [r1, #0]
 8010d84:	bf18      	it	ne
 8010d86:	2300      	movne	r3, #0
 8010d88:	eba6 0807 	sub.w	r8, r6, r7
 8010d8c:	608b      	str	r3, [r1, #8]
 8010d8e:	f1b8 0f00 	cmp.w	r8, #0
 8010d92:	dd9c      	ble.n	8010cce <__sflush_r+0x1a>
 8010d94:	6a21      	ldr	r1, [r4, #32]
 8010d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d98:	4643      	mov	r3, r8
 8010d9a:	463a      	mov	r2, r7
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	47b0      	blx	r6
 8010da0:	2800      	cmp	r0, #0
 8010da2:	dc06      	bgt.n	8010db2 <__sflush_r+0xfe>
 8010da4:	89a3      	ldrh	r3, [r4, #12]
 8010da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010daa:	81a3      	strh	r3, [r4, #12]
 8010dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010db0:	e78e      	b.n	8010cd0 <__sflush_r+0x1c>
 8010db2:	4407      	add	r7, r0
 8010db4:	eba8 0800 	sub.w	r8, r8, r0
 8010db8:	e7e9      	b.n	8010d8e <__sflush_r+0xda>
 8010dba:	bf00      	nop
 8010dbc:	20400001 	.word	0x20400001

08010dc0 <_fflush_r>:
 8010dc0:	b538      	push	{r3, r4, r5, lr}
 8010dc2:	690b      	ldr	r3, [r1, #16]
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	b913      	cbnz	r3, 8010dd0 <_fflush_r+0x10>
 8010dca:	2500      	movs	r5, #0
 8010dcc:	4628      	mov	r0, r5
 8010dce:	bd38      	pop	{r3, r4, r5, pc}
 8010dd0:	b118      	cbz	r0, 8010dda <_fflush_r+0x1a>
 8010dd2:	6983      	ldr	r3, [r0, #24]
 8010dd4:	b90b      	cbnz	r3, 8010dda <_fflush_r+0x1a>
 8010dd6:	f7ff f925 	bl	8010024 <__sinit>
 8010dda:	4b14      	ldr	r3, [pc, #80]	; (8010e2c <_fflush_r+0x6c>)
 8010ddc:	429c      	cmp	r4, r3
 8010dde:	d11b      	bne.n	8010e18 <_fflush_r+0x58>
 8010de0:	686c      	ldr	r4, [r5, #4]
 8010de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d0ef      	beq.n	8010dca <_fflush_r+0xa>
 8010dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010dec:	07d0      	lsls	r0, r2, #31
 8010dee:	d404      	bmi.n	8010dfa <_fflush_r+0x3a>
 8010df0:	0599      	lsls	r1, r3, #22
 8010df2:	d402      	bmi.n	8010dfa <_fflush_r+0x3a>
 8010df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010df6:	f7ff f9ea 	bl	80101ce <__retarget_lock_acquire_recursive>
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	4621      	mov	r1, r4
 8010dfe:	f7ff ff59 	bl	8010cb4 <__sflush_r>
 8010e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e04:	07da      	lsls	r2, r3, #31
 8010e06:	4605      	mov	r5, r0
 8010e08:	d4e0      	bmi.n	8010dcc <_fflush_r+0xc>
 8010e0a:	89a3      	ldrh	r3, [r4, #12]
 8010e0c:	059b      	lsls	r3, r3, #22
 8010e0e:	d4dd      	bmi.n	8010dcc <_fflush_r+0xc>
 8010e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e12:	f7ff f9dd 	bl	80101d0 <__retarget_lock_release_recursive>
 8010e16:	e7d9      	b.n	8010dcc <_fflush_r+0xc>
 8010e18:	4b05      	ldr	r3, [pc, #20]	; (8010e30 <_fflush_r+0x70>)
 8010e1a:	429c      	cmp	r4, r3
 8010e1c:	d101      	bne.n	8010e22 <_fflush_r+0x62>
 8010e1e:	68ac      	ldr	r4, [r5, #8]
 8010e20:	e7df      	b.n	8010de2 <_fflush_r+0x22>
 8010e22:	4b04      	ldr	r3, [pc, #16]	; (8010e34 <_fflush_r+0x74>)
 8010e24:	429c      	cmp	r4, r3
 8010e26:	bf08      	it	eq
 8010e28:	68ec      	ldreq	r4, [r5, #12]
 8010e2a:	e7da      	b.n	8010de2 <_fflush_r+0x22>
 8010e2c:	080123bc 	.word	0x080123bc
 8010e30:	080123dc 	.word	0x080123dc
 8010e34:	0801239c 	.word	0x0801239c

08010e38 <_lseek_r>:
 8010e38:	b538      	push	{r3, r4, r5, lr}
 8010e3a:	4d07      	ldr	r5, [pc, #28]	; (8010e58 <_lseek_r+0x20>)
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	4608      	mov	r0, r1
 8010e40:	4611      	mov	r1, r2
 8010e42:	2200      	movs	r2, #0
 8010e44:	602a      	str	r2, [r5, #0]
 8010e46:	461a      	mov	r2, r3
 8010e48:	f7f7 f85c 	bl	8007f04 <_lseek>
 8010e4c:	1c43      	adds	r3, r0, #1
 8010e4e:	d102      	bne.n	8010e56 <_lseek_r+0x1e>
 8010e50:	682b      	ldr	r3, [r5, #0]
 8010e52:	b103      	cbz	r3, 8010e56 <_lseek_r+0x1e>
 8010e54:	6023      	str	r3, [r4, #0]
 8010e56:	bd38      	pop	{r3, r4, r5, pc}
 8010e58:	200079b0 	.word	0x200079b0

08010e5c <__swhatbuf_r>:
 8010e5c:	b570      	push	{r4, r5, r6, lr}
 8010e5e:	460e      	mov	r6, r1
 8010e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e64:	2900      	cmp	r1, #0
 8010e66:	b096      	sub	sp, #88	; 0x58
 8010e68:	4614      	mov	r4, r2
 8010e6a:	461d      	mov	r5, r3
 8010e6c:	da08      	bge.n	8010e80 <__swhatbuf_r+0x24>
 8010e6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e72:	2200      	movs	r2, #0
 8010e74:	602a      	str	r2, [r5, #0]
 8010e76:	061a      	lsls	r2, r3, #24
 8010e78:	d410      	bmi.n	8010e9c <__swhatbuf_r+0x40>
 8010e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e7e:	e00e      	b.n	8010e9e <__swhatbuf_r+0x42>
 8010e80:	466a      	mov	r2, sp
 8010e82:	f000 faa3 	bl	80113cc <_fstat_r>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	dbf1      	blt.n	8010e6e <__swhatbuf_r+0x12>
 8010e8a:	9a01      	ldr	r2, [sp, #4]
 8010e8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e94:	425a      	negs	r2, r3
 8010e96:	415a      	adcs	r2, r3
 8010e98:	602a      	str	r2, [r5, #0]
 8010e9a:	e7ee      	b.n	8010e7a <__swhatbuf_r+0x1e>
 8010e9c:	2340      	movs	r3, #64	; 0x40
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	6023      	str	r3, [r4, #0]
 8010ea2:	b016      	add	sp, #88	; 0x58
 8010ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ea8 <__smakebuf_r>:
 8010ea8:	898b      	ldrh	r3, [r1, #12]
 8010eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010eac:	079d      	lsls	r5, r3, #30
 8010eae:	4606      	mov	r6, r0
 8010eb0:	460c      	mov	r4, r1
 8010eb2:	d507      	bpl.n	8010ec4 <__smakebuf_r+0x1c>
 8010eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010eb8:	6023      	str	r3, [r4, #0]
 8010eba:	6123      	str	r3, [r4, #16]
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	6163      	str	r3, [r4, #20]
 8010ec0:	b002      	add	sp, #8
 8010ec2:	bd70      	pop	{r4, r5, r6, pc}
 8010ec4:	ab01      	add	r3, sp, #4
 8010ec6:	466a      	mov	r2, sp
 8010ec8:	f7ff ffc8 	bl	8010e5c <__swhatbuf_r>
 8010ecc:	9900      	ldr	r1, [sp, #0]
 8010ece:	4605      	mov	r5, r0
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	f7ff f9c5 	bl	8010260 <_malloc_r>
 8010ed6:	b948      	cbnz	r0, 8010eec <__smakebuf_r+0x44>
 8010ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010edc:	059a      	lsls	r2, r3, #22
 8010ede:	d4ef      	bmi.n	8010ec0 <__smakebuf_r+0x18>
 8010ee0:	f023 0303 	bic.w	r3, r3, #3
 8010ee4:	f043 0302 	orr.w	r3, r3, #2
 8010ee8:	81a3      	strh	r3, [r4, #12]
 8010eea:	e7e3      	b.n	8010eb4 <__smakebuf_r+0xc>
 8010eec:	4b0d      	ldr	r3, [pc, #52]	; (8010f24 <__smakebuf_r+0x7c>)
 8010eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ef0:	89a3      	ldrh	r3, [r4, #12]
 8010ef2:	6020      	str	r0, [r4, #0]
 8010ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ef8:	81a3      	strh	r3, [r4, #12]
 8010efa:	9b00      	ldr	r3, [sp, #0]
 8010efc:	6163      	str	r3, [r4, #20]
 8010efe:	9b01      	ldr	r3, [sp, #4]
 8010f00:	6120      	str	r0, [r4, #16]
 8010f02:	b15b      	cbz	r3, 8010f1c <__smakebuf_r+0x74>
 8010f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f08:	4630      	mov	r0, r6
 8010f0a:	f000 fa71 	bl	80113f0 <_isatty_r>
 8010f0e:	b128      	cbz	r0, 8010f1c <__smakebuf_r+0x74>
 8010f10:	89a3      	ldrh	r3, [r4, #12]
 8010f12:	f023 0303 	bic.w	r3, r3, #3
 8010f16:	f043 0301 	orr.w	r3, r3, #1
 8010f1a:	81a3      	strh	r3, [r4, #12]
 8010f1c:	89a0      	ldrh	r0, [r4, #12]
 8010f1e:	4305      	orrs	r5, r0
 8010f20:	81a5      	strh	r5, [r4, #12]
 8010f22:	e7cd      	b.n	8010ec0 <__smakebuf_r+0x18>
 8010f24:	0800ffbd 	.word	0x0800ffbd

08010f28 <memmove>:
 8010f28:	4288      	cmp	r0, r1
 8010f2a:	b510      	push	{r4, lr}
 8010f2c:	eb01 0402 	add.w	r4, r1, r2
 8010f30:	d902      	bls.n	8010f38 <memmove+0x10>
 8010f32:	4284      	cmp	r4, r0
 8010f34:	4623      	mov	r3, r4
 8010f36:	d807      	bhi.n	8010f48 <memmove+0x20>
 8010f38:	1e43      	subs	r3, r0, #1
 8010f3a:	42a1      	cmp	r1, r4
 8010f3c:	d008      	beq.n	8010f50 <memmove+0x28>
 8010f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f46:	e7f8      	b.n	8010f3a <memmove+0x12>
 8010f48:	4402      	add	r2, r0
 8010f4a:	4601      	mov	r1, r0
 8010f4c:	428a      	cmp	r2, r1
 8010f4e:	d100      	bne.n	8010f52 <memmove+0x2a>
 8010f50:	bd10      	pop	{r4, pc}
 8010f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f5a:	e7f7      	b.n	8010f4c <memmove+0x24>

08010f5c <__malloc_lock>:
 8010f5c:	4801      	ldr	r0, [pc, #4]	; (8010f64 <__malloc_lock+0x8>)
 8010f5e:	f7ff b936 	b.w	80101ce <__retarget_lock_acquire_recursive>
 8010f62:	bf00      	nop
 8010f64:	200079a4 	.word	0x200079a4

08010f68 <__malloc_unlock>:
 8010f68:	4801      	ldr	r0, [pc, #4]	; (8010f70 <__malloc_unlock+0x8>)
 8010f6a:	f7ff b931 	b.w	80101d0 <__retarget_lock_release_recursive>
 8010f6e:	bf00      	nop
 8010f70:	200079a4 	.word	0x200079a4

08010f74 <_free_r>:
 8010f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f76:	2900      	cmp	r1, #0
 8010f78:	d044      	beq.n	8011004 <_free_r+0x90>
 8010f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f7e:	9001      	str	r0, [sp, #4]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	f1a1 0404 	sub.w	r4, r1, #4
 8010f86:	bfb8      	it	lt
 8010f88:	18e4      	addlt	r4, r4, r3
 8010f8a:	f7ff ffe7 	bl	8010f5c <__malloc_lock>
 8010f8e:	4a1e      	ldr	r2, [pc, #120]	; (8011008 <_free_r+0x94>)
 8010f90:	9801      	ldr	r0, [sp, #4]
 8010f92:	6813      	ldr	r3, [r2, #0]
 8010f94:	b933      	cbnz	r3, 8010fa4 <_free_r+0x30>
 8010f96:	6063      	str	r3, [r4, #4]
 8010f98:	6014      	str	r4, [r2, #0]
 8010f9a:	b003      	add	sp, #12
 8010f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fa0:	f7ff bfe2 	b.w	8010f68 <__malloc_unlock>
 8010fa4:	42a3      	cmp	r3, r4
 8010fa6:	d908      	bls.n	8010fba <_free_r+0x46>
 8010fa8:	6825      	ldr	r5, [r4, #0]
 8010faa:	1961      	adds	r1, r4, r5
 8010fac:	428b      	cmp	r3, r1
 8010fae:	bf01      	itttt	eq
 8010fb0:	6819      	ldreq	r1, [r3, #0]
 8010fb2:	685b      	ldreq	r3, [r3, #4]
 8010fb4:	1949      	addeq	r1, r1, r5
 8010fb6:	6021      	streq	r1, [r4, #0]
 8010fb8:	e7ed      	b.n	8010f96 <_free_r+0x22>
 8010fba:	461a      	mov	r2, r3
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	b10b      	cbz	r3, 8010fc4 <_free_r+0x50>
 8010fc0:	42a3      	cmp	r3, r4
 8010fc2:	d9fa      	bls.n	8010fba <_free_r+0x46>
 8010fc4:	6811      	ldr	r1, [r2, #0]
 8010fc6:	1855      	adds	r5, r2, r1
 8010fc8:	42a5      	cmp	r5, r4
 8010fca:	d10b      	bne.n	8010fe4 <_free_r+0x70>
 8010fcc:	6824      	ldr	r4, [r4, #0]
 8010fce:	4421      	add	r1, r4
 8010fd0:	1854      	adds	r4, r2, r1
 8010fd2:	42a3      	cmp	r3, r4
 8010fd4:	6011      	str	r1, [r2, #0]
 8010fd6:	d1e0      	bne.n	8010f9a <_free_r+0x26>
 8010fd8:	681c      	ldr	r4, [r3, #0]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	6053      	str	r3, [r2, #4]
 8010fde:	4421      	add	r1, r4
 8010fe0:	6011      	str	r1, [r2, #0]
 8010fe2:	e7da      	b.n	8010f9a <_free_r+0x26>
 8010fe4:	d902      	bls.n	8010fec <_free_r+0x78>
 8010fe6:	230c      	movs	r3, #12
 8010fe8:	6003      	str	r3, [r0, #0]
 8010fea:	e7d6      	b.n	8010f9a <_free_r+0x26>
 8010fec:	6825      	ldr	r5, [r4, #0]
 8010fee:	1961      	adds	r1, r4, r5
 8010ff0:	428b      	cmp	r3, r1
 8010ff2:	bf04      	itt	eq
 8010ff4:	6819      	ldreq	r1, [r3, #0]
 8010ff6:	685b      	ldreq	r3, [r3, #4]
 8010ff8:	6063      	str	r3, [r4, #4]
 8010ffa:	bf04      	itt	eq
 8010ffc:	1949      	addeq	r1, r1, r5
 8010ffe:	6021      	streq	r1, [r4, #0]
 8011000:	6054      	str	r4, [r2, #4]
 8011002:	e7ca      	b.n	8010f9a <_free_r+0x26>
 8011004:	b003      	add	sp, #12
 8011006:	bd30      	pop	{r4, r5, pc}
 8011008:	200079a8 	.word	0x200079a8

0801100c <_realloc_r>:
 801100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011010:	4680      	mov	r8, r0
 8011012:	4614      	mov	r4, r2
 8011014:	460e      	mov	r6, r1
 8011016:	b921      	cbnz	r1, 8011022 <_realloc_r+0x16>
 8011018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801101c:	4611      	mov	r1, r2
 801101e:	f7ff b91f 	b.w	8010260 <_malloc_r>
 8011022:	b92a      	cbnz	r2, 8011030 <_realloc_r+0x24>
 8011024:	f7ff ffa6 	bl	8010f74 <_free_r>
 8011028:	4625      	mov	r5, r4
 801102a:	4628      	mov	r0, r5
 801102c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011030:	f000 f9ee 	bl	8011410 <_malloc_usable_size_r>
 8011034:	4284      	cmp	r4, r0
 8011036:	4607      	mov	r7, r0
 8011038:	d802      	bhi.n	8011040 <_realloc_r+0x34>
 801103a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801103e:	d812      	bhi.n	8011066 <_realloc_r+0x5a>
 8011040:	4621      	mov	r1, r4
 8011042:	4640      	mov	r0, r8
 8011044:	f7ff f90c 	bl	8010260 <_malloc_r>
 8011048:	4605      	mov	r5, r0
 801104a:	2800      	cmp	r0, #0
 801104c:	d0ed      	beq.n	801102a <_realloc_r+0x1e>
 801104e:	42bc      	cmp	r4, r7
 8011050:	4622      	mov	r2, r4
 8011052:	4631      	mov	r1, r6
 8011054:	bf28      	it	cs
 8011056:	463a      	movcs	r2, r7
 8011058:	f7ff f8cb 	bl	80101f2 <memcpy>
 801105c:	4631      	mov	r1, r6
 801105e:	4640      	mov	r0, r8
 8011060:	f7ff ff88 	bl	8010f74 <_free_r>
 8011064:	e7e1      	b.n	801102a <_realloc_r+0x1e>
 8011066:	4635      	mov	r5, r6
 8011068:	e7df      	b.n	801102a <_realloc_r+0x1e>

0801106a <__ssputs_r>:
 801106a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801106e:	688e      	ldr	r6, [r1, #8]
 8011070:	429e      	cmp	r6, r3
 8011072:	4682      	mov	sl, r0
 8011074:	460c      	mov	r4, r1
 8011076:	4690      	mov	r8, r2
 8011078:	461f      	mov	r7, r3
 801107a:	d838      	bhi.n	80110ee <__ssputs_r+0x84>
 801107c:	898a      	ldrh	r2, [r1, #12]
 801107e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011082:	d032      	beq.n	80110ea <__ssputs_r+0x80>
 8011084:	6825      	ldr	r5, [r4, #0]
 8011086:	6909      	ldr	r1, [r1, #16]
 8011088:	eba5 0901 	sub.w	r9, r5, r1
 801108c:	6965      	ldr	r5, [r4, #20]
 801108e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011096:	3301      	adds	r3, #1
 8011098:	444b      	add	r3, r9
 801109a:	106d      	asrs	r5, r5, #1
 801109c:	429d      	cmp	r5, r3
 801109e:	bf38      	it	cc
 80110a0:	461d      	movcc	r5, r3
 80110a2:	0553      	lsls	r3, r2, #21
 80110a4:	d531      	bpl.n	801110a <__ssputs_r+0xa0>
 80110a6:	4629      	mov	r1, r5
 80110a8:	f7ff f8da 	bl	8010260 <_malloc_r>
 80110ac:	4606      	mov	r6, r0
 80110ae:	b950      	cbnz	r0, 80110c6 <__ssputs_r+0x5c>
 80110b0:	230c      	movs	r3, #12
 80110b2:	f8ca 3000 	str.w	r3, [sl]
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110bc:	81a3      	strh	r3, [r4, #12]
 80110be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110c6:	6921      	ldr	r1, [r4, #16]
 80110c8:	464a      	mov	r2, r9
 80110ca:	f7ff f892 	bl	80101f2 <memcpy>
 80110ce:	89a3      	ldrh	r3, [r4, #12]
 80110d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80110d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110d8:	81a3      	strh	r3, [r4, #12]
 80110da:	6126      	str	r6, [r4, #16]
 80110dc:	6165      	str	r5, [r4, #20]
 80110de:	444e      	add	r6, r9
 80110e0:	eba5 0509 	sub.w	r5, r5, r9
 80110e4:	6026      	str	r6, [r4, #0]
 80110e6:	60a5      	str	r5, [r4, #8]
 80110e8:	463e      	mov	r6, r7
 80110ea:	42be      	cmp	r6, r7
 80110ec:	d900      	bls.n	80110f0 <__ssputs_r+0x86>
 80110ee:	463e      	mov	r6, r7
 80110f0:	6820      	ldr	r0, [r4, #0]
 80110f2:	4632      	mov	r2, r6
 80110f4:	4641      	mov	r1, r8
 80110f6:	f7ff ff17 	bl	8010f28 <memmove>
 80110fa:	68a3      	ldr	r3, [r4, #8]
 80110fc:	1b9b      	subs	r3, r3, r6
 80110fe:	60a3      	str	r3, [r4, #8]
 8011100:	6823      	ldr	r3, [r4, #0]
 8011102:	4433      	add	r3, r6
 8011104:	6023      	str	r3, [r4, #0]
 8011106:	2000      	movs	r0, #0
 8011108:	e7db      	b.n	80110c2 <__ssputs_r+0x58>
 801110a:	462a      	mov	r2, r5
 801110c:	f7ff ff7e 	bl	801100c <_realloc_r>
 8011110:	4606      	mov	r6, r0
 8011112:	2800      	cmp	r0, #0
 8011114:	d1e1      	bne.n	80110da <__ssputs_r+0x70>
 8011116:	6921      	ldr	r1, [r4, #16]
 8011118:	4650      	mov	r0, sl
 801111a:	f7ff ff2b 	bl	8010f74 <_free_r>
 801111e:	e7c7      	b.n	80110b0 <__ssputs_r+0x46>

08011120 <_svfiprintf_r>:
 8011120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011124:	4698      	mov	r8, r3
 8011126:	898b      	ldrh	r3, [r1, #12]
 8011128:	061b      	lsls	r3, r3, #24
 801112a:	b09d      	sub	sp, #116	; 0x74
 801112c:	4607      	mov	r7, r0
 801112e:	460d      	mov	r5, r1
 8011130:	4614      	mov	r4, r2
 8011132:	d50e      	bpl.n	8011152 <_svfiprintf_r+0x32>
 8011134:	690b      	ldr	r3, [r1, #16]
 8011136:	b963      	cbnz	r3, 8011152 <_svfiprintf_r+0x32>
 8011138:	2140      	movs	r1, #64	; 0x40
 801113a:	f7ff f891 	bl	8010260 <_malloc_r>
 801113e:	6028      	str	r0, [r5, #0]
 8011140:	6128      	str	r0, [r5, #16]
 8011142:	b920      	cbnz	r0, 801114e <_svfiprintf_r+0x2e>
 8011144:	230c      	movs	r3, #12
 8011146:	603b      	str	r3, [r7, #0]
 8011148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801114c:	e0d1      	b.n	80112f2 <_svfiprintf_r+0x1d2>
 801114e:	2340      	movs	r3, #64	; 0x40
 8011150:	616b      	str	r3, [r5, #20]
 8011152:	2300      	movs	r3, #0
 8011154:	9309      	str	r3, [sp, #36]	; 0x24
 8011156:	2320      	movs	r3, #32
 8011158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801115c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011160:	2330      	movs	r3, #48	; 0x30
 8011162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801130c <_svfiprintf_r+0x1ec>
 8011166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801116a:	f04f 0901 	mov.w	r9, #1
 801116e:	4623      	mov	r3, r4
 8011170:	469a      	mov	sl, r3
 8011172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011176:	b10a      	cbz	r2, 801117c <_svfiprintf_r+0x5c>
 8011178:	2a25      	cmp	r2, #37	; 0x25
 801117a:	d1f9      	bne.n	8011170 <_svfiprintf_r+0x50>
 801117c:	ebba 0b04 	subs.w	fp, sl, r4
 8011180:	d00b      	beq.n	801119a <_svfiprintf_r+0x7a>
 8011182:	465b      	mov	r3, fp
 8011184:	4622      	mov	r2, r4
 8011186:	4629      	mov	r1, r5
 8011188:	4638      	mov	r0, r7
 801118a:	f7ff ff6e 	bl	801106a <__ssputs_r>
 801118e:	3001      	adds	r0, #1
 8011190:	f000 80aa 	beq.w	80112e8 <_svfiprintf_r+0x1c8>
 8011194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011196:	445a      	add	r2, fp
 8011198:	9209      	str	r2, [sp, #36]	; 0x24
 801119a:	f89a 3000 	ldrb.w	r3, [sl]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f000 80a2 	beq.w	80112e8 <_svfiprintf_r+0x1c8>
 80111a4:	2300      	movs	r3, #0
 80111a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111ae:	f10a 0a01 	add.w	sl, sl, #1
 80111b2:	9304      	str	r3, [sp, #16]
 80111b4:	9307      	str	r3, [sp, #28]
 80111b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111ba:	931a      	str	r3, [sp, #104]	; 0x68
 80111bc:	4654      	mov	r4, sl
 80111be:	2205      	movs	r2, #5
 80111c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111c4:	4851      	ldr	r0, [pc, #324]	; (801130c <_svfiprintf_r+0x1ec>)
 80111c6:	f7ef f82b 	bl	8000220 <memchr>
 80111ca:	9a04      	ldr	r2, [sp, #16]
 80111cc:	b9d8      	cbnz	r0, 8011206 <_svfiprintf_r+0xe6>
 80111ce:	06d0      	lsls	r0, r2, #27
 80111d0:	bf44      	itt	mi
 80111d2:	2320      	movmi	r3, #32
 80111d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111d8:	0711      	lsls	r1, r2, #28
 80111da:	bf44      	itt	mi
 80111dc:	232b      	movmi	r3, #43	; 0x2b
 80111de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111e2:	f89a 3000 	ldrb.w	r3, [sl]
 80111e6:	2b2a      	cmp	r3, #42	; 0x2a
 80111e8:	d015      	beq.n	8011216 <_svfiprintf_r+0xf6>
 80111ea:	9a07      	ldr	r2, [sp, #28]
 80111ec:	4654      	mov	r4, sl
 80111ee:	2000      	movs	r0, #0
 80111f0:	f04f 0c0a 	mov.w	ip, #10
 80111f4:	4621      	mov	r1, r4
 80111f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111fa:	3b30      	subs	r3, #48	; 0x30
 80111fc:	2b09      	cmp	r3, #9
 80111fe:	d94e      	bls.n	801129e <_svfiprintf_r+0x17e>
 8011200:	b1b0      	cbz	r0, 8011230 <_svfiprintf_r+0x110>
 8011202:	9207      	str	r2, [sp, #28]
 8011204:	e014      	b.n	8011230 <_svfiprintf_r+0x110>
 8011206:	eba0 0308 	sub.w	r3, r0, r8
 801120a:	fa09 f303 	lsl.w	r3, r9, r3
 801120e:	4313      	orrs	r3, r2
 8011210:	9304      	str	r3, [sp, #16]
 8011212:	46a2      	mov	sl, r4
 8011214:	e7d2      	b.n	80111bc <_svfiprintf_r+0x9c>
 8011216:	9b03      	ldr	r3, [sp, #12]
 8011218:	1d19      	adds	r1, r3, #4
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	9103      	str	r1, [sp, #12]
 801121e:	2b00      	cmp	r3, #0
 8011220:	bfbb      	ittet	lt
 8011222:	425b      	neglt	r3, r3
 8011224:	f042 0202 	orrlt.w	r2, r2, #2
 8011228:	9307      	strge	r3, [sp, #28]
 801122a:	9307      	strlt	r3, [sp, #28]
 801122c:	bfb8      	it	lt
 801122e:	9204      	strlt	r2, [sp, #16]
 8011230:	7823      	ldrb	r3, [r4, #0]
 8011232:	2b2e      	cmp	r3, #46	; 0x2e
 8011234:	d10c      	bne.n	8011250 <_svfiprintf_r+0x130>
 8011236:	7863      	ldrb	r3, [r4, #1]
 8011238:	2b2a      	cmp	r3, #42	; 0x2a
 801123a:	d135      	bne.n	80112a8 <_svfiprintf_r+0x188>
 801123c:	9b03      	ldr	r3, [sp, #12]
 801123e:	1d1a      	adds	r2, r3, #4
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	9203      	str	r2, [sp, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	bfb8      	it	lt
 8011248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801124c:	3402      	adds	r4, #2
 801124e:	9305      	str	r3, [sp, #20]
 8011250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801131c <_svfiprintf_r+0x1fc>
 8011254:	7821      	ldrb	r1, [r4, #0]
 8011256:	2203      	movs	r2, #3
 8011258:	4650      	mov	r0, sl
 801125a:	f7ee ffe1 	bl	8000220 <memchr>
 801125e:	b140      	cbz	r0, 8011272 <_svfiprintf_r+0x152>
 8011260:	2340      	movs	r3, #64	; 0x40
 8011262:	eba0 000a 	sub.w	r0, r0, sl
 8011266:	fa03 f000 	lsl.w	r0, r3, r0
 801126a:	9b04      	ldr	r3, [sp, #16]
 801126c:	4303      	orrs	r3, r0
 801126e:	3401      	adds	r4, #1
 8011270:	9304      	str	r3, [sp, #16]
 8011272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011276:	4826      	ldr	r0, [pc, #152]	; (8011310 <_svfiprintf_r+0x1f0>)
 8011278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801127c:	2206      	movs	r2, #6
 801127e:	f7ee ffcf 	bl	8000220 <memchr>
 8011282:	2800      	cmp	r0, #0
 8011284:	d038      	beq.n	80112f8 <_svfiprintf_r+0x1d8>
 8011286:	4b23      	ldr	r3, [pc, #140]	; (8011314 <_svfiprintf_r+0x1f4>)
 8011288:	bb1b      	cbnz	r3, 80112d2 <_svfiprintf_r+0x1b2>
 801128a:	9b03      	ldr	r3, [sp, #12]
 801128c:	3307      	adds	r3, #7
 801128e:	f023 0307 	bic.w	r3, r3, #7
 8011292:	3308      	adds	r3, #8
 8011294:	9303      	str	r3, [sp, #12]
 8011296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011298:	4433      	add	r3, r6
 801129a:	9309      	str	r3, [sp, #36]	; 0x24
 801129c:	e767      	b.n	801116e <_svfiprintf_r+0x4e>
 801129e:	fb0c 3202 	mla	r2, ip, r2, r3
 80112a2:	460c      	mov	r4, r1
 80112a4:	2001      	movs	r0, #1
 80112a6:	e7a5      	b.n	80111f4 <_svfiprintf_r+0xd4>
 80112a8:	2300      	movs	r3, #0
 80112aa:	3401      	adds	r4, #1
 80112ac:	9305      	str	r3, [sp, #20]
 80112ae:	4619      	mov	r1, r3
 80112b0:	f04f 0c0a 	mov.w	ip, #10
 80112b4:	4620      	mov	r0, r4
 80112b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112ba:	3a30      	subs	r2, #48	; 0x30
 80112bc:	2a09      	cmp	r2, #9
 80112be:	d903      	bls.n	80112c8 <_svfiprintf_r+0x1a8>
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d0c5      	beq.n	8011250 <_svfiprintf_r+0x130>
 80112c4:	9105      	str	r1, [sp, #20]
 80112c6:	e7c3      	b.n	8011250 <_svfiprintf_r+0x130>
 80112c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80112cc:	4604      	mov	r4, r0
 80112ce:	2301      	movs	r3, #1
 80112d0:	e7f0      	b.n	80112b4 <_svfiprintf_r+0x194>
 80112d2:	ab03      	add	r3, sp, #12
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	462a      	mov	r2, r5
 80112d8:	4b0f      	ldr	r3, [pc, #60]	; (8011318 <_svfiprintf_r+0x1f8>)
 80112da:	a904      	add	r1, sp, #16
 80112dc:	4638      	mov	r0, r7
 80112de:	f3af 8000 	nop.w
 80112e2:	1c42      	adds	r2, r0, #1
 80112e4:	4606      	mov	r6, r0
 80112e6:	d1d6      	bne.n	8011296 <_svfiprintf_r+0x176>
 80112e8:	89ab      	ldrh	r3, [r5, #12]
 80112ea:	065b      	lsls	r3, r3, #25
 80112ec:	f53f af2c 	bmi.w	8011148 <_svfiprintf_r+0x28>
 80112f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112f2:	b01d      	add	sp, #116	; 0x74
 80112f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f8:	ab03      	add	r3, sp, #12
 80112fa:	9300      	str	r3, [sp, #0]
 80112fc:	462a      	mov	r2, r5
 80112fe:	4b06      	ldr	r3, [pc, #24]	; (8011318 <_svfiprintf_r+0x1f8>)
 8011300:	a904      	add	r1, sp, #16
 8011302:	4638      	mov	r0, r7
 8011304:	f7ff f9e8 	bl	80106d8 <_printf_i>
 8011308:	e7eb      	b.n	80112e2 <_svfiprintf_r+0x1c2>
 801130a:	bf00      	nop
 801130c:	08012400 	.word	0x08012400
 8011310:	0801240a 	.word	0x0801240a
 8011314:	00000000 	.word	0x00000000
 8011318:	0801106b 	.word	0x0801106b
 801131c:	08012406 	.word	0x08012406

08011320 <_read_r>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	4d07      	ldr	r5, [pc, #28]	; (8011340 <_read_r+0x20>)
 8011324:	4604      	mov	r4, r0
 8011326:	4608      	mov	r0, r1
 8011328:	4611      	mov	r1, r2
 801132a:	2200      	movs	r2, #0
 801132c:	602a      	str	r2, [r5, #0]
 801132e:	461a      	mov	r2, r3
 8011330:	f7f6 fd88 	bl	8007e44 <_read>
 8011334:	1c43      	adds	r3, r0, #1
 8011336:	d102      	bne.n	801133e <_read_r+0x1e>
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	b103      	cbz	r3, 801133e <_read_r+0x1e>
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	200079b0 	.word	0x200079b0

08011344 <_raise_r>:
 8011344:	291f      	cmp	r1, #31
 8011346:	b538      	push	{r3, r4, r5, lr}
 8011348:	4604      	mov	r4, r0
 801134a:	460d      	mov	r5, r1
 801134c:	d904      	bls.n	8011358 <_raise_r+0x14>
 801134e:	2316      	movs	r3, #22
 8011350:	6003      	str	r3, [r0, #0]
 8011352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011356:	bd38      	pop	{r3, r4, r5, pc}
 8011358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801135a:	b112      	cbz	r2, 8011362 <_raise_r+0x1e>
 801135c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011360:	b94b      	cbnz	r3, 8011376 <_raise_r+0x32>
 8011362:	4620      	mov	r0, r4
 8011364:	f000 f830 	bl	80113c8 <_getpid_r>
 8011368:	462a      	mov	r2, r5
 801136a:	4601      	mov	r1, r0
 801136c:	4620      	mov	r0, r4
 801136e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011372:	f000 b817 	b.w	80113a4 <_kill_r>
 8011376:	2b01      	cmp	r3, #1
 8011378:	d00a      	beq.n	8011390 <_raise_r+0x4c>
 801137a:	1c59      	adds	r1, r3, #1
 801137c:	d103      	bne.n	8011386 <_raise_r+0x42>
 801137e:	2316      	movs	r3, #22
 8011380:	6003      	str	r3, [r0, #0]
 8011382:	2001      	movs	r0, #1
 8011384:	e7e7      	b.n	8011356 <_raise_r+0x12>
 8011386:	2400      	movs	r4, #0
 8011388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801138c:	4628      	mov	r0, r5
 801138e:	4798      	blx	r3
 8011390:	2000      	movs	r0, #0
 8011392:	e7e0      	b.n	8011356 <_raise_r+0x12>

08011394 <raise>:
 8011394:	4b02      	ldr	r3, [pc, #8]	; (80113a0 <raise+0xc>)
 8011396:	4601      	mov	r1, r0
 8011398:	6818      	ldr	r0, [r3, #0]
 801139a:	f7ff bfd3 	b.w	8011344 <_raise_r>
 801139e:	bf00      	nop
 80113a0:	20000aa8 	.word	0x20000aa8

080113a4 <_kill_r>:
 80113a4:	b538      	push	{r3, r4, r5, lr}
 80113a6:	4d07      	ldr	r5, [pc, #28]	; (80113c4 <_kill_r+0x20>)
 80113a8:	2300      	movs	r3, #0
 80113aa:	4604      	mov	r4, r0
 80113ac:	4608      	mov	r0, r1
 80113ae:	4611      	mov	r1, r2
 80113b0:	602b      	str	r3, [r5, #0]
 80113b2:	f7f6 fd2d 	bl	8007e10 <_kill>
 80113b6:	1c43      	adds	r3, r0, #1
 80113b8:	d102      	bne.n	80113c0 <_kill_r+0x1c>
 80113ba:	682b      	ldr	r3, [r5, #0]
 80113bc:	b103      	cbz	r3, 80113c0 <_kill_r+0x1c>
 80113be:	6023      	str	r3, [r4, #0]
 80113c0:	bd38      	pop	{r3, r4, r5, pc}
 80113c2:	bf00      	nop
 80113c4:	200079b0 	.word	0x200079b0

080113c8 <_getpid_r>:
 80113c8:	f7f6 bd1a 	b.w	8007e00 <_getpid>

080113cc <_fstat_r>:
 80113cc:	b538      	push	{r3, r4, r5, lr}
 80113ce:	4d07      	ldr	r5, [pc, #28]	; (80113ec <_fstat_r+0x20>)
 80113d0:	2300      	movs	r3, #0
 80113d2:	4604      	mov	r4, r0
 80113d4:	4608      	mov	r0, r1
 80113d6:	4611      	mov	r1, r2
 80113d8:	602b      	str	r3, [r5, #0]
 80113da:	f7f6 fd78 	bl	8007ece <_fstat>
 80113de:	1c43      	adds	r3, r0, #1
 80113e0:	d102      	bne.n	80113e8 <_fstat_r+0x1c>
 80113e2:	682b      	ldr	r3, [r5, #0]
 80113e4:	b103      	cbz	r3, 80113e8 <_fstat_r+0x1c>
 80113e6:	6023      	str	r3, [r4, #0]
 80113e8:	bd38      	pop	{r3, r4, r5, pc}
 80113ea:	bf00      	nop
 80113ec:	200079b0 	.word	0x200079b0

080113f0 <_isatty_r>:
 80113f0:	b538      	push	{r3, r4, r5, lr}
 80113f2:	4d06      	ldr	r5, [pc, #24]	; (801140c <_isatty_r+0x1c>)
 80113f4:	2300      	movs	r3, #0
 80113f6:	4604      	mov	r4, r0
 80113f8:	4608      	mov	r0, r1
 80113fa:	602b      	str	r3, [r5, #0]
 80113fc:	f7f6 fd77 	bl	8007eee <_isatty>
 8011400:	1c43      	adds	r3, r0, #1
 8011402:	d102      	bne.n	801140a <_isatty_r+0x1a>
 8011404:	682b      	ldr	r3, [r5, #0]
 8011406:	b103      	cbz	r3, 801140a <_isatty_r+0x1a>
 8011408:	6023      	str	r3, [r4, #0]
 801140a:	bd38      	pop	{r3, r4, r5, pc}
 801140c:	200079b0 	.word	0x200079b0

08011410 <_malloc_usable_size_r>:
 8011410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011414:	1f18      	subs	r0, r3, #4
 8011416:	2b00      	cmp	r3, #0
 8011418:	bfbc      	itt	lt
 801141a:	580b      	ldrlt	r3, [r1, r0]
 801141c:	18c0      	addlt	r0, r0, r3
 801141e:	4770      	bx	lr

08011420 <_init>:
 8011420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011422:	bf00      	nop
 8011424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011426:	bc08      	pop	{r3}
 8011428:	469e      	mov	lr, r3
 801142a:	4770      	bx	lr

0801142c <_fini>:
 801142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142e:	bf00      	nop
 8011430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011432:	bc08      	pop	{r3}
 8011434:	469e      	mov	lr, r3
 8011436:	4770      	bx	lr
