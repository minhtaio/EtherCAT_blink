
EthCat_Slave_Tmc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  0800e120  0800e120  0001e120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec8c  0800ec8c  000259a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec8c  0800ec8c  0001ec8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec94  0800ec94  000259a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec94  0800ec94  0001ec94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec98  0800ec98  0001ec98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800ec9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005198  20000108  0800eda4  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200052a0  0800eda4  000252a0  2**0
                  ALLOC
 11 .spiDma_module_space 00000108  200058a0  0800eda4  000258a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  000259a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002275e  00000000  00000000  000259d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ed2  00000000  00000000  00048136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  0004d008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a00  00000000  00000000  0004ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab12  00000000  00000000  00050618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008c36  00000000  00000000  0006b12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  00073d60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c0c  00000000  00000000  00073dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000108 	.word	0x20000108
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e108 	.word	0x0800e108

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000010c 	.word	0x2000010c
 80001dc:	0800e108 	.word	0x0800e108

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ESC_download_pre_objecthandler>:
uint32_t ESC_download_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af02      	add	r7, sp, #8
 800058a:	60ba      	str	r2, [r7, #8]
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4603      	mov	r3, r0
 8000590:	81fb      	strh	r3, [r7, #14]
 8000592:	460b      	mov	r3, r1
 8000594:	737b      	strb	r3, [r7, #13]
   if (IS_RXPDO (index) ||
 8000596:	89fb      	ldrh	r3, [r7, #14]
 8000598:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800059c:	d303      	bcc.n	80005a6 <ESC_download_pre_objecthandler+0x22>
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80005a4:	d311      	bcc.n	80005ca <ESC_download_pre_objecthandler+0x46>
 80005a6:	89fb      	ldrh	r3, [r7, #14]
 80005a8:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 80005ac:	d303      	bcc.n	80005b6 <ESC_download_pre_objecthandler+0x32>
       IS_TXPDO (index) ||
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80005b4:	d309      	bcc.n	80005ca <ESC_download_pre_objecthandler+0x46>
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	f641 4212 	movw	r2, #7186	; 0x1c12
 80005bc:	4293      	cmp	r3, r2
 80005be:	d004      	beq.n	80005ca <ESC_download_pre_objecthandler+0x46>
       index == RX_PDO_OBJIDX ||
 80005c0:	89fb      	ldrh	r3, [r7, #14]
 80005c2:	f641 4213 	movw	r2, #7187	; 0x1c13
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d112      	bne.n	80005f0 <ESC_download_pre_objecthandler+0x6c>
       index == TX_PDO_OBJIDX)
   {
      uint8_t minSub = ((flags & COMPLETE_ACCESS_FLAG) == 0) ? 0 : 1;
 80005ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	0bdb      	lsrs	r3, r3, #15
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	75fb      	strb	r3, [r7, #23]
      if (subindex > minSub && COE_maxSub (index) != 0)
 80005d6:	7b7a      	ldrb	r2, [r7, #13]
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d908      	bls.n	80005f0 <ESC_download_pre_objecthandler+0x6c>
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 f983 	bl	80048ec <COE_maxSub>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <ESC_download_pre_objecthandler+0x6c>
      {
         return ABORT_SUBINDEX0_NOT_ZERO;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <ESC_download_pre_objecthandler+0x94>)
 80005ee:	e00f      	b.n	8000610 <ESC_download_pre_objecthandler+0x8c>
      }
   }

   if (ESCvar.pre_object_download_hook)
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <ESC_download_pre_objecthandler+0x98>)
 80005f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00a      	beq.n	800060e <ESC_download_pre_objecthandler+0x8a>
   {
      return (ESCvar.pre_object_download_hook) (index,
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <ESC_download_pre_objecthandler+0x98>)
 80005fa:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80005fc:	7b79      	ldrb	r1, [r7, #13]
 80005fe:	89f8      	ldrh	r0, [r7, #14]
 8000600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	47a0      	blx	r4
 800060a:	4603      	mov	r3, r0
 800060c:	e000      	b.n	8000610 <ESC_download_pre_objecthandler+0x8c>
            data,
            size,
            flags);
   }

   return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	371c      	adds	r7, #28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	06010003 	.word	0x06010003
 800061c:	20000350 	.word	0x20000350

08000620 <ESC_download_post_objecthandler>:
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_download_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
 800062a:	460b      	mov	r3, r1
 800062c:	717b      	strb	r3, [r7, #5]
 800062e:	4613      	mov	r3, r2
 8000630:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_download_hook != NULL)
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <ESC_download_post_objecthandler+0x34>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <ESC_download_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_download_hook)(index, subindex, flags);
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <ESC_download_post_objecthandler+0x34>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	887a      	ldrh	r2, [r7, #2]
 8000640:	7979      	ldrb	r1, [r7, #5]
 8000642:	88f8      	ldrh	r0, [r7, #6]
 8000644:	4798      	blx	r3
 8000646:	4603      	mov	r3, r0
 8000648:	e000      	b.n	800064c <ESC_download_post_objecthandler+0x2c>
   }

   return 0;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000350 	.word	0x20000350

08000658 <ESC_upload_pre_objecthandler>:
uint32_t ESC_upload_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t *size,
      uint16_t flags)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b087      	sub	sp, #28
 800065c:	af02      	add	r7, sp, #8
 800065e:	60ba      	str	r2, [r7, #8]
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4603      	mov	r3, r0
 8000664:	81fb      	strh	r3, [r7, #14]
 8000666:	460b      	mov	r3, r1
 8000668:	737b      	strb	r3, [r7, #13]
   if (ESCvar.pre_object_upload_hook != NULL)
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <ESC_upload_pre_objecthandler+0x3c>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00a      	beq.n	8000688 <ESC_upload_pre_objecthandler+0x30>
   {
      return (ESCvar.pre_object_upload_hook) (index,
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <ESC_upload_pre_objecthandler+0x3c>)
 8000674:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8000676:	7b79      	ldrb	r1, [r7, #13]
 8000678:	89f8      	ldrh	r0, [r7, #14]
 800067a:	8c3b      	ldrh	r3, [r7, #32]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	47a0      	blx	r4
 8000684:	4603      	mov	r3, r0
 8000686:	e000      	b.n	800068a <ESC_upload_pre_objecthandler+0x32>
            data,
            size,
            flags);
   }

   return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	bf00      	nop
 8000694:	20000350 	.word	0x20000350

08000698 <ESC_upload_post_objecthandler>:
 * @param[in] index      = index of SDO upload request to handle
 * @param[in] sub-index  = sub-index of SDO upload request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_upload_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	460b      	mov	r3, r1
 80006a4:	717b      	strb	r3, [r7, #5]
 80006a6:	4613      	mov	r3, r2
 80006a8:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_upload_hook != NULL)
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <ESC_upload_post_objecthandler+0x34>)
 80006ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d007      	beq.n	80006c2 <ESC_upload_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_upload_hook)(index, subindex, flags);
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <ESC_upload_post_objecthandler+0x34>)
 80006b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b6:	887a      	ldrh	r2, [r7, #2]
 80006b8:	7979      	ldrb	r1, [r7, #5]
 80006ba:	88f8      	ldrh	r0, [r7, #6]
 80006bc:	4798      	blx	r3
 80006be:	4603      	mov	r3, r0
 80006c0:	e000      	b.n	80006c4 <ESC_upload_post_objecthandler+0x2c>
   }

   return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000350 	.word	0x20000350

080006d0 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <APP_safeoutput+0x18>)
 80006d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <APP_safeoutput+0x12>
   {
      (ESCvar.safeoutput_override)();
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <APP_safeoutput+0x18>)
 80006de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e0:	4798      	blx	r3
   }
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000350 	.word	0x20000350

080006ec <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <TXPDO_update+0x3c>)
 80006f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d003      	beq.n	8000700 <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <TXPDO_update+0x3c>)
 80006fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006fc:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 80006fe:	e010      	b.n	8000722 <TXPDO_update+0x36>
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <TXPDO_update+0x3c>)
 8000702:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <TXPDO_update+0x40>)
 8000708:	4619      	mov	r1, r3
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <TXPDO_update+0x44>)
 800070c:	f004 f82e 	bl	800476c <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <TXPDO_update+0x3c>)
 8000712:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8000716:	461a      	mov	r2, r3
 8000718:	4905      	ldr	r1, [pc, #20]	; (8000730 <TXPDO_update+0x44>)
 800071a:	f44f 508c 	mov.w	r0, #4480	; 0x1180
 800071e:	f004 fce3 	bl	80050e8 <ESC_write>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000350 	.word	0x20000350
 800072c:	200002fc 	.word	0x200002fc
 8000730:	200005f0 	.word	0x200005f0

08000734 <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <RXPDO_update+0x3c>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <RXPDO_update+0x3c>)
 8000742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000744:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 8000746:	e010      	b.n	800076a <RXPDO_update+0x36>
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <RXPDO_update+0x3c>)
 800074a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800074e:	461a      	mov	r2, r3
 8000750:	4908      	ldr	r1, [pc, #32]	; (8000774 <RXPDO_update+0x40>)
 8000752:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8000756:	f004 fc63 	bl	8005020 <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <RXPDO_update+0x3c>)
 800075c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <RXPDO_update+0x44>)
 8000762:	4619      	mov	r1, r3
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <RXPDO_update+0x40>)
 8000766:	f004 f863 	bl	8004830 <COE_pdoUnpack>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000350 	.word	0x20000350
 8000774:	200005c0 	.word	0x200005c0
 8000778:	200002a8 	.word	0x200002a8

0800077c <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	2b00      	cmp	r3, #0
 800078e:	dd46      	ble.n	800081e <DIG_process+0xa2>
   {
      if (CC_ATOMIC_GET(watchdog) > 0)
 8000790:	4b4f      	ldr	r3, [pc, #316]	; (80008d0 <DIG_process+0x154>)
 8000792:	f3bf 8f5b 	dmb	ish
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f3bf 8f5b 	dmb	ish
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd0c      	ble.n	80007ba <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 80007a0:	4b4b      	ldr	r3, [pc, #300]	; (80008d0 <DIG_process+0x154>)
 80007a2:	f3bf 8f5b 	dmb	ish
 80007a6:	e853 2f00 	ldrex	r2, [r3]
 80007aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80007ae:	e843 2100 	strex	r1, r2, [r3]
 80007b2:	2900      	cmp	r1, #0
 80007b4:	d1f7      	bne.n	80007a6 <DIG_process+0x2a>
 80007b6:	f3bf 8f5b 	dmb	ish
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 80007ba:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <DIG_process+0x154>)
 80007bc:	f3bf 8f5b 	dmb	ish
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f3bf 8f5b 	dmb	ish
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	dc14      	bgt.n	80007f4 <DIG_process+0x78>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 80007ca:	4b42      	ldr	r3, [pc, #264]	; (80008d4 <DIG_process+0x158>)
 80007cc:	f3bf 8f5b 	dmb	ish
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	f3bf 8f5b 	dmb	ish
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f003 0302 	and.w	r3, r3, #2
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dd09      	ble.n	80007f4 <DIG_process+0x78>
           (ESCvar.ESC_SM2_sml > 0))
 80007e0:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <DIG_process+0x15c>)
 80007e2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d004      	beq.n	80007f4 <DIG_process+0x78>
      {
         DPRINT("DIG_process watchdog expired\n");
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 80007ea:	211b      	movs	r1, #27
 80007ec:	2014      	movs	r0, #20
 80007ee:	f000 f91d 	bl	8000a2c <ESC_ALstatusgotoerror>
 80007f2:	e014      	b.n	800081e <DIG_process+0xa2>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 80007f4:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <DIG_process+0x158>)
 80007f6:	f3bf 8f5b 	dmb	ish
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	f3bf 8f5b 	dmb	ish
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	2b00      	cmp	r3, #0
 8000808:	d109      	bne.n	800081e <DIG_process+0xa2>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <DIG_process+0x15c>)
 800080c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000810:	461a      	mov	r2, r3
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <DIG_process+0x154>)
 8000814:	f3bf 8f5b 	dmb	ish
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	f3bf 8f5b 	dmb	ish
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	2b00      	cmp	r3, #0
 8000826:	dd30      	ble.n	800088a <DIG_process+0x10e>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8000828:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <DIG_process+0x158>)
 800082a:	f3bf 8f5b 	dmb	ish
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	f3bf 8f5b 	dmb	ish
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	2b00      	cmp	r3, #0
 800083c:	dd15      	ble.n	800086a <DIG_process+0xee>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <DIG_process+0x15c>)
 8000840:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00e      	beq.n	800086a <DIG_process+0xee>
      {
         RXPDO_update();
 800084c:	f7ff ff72 	bl	8000734 <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <DIG_process+0x15c>)
 8000852:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000856:	461a      	mov	r2, r3
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <DIG_process+0x154>)
 800085a:	f3bf 8f5b 	dmb	ish
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	f3bf 8f5b 	dmb	ish
         /* Set outputs */
         cb_set_outputs();
 8000864:	f004 ff1d 	bl	80056a2 <cb_set_outputs>
 8000868:	e00f      	b.n	800088a <DIG_process+0x10e>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <DIG_process+0x15c>)
 800086c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000874:	2b00      	cmp	r3, #0
 8000876:	d008      	beq.n	800088a <DIG_process+0x10e>
      {
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <DIG_process+0x15c>)
 800087a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800087e:	461a      	mov	r2, r3
 8000880:	4916      	ldr	r1, [pc, #88]	; (80008dc <DIG_process+0x160>)
 8000882:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8000886:	f004 fbcb 	bl	8005020 <ESC_read>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	2b00      	cmp	r3, #0
 8000892:	dd06      	ble.n	80008a2 <DIG_process+0x126>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <DIG_process+0x15c>)
 8000896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000898:	2b00      	cmp	r3, #0
 800089a:	d002      	beq.n	80008a2 <DIG_process+0x126>
      {
         (ESCvar.application_hook)();
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <DIG_process+0x15c>)
 800089e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a0:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dd0c      	ble.n	80008c6 <DIG_process+0x14a>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <DIG_process+0x158>)
 80008ae:	f3bf 8f5b 	dmb	ish
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f3bf 8f5b 	dmb	ish
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <DIG_process+0x14a>
      {
         /* Update inputs */
         cb_get_inputs();
 80008be:	f004 fee9 	bl	8005694 <cb_get_inputs>
         TXPDO_update();
 80008c2:	f7ff ff13 	bl	80006ec <TXPDO_update>
      }
   }
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200005bc 	.word	0x200005bc
 80008d4:	20000439 	.word	0x20000439
 80008d8:	20000350 	.word	0x20000350
 80008dc:	200005c0 	.word	0x200005c0

080008e0 <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 80008e4:	2204      	movs	r2, #4
 80008e6:	4911      	ldr	r1, [pc, #68]	; (800092c <ecat_slv_poll+0x4c>)
 80008e8:	f44f 6011 	mov.w	r0, #2320	; 0x910
 80008ec:	f004 fb98 	bl	8005020 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <ecat_slv_poll+0x50>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <ecat_slv_poll+0x50>)
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

   /* Check the state machine */
   ESC_state();
 80008fc:	f001 f86e 	bl	80019dc <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 8000900:	f000 ff5e 	bl	80017c0 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 8000904:	f000 fc88 	bl	8001218 <ESC_mbxprocess>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d005      	beq.n	800091a <ecat_slv_poll+0x3a>
   {
      ESC_coeprocess();
 800090e:	f003 fad3 	bl	8003eb8 <ESC_coeprocess>
#if USE_FOE
      ESC_foeprocess();
 8000912:	f004 fae7 	bl	8004ee4 <ESC_foeprocess>
#endif
#if USE_EOE
      ESC_eoeprocess();
#endif
      ESC_xoeprocess();
 8000916:	f000 fdb7 	bl	8001488 <ESC_xoeprocess>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <ecat_slv_poll+0x50>)
 800091c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <ecat_slv_poll+0x48>
   {
      (ESCvar.esc_hw_eep_handler)();
 8000922:	4b03      	ldr	r3, [pc, #12]	; (8000930 <ecat_slv_poll+0x50>)
 8000924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000926:	4798      	blx	r3
   }
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000430 	.word	0x20000430
 8000930:	20000350 	.word	0x20000350

08000934 <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
   ecat_slv_poll();
 8000938:	f7ff ffd2 	bl	80008e0 <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 800093c:	200f      	movs	r0, #15
 800093e:	f7ff ff1d 	bl	800077c <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <ecat_slv_init+0x6c>)
 8000956:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f001 faa9 	bl	8001eb0 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f004 fc26 	bl	80051b0 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8000964:	e00b      	b.n	800097e <ecat_slv_init+0x36>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 8000966:	2202      	movs	r2, #2
 8000968:	4913      	ldr	r1, [pc, #76]	; (80009b8 <ecat_slv_init+0x70>)
 800096a:	f44f 7088 	mov.w	r0, #272	; 0x110
 800096e:	f004 fb57 	bl	8005020 <ESC_read>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <ecat_slv_init+0x74>)
 8000974:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <ecat_slv_init+0x74>)
 800097a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <ecat_slv_init+0x74>)
 8000980:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0ec      	beq.n	8000966 <ecat_slv_init+0x1e>
   }

#if USE_FOE
   /* Init FoE */
   FOE_init ();
 800098c:	f004 f93e 	bl	8004c0c <FOE_init>
   /* Init EoE */
   EOE_init ();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 8000990:	2001      	movs	r0, #1
 8000992:	f000 f82f 	bl	80009f4 <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f812 	bl	80009c0 <ESC_ALerror>
   ESC_stopmbx ();
 800099c:	f000 fa84 	bl	8000ea8 <ESC_stopmbx>
   ESC_stopinput ();
 80009a0:	f000 feb0 	bl	8001704 <ESC_stopinput>
   ESC_stopoutput ();
 80009a4:	f000 fef4 	bl	8001790 <ESC_stopoutput>
   /* Init Object Dictionary default values */
   COE_initDefaultValues ();
 80009a8:	f003 fe74 	bl	8004694 <COE_initDefaultValues>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200005bc 	.word	0x200005bc
 80009b8:	200003d6 	.word	0x200003d6
 80009bc:	20000350 	.word	0x20000350

080009c0 <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <ESC_ALerror+0x30>)
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   dummy = htoes (errornumber);
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 80009d6:	f107 030e 	add.w	r3, r7, #14
 80009da:	2202      	movs	r2, #2
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 709a 	mov.w	r0, #308	; 0x134
 80009e2:	f004 fb81 	bl	80050e8 <ESC_write>
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000350 	.word	0x20000350

080009f4 <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <ESC_ALstatus+0x34>)
 8000a04:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
   dummy = htoes ((uint16_t) status);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 8000a0e:	f107 030e 	add.w	r3, r7, #14
 8000a12:	2202      	movs	r2, #2
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 7098 	mov.w	r0, #304	; 0x130
 8000a1a:	f004 fb65 	bl	80050e8 <ESC_write>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000350 	.word	0x20000350

08000a2c <ESC_ALstatusgotoerror>:
 * reflecting actual state and error indication if present
 * @param[in] errornumber   = Write an by EtherCAT specified Error number
 * register 0x134 AL Status Code
 */
void ESC_ALstatusgotoerror (uint8_t status, uint16_t errornumber)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	460a      	mov	r2, r1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	80bb      	strh	r3, [r7, #4]
   uint8_t an, as;

   if(status & ESCop)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d145      	bne.n	8000ad2 <ESC_ALstatusgotoerror+0xa6>
   {
      /* Erroneous input, ignore */
      return;
   }
   /* Mask error ack of current state */
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <ESC_ALstatusgotoerror+0xb0>)
 8000a48:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	73bb      	strb	r3, [r7, #14]
   an = as;
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	73fb      	strb	r3, [r7, #15]
   /* Set the state transition, new state in high bits and old in bits  */
   as = (uint8_t)(((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	011b      	lsls	r3, r3, #4
 8000a5e:	b25a      	sxtb	r2, r3
 8000a60:	7bbb      	ldrb	r3, [r7, #14]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	f003 030f 	and.w	r3, r3, #15
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	73bb      	strb	r3, [r7, #14]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <ESC_ALstatusgotoerror+0xb0>)
 8000a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d007      	beq.n	8000a8a <ESC_ALstatusgotoerror+0x5e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <ESC_ALstatusgotoerror+0xb0>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7e:	f107 010f 	add.w	r1, r7, #15
 8000a82:	f107 020e 	add.w	r2, r7, #14
 8000a86:	4610      	mov	r0, r2
 8000a88:	4798      	blx	r3
   }
   /* Stop outputs if active */
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <ESC_ALstatusgotoerror+0xb4>)
 8000a8c:	f3bf 8f5b 	dmb	ish
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f3bf 8f5b 	dmb	ish
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dd01      	ble.n	8000aa4 <ESC_ALstatusgotoerror+0x78>
   {
      ESC_stopoutput();
 8000aa0:	f000 fe76 	bl	8001790 <ESC_stopoutput>
   }
   ESC_ALerror(errornumber);
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff8a 	bl	80009c0 <ESC_ALerror>
   ESC_ALstatus(status);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ffa0 	bl	80009f4 <ESC_ALstatus>
   an = status;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	73fb      	strb	r3, [r7, #15]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <ESC_ALstatusgotoerror+0xb0>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d009      	beq.n	8000ad4 <ESC_ALstatusgotoerror+0xa8>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <ESC_ALstatusgotoerror+0xb0>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f107 010f 	add.w	r1, r7, #15
 8000ac8:	f107 020e 	add.w	r2, r7, #14
 8000acc:	4610      	mov	r0, r2
 8000ace:	4798      	blx	r3
 8000ad0:	e000      	b.n	8000ad4 <ESC_ALstatusgotoerror+0xa8>
      return;
 8000ad2:	bf00      	nop
   }
}
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000350 	.word	0x20000350
 8000ae0:	20000439 	.word	0x20000439

08000ae4 <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
   uint8_t dummy;
   ESC_read ((uint16_t)(ESCREG_SM0ACTIVATE + (n << 3)), &dummy, 1);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	f603 0306 	addw	r3, r3, #2054	; 0x806
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	f107 010f 	add.w	r1, r7, #15
 8000b00:	2201      	movs	r2, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fa8c 	bl	8005020 <ESC_read>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	3317      	adds	r3, #23
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <ESC_SMstatus+0x3c>)
 8000b22:	4413      	add	r3, r2
 8000b24:	3304      	adds	r3, #4
 8000b26:	60fb      	str	r3, [r7, #12]
   ESC_read ((uint16_t)(ESCREG_SM0STATUS + (n << 3)), &(sm->Status), 1);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	f603 0305 	addw	r3, r3, #2053	; 0x805
 8000b34:	b298      	uxth	r0, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3305      	adds	r3, #5
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f004 fa6f 	bl	8005020 <ESC_read>
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000350 	.word	0x20000350

08000b50 <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	3317      	adds	r3, #23
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <ESC_SMwritepdi+0x3c>)
 8000b62:	4413      	add	r3, r2
 8000b64:	3304      	adds	r3, #4
 8000b66:	60fb      	str	r3, [r7, #12]
   ESC_write ((uint16_t)(ESCREG_SM0PDI + (n << 3)), &(sm->ActPDI), 1);
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8000b74:	b298      	uxth	r0, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3307      	adds	r3, #7
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f004 fab3 	bl	80050e8 <ESC_write>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000350 	.word	0x20000350

08000b90 <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	3317      	adds	r3, #23
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <ESC_SMenable+0x38>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= (uint8_t)~ESCREG_SMENABLE_BIT;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	79db      	ldrb	r3, [r3, #7]
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffc9 	bl	8000b50 <ESC_SMwritepdi>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000350 	.word	0x20000350

08000bcc <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3317      	adds	r3, #23
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <ESC_SMdisable+0x38>)
 8000bde:	4413      	add	r3, r2
 8000be0:	3304      	adds	r3, #4
 8000be2:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	79db      	ldrb	r3, [r3, #7]
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffab 	bl	8000b50 <ESC_SMwritepdi>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000350 	.word	0x20000350

08000c08 <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4906      	ldr	r1, [pc, #24]	; (8000c28 <ESC_address+0x20>)
 8000c10:	2010      	movs	r0, #16
 8000c12:	f004 fa05 	bl	8005020 <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <ESC_address+0x24>)
 8000c18:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <ESC_address+0x24>)
 8000c1e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200003d8 	.word	0x200003d8
 8000c2c:	20000350 	.word	0x20000350

08000c30 <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f640 1081 	movw	r0, #2433	; 0x981
 8000c40:	f004 f9ee 	bl	8005020 <ESC_read>
   return activation;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	80fb      	strh	r3, [r7, #6]

   uint8_t sync_act = ESC_SYNCactivation();
 8000c5a:	f7ff ffe9 	bl	8000c30 <ESC_SYNCactivation>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	717b      	strb	r3, [r7, #5]
   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 8000c62:	797b      	ldrb	r3, [r7, #5]
 8000c64:	f003 0309 	and.w	r3, r3, #9
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dd0b      	ble.n	8000c84 <ESC_checkDC+0x34>
   {
      /* Trigger a by the application given DC check handler, return error if
       *  non is given
       */
      ret = ALERR_DCINVALIDSYNCCFG;
 8000c6c:	2330      	movs	r3, #48	; 0x30
 8000c6e:	80fb      	strh	r3, [r7, #6]
      if(ESCvar.esc_check_dc_handler != NULL)
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <ESC_checkDC+0x50>)
 8000c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00d      	beq.n	8000c94 <ESC_checkDC+0x44>
      {
         ret = (ESCvar.esc_check_dc_handler)();
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <ESC_checkDC+0x50>)
 8000c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7c:	4798      	blx	r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	e007      	b.n	8000c94 <ESC_checkDC+0x44>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <ESC_checkDC+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      ESCvar.synccounter = 0;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <ESC_checkDC+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
   }

   return ret;
 8000c94:	88fb      	ldrh	r3, [r7, #6]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000350 	.word	0x20000350

08000ca4 <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 8000cae:	2208      	movs	r2, #8
 8000cb0:	4934      	ldr	r1, [pc, #208]	; (8000d84 <ESC_checkmbx+0xe0>)
 8000cb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cb6:	f004 f9b3 	bl	8005020 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4932      	ldr	r1, [pc, #200]	; (8000d88 <ESC_checkmbx+0xe4>)
 8000cbe:	f640 0008 	movw	r0, #2056	; 0x808
 8000cc2:	f004 f9ad 	bl	8005020 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <ESC_checkmbx+0xe0>)
 8000cc8:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d116      	bne.n	8000d08 <ESC_checkmbx+0x64>
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	885b      	ldrh	r3, [r3, #2]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ce4:	885b      	ldrh	r3, [r3, #2]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d10e      	bne.n	8000d08 <ESC_checkmbx+0x64>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	791a      	ldrb	r2, [r3, #4]
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cf2:	799b      	ldrb	r3, [r3, #6]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d107      	bne.n	8000d08 <ESC_checkmbx+0x64>
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000cfa:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10b      	bne.n	8000d20 <ESC_checkmbx+0x7c>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff ff5b 	bl	8000bcc <ESC_SMdisable>
      ESC_SMdisable (1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff ff58 	bl	8000bcc <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 8000d1c:	2311      	movs	r3, #17
 8000d1e:	e02d      	b.n	8000d7c <ESC_checkmbx+0xd8>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <ESC_checkmbx+0xe4>)
 8000d22:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d116      	bne.n	8000d62 <ESC_checkmbx+0xbe>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	885b      	ldrh	r3, [r3, #2]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d3e:	885b      	ldrh	r3, [r3, #2]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d10e      	bne.n	8000d62 <ESC_checkmbx+0xbe>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d4c:	799b      	ldrb	r3, [r3, #6]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d107      	bne.n	8000d62 <ESC_checkmbx+0xbe>
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000d54:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10b      	bne.n	8000d7a <ESC_checkmbx+0xd6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <ESC_checkmbx+0xe8>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff ff2e 	bl	8000bcc <ESC_SMdisable>
      ESC_SMdisable (1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ff2b 	bl	8000bcc <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 8000d76:	2311      	movs	r3, #17
 8000d78:	e000      	b.n	8000d7c <ESC_checkmbx+0xd8>
   }
   return state;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000040c 	.word	0x2000040c
 8000d88:	20000414 	.word	0x20000414
 8000d8c:	20000350 	.word	0x20000350

08000d90 <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZE;
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <ESC_startmbx+0x80>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mb[0];
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <ESC_startmbx+0x80>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <ESC_startmbx+0x84>)
 8000da4:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mb[1];
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <ESC_startmbx+0x80>)
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <ESC_startmbx+0x88>)
 8000daa:	675a      	str	r2, [r3, #116]	; 0x74


   ESC_SMenable (0);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff feef 	bl	8000b90 <ESC_SMenable>
   ESC_SMenable (1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff feec 	bl	8000b90 <ESC_SMenable>
   ESC_SMstatus (0);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fea9 	bl	8000b10 <ESC_SMstatus>
   ESC_SMstatus (1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fea6 	bl	8000b10 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff6c 	bl	8000ca4 <ESC_checkmbx>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <ESC_startmbx+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8000dda:	2016      	movs	r0, #22
 8000ddc:	f7ff fdf0 	bl	80009c0 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <ESC_startmbx+0x80>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000de8:	e00d      	b.n	8000e06 <ESC_startmbx+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <ESC_startmbx+0x80>)
 8000dec:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000df0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <ESC_startmbx+0x80>)
 8000dfa:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <ESC_startmbx+0x80>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   }
   return state;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000350 	.word	0x20000350
 8000e14:	20000354 	.word	0x20000354
 8000e18:	2000035c 	.word	0x2000035c

08000e1c <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZEBOOT;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <ESC_startmbxboot+0x80>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <ESC_startmbxboot+0x80>)
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <ESC_startmbxboot+0x84>)
 8000e30:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <ESC_startmbxboot+0x80>)
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <ESC_startmbxboot+0x88>)
 8000e36:	675a      	str	r2, [r3, #116]	; 0x74

   ESC_SMenable (0);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fea9 	bl	8000b90 <ESC_SMenable>
   ESC_SMenable (1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff fea6 	bl	8000b90 <ESC_SMenable>
   ESC_SMstatus (0);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fe63 	bl	8000b10 <ESC_SMstatus>
   ESC_SMstatus (1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff fe60 	bl	8000b10 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff26 	bl	8000ca4 <ESC_checkmbx>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d007      	beq.n	8000e76 <ESC_startmbxboot+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 8000e66:	2015      	movs	r0, #21
 8000e68:	f7ff fdaa 	bl	80009c0 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <ESC_startmbxboot+0x80>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000e74:	e00d      	b.n	8000e92 <ESC_startmbxboot+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <ESC_startmbxboot+0x80>)
 8000e78:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000e7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <ESC_startmbxboot+0x80>)
 8000e86:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <ESC_startmbxboot+0x80>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   }
   return state;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000350 	.word	0x20000350
 8000ea0:	20000364 	.word	0x20000364
 8000ea4:	2000036c 	.word	0x2000036c

08000ea8 <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   ESC_SMdisable (0);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fe88 	bl	8000bcc <ESC_SMdisable>
   ESC_SMdisable (1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fe85 	bl	8000bcc <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e006      	b.n	8000ed6 <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <ESC_stopmbx+0xa8>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	54d1      	strb	r1, [r2, r3]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d9f5      	bls.n	8000ec8 <ESC_stopmbx+0x20>
   }
   ESCvar.mbxoutpost = 0;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   ESCvar.mbxbackup = 0;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   ESCvar.xoe = 0;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxfree = 1;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
   ESCvar.toggle = 0;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   ESCvar.mbxincnt = 0;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
   ESCvar.segmented = 0;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
   ESCvar.frags = 0;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   ESCvar.fragsleft = 0;
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   ESCvar.txcue = 0;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   ESCvar.index = 0;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ESCvar.subindex = 0;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
   ESCvar.flags = 0;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <ESC_stopmbx+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000350 	.word	0x20000350
 8000f50:	200002a4 	.word	0x200002a4

08000f54 <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <ESC_readmbx+0x80>)
 8000f5c:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <ESC_readmbx+0x84>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	2206      	movs	r2, #6
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 f859 	bl	8005020 <ESC_read>
   length = etohs (MB->header.length);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <ESC_readmbx+0x84>)
 8000f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7e:	885b      	ldrh	r3, [r3, #2]
 8000f80:	3b06      	subs	r3, #6
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d905      	bls.n	8000f92 <ESC_readmbx+0x3e>
   {
      length = (uint16_t)(ESC_MBX0_sml - ESC_MBXHSIZE);
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <ESC_readmbx+0x84>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8a:	885b      	ldrh	r3, [r3, #2]
 8000f8c:	3b06      	subs	r3, #6
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	807b      	strh	r3, [r7, #2]
   }
   ESC_read ((uint16_t)(ESC_MBX0_sma + ESC_MBXHSIZE), MB->b, length);
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <ESC_readmbx+0x84>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	3306      	adds	r3, #6
 8000f9a:	b298      	uxth	r0, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3306      	adds	r3, #6
 8000fa0:	887a      	ldrh	r2, [r7, #2]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f004 f83c 	bl	8005020 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	3306      	adds	r3, #6
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <ESC_readmbx+0x84>)
 8000fae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8000fb0:	8852      	ldrh	r2, [r2, #2]
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d207      	bcs.n	8000fc6 <ESC_readmbx+0x72>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <ESC_readmbx+0x84>)
 8000fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fba:	889b      	ldrh	r3, [r3, #4]
 8000fbc:	1cb9      	adds	r1, r7, #2
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 f82d 	bl	8005020 <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <ESC_readmbx+0x88>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000124 	.word	0x20000124
 8000fd8:	20000350 	.word	0x20000350
 8000fdc:	200002a4 	.word	0x200002a4

08000fe0 <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ESC_writembx+0x88>)
 8000fee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	; (800106c <ESC_writembx+0x8c>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	4313      	orrs	r3, r2
 8001008:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 800100a:	8afa      	ldrh	r2, [r7, #22]
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <ESC_writembx+0x88>)
 800100e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001010:	885b      	ldrh	r3, [r3, #2]
 8001012:	3b06      	subs	r3, #6
 8001014:	429a      	cmp	r2, r3
 8001016:	d904      	bls.n	8001022 <ESC_writembx+0x42>
   {
      length = (uint16_t)(ESC_MBX1_sml - ESC_MBXHSIZE);
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <ESC_writembx+0x88>)
 800101a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800101c:	885b      	ldrh	r3, [r3, #2]
 800101e:	3b06      	subs	r3, #6
 8001020:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, (uint16_t)(ESC_MBXHSIZE + length));
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <ESC_writembx+0x88>)
 8001024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001026:	8818      	ldrh	r0, [r3, #0]
 8001028:	8afb      	ldrh	r3, [r7, #22]
 800102a:	3306      	adds	r3, #6
 800102c:	b29b      	uxth	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	6939      	ldr	r1, [r7, #16]
 8001032:	f004 f859 	bl	80050e8 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 8001036:	8afb      	ldrh	r3, [r7, #22]
 8001038:	3306      	adds	r3, #6
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <ESC_writembx+0x88>)
 800103c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800103e:	8852      	ldrh	r2, [r2, #2]
 8001040:	4293      	cmp	r3, r2
 8001042:	d208      	bcs.n	8001056 <ESC_writembx+0x76>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <ESC_writembx+0x88>)
 8001046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	f107 010f 	add.w	r1, r7, #15
 800104e:	2201      	movs	r2, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f849 	bl	80050e8 <ESC_write>
   }

   ESCvar.mbxfree = 0;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <ESC_writembx+0x88>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000350 	.word	0x20000350
 800106c:	20000124 	.word	0x20000124

08001070 <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <ESC_ackmbxread+0x2c>)
 800107c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	1df9      	adds	r1, r7, #7
 8001082:	2201      	movs	r2, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f004 f82f 	bl	80050e8 <ESC_write>
   ESCvar.mbxfree = 1;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <ESC_ackmbxread+0x2c>)
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000350 	.word	0x20000350

080010a0 <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 80010a6:	2302      	movs	r3, #2
 80010a8:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 80010aa:	e002      	b.n	80010b2 <ESC_claimbuffer+0x12>
   {
      n--;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <ESC_claimbuffer+0x22>
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4a2b      	ldr	r2, [pc, #172]	; (8001168 <ESC_claimbuffer+0xc8>)
 80010bc:	5cd3      	ldrb	r3, [r2, r3]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f4      	bne.n	80010ac <ESC_claimbuffer+0xc>
   }
   if (n)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d047      	beq.n	8001158 <ESC_claimbuffer+0xb8>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <ESC_claimbuffer+0xc8>)
 80010cc:	2102      	movs	r1, #2
 80010ce:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4a26      	ldr	r2, [pc, #152]	; (800116c <ESC_claimbuffer+0xcc>)
 80010d4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	4a25      	ldr	r2, [pc, #148]	; (8001170 <ESC_claimbuffer+0xd0>)
 80010dc:	4413      	add	r3, r2
 80010de:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <ESC_claimbuffer+0xcc>)
 80010e2:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <ESC_claimbuffer+0xcc>)
 80010ec:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <ESC_claimbuffer+0xcc>)
 80010f2:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <ESC_claimbuffer+0xcc>)
 80010fe:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (ESCvar.mbxcnt == 0)
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <ESC_claimbuffer+0xcc>)
 8001104:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <ESC_claimbuffer+0x74>
      {
         ESCvar.mbxcnt = 1;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <ESC_claimbuffer+0xcc>)
 800110e:	2201      	movs	r2, #1
 8001110:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      }
      MBh->address = htoes (0x0000);      // destination is master
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	709a      	strb	r2, [r3, #2]
 800111a:	2200      	movs	r2, #0
 800111c:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	7913      	ldrb	r3, [r2, #4]
 8001122:	f36f 0305 	bfc	r3, #0, #6
 8001126:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	7913      	ldrb	r3, [r2, #4]
 800112c:	f36f 1387 	bfc	r3, #6, #2
 8001130:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt & 0xFU;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <ESC_claimbuffer+0xcc>)
 8001134:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	b2d9      	uxtb	r1, r3
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	7953      	ldrb	r3, [r2, #5]
 8001142:	f361 1307 	bfi	r3, r1, #4, #4
 8001146:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <ESC_claimbuffer+0xcc>)
 800114a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <ESC_claimbuffer+0xcc>)
 8001154:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   }
   return n;
 8001158:	79fb      	ldrb	r3, [r7, #7]
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200002a4 	.word	0x200002a4
 800116c:	20000350 	.word	0x20000350
 8001170:	20000124 	.word	0x20000124

08001174 <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 800117a:	2302      	movs	r3, #2
 800117c:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800117e:	e002      	b.n	8001186 <ESC_outreqbuffer+0x12>
   {
      n--;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	3b01      	subs	r3, #1
 8001184:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <ESC_outreqbuffer+0x22>
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <ESC_outreqbuffer+0x30>)
 8001190:	5cd3      	ldrb	r3, [r2, r3]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d1f4      	bne.n	8001180 <ESC_outreqbuffer+0xc>
   }
   return n;
 8001196:	79fb      	ldrb	r3, [r7, #7]
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	200002a4 	.word	0x200002a4

080011a8 <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 80011b2:	f7ff ff75 	bl	80010a0 <ESC_claimbuffer>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d021      	beq.n	8001204 <MBX_error+0x5c>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <MBX_error+0x64>)
 80011c4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <MBX_error+0x68>)
 80011cc:	4413      	add	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f042 0204 	orr.w	r2, r2, #4
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	7953      	ldrb	r3, [r2, #5]
 80011e2:	f36f 0303 	bfc	r3, #0, #4
 80011e6:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f042 0201 	orr.w	r2, r2, #1
 80011f0:	719a      	strb	r2, [r3, #6]
 80011f2:	2200      	movs	r2, #0
 80011f4:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	88fa      	ldrh	r2, [r7, #6]
 80011fa:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <MBX_error+0x6c>)
 8001200:	2103      	movs	r1, #3
 8001202:	54d1      	strb	r1, [r2, r3]
   }
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000350 	.word	0x20000350
 8001210:	20000124 	.word	0x20000124
 8001214:	200002a4 	.word	0x200002a4

08001218 <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 8001222:	4b96      	ldr	r3, [pc, #600]	; (800147c <ESC_mbxprocess+0x264>)
 8001224:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 8001226:	4b96      	ldr	r3, [pc, #600]	; (8001480 <ESC_mbxprocess+0x268>)
 8001228:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e11f      	b.n	8001474 <ESC_mbxprocess+0x25c>
   }

   /* SM0/1 access */
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <ESC_mbxprocess+0x268>)
 8001236:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800123a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <ESC_mbxprocess+0x36>
   {
      ESC_SMstatus (0);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fc64 	bl	8000b10 <ESC_SMstatus>
      ESC_SMstatus (1);
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fc61 	bl	8000b10 <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 800124e:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <ESC_mbxprocess+0x268>)
 8001250:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001254:	2b00      	cmp	r3, #0
 8001256:	d03c      	beq.n	80012d2 <ESC_mbxprocess+0xba>
 8001258:	4b89      	ldr	r3, [pc, #548]	; (8001480 <ESC_mbxprocess+0x268>)
 800125a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800125e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001262:	2b00      	cmp	r3, #0
 8001264:	d035      	beq.n	80012d2 <ESC_mbxprocess+0xba>
   {
      ESC_ackmbxread ();
 8001266:	f7ff ff03 	bl	8001070 <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 800126a:	4b85      	ldr	r3, [pc, #532]	; (8001480 <ESC_mbxprocess+0x268>)
 800126c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <ESC_mbxprocess+0x6a>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 8001274:	4b82      	ldr	r3, [pc, #520]	; (8001480 <ESC_mbxprocess+0x268>)
 8001276:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800127a:	461a      	mov	r2, r3
 800127c:	4b81      	ldr	r3, [pc, #516]	; (8001484 <ESC_mbxprocess+0x26c>)
 800127e:	2100      	movs	r1, #0
 8001280:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 8001282:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <ESC_mbxprocess+0x268>)
 8001284:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001288:	461a      	mov	r2, r3
 800128a:	4b7e      	ldr	r3, [pc, #504]	; (8001484 <ESC_mbxprocess+0x26c>)
 800128c:	5c9b      	ldrb	r3, [r3, r2]
 800128e:	2b06      	cmp	r3, #6
 8001290:	d105      	bne.n	800129e <ESC_mbxprocess+0x86>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 8001292:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <ESC_mbxprocess+0x268>)
 8001294:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fea1 	bl	8000fe0 <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <ESC_mbxprocess+0x268>)
 80012a0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b77      	ldr	r3, [pc, #476]	; (8001484 <ESC_mbxprocess+0x26c>)
 80012a8:	2105      	movs	r1, #5
 80012aa:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 80012ac:	4b74      	ldr	r3, [pc, #464]	; (8001480 <ESC_mbxprocess+0x268>)
 80012ae:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80012b2:	4b73      	ldr	r3, [pc, #460]	; (8001480 <ESC_mbxprocess+0x268>)
 80012b4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      ESCvar.mbxoutpost = 0;
 80012b8:	4b71      	ldr	r3, [pc, #452]	; (8001480 <ESC_mbxprocess+0x268>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 80012c0:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <ESC_mbxprocess+0x268>)
 80012c2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <ESC_mbxprocess+0xb6>
      {
         return 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e0d2      	b.n	8001474 <ESC_mbxprocess+0x25c>
      }
      return 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e0d0      	b.n	8001474 <ESC_mbxprocess+0x25c>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 80012d2:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <ESC_mbxprocess+0x268>)
 80012d4:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80012d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4b67      	ldr	r3, [pc, #412]	; (8001480 <ESC_mbxprocess+0x268>)
 80012e2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d044      	beq.n	8001374 <ESC_mbxprocess+0x15c>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 80012ea:	4b65      	ldr	r3, [pc, #404]	; (8001480 <ESC_mbxprocess+0x268>)
 80012ec:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d104      	bne.n	80012fe <ESC_mbxprocess+0xe6>
 80012f4:	4b62      	ldr	r3, [pc, #392]	; (8001480 <ESC_mbxprocess+0x268>)
 80012f6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d038      	beq.n	8001370 <ESC_mbxprocess+0x158>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 80012fe:	4b60      	ldr	r3, [pc, #384]	; (8001480 <ESC_mbxprocess+0x268>)
 8001300:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001304:	2b00      	cmp	r3, #0
 8001306:	d106      	bne.n	8001316 <ESC_mbxprocess+0xfe>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8001308:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <ESC_mbxprocess+0x268>)
 800130a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe66 	bl	8000fe0 <ESC_writembx>
 8001314:	e012      	b.n	800133c <ESC_mbxprocess+0x124>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff fc58 	bl	8000bcc <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 800131c:	4b58      	ldr	r3, [pc, #352]	; (8001480 <ESC_mbxprocess+0x268>)
 800131e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001322:	461a      	mov	r2, r3
 8001324:	4b57      	ldr	r3, [pc, #348]	; (8001484 <ESC_mbxprocess+0x26c>)
 8001326:	2106      	movs	r1, #6
 8001328:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fc30 	bl	8000b90 <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <ESC_mbxprocess+0x268>)
 8001332:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe52 	bl	8000fe0 <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <ESC_mbxprocess+0x268>)
 800133e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8001342:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <ESC_mbxprocess+0x268>)
 800134c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
         ESCvar.SM[1].PDIrep = ESCvar.toggle & 0x1U;
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <ESC_mbxprocess+0x268>)
 8001352:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	b2d9      	uxtb	r1, r3
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <ESC_mbxprocess+0x268>)
 800135e:	f892 30cb 	ldrb.w	r3, [r2, #203]	; 0xcb
 8001362:	f361 0341 	bfi	r3, r1, #1, #1
 8001366:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
         ESC_SMwritepdi (1);
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff fbf0 	bl	8000b50 <ESC_SMwritepdi>
      }
      return 0;
 8001370:	2300      	movs	r3, #0
 8001372:	e07f      	b.n	8001474 <ESC_mbxprocess+0x25c>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <ESC_mbxprocess+0x268>)
 8001376:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800137a:	2b00      	cmp	r3, #0
 800137c:	d02f      	beq.n	80013de <ESC_mbxprocess+0x1c6>
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <ESC_mbxprocess+0x268>)
 8001380:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001384:	2b00      	cmp	r3, #0
 8001386:	d107      	bne.n	8001398 <ESC_mbxprocess+0x180>
 8001388:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <ESC_mbxprocess+0x268>)
 800138a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d122      	bne.n	80013de <ESC_mbxprocess+0x1c6>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 8001398:	f7ff feec 	bl	8001174 <ESC_outreqbuffer>
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d01b      	beq.n	80013de <ESC_mbxprocess+0x1c6>
      {
         ESC_writembx (mbxhandle);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe19 	bl	8000fe0 <ESC_writembx>
         /* Refresh SM status */
         ESC_SMstatus (1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff fbae 	bl	8000b10 <ESC_SMstatus>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4a33      	ldr	r2, [pc, #204]	; (8001484 <ESC_mbxprocess+0x26c>)
 80013b8:	2104      	movs	r1, #4
 80013ba:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 80013bc:	4a30      	ldr	r2, [pc, #192]	; (8001480 <ESC_mbxprocess+0x268>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
         if (ESCvar.txcue)
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <ESC_mbxprocess+0x268>)
 80013c6:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d007      	beq.n	80013de <ESC_mbxprocess+0x1c6>
         {
            ESCvar.txcue--;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <ESC_mbxprocess+0x268>)
 80013d0:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <ESC_mbxprocess+0x268>)
 80013da:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <ESC_mbxprocess+0x268>)
 80013e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d041      	beq.n	8001472 <ESC_mbxprocess+0x25a>
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <ESC_mbxprocess+0x26c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d13d      	bne.n	8001472 <ESC_mbxprocess+0x25a>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <ESC_mbxprocess+0x268>)
 80013f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d138      	bne.n	8001472 <ESC_mbxprocess+0x25a>
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <ESC_mbxprocess+0x268>)
 8001402:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001406:	2b00      	cmp	r3, #0
 8001408:	d133      	bne.n	8001472 <ESC_mbxprocess+0x25a>
   {
      ESC_readmbx ();
 800140a:	f7ff fda3 	bl	8000f54 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <ESC_mbxprocess+0x268>)
 8001410:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8001414:	f36f 03c3 	bfc	r3, #3, #1
 8001418:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
      if (etohs (MBh->length) == 0)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <ESC_mbxprocess+0x21a>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8001426:	2005      	movs	r0, #5
 8001428:	f7ff febe 	bl	80011a8 <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <ESC_mbxprocess+0x26c>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	795b      	ldrb	r3, [r3, #5]
 8001436:	f023 030f 	bic.w	r3, r3, #15
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00d      	beq.n	800145c <ESC_mbxprocess+0x244>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	795b      	ldrb	r3, [r3, #5]
 8001444:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <ESC_mbxprocess+0x268>)
 800144e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8001452:	429a      	cmp	r2, r3
 8001454:	d102      	bne.n	800145c <ESC_mbxprocess+0x244>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <ESC_mbxprocess+0x26c>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	795b      	ldrb	r3, [r3, #5]
 8001460:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <ESC_mbxprocess+0x268>)
 800146a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
      return 1;
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <ESC_mbxprocess+0x25c>
   }

   return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000124 	.word	0x20000124
 8001480:	20000350 	.word	0x20000350
 8001484:	200002a4 	.word	0x200002a4

08001488 <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   if (ESCvar.MBXrun == 0)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <ESC_xoeprocess+0x5c>)
 8001490:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001494:	2b00      	cmp	r3, #0
 8001496:	d021      	beq.n	80014dc <ESC_xoeprocess+0x54>
   {
      return;
   }
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <ESC_xoeprocess+0x5c>)
 800149a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d11d      	bne.n	80014de <ESC_xoeprocess+0x56>
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <ESC_xoeprocess+0x60>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d119      	bne.n	80014de <ESC_xoeprocess+0x56>
   {
      mbh = (_MBXh *) &MBX[0];
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <ESC_xoeprocess+0x64>)
 80014ac:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	795b      	ldrb	r3, [r3, #5]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <ESC_xoeprocess+0x3e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d103      	bne.n	80014ce <ESC_xoeprocess+0x46>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 80014c6:	2005      	movs	r0, #5
 80014c8:	f7ff fe6e 	bl	80011a8 <MBX_error>
 80014cc:	e002      	b.n	80014d4 <ESC_xoeprocess+0x4c>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f7ff fe6a 	bl	80011a8 <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <ESC_xoeprocess+0x60>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e000      	b.n	80014de <ESC_xoeprocess+0x56>
      return;
 80014dc:	bf00      	nop
   }
}
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000350 	.word	0x20000350
 80014e8:	200002a4 	.word	0x200002a4
 80014ec:	20000124 	.word	0x20000124

080014f0 <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 80014fa:	2208      	movs	r2, #8
 80014fc:	4940      	ldr	r1, [pc, #256]	; (8001600 <ESC_checkSM23+0x110>)
 80014fe:	f44f 6001 	mov.w	r0, #2064	; 0x810
 8001502:	f003 fd8d 	bl	8005020 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <ESC_checkSM23+0x110>)
 8001508:	60fb      	str	r3, [r7, #12]
   
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8001514:	d103      	bne.n	800151e <ESC_checkSM23+0x2e>
       (SM->Command != ESC_SM2_smc))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800151a:	2b24      	cmp	r3, #36	; 0x24
 800151c:	d005      	beq.n	800152a <ESC_checkSM23+0x3a>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <ESC_checkSM23+0x114>)
 8001520:	2204      	movs	r2, #4
 8001522:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8001526:	2312      	movs	r3, #18
 8001528:	e065      	b.n	80015f6 <ESC_checkSM23+0x106>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	885b      	ldrh	r3, [r3, #2]
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <ESC_checkSM23+0x114>)
 8001532:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001536:	429a      	cmp	r2, r3
 8001538:	d005      	beq.n	8001546 <ESC_checkSM23+0x56>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800153a:	4b32      	ldr	r3, [pc, #200]	; (8001604 <ESC_checkSM23+0x114>)
 800153c:	2204      	movs	r2, #4
 800153e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8001542:	2312      	movs	r3, #18
 8001544:	e057      	b.n	80015f6 <ESC_checkSM23+0x106>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	799b      	ldrb	r3, [r3, #6]
 800154a:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <ESC_checkSM23+0x78>
            (ESCvar.ESC_SM2_sml > 0))
 8001552:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <ESC_checkSM23+0x114>)
 8001554:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <ESC_checkSM23+0x78>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <ESC_checkSM23+0x114>)
 800155e:	2204      	movs	r2, #4
 8001560:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8001564:	2312      	movs	r3, #18
 8001566:	e046      	b.n	80015f6 <ESC_checkSM23+0x106>
   }

   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	885b      	ldrh	r3, [r3, #2]
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	2b80      	cmp	r3, #128	; 0x80
 8001578:	dd05      	ble.n	8001586 <ESC_checkSM23+0x96>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <ESC_checkSM23+0x114>)
 800157c:	2204      	movs	r2, #4
 800157e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* SM2 overlaps SM3, fail state change */
      return (ESCpreop | ESCerror);
 8001582:	2312      	movs	r3, #18
 8001584:	e037      	b.n	80015f6 <ESC_checkSM23+0x106>
   }

   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 8001586:	2208      	movs	r2, #8
 8001588:	491f      	ldr	r1, [pc, #124]	; (8001608 <ESC_checkSM23+0x118>)
 800158a:	f640 0018 	movw	r0, #2072	; 0x818
 800158e:	f003 fd47 	bl	8005020 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <ESC_checkSM23+0x118>)
 8001594:	60fb      	str	r3, [r7, #12]
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 80015a0:	d103      	bne.n	80015aa <ESC_checkSM23+0xba>
       (SM->Command != ESC_SM3_smc))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 80015a6:	2b20      	cmp	r3, #32
 80015a8:	d005      	beq.n	80015b6 <ESC_checkSM23+0xc6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <ESC_checkSM23+0x114>)
 80015ac:	2208      	movs	r2, #8
 80015ae:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80015b2:	2312      	movs	r3, #18
 80015b4:	e01f      	b.n	80015f6 <ESC_checkSM23+0x106>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	885b      	ldrh	r3, [r3, #2]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <ESC_checkSM23+0x114>)
 80015be:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d005      	beq.n	80015d2 <ESC_checkSM23+0xe2>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <ESC_checkSM23+0x114>)
 80015c8:	2208      	movs	r2, #8
 80015ca:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80015ce:	2312      	movs	r3, #18
 80015d0:	e011      	b.n	80015f6 <ESC_checkSM23+0x106>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	799b      	ldrb	r3, [r3, #6]
 80015d6:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10a      	bne.n	80015f4 <ESC_checkSM23+0x104>
            (ESCvar.ESC_SM3_sml > 0))
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <ESC_checkSM23+0x114>)
 80015e0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <ESC_checkSM23+0x104>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <ESC_checkSM23+0x114>)
 80015ea:	2208      	movs	r2, #8
 80015ec:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80015f0:	2312      	movs	r3, #18
 80015f2:	e000      	b.n	80015f6 <ESC_checkSM23+0x106>
   }
   return state;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000041c 	.word	0x2000041c
 8001604:	20000350 	.word	0x20000350
 8001608:	20000424 	.word	0x20000424

0800160c <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff69 	bl	80014f0 <ESC_checkSM23>
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b12      	cmp	r3, #18
 8001626:	d00f      	beq.n	8001648 <ESC_startinput+0x3c>
   {
   	  /* If inputs > 0 , enable SM3 */
      if (ESCvar.ESC_SM3_sml > 0)
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <ESC_startinput+0xf0>)
 800162a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <ESC_startinput+0x2c>
      {
         ESC_SMenable (3);
 8001632:	2003      	movs	r0, #3
 8001634:	f7ff faac 	bl	8000b90 <ESC_SMenable>
      }
      /* Go to state input regardless of any inputs present */
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <ESC_startinput+0xf4>)
 800163a:	f3bf 8f5b 	dmb	ish
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	f3bf 8f5b 	dmb	ish
 8001646:	e013      	b.n	8001670 <ESC_startinput+0x64>
   }
   else
   {
      ESC_SMdisable (2);
 8001648:	2002      	movs	r0, #2
 800164a:	f7ff fabf 	bl	8000bcc <ESC_SMdisable>
      ESC_SMdisable (3);
 800164e:	2003      	movs	r0, #3
 8001650:	f7ff fabc 	bl	8000bcc <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <ESC_startinput+0xf0>)
 8001656:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <ESC_startinput+0x5e>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 8001662:	201e      	movs	r0, #30
 8001664:	f7ff f9ac 	bl	80009c0 <ESC_ALerror>
 8001668:	e002      	b.n	8001670 <ESC_startinput+0x64>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800166a:	201d      	movs	r0, #29
 800166c:	f7ff f9a8 	bl	80009c0 <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <ESC_startinput+0xf0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <ESC_startinput+0x70>
   {
      return state;
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	e03b      	b.n	80016f4 <ESC_startinput+0xe8>
   }

   if (state != (ESCpreop | ESCerror))
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2b12      	cmp	r3, #18
 8001680:	d037      	beq.n	80016f2 <ESC_startinput+0xe6>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 8001682:	f7ff fae5 	bl	8000c50 <ESC_checkDC>
 8001686:	4603      	mov	r3, r0
 8001688:	817b      	strh	r3, [r7, #10]
      if(dc_check_result > 0)
 800168a:	897b      	ldrh	r3, [r7, #10]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <ESC_startinput+0xac>
      {
         ESC_ALerror (dc_check_result);
 8001690:	897b      	ldrh	r3, [r7, #10]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff f994 	bl	80009c0 <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 8001698:	2312      	movs	r3, #18
 800169a:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff fa95 	bl	8000bcc <ESC_SMdisable>
         ESC_SMdisable (3);
 80016a2:	2003      	movs	r0, #3
 80016a4:	f7ff fa92 	bl	8000bcc <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <ESC_startinput+0xf4>)
 80016aa:	f3bf 8f5b 	dmb	ish
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	f3bf 8f5b 	dmb	ish
 80016b6:	e01c      	b.n	80016f2 <ESC_startinput+0xe6>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <ESC_startinput+0xf0>)
 80016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d018      	beq.n	80016f2 <ESC_startinput+0xe6>
         {
            uint32_t int_mask;

            if (ESCvar.ESC_SM2_sml == 0)
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <ESC_startinput+0xf0>)
 80016c2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d103      	bne.n	80016d2 <ESC_startinput+0xc6>
            {
               int_mask = ESCREG_ALEVENT_SM3;
 80016ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e002      	b.n	80016d8 <ESC_startinput+0xcc>
            }
            else
            {
               int_mask = ESCREG_ALEVENT_SM2;
 80016d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d6:	60fb      	str	r3, [r7, #12]
            }

            if (ESCvar.dcsync > 0)
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <ESC_startinput+0xf0>)
 80016da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <ESC_startinput+0xde>
            {
               int_mask |= ESCREG_ALEVENT_DC_SYNC0;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	60fb      	str	r3, [r7, #12]
            }
            ESCvar.esc_hw_interrupt_enable (int_mask);
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <ESC_startinput+0xf0>)
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	4798      	blx	r3
         }
      }
   }

   return state;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000350 	.word	0x20000350
 8001700:	20000439 	.word	0x20000439

08001704 <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <ESC_stopinput+0x3c>)
 800170a:	f3bf 8f5b 	dmb	ish
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 8001716:	2003      	movs	r0, #3
 8001718:	f7ff fa58 	bl	8000bcc <ESC_SMdisable>
   ESC_SMdisable (2);
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff fa55 	bl	8000bcc <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <ESC_stopinput+0x40>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <ESC_stopinput+0x40>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   if ((ESCvar.use_interrupt != 0) &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <ESC_stopinput+0x38>
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <ESC_stopinput+0x40>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f640 4004 	movw	r0, #3076	; 0xc04
 800173a:	4798      	blx	r3
            ESCREG_ALEVENT_SM2 |
            ESCREG_ALEVENT_SM3);
   }
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000439 	.word	0x20000439
 8001744:	20000350 	.word	0x20000350

08001748 <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	
   /* If outputs > 0 , enable SM2 */
   if (ESCvar.ESC_SM2_sml > 0)
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <ESC_startoutput+0x40>)
 8001754:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <ESC_startoutput+0x1a>
   {
      ESC_SMenable (2);
 800175c:	2002      	movs	r0, #2
 800175e:	f7ff fa17 	bl	8000b90 <ESC_SMenable>
   }
   /* Go to state output regardless of any outputs present */
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <ESC_startoutput+0x44>)
 8001764:	f3bf 8f5b 	dmb	ish
 8001768:	e8d3 2f4f 	ldrexb	r2, [r3]
 800176c:	f042 0202 	orr.w	r2, r2, #2
 8001770:	e8c3 2f41 	strexb	r1, r2, [r3]
 8001774:	2900      	cmp	r1, #0
 8001776:	d1f7      	bne.n	8001768 <ESC_startoutput+0x20>
 8001778:	f3bf 8f5b 	dmb	ish
   return state;
 800177c:	79fb      	ldrb	r3, [r7, #7]

}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000350 	.word	0x20000350
 800178c:	20000439 	.word	0x20000439

08001790 <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <ESC_stopoutput+0x2c>)
 8001796:	f3bf 8f5b 	dmb	ish
 800179a:	e8d3 2f4f 	ldrexb	r2, [r3]
 800179e:	f002 0201 	and.w	r2, r2, #1
 80017a2:	e8c3 2f41 	strexb	r1, r2, [r3]
 80017a6:	2900      	cmp	r1, #0
 80017a8:	d1f7      	bne.n	800179a <ESC_stopoutput+0xa>
 80017aa:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7ff fa0c 	bl	8000bcc <ESC_SMdisable>
   APP_safeoutput ();
 80017b4:	f7fe ff8c 	bl	80006d0 <APP_safeoutput>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000439 	.word	0x20000439

080017c0 <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 80017c6:	4b56      	ldr	r3, [pc, #344]	; (8001920 <ESC_sm_act_event+0x160>)
 80017c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 809e 	beq.w	8001912 <ESC_sm_act_event+0x152>
      /* nothing to do */
      return;
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 80017d6:	4b52      	ldr	r3, [pc, #328]	; (8001920 <ESC_sm_act_event+0x160>)
 80017d8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 80017e4:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <ESC_sm_act_event+0x160>)
 80017e6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	717b      	strb	r3, [r7, #5]
   an = as;
 80017f2:	797b      	ldrb	r3, [r7, #5]
 80017f4:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <ESC_sm_act_event+0x46>
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <ESC_sm_act_event+0x56>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 800180e:	79bb      	ldrb	r3, [r7, #6]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	f003 030e 	and.w	r3, r3, #14
 800181c:	2b00      	cmp	r3, #0
 800181e:	d05f      	beq.n	80018e0 <ESC_sm_act_event+0x120>
 8001820:	797b      	ldrb	r3, [r7, #5]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d05c      	beq.n	80018e0 <ESC_sm_act_event+0x120>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <ESC_sm_act_event+0x160>)
 8001828:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800182c:	2b00      	cmp	r3, #0
 800182e:	d057      	beq.n	80018e0 <ESC_sm_act_event+0x120>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 8001830:	797b      	ldrb	r3, [r7, #5]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa36 	bl	8000ca4 <ESC_checkmbx>
 8001838:	4603      	mov	r3, r0
 800183a:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 800183c:	797b      	ldrb	r3, [r7, #5]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fe56 	bl	80014f0 <ESC_checkSM23>
 8001844:	4603      	mov	r3, r0
 8001846:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <ESC_sm_act_event+0x9c>
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d040      	beq.n	80018de <ESC_sm_act_event+0x11e>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 800185c:	793b      	ldrb	r3, [r7, #4]
 800185e:	2b11      	cmp	r3, #17
 8001860:	d11a      	bne.n	8001898 <ESC_sm_act_event+0xd8>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <ESC_sm_act_event+0x164>)
 8001864:	f3bf 8f5b 	dmb	ish
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f3bf 8f5b 	dmb	ish
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <ESC_sm_act_event+0xbc>
         {
            ESC_stopoutput ();
 8001874:	f7ff ff8c 	bl	8001790 <ESC_stopoutput>
            ESC_stopinput ();
 8001878:	f7ff ff44 	bl	8001704 <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 800187c:	f7ff fb14 	bl	8000ea8 <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8001880:	2016      	movs	r0, #22
 8001882:	f7ff f89d 	bl	80009c0 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <ESC_sm_act_event+0x160>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
         ESC_ALstatus (ax);
 800188e:	793b      	ldrb	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f8af 	bl	80009f4 <ESC_ALstatus>
         return;
 8001896:	e03f      	b.n	8001918 <ESC_sm_act_event+0x158>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <ESC_sm_act_event+0x164>)
 800189a:	f3bf 8f5b 	dmb	ish
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f3bf 8f5b 	dmb	ish
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d035      	beq.n	8001916 <ESC_sm_act_event+0x156>
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d132      	bne.n	8001916 <ESC_sm_act_event+0x156>
      {
         ESC_stopoutput ();
 80018b0:	f7ff ff6e 	bl	8001790 <ESC_stopoutput>
         ESC_stopinput ();
 80018b4:	f7ff ff26 	bl	8001704 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <ESC_sm_act_event+0x160>)
 80018ba:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <ESC_sm_act_event+0x10e>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 80018c6:	201e      	movs	r0, #30
 80018c8:	f7ff f87a 	bl	80009c0 <ESC_ALerror>
 80018cc:	e002      	b.n	80018d4 <ESC_sm_act_event+0x114>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 80018ce:	201d      	movs	r0, #29
 80018d0:	f7ff f876 	bl	80009c0 <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f88c 	bl	80009f4 <ESC_ALstatus>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80018dc:	e01b      	b.n	8001916 <ESC_sm_act_event+0x156>
 80018de:	e01a      	b.n	8001916 <ESC_sm_act_event+0x156>
      }
   }
   else
   {
      ESC_SMack (0);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff f8ff 	bl	8000ae4 <ESC_SMack>
      ESC_SMack (1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff f8fc 	bl	8000ae4 <ESC_SMack>
      ESC_SMack (2);
 80018ec:	2002      	movs	r0, #2
 80018ee:	f7ff f8f9 	bl	8000ae4 <ESC_SMack>
      ESC_SMack (3);
 80018f2:	2003      	movs	r0, #3
 80018f4:	f7ff f8f6 	bl	8000ae4 <ESC_SMack>
      ESC_SMack (4);
 80018f8:	2004      	movs	r0, #4
 80018fa:	f7ff f8f3 	bl	8000ae4 <ESC_SMack>
      ESC_SMack (5);
 80018fe:	2005      	movs	r0, #5
 8001900:	f7ff f8f0 	bl	8000ae4 <ESC_SMack>
      ESC_SMack (6);
 8001904:	2006      	movs	r0, #6
 8001906:	f7ff f8ed 	bl	8000ae4 <ESC_SMack>
      ESC_SMack (7);
 800190a:	2007      	movs	r0, #7
 800190c:	f7ff f8ea 	bl	8000ae4 <ESC_SMack>
 8001910:	e002      	b.n	8001918 <ESC_sm_act_event+0x158>
      return;
 8001912:	bf00      	nop
 8001914:	e000      	b.n	8001918 <ESC_sm_act_event+0x158>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8001916:	bf00      	nop
   }
}
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000350 	.word	0x20000350
 8001924:	20000439 	.word	0x20000439

08001928 <ESC_check_id_request>:

static bool ESC_check_id_request (uint16_t ALcontrol, uint8_t * an)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	80fb      	strh	r3, [r7, #6]
   if ((ALcontrol & ESCREG_AL_ID_REQUEST) != 0)
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b00      	cmp	r3, #0
 800193c:	d021      	beq.n	8001982 <ESC_check_id_request+0x5a>
   {
      uint8_t state = ALcontrol & ESCREG_AL_ERRACKMASK;
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	73fb      	strb	r3, [r7, #15]

      if ((state != ESCboot) &&
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d019      	beq.n	8001982 <ESC_check_id_request+0x5a>
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d907      	bls.n	8001964 <ESC_check_id_request+0x3c>
          ((state < ESCsafeop) || (*an == ESCsafeop) || (*an == ESCop)))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d003      	beq.n	8001964 <ESC_check_id_request+0x3c>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d10e      	bne.n	8001982 <ESC_check_id_request+0x5a>
      {
         uint16_t ALstatuscode;

         ESC_read (ESCREG_ALERROR,
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2202      	movs	r2, #2
 800196a:	4619      	mov	r1, r3
 800196c:	f44f 709a 	mov.w	r0, #308	; 0x134
 8001970:	f003 fb56 	bl	8005020 <ESC_read>
                   (void *)&ALstatuscode,
                   sizeof (ALstatuscode));

         return (ALstatuscode == ALERR_NONE);
 8001974:	89bb      	ldrh	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	e000      	b.n	8001984 <ESC_check_id_request+0x5c>
      }
   }

   return false;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <ESC_load_device_id>:

static uint8_t ESC_load_device_id (void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
   uint16_t device_id;

   if (ESCvar.get_device_id != NULL)
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <ESC_load_device_id+0x4c>)
 8001994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <ESC_load_device_id+0x24>
   {
      if (ESCvar.get_device_id (&device_id) != 0)
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <ESC_load_device_id+0x4c>)
 800199c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800199e:	1dba      	adds	r2, r7, #6
 80019a0:	4610      	mov	r0, r2
 80019a2:	4798      	blx	r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <ESC_load_device_id+0x30>
      {
         device_id = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	80fb      	strh	r3, [r7, #6]
 80019ae:	e005      	b.n	80019bc <ESC_load_device_id+0x30>
      }
   }
   else
   {
      ESC_read (ESCREG_CONF_STATION_ALIAS,
 80019b0:	1dbb      	adds	r3, r7, #6
 80019b2:	2202      	movs	r2, #2
 80019b4:	4619      	mov	r1, r3
 80019b6:	2012      	movs	r0, #18
 80019b8:	f003 fb32 	bl	8005020 <ESC_read>
                (void *)&device_id,
                sizeof (device_id));
   }

   if (device_id != 0)
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <ESC_load_device_id+0x42>
   {
      /* Load the Device Identification Value to the AL Status Code register */
      ESC_ALerror (device_id);
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fffb 	bl	80009c0 <ESC_ALerror>

      return ESCREG_AL_ID_REQUEST;
 80019ca:	2320      	movs	r3, #32
 80019cc:	e000      	b.n	80019d0 <ESC_load_device_id+0x44>
   }

   return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000350 	.word	0x20000350

080019dc <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 80019e2:	4bda      	ldr	r3, [pc, #872]	; (8001d4c <ESC_state+0x370>)
 80019e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8256 	beq.w	8001e9e <ESC_state+0x4c2>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 80019f2:	2202      	movs	r2, #2
 80019f4:	49d6      	ldr	r1, [pc, #856]	; (8001d50 <ESC_state+0x374>)
 80019f6:	f44f 7090 	mov.w	r0, #288	; 0x120
 80019fa:	f003 fb11 	bl	8005020 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 80019fe:	4bd3      	ldr	r3, [pc, #844]	; (8001d4c <ESC_state+0x370>)
 8001a00:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8001a04:	4bd1      	ldr	r3, [pc, #836]	; (8001d4c <ESC_state+0x370>)
 8001a06:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 8001a0a:	4bd0      	ldr	r3, [pc, #832]	; (8001d4c <ESC_state+0x370>)
 8001a0c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 8001a18:	4bcc      	ldr	r3, [pc, #816]	; (8001d4c <ESC_state+0x370>)
 8001a1a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	717b      	strb	r3, [r7, #5]
   an = as;
 8001a28:	797b      	ldrb	r3, [r7, #5]
 8001a2a:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <ESC_state+0x60>
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <ESC_state+0x72>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8001a44:	79bb      	ldrb	r3, [r7, #6]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8001a4e:	79bb      	ldrb	r3, [r7, #6]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <ESC_state+0x88>
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 821f 	beq.w	8001ea2 <ESC_state+0x4c6>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (uint8_t)((ac << 4) | (as & 0x0f));
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	797b      	ldrb	r3, [r7, #5]
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 8001a7c:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <ESC_state+0x370>)
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <ESC_state+0xb4>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8001a84:	4bb1      	ldr	r3, [pc, #708]	; (8001d4c <ESC_state+0x370>)
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	1db9      	adds	r1, r7, #6
 8001a8a:	1d7a      	adds	r2, r7, #5
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 8001a90:	797b      	ldrb	r3, [r7, #5]
 8001a92:	3b11      	subs	r3, #17
 8001a94:	2b77      	cmp	r3, #119	; 0x77
 8001a96:	f200 81ac 	bhi.w	8001df2 <ESC_state+0x416>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <ESC_state+0xc4>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001e37 	.word	0x08001e37
 8001aa4:	08001cd1 	.word	0x08001cd1
 8001aa8:	08001cdb 	.word	0x08001cdb
 8001aac:	08001cc3 	.word	0x08001cc3
 8001ab0:	08001df3 	.word	0x08001df3
 8001ab4:	08001df3 	.word	0x08001df3
 8001ab8:	08001df3 	.word	0x08001df3
 8001abc:	08001cb1 	.word	0x08001cb1
 8001ac0:	08001df3 	.word	0x08001df3
 8001ac4:	08001df3 	.word	0x08001df3
 8001ac8:	08001df3 	.word	0x08001df3
 8001acc:	08001df3 	.word	0x08001df3
 8001ad0:	08001df3 	.word	0x08001df3
 8001ad4:	08001df3 	.word	0x08001df3
 8001ad8:	08001df3 	.word	0x08001df3
 8001adc:	08001df3 	.word	0x08001df3
 8001ae0:	08001c81 	.word	0x08001c81
 8001ae4:	08001e37 	.word	0x08001e37
 8001ae8:	08001ce5 	.word	0x08001ce5
 8001aec:	08001d9b 	.word	0x08001d9b
 8001af0:	08001df3 	.word	0x08001df3
 8001af4:	08001df3 	.word	0x08001df3
 8001af8:	08001df3 	.word	0x08001df3
 8001afc:	08001d8d 	.word	0x08001d8d
 8001b00:	08001df3 	.word	0x08001df3
 8001b04:	08001df3 	.word	0x08001df3
 8001b08:	08001df3 	.word	0x08001df3
 8001b0c:	08001df3 	.word	0x08001df3
 8001b10:	08001df3 	.word	0x08001df3
 8001b14:	08001df3 	.word	0x08001df3
 8001b18:	08001df3 	.word	0x08001df3
 8001b1c:	08001df3 	.word	0x08001df3
 8001b20:	08001c93 	.word	0x08001c93
 8001b24:	08001ce5 	.word	0x08001ce5
 8001b28:	08001c93 	.word	0x08001c93
 8001b2c:	08001da5 	.word	0x08001da5
 8001b30:	08001df3 	.word	0x08001df3
 8001b34:	08001df3 	.word	0x08001df3
 8001b38:	08001df3 	.word	0x08001df3
 8001b3c:	08001dbf 	.word	0x08001dbf
 8001b40:	08001df3 	.word	0x08001df3
 8001b44:	08001df3 	.word	0x08001df3
 8001b48:	08001df3 	.word	0x08001df3
 8001b4c:	08001df3 	.word	0x08001df3
 8001b50:	08001df3 	.word	0x08001df3
 8001b54:	08001df3 	.word	0x08001df3
 8001b58:	08001df3 	.word	0x08001df3
 8001b5c:	08001df3 	.word	0x08001df3
 8001b60:	08001ca5 	.word	0x08001ca5
 8001b64:	08001cf1 	.word	0x08001cf1
 8001b68:	08001ce5 	.word	0x08001ce5
 8001b6c:	08001cf1 	.word	0x08001cf1
 8001b70:	08001df3 	.word	0x08001df3
 8001b74:	08001df3 	.word	0x08001df3
 8001b78:	08001df3 	.word	0x08001df3
 8001b7c:	08001de9 	.word	0x08001de9
 8001b80:	08001df3 	.word	0x08001df3
 8001b84:	08001df3 	.word	0x08001df3
 8001b88:	08001df3 	.word	0x08001df3
 8001b8c:	08001df3 	.word	0x08001df3
 8001b90:	08001df3 	.word	0x08001df3
 8001b94:	08001df3 	.word	0x08001df3
 8001b98:	08001df3 	.word	0x08001df3
 8001b9c:	08001df3 	.word	0x08001df3
 8001ba0:	08001df3 	.word	0x08001df3
 8001ba4:	08001df3 	.word	0x08001df3
 8001ba8:	08001df3 	.word	0x08001df3
 8001bac:	08001df3 	.word	0x08001df3
 8001bb0:	08001df3 	.word	0x08001df3
 8001bb4:	08001df3 	.word	0x08001df3
 8001bb8:	08001df3 	.word	0x08001df3
 8001bbc:	08001df3 	.word	0x08001df3
 8001bc0:	08001df3 	.word	0x08001df3
 8001bc4:	08001df3 	.word	0x08001df3
 8001bc8:	08001df3 	.word	0x08001df3
 8001bcc:	08001df3 	.word	0x08001df3
 8001bd0:	08001df3 	.word	0x08001df3
 8001bd4:	08001df3 	.word	0x08001df3
 8001bd8:	08001df3 	.word	0x08001df3
 8001bdc:	08001df3 	.word	0x08001df3
 8001be0:	08001df3 	.word	0x08001df3
 8001be4:	08001df3 	.word	0x08001df3
 8001be8:	08001df3 	.word	0x08001df3
 8001bec:	08001df3 	.word	0x08001df3
 8001bf0:	08001df3 	.word	0x08001df3
 8001bf4:	08001df3 	.word	0x08001df3
 8001bf8:	08001df3 	.word	0x08001df3
 8001bfc:	08001df3 	.word	0x08001df3
 8001c00:	08001df3 	.word	0x08001df3
 8001c04:	08001df3 	.word	0x08001df3
 8001c08:	08001df3 	.word	0x08001df3
 8001c0c:	08001df3 	.word	0x08001df3
 8001c10:	08001df3 	.word	0x08001df3
 8001c14:	08001df3 	.word	0x08001df3
 8001c18:	08001df3 	.word	0x08001df3
 8001c1c:	08001df3 	.word	0x08001df3
 8001c20:	08001df3 	.word	0x08001df3
 8001c24:	08001df3 	.word	0x08001df3
 8001c28:	08001df3 	.word	0x08001df3
 8001c2c:	08001df3 	.word	0x08001df3
 8001c30:	08001df3 	.word	0x08001df3
 8001c34:	08001df3 	.word	0x08001df3
 8001c38:	08001df3 	.word	0x08001df3
 8001c3c:	08001df3 	.word	0x08001df3
 8001c40:	08001df3 	.word	0x08001df3
 8001c44:	08001df3 	.word	0x08001df3
 8001c48:	08001df3 	.word	0x08001df3
 8001c4c:	08001df3 	.word	0x08001df3
 8001c50:	08001df3 	.word	0x08001df3
 8001c54:	08001df3 	.word	0x08001df3
 8001c58:	08001df3 	.word	0x08001df3
 8001c5c:	08001df3 	.word	0x08001df3
 8001c60:	08001ca5 	.word	0x08001ca5
 8001c64:	08001d81 	.word	0x08001d81
 8001c68:	08001ce5 	.word	0x08001ce5
 8001c6c:	08001db1 	.word	0x08001db1
 8001c70:	08001df3 	.word	0x08001df3
 8001c74:	08001df3 	.word	0x08001df3
 8001c78:	08001df3 	.word	0x08001df3
 8001c7c:	08001e37 	.word	0x08001e37
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 8001c80:	f7fe ffc2 	bl	8000c08 <ESC_address>
         an = ESC_startmbx (ac);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f882 	bl	8000d90 <ESC_startmbx>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71bb      	strb	r3, [r7, #6]
         break;
 8001c90:	e0d6      	b.n	8001e40 <ESC_state+0x464>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 8001c92:	f7fe ffb9 	bl	8000c08 <ESC_address>
         an = ESC_startmbxboot (ac);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f8bf 	bl	8000e1c <ESC_startmbxboot>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71bb      	strb	r3, [r7, #6]
         break;
 8001ca2:	e0cd      	b.n	8001e40 <ESC_state+0x464>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 8001ca4:	2311      	movs	r3, #17
 8001ca6:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001ca8:	2011      	movs	r0, #17
 8001caa:	f7fe fe89 	bl	80009c0 <ESC_ALerror>
         break;
 8001cae:	e0c7      	b.n	8001e40 <ESC_state+0x464>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 8001cb0:	f7ff fd6e 	bl	8001790 <ESC_stopoutput>
         ESC_stopinput ();
 8001cb4:	f7ff fd26 	bl	8001704 <ESC_stopinput>
         ESC_stopmbx ();
 8001cb8:	f7ff f8f6 	bl	8000ea8 <ESC_stopmbx>
         an = ESCinit;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	71bb      	strb	r3, [r7, #6]
         break;
 8001cc0:	e0be      	b.n	8001e40 <ESC_state+0x464>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 8001cc2:	f7ff fd1f 	bl	8001704 <ESC_stopinput>
         ESC_stopmbx ();
 8001cc6:	f7ff f8ef 	bl	8000ea8 <ESC_stopmbx>
         an = ESCinit;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	71bb      	strb	r3, [r7, #6]
         break;
 8001cce:	e0b7      	b.n	8001e40 <ESC_state+0x464>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 8001cd0:	f7ff f8ea 	bl	8000ea8 <ESC_stopmbx>
         an = ESCinit;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	71bb      	strb	r3, [r7, #6]
         break;
 8001cd8:	e0b2      	b.n	8001e40 <ESC_state+0x464>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 8001cda:	f7ff f8e5 	bl	8000ea8 <ESC_stopmbx>
         an = ESCinit;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	71bb      	strb	r3, [r7, #6]
         break;
 8001ce2:	e0ad      	b.n	8001e40 <ESC_state+0x464>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8001ce4:	2312      	movs	r3, #18
 8001ce6:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001ce8:	2011      	movs	r0, #17
 8001cea:	f7fe fe69 	bl	80009c0 <ESC_ALerror>
         break;
 8001cee:	e0a7      	b.n	8001e40 <ESC_state+0x464>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <ESC_state+0x378>)
 8001cf4:	4918      	ldr	r1, [pc, #96]	; (8001d58 <ESC_state+0x37c>)
 8001cf6:	f641 4012 	movw	r0, #7186	; 0x1c12
 8001cfa:	f000 f9dd 	bl	80020b8 <sizeOfPDO>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <ESC_state+0x370>)
 8001d04:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
                                         SMmap2, MAX_MAPPINGS_SM2);
         if (ESCvar.sm2mappings < 0)
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <ESC_state+0x370>)
 8001d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da05      	bge.n	8001d1e <ESC_state+0x342>
         {
            an = ESCpreop | ESCerror;
 8001d12:	2312      	movs	r3, #18
 8001d14:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8001d16:	201d      	movs	r0, #29
 8001d18:	f7fe fe52 	bl	80009c0 <ESC_ALerror>
            break;
 8001d1c:	e090      	b.n	8001e40 <ESC_state+0x464>
         }

         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 8001d1e:	2307      	movs	r3, #7
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <ESC_state+0x380>)
 8001d22:	490f      	ldr	r1, [pc, #60]	; (8001d60 <ESC_state+0x384>)
 8001d24:	f641 4013 	movw	r0, #7187	; 0x1c13
 8001d28:	f000 f9c6 	bl	80020b8 <sizeOfPDO>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <ESC_state+0x370>)
 8001d32:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                                         SMmap3, MAX_MAPPINGS_SM3);
         if (ESCvar.sm3mappings < 0)
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <ESC_state+0x370>)
 8001d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	da11      	bge.n	8001d64 <ESC_state+0x388>
         {
            an = ESCpreop | ESCerror;
 8001d40:	2312      	movs	r3, #18
 8001d42:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8001d44:	201e      	movs	r0, #30
 8001d46:	f7fe fe3b 	bl	80009c0 <ESC_ALerror>
            break;
 8001d4a:	e079      	b.n	8001e40 <ESC_state+0x464>
 8001d4c:	20000350 	.word	0x20000350
 8001d50:	200003d2 	.word	0x200003d2
 8001d54:	200002a8 	.word	0x200002a8
 8001d58:	200003fc 	.word	0x200003fc
 8001d5c:	200002fc 	.word	0x200002fc
 8001d60:	20000400 	.word	0x20000400
         }

         an = ESC_startinput (ac);
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fc50 	bl	800160c <ESC_startinput>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 8001d70:	79bb      	ldrb	r3, [r7, #6]
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d160      	bne.n	8001e3a <ESC_state+0x45e>
         {
            ESC_SMenable (2);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7fe ff09 	bl	8000b90 <ESC_SMenable>
         }
         break;
 8001d7e:	e05c      	b.n	8001e3a <ESC_state+0x45e>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8001d80:	2312      	movs	r3, #18
 8001d82:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001d84:	2011      	movs	r0, #17
 8001d86:	f7fe fe1b 	bl	80009c0 <ESC_ALerror>
         break;
 8001d8a:	e059      	b.n	8001e40 <ESC_state+0x464>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 8001d8c:	f7ff fd00 	bl	8001790 <ESC_stopoutput>
         ESC_stopinput ();
 8001d90:	f7ff fcb8 	bl	8001704 <ESC_stopinput>
         an = ESCpreop;
 8001d94:	2302      	movs	r3, #2
 8001d96:	71bb      	strb	r3, [r7, #6]
         break;
 8001d98:	e052      	b.n	8001e40 <ESC_state+0x464>
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 8001d9a:	f7ff fcb3 	bl	8001704 <ESC_stopinput>
         an = ESCpreop;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	71bb      	strb	r3, [r7, #6]
         break;
 8001da2:	e04d      	b.n	8001e40 <ESC_state+0x464>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8001da4:	2314      	movs	r3, #20
 8001da6:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001da8:	2011      	movs	r0, #17
 8001daa:	f7fe fe09 	bl	80009c0 <ESC_ALerror>
         break;
 8001dae:	e047      	b.n	8001e40 <ESC_state+0x464>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fcc8 	bl	8001748 <ESC_startoutput>
 8001db8:	4603      	mov	r3, r0
 8001dba:	71bb      	strb	r3, [r7, #6]
         break;
 8001dbc:	e040      	b.n	8001e40 <ESC_state+0x464>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8001dbe:	2314      	movs	r3, #20
 8001dc0:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001dc2:	2011      	movs	r0, #17
 8001dc4:	f7fe fdfc 	bl	80009c0 <ESC_ALerror>
         ESC_stopoutput ();
 8001dc8:	f7ff fce2 	bl	8001790 <ESC_stopoutput>
         /* If no outputs present, we need to flag error using SM3 */
         if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 8001dcc:	4b37      	ldr	r3, [pc, #220]	; (8001eac <ESC_state+0x4d0>)
 8001dce:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d133      	bne.n	8001e3e <ESC_state+0x462>
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <ESC_state+0x4d0>)
 8001dd8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02e      	beq.n	8001e3e <ESC_state+0x462>
         {
            ESC_SMdisable (3);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f7fe fef3 	bl	8000bcc <ESC_SMdisable>
         }
         break;
 8001de6:	e02a      	b.n	8001e3e <ESC_state+0x462>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 8001de8:	2304      	movs	r3, #4
 8001dea:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 8001dec:	f7ff fcd0 	bl	8001790 <ESC_stopoutput>
         break;
 8001df0:	e026      	b.n	8001e40 <ESC_state+0x464>
      }
      default:
      {
         if (an == ESCop)
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d110      	bne.n	8001e1a <ESC_state+0x43e>
         {
            ESC_stopoutput ();
 8001df8:	f7ff fcca 	bl	8001790 <ESC_stopoutput>
            /* If no outputs present, we need to flag error using SM3 */
            if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <ESC_state+0x4d0>)
 8001dfe:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <ESC_state+0x43a>
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <ESC_state+0x4d0>)
 8001e08:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <ESC_state+0x43a>
            {
               ESC_SMdisable (3);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f7fe fedb 	bl	8000bcc <ESC_SMdisable>
            }
            an = ESCsafeop;
 8001e16:	2304      	movs	r3, #4
 8001e18:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 8001e1a:	797b      	ldrb	r3, [r7, #5]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d101      	bne.n	8001e24 <ESC_state+0x448>
         {
            ESC_stopinput ();
 8001e20:	f7ff fc70 	bl	8001704 <ESC_stopinput>
         }
         an |= ESCerror;
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 8001e2e:	2012      	movs	r0, #18
 8001e30:	f7fe fdc6 	bl	80009c0 <ESC_ALerror>
         break;
 8001e34:	e004      	b.n	8001e40 <ESC_state+0x464>
         break;
 8001e36:	bf00      	nop
 8001e38:	e002      	b.n	8001e40 <ESC_state+0x464>
         break;
 8001e3a:	bf00      	nop
 8001e3c:	e000      	b.n	8001e40 <ESC_state+0x464>
         break;
 8001e3e:	bf00      	nop
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <ESC_state+0x4d0>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <ESC_state+0x478>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <ESC_state+0x4d0>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	1db9      	adds	r1, r7, #6
 8001e4e:	1d7a      	adds	r2, r7, #5
 8001e50:	4610      	mov	r0, r2
 8001e52:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d107      	bne.n	8001e6e <ESC_state+0x492>
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <ESC_state+0x4d0>)
 8001e60:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <ESC_state+0x492>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7fe fda9 	bl	80009c0 <ESC_ALerror>
   }

   if (ESC_check_id_request (ESCvar.ALcontrol, &an))
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <ESC_state+0x4d0>)
 8001e70:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001e74:	1dba      	adds	r2, r7, #6
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fd55 	bl	8001928 <ESC_check_id_request>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <ESC_state+0x4b8>
   {
      an |= ESC_load_device_id ();
 8001e84:	f7ff fd82 	bl	800198c <ESC_load_device_id>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	71bb      	strb	r3, [r7, #6]
   }

   ESC_ALstatus (an);
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fdac 	bl	80009f4 <ESC_ALstatus>
 8001e9c:	e002      	b.n	8001ea4 <ESC_state+0x4c8>
      return;
 8001e9e:	bf00      	nop
 8001ea0:	e000      	b.n	8001ea4 <ESC_state+0x4c8>
      return;
 8001ea2:	bf00      	nop

#ifdef ESC_DEBUG
   DPRINT ("state %s\n", ESC_state_to_string (an & 0xF));
#endif
}
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000350 	.word	0x20000350

08001eb0 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a36      	ldr	r2, [pc, #216]	; (8001f98 <ESC_config+0xe8>)
 8001ebe:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a34      	ldr	r2, [pc, #208]	; (8001f98 <ESC_config+0xe8>)
 8001ec6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc

   ESCvar.mb[0] = mb0;
 8001eca:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <ESC_config+0xe8>)
 8001ecc:	4a33      	ldr	r2, [pc, #204]	; (8001f9c <ESC_config+0xec>)
 8001ece:	3304      	adds	r3, #4
 8001ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed4:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mb[1] = mb1;
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <ESC_config+0xe8>)
 8001eda:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <ESC_config+0xf0>)
 8001edc:	330c      	adds	r3, #12
 8001ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee2:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <ESC_config+0xe8>)
 8001ee8:	4a2e      	ldr	r2, [pc, #184]	; (8001fa4 <ESC_config+0xf4>)
 8001eea:	3314      	adds	r3, #20
 8001eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef0:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <ESC_config+0xe8>)
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <ESC_config+0xf8>)
 8001ef8:	331c      	adds	r3, #28
 8001efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001efe:	e883 0003 	stmia.w	r3, {r0, r1}

   ESCvar.skip_default_initialization = cfg->skip_default_initialization;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7b1a      	ldrb	r2, [r3, #12]
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <ESC_config+0xe8>)
 8001f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4a21      	ldr	r2, [pc, #132]	; (8001f98 <ESC_config+0xe8>)
 8001f12:	6293      	str	r3, [r2, #40]	; 0x28
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <ESC_config+0xe8>)
 8001f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <ESC_config+0xe8>)
 8001f22:	6313      	str	r3, [r2, #48]	; 0x30
   ESCvar.application_hook = cfg->application_hook;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <ESC_config+0xe8>)
 8001f2a:	6353      	str	r3, [r2, #52]	; 0x34
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <ESC_config+0xe8>)
 8001f32:	6393      	str	r3, [r2, #56]	; 0x38
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <ESC_config+0xe8>)
 8001f3a:	63d3      	str	r3, [r2, #60]	; 0x3c
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <ESC_config+0xe8>)
 8001f42:	6413      	str	r3, [r2, #64]	; 0x40
   ESCvar.pre_object_upload_hook = cfg->pre_object_upload_hook;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <ESC_config+0xe8>)
 8001f4a:	6453      	str	r3, [r2, #68]	; 0x44
   ESCvar.post_object_upload_hook = cfg->post_object_upload_hook;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <ESC_config+0xe8>)
 8001f52:	6493      	str	r3, [r2, #72]	; 0x48
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <ESC_config+0xe8>)
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
   ESCvar.txpdo_override = cfg->txpdo_override;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <ESC_config+0xe8>)
 8001f62:	6513      	str	r3, [r2, #80]	; 0x50
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <ESC_config+0xe8>)
 8001f6a:	6553      	str	r3, [r2, #84]	; 0x54
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <ESC_config+0xe8>)
 8001f72:	6593      	str	r3, [r2, #88]	; 0x58
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <ESC_config+0xe8>)
 8001f7a:	65d3      	str	r3, [r2, #92]	; 0x5c
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <ESC_config+0xe8>)
 8001f82:	6613      	str	r3, [r2, #96]	; 0x60
   ESCvar.get_device_id = cfg->get_device_id;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <ESC_config+0xe8>)
 8001f8a:	6653      	str	r3, [r2, #100]	; 0x64
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	20000350 	.word	0x20000350
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	20000018 	.word	0x20000018

08001fac <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int32_t nidx, uint8_t subindex)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
   const _objd *objd;
   int16_t n = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 8001fbc:	4a29      	ldr	r2, [pc, #164]	; (8002064 <SDO_findsubindex+0xb8>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	330c      	adds	r3, #12
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 8001fca:	4a26      	ldr	r2, [pc, #152]	; (8002064 <SDO_findsubindex+0xb8>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	73fb      	strb	r3, [r7, #15]

   /* Since most objects contain all subindexes (i.e. are not sparse),
    * check the most likely scenario first
    */
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d815      	bhi.n	800200c <SDO_findsubindex+0x60>
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	461a      	mov	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d108      	bne.n	800200c <SDO_findsubindex+0x60>
   {
      return subindex;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	e02b      	b.n	8002058 <SDO_findsubindex+0xac>
   }

   while (((objd + n)->subindex < subindex) && (n < maxsub))
   {
      n++;
 8002000:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002004:	b29b      	uxth	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	b29b      	uxth	r3, r3
 800200a:	82fb      	strh	r3, [r7, #22]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 800200c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	461a      	mov	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	881a      	ldrh	r2, [r3, #0]
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	b29b      	uxth	r3, r3
 8002024:	429a      	cmp	r2, r3
 8002026:	d204      	bcs.n	8002032 <SDO_findsubindex+0x86>
 8002028:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbe6      	blt.n	8002000 <SDO_findsubindex+0x54>
   }
   if ((objd + n)->subindex != subindex)
 8002032:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	461a      	mov	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	881a      	ldrh	r2, [r3, #0]
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	b29b      	uxth	r3, r3
 800204a:	429a      	cmp	r2, r3
 800204c:	d002      	beq.n	8002054 <SDO_findsubindex+0xa8>
   {
      return -1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e001      	b.n	8002058 <SDO_findsubindex+0xac>
   }
   return n;
 8002054:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002058:	4618      	mov	r0, r3
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	0800eab8 	.word	0x0800eab8

08002068 <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8002076:	e002      	b.n	800207e <SDO_findobject+0x16>
   {
      n++;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 800207e:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <SDO_findobject+0x4c>)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	4413      	add	r3, r2
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	429a      	cmp	r2, r3
 800208c:	d8f4      	bhi.n	8002078 <SDO_findobject+0x10>
   }
   if (SDOobjects[n].index != index)
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <SDO_findobject+0x4c>)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	429a      	cmp	r2, r3
 800209c:	d002      	beq.n	80020a4 <SDO_findobject+0x3c>
   {
      return -1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e000      	b.n	80020a6 <SDO_findobject+0x3e>
   }
   return n;
 80020a4:	68fb      	ldr	r3, [r7, #12]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	0800eab8 	.word	0x0800eab8

080020b8 <sizeOfPDO>:
 * @param[out] max_mappings = max number of mapped objects in SM
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index, int * nmappings, _SMmap * mappings,
                    int max_mappings)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b090      	sub	sp, #64	; 0x40
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4603      	mov	r3, r0
 80020c6:	81fb      	strh	r3, [r7, #14]
   uint32_t offset = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   uint16_t hobj;
   uint8_t si, sic, c;
   int32_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;
   int mapIx = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30

   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 80020d0:	89fb      	ldrh	r3, [r7, #14]
 80020d2:	f641 4212 	movw	r2, #7186	; 0x1c12
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d006      	beq.n	80020e8 <sizeOfPDO+0x30>
 80020da:	89fb      	ldrh	r3, [r7, #14]
 80020dc:	f641 4213 	movw	r2, #7187	; 0x1c13
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d001      	beq.n	80020e8 <sizeOfPDO+0x30>
   {
      return 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e134      	b.n	8002352 <sizeOfPDO+0x29a>
   }

   nidx = SDO_findobject (index);
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ffbc 	bl	8002068 <SDO_findobject>
 80020f0:	6378      	str	r0, [r7, #52]	; 0x34
   if(nidx < 0)
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da01      	bge.n	80020fc <sizeOfPDO+0x44>
   {
      return 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e12a      	b.n	8002352 <sizeOfPDO+0x29a>
   }

   objd1c1x = SDOobjects[nidx].objdesc;
 80020fc:	4a97      	ldr	r2, [pc, #604]	; (800235c <sizeOfPDO+0x2a4>)
 80020fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4413      	add	r3, r2
 8002104:	330c      	adds	r3, #12
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28

   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <sizeOfPDO+0x62>
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	e002      	b.n	8002120 <sizeOfPDO+0x68>
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (si)
 8002124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8104 	beq.w	8002336 <sizeOfPDO+0x27e>
   {
      for (sic = 1; sic <= si; sic++)
 800212e:	2301      	movs	r3, #1
 8002130:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002134:	e0f8      	b.n	8002328 <sizeOfPDO+0x270>
      {
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 8002136:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	461a      	mov	r2, r3
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	4413      	add	r3, r2
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <sizeOfPDO+0xae>
 800214e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	461a      	mov	r2, r3
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	4413      	add	r3, r2
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	e00a      	b.n	800217c <sizeOfPDO+0xc4>
 8002166:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	461a      	mov	r2, r3
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	4413      	add	r3, r2
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	b29b      	uxth	r3, r3
 800217c:	84bb      	strh	r3, [r7, #36]	; 0x24
         nidx = SDO_findobject (hobj);
 800217e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff71 	bl	8002068 <SDO_findobject>
 8002186:	6378      	str	r0, [r7, #52]	; 0x34
         if (nidx >= 0)
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	2b00      	cmp	r3, #0
 800218c:	f2c0 80c7 	blt.w	800231e <sizeOfPDO+0x266>
         {
            uint8_t maxsub;

            objd = SDOobjects[nidx].objdesc;
 8002190:	4a72      	ldr	r2, [pc, #456]	; (800235c <sizeOfPDO+0x2a4>)
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	330c      	adds	r3, #12
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	623b      	str	r3, [r7, #32]
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <sizeOfPDO+0xf6>
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	e002      	b.n	80021b4 <sizeOfPDO+0xfc>
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	77fb      	strb	r3, [r7, #31]

            for (c = 1; c <= maxsub; c++)
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80021bc:	e0a9      	b.n	8002312 <sizeOfPDO+0x25a>
            {
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 80021be:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	461a      	mov	r2, r3
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	4413      	add	r3, r2
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <sizeOfPDO+0x136>
 80021d6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	461a      	mov	r2, r3
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	4413      	add	r3, r2
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	e009      	b.n	8002202 <sizeOfPDO+0x14a>
 80021ee:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	461a      	mov	r2, r3
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	4413      	add	r3, r2
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	61bb      	str	r3, [r7, #24]
               uint8_t bitlength = value & 0xFF;
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	75fb      	strb	r3, [r7, #23]

               if (max_mappings > 0)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	dd78      	ble.n	8002300 <sizeOfPDO+0x248>
               {
                  uint16_t index = (uint16_t)(value >> 16);
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	82bb      	strh	r3, [r7, #20]
                  uint8_t subindex = (value >> 8) & 0xFF;
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	74fb      	strb	r3, [r7, #19]
                  const _objd * mapping;

                  if (mapIx == max_mappings)
 800221a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d105      	bne.n	800222e <sizeOfPDO+0x176>
                  {
                     /* Too many mapped objects */
                     *nmappings = -1;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	601a      	str	r2, [r3, #0]
                     return 0;
 800222a:	2300      	movs	r3, #0
 800222c:	e091      	b.n	8002352 <sizeOfPDO+0x29a>
                  }

                  DPRINT ("%04x:%02x @ %d\n", index, subindex, offset);

                  if (index == 0 && subindex == 0)
 800222e:	8abb      	ldrh	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <sizeOfPDO+0x188>
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <sizeOfPDO+0x188>
                  {
                     /* Padding element */
                     mapping = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800223e:	e02d      	b.n	800229c <sizeOfPDO+0x1e4>
                  }
                  else
                  {
                     nidx = SDO_findobject (index);
 8002240:	8abb      	ldrh	r3, [r7, #20]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff10 	bl	8002068 <SDO_findobject>
 8002248:	6378      	str	r0, [r7, #52]	; 0x34
                     if (nidx >= 0)
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	2b00      	cmp	r3, #0
 800224e:	db1f      	blt.n	8002290 <sizeOfPDO+0x1d8>
                     {
                        int16_t nsub;

                        nsub = SDO_findsubindex (nidx, subindex);
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	4619      	mov	r1, r3
 8002254:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002256:	f7ff fea9 	bl	8001fac <SDO_findsubindex>
 800225a:	4603      	mov	r3, r0
 800225c:	823b      	strh	r3, [r7, #16]
                        if (nsub < 0)
 800225e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	da05      	bge.n	8002272 <sizeOfPDO+0x1ba>
                        {
                           /* Mapped subindex does not exist */
                           *nmappings = -1;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	601a      	str	r2, [r3, #0]
                           return 0;
 800226e:	2300      	movs	r3, #0
 8002270:	e06f      	b.n	8002352 <sizeOfPDO+0x29a>
                        }

                        mapping = &SDOobjects[nidx].objdesc[nsub];
 8002272:	4a3a      	ldr	r2, [pc, #232]	; (800235c <sizeOfPDO+0x2a4>)
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	4413      	add	r3, r2
 800227a:	330c      	adds	r3, #12
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228e:	e005      	b.n	800229c <sizeOfPDO+0x1e4>
                     }
                     else
                     {
                        /* Mapped index does not exist */
                        *nmappings = -1;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f04f 32ff 	mov.w	r2, #4294967295
 8002296:	601a      	str	r2, [r3, #0]
                        return 0;
 8002298:	2300      	movs	r3, #0
 800229a:	e05a      	b.n	8002352 <sizeOfPDO+0x29a>
                     }
                  }

                  mappings[mapIx].obj = mapping;
 800229c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ae:	601a      	str	r2, [r3, #0]
                  /* Save object list reference */
                  if(mapping != NULL)
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00d      	beq.n	80022d2 <sizeOfPDO+0x21a>
                  {
                     mappings[mapIx].objectlistitem = &SDOobjects[nidx];
 80022b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	461a      	mov	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	4924      	ldr	r1, [pc, #144]	; (800235c <sizeOfPDO+0x2a4>)
 80022cc:	440a      	add	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	e009      	b.n	80022e6 <sizeOfPDO+0x22e>
                  }
                  else
                  {
                     mappings[mapIx].objectlistitem = NULL;
 80022d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	461a      	mov	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
                  }
                  mappings[mapIx++].offset = offset;
 80022e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	633a      	str	r2, [r7, #48]	; 0x30
 80022ec:	461a      	mov	r2, r3
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fe:	609a      	str	r2, [r3, #8]
               }

               offset += bitlength;
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002304:	4413      	add	r3, r2
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (c = 1; c <= maxsub; c++)
 8002308:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800230c:	3301      	adds	r3, #1
 800230e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002312:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	429a      	cmp	r2, r3
 800231a:	f67f af50 	bls.w	80021be <sizeOfPDO+0x106>
      for (sic = 1; sic <= si; sic++)
 800231e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002322:	3301      	adds	r3, #1
 8002324:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002328:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800232c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002330:	429a      	cmp	r2, r3
 8002332:	f67f af00 	bls.w	8002136 <sizeOfPDO+0x7e>
            }
         }
      }
   }

   if (max_mappings > 0)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	dd03      	ble.n	8002344 <sizeOfPDO+0x28c>
   {
      *nmappings = mapIx;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e002      	b.n	800234a <sizeOfPDO+0x292>
   }
   else
   {
      *nmappings = 0;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
   }

   return BITS2BYTES (offset) & 0xFFFF;
 800234a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234c:	3307      	adds	r3, #7
 800234e:	08db      	lsrs	r3, r3, #3
 8002350:	b29b      	uxth	r3, r3
}
 8002352:	4618      	mov	r0, r3
 8002354:	3740      	adds	r7, #64	; 0x40
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	0800eab8 	.word	0x0800eab8

08002360 <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
static void copy2mbx (void *source, void *dest, size_t size)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
   memcpy (dest, source, size);
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68f9      	ldr	r1, [r7, #12]
 8002370:	68b8      	ldr	r0, [r7, #8]
 8002372:	f00a ff6a 	bl	800d24a <memcpy>
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
static void SDO_abort (uint8_t reusembx, uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	460b      	mov	r3, r1
 800238e:	80bb      	strh	r3, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	71bb      	strb	r3, [r7, #6]
   uint8_t MBXout;
   _COEsdo *coeres;
   if (reusembx)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <SDO_abort+0x20>
      MBXout = reusembx;
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e003      	b.n	80023a8 <SDO_abort+0x28>
   else
      MBXout = ESC_claimbuffer ();
 80023a0:	f7fe fe7e 	bl	80010a0 <ESC_claimbuffer>
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d025      	beq.n	80023fa <SDO_abort+0x7a>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <SDO_abort+0x84>)
 80023b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <SDO_abort+0x88>)
 80023ba:	4413      	add	r3, r2
 80023bc:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	220a      	movs	r2, #10
 80023c2:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	7953      	ldrb	r3, [r2, #5]
 80023c8:	2103      	movs	r1, #3
 80023ca:	f361 0303 	bfi	r3, r1, #0, #4
 80023ce:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d6:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	88ba      	ldrh	r2, [r7, #4]
 80023dc:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	79ba      	ldrb	r2, [r7, #6]
 80023e4:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	4a05      	ldr	r2, [pc, #20]	; (800240c <SDO_abort+0x8c>)
 80023f6:	2103      	movs	r1, #3
 80023f8:	54d1      	strb	r1, [r2, r3]
   }
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000350 	.word	0x20000350
 8002408:	20000124 	.word	0x20000124
 800240c:	200002a4 	.word	0x200002a4

08002410 <set_state_idle>:

static void set_state_idle (uint8_t reusembx,
                           uint16_t index,
                           uint8_t subindex,
                           uint32_t abortcode)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
 800241c:	460b      	mov	r3, r1
 800241e:	80bb      	strh	r3, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	71bb      	strb	r3, [r7, #6]
   if (abortcode != 0)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <set_state_idle+0x26>
   {
      SDO_abort (reusembx, index, subindex, abortcode);
 800242a:	79ba      	ldrb	r2, [r7, #6]
 800242c:	88b9      	ldrh	r1, [r7, #4]
 800242e:	79f8      	ldrb	r0, [r7, #7]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f7ff ffa5 	bl	8002380 <SDO_abort>
   }

   MBXcontrol[0].state = MBXstate_idle;
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <set_state_idle+0x3c>)
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <set_state_idle+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	200002a4 	.word	0x200002a4
 8002450:	20000350 	.word	0x20000350

08002454 <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
static void SDO_upload (void)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b08f      	sub	sp, #60	; 0x3c
 8002458:	af02      	add	r7, sp, #8
   int32_t nidx;
   int32_t nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   uint32_t abort = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 800245e:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <SDO_upload+0x23c>)
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
   index = etohs (coesdo->index);
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800246a:	847b      	strh	r3, [r7, #34]	; 0x22
   subindex = coesdo->subindex;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	7adb      	ldrb	r3, [r3, #11]
 8002470:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   nidx = SDO_findobject (index);
 8002474:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fdf6 	bl	8002068 <SDO_findobject>
 800247c:	61f8      	str	r0, [r7, #28]
   if (nidx >= 0)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f2c0 81b3 	blt.w	80027ec <SDO_upload+0x398>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8002486:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800248a:	4619      	mov	r1, r3
 800248c:	69f8      	ldr	r0, [r7, #28]
 800248e:	f7ff fd8d 	bl	8001fac <SDO_findsubindex>
 8002492:	4603      	mov	r3, r0
 8002494:	61bb      	str	r3, [r7, #24]
      if (nsub >= 0)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f2c0 819f 	blt.w	80027dc <SDO_upload+0x388>
      {
         objd = SDOobjects[nidx].objdesc;
 800249e:	4a7d      	ldr	r2, [pc, #500]	; (8002694 <SDO_upload+0x240>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4413      	add	r3, r2
 80024a6:	330c      	adds	r3, #12
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	617b      	str	r3, [r7, #20]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	461a      	mov	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	4413      	add	r3, r2
 80024bc:	88db      	ldrh	r3, [r3, #6]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c4:	74fb      	strb	r3, [r7, #19]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 80024c6:	4b74      	ldr	r3, [pc, #464]	; (8002698 <SDO_upload+0x244>)
 80024c8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	74bb      	strb	r3, [r7, #18]
         if (!READ_ACCESS(access, state))
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <SDO_upload+0x90>
 80024de:	7cbb      	ldrb	r3, [r7, #18]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d017      	beq.n	8002514 <SDO_upload+0xc0>
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <SDO_upload+0xa0>
 80024ee:	7cbb      	ldrb	r3, [r7, #18]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d00f      	beq.n	8002514 <SDO_upload+0xc0>
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <SDO_upload+0xb0>
 80024fe:	7cbb      	ldrb	r3, [r7, #18]
 8002500:	2b08      	cmp	r3, #8
 8002502:	d007      	beq.n	8002514 <SDO_upload+0xc0>
         {
            set_state_idle (0, index, subindex, ABORT_WRITEONLY);
 8002504:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002508:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800250a:	4b64      	ldr	r3, [pc, #400]	; (800269c <SDO_upload+0x248>)
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff ff7f 	bl	8002410 <set_state_idle>
            return;
 8002512:	e179      	b.n	8002808 <SDO_upload+0x3b4>
         }
         MBXout = ESC_claimbuffer ();
 8002514:	f7fe fdc4 	bl	80010a0 <ESC_claimbuffer>
 8002518:	4603      	mov	r3, r0
 800251a:	747b      	strb	r3, [r7, #17]
         if (MBXout)
 800251c:	7c7b      	ldrb	r3, [r7, #17]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 816b 	beq.w	80027fa <SDO_upload+0x3a6>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8002524:	7c7b      	ldrb	r3, [r7, #17]
 8002526:	4a5c      	ldr	r2, [pc, #368]	; (8002698 <SDO_upload+0x244>)
 8002528:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	4a58      	ldr	r2, [pc, #352]	; (8002690 <SDO_upload+0x23c>)
 8002530:	4413      	add	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	220a      	movs	r2, #10
 8002538:	801a      	strh	r2, [r3, #0]
            coeres->mbxheader.mbxtype = MBXCOE;
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	7953      	ldrb	r3, [r2, #5]
 800253e:	2103      	movs	r1, #3
 8002540:	f361 0303 	bfi	r3, r1, #0, #4
 8002544:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800254c:	80da      	strh	r2, [r3, #6]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	461a      	mov	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4413      	add	r3, r2
 800255e:	889b      	ldrh	r3, [r3, #4]
 8002560:	607b      	str	r3, [r7, #4]
            /* expedited bits used calculation */
            dss = 0x0c;
 8002562:	230c      	movs	r3, #12
 8002564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (size > 8)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b08      	cmp	r3, #8
 800256c:	d902      	bls.n	8002574 <SDO_upload+0x120>
            {
               dss = 0x08;
 800256e:	2308      	movs	r3, #8
 8002570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if (size > 16)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d902      	bls.n	8002580 <SDO_upload+0x12c>
            {
               dss = 0x04;
 800257a:	2304      	movs	r3, #4
 800257c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if (size > 24)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b18      	cmp	r3, #24
 8002584:	d902      	bls.n	800258c <SDO_upload+0x138>
            {
               dss = 0x00;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            coeres->index = htoes (index);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002590:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800259a:	72da      	strb	r2, [r3, #11]
            coeres->command = COE_COMMAND_UPLOADRESPONSE |
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2241      	movs	r2, #65	; 0x41
 80025a0:	721a      	strb	r2, [r3, #8]
               COE_SIZE_INDICATOR;
            /* convert bits to bytes */
            size = BITS2BYTES(size);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3307      	adds	r3, #7
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	607b      	str	r3, [r7, #4]
            if (size <= 4)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d877      	bhi.n	80026a0 <SDO_upload+0x24c>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	7a1a      	ldrb	r2, [r3, #8]
 80025b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	721a      	strb	r2, [r3, #8]
               void *dataptr = ((objd + nsub)->data) ?
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	461a      	mov	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	4413      	add	r3, r2
 80025d6:	691b      	ldr	r3, [r3, #16]
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <SDO_upload+0x19c>
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	461a      	mov	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4413      	add	r3, r2
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	e008      	b.n	8002602 <SDO_upload+0x1ae>
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	461a      	mov	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4413      	add	r3, r2
 8002600:	330c      	adds	r3, #12
               void *dataptr = ((objd + nsub)->data) ?
 8002602:	60bb      	str	r3, [r7, #8]
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     dataptr, (size_t *)&size, (objd + nsub)->flags);
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	461a      	mov	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 8002614:	88db      	ldrh	r3, [r3, #6]
 8002616:	1d3a      	adds	r2, r7, #4
 8002618:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800261c:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f7fe f818 	bl	8000658 <ESC_upload_pre_objecthandler>
 8002628:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort == 0)
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	d126      	bne.n	800267e <SDO_upload+0x22a>
               {
                  if ((objd + nsub)->data == NULL)
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	461a      	mov	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4413      	add	r3, r2
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <SDO_upload+0x20a>
                  {
                     /* use constant value */
                     coeres->size = htoel ((objd + nsub)->value);
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	461a      	mov	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	4413      	add	r3, r2
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	e096      	b.n	800278c <SDO_upload+0x338>
                  }
                  else
                  {
                     /* use dynamic data */
                     copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	461a      	mov	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4413      	add	r3, r2
 800266e:	6918      	ldr	r0, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	330c      	adds	r3, #12
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4619      	mov	r1, r3
 8002678:	f7ff fe72 	bl	8002360 <copy2mbx>
 800267c:	e086      	b.n	800278c <SDO_upload+0x338>
                  }
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 800267e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002682:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002684:	7c78      	ldrb	r0, [r7, #17]
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	f7ff fec2 	bl	8002410 <set_state_idle>
                  return;
 800268c:	e0bc      	b.n	8002808 <SDO_upload+0x3b4>
 800268e:	bf00      	nop
 8002690:	20000124 	.word	0x20000124
 8002694:	0800eab8 	.word	0x0800eab8
 8002698:	20000350 	.word	0x20000350
 800269c:	06010001 	.word	0x06010001
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	461a      	mov	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 80026b0:	691c      	ldr	r4, [r3, #16]
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	461a      	mov	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 80026c2:	88db      	ldrh	r3, [r3, #6]
 80026c4:	1d3a      	adds	r2, r7, #4
 80026c6:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80026ca:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	4622      	mov	r2, r4
 80026d2:	f7fd ffc1 	bl	8000658 <ESC_upload_pre_objecthandler>
 80026d6:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort == 0)
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d14e      	bne.n	800277c <SDO_upload+0x328>
               {
                  /* set total size in bytes */
                  ESCvar.frags = size;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4b      	ldr	r2, [pc, #300]	; (8002810 <SDO_upload+0x3bc>)
 80026e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                  coeres->size = htoel (size);
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	60da      	str	r2, [r3, #12]
                  if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f103 020a 	add.w	r2, r3, #10
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <SDO_upload+0x3bc>)
 80026f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f6:	3b06      	subs	r3, #6
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d924      	bls.n	8002746 <SDO_upload+0x2f2>
                  {
                     /* segmented transfer needed */
                     /* limit to mailbox size */
                     size = ESC_MBXDSIZE - COE_HEADERSIZE;
 80026fc:	4b44      	ldr	r3, [pc, #272]	; (8002810 <SDO_upload+0x3bc>)
 80026fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002700:	3b10      	subs	r3, #16
 8002702:	607b      	str	r3, [r7, #4]
                     /* number of bytes done */
                     ESCvar.fragsleft = size;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a42      	ldr	r2, [pc, #264]	; (8002810 <SDO_upload+0x3bc>)
 8002708:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
                     /* signal segmented transfer */
                     ESCvar.segmented = MBXSEU;
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <SDO_upload+0x3bc>)
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                     ESCvar.data = (objd + nsub)->data;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	461a      	mov	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	4a3a      	ldr	r2, [pc, #232]	; (8002810 <SDO_upload+0x3bc>)
 8002728:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                     ESCvar.flags = (objd + nsub)->flags;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	461a      	mov	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	4413      	add	r3, r2
 800273c:	88da      	ldrh	r2, [r3, #6]
 800273e:	4b34      	ldr	r3, [pc, #208]	; (8002810 <SDO_upload+0x3bc>)
 8002740:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8002744:	e003      	b.n	800274e <SDO_upload+0x2fa>
                  }
                  else
                  {
                     ESCvar.segmented = 0;
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <SDO_upload+0x3bc>)
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                  }
                  coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	b29b      	uxth	r3, r3
 8002752:	330a      	adds	r3, #10
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	801a      	strh	r2, [r3, #0]

                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	461a      	mov	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	4413      	add	r3, r2
 800276a:	6918      	ldr	r0, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	330c      	adds	r3, #12
 8002770:	3304      	adds	r3, #4
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4619      	mov	r1, r3
 8002776:	f7ff fdf3 	bl	8002360 <copy2mbx>
 800277a:	e007      	b.n	800278c <SDO_upload+0x338>
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 800277c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002780:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002782:	7c78      	ldrb	r0, [r7, #17]
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	f7ff fe43 	bl	8002410 <set_state_idle>
                  return;
 800278a:	e03d      	b.n	8002808 <SDO_upload+0x3b4>
               }
            }
            if ((abort == 0) && (ESCvar.segmented == 0))
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11f      	bne.n	80027d2 <SDO_upload+0x37e>
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <SDO_upload+0x3bc>)
 8002794:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11a      	bne.n	80027d2 <SDO_upload+0x37e>
            {
               abort = ESC_upload_post_objecthandler (index, subindex,
                                                      (objd + nsub)->flags);
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	461a      	mov	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	4413      	add	r3, r2
               abort = ESC_upload_post_objecthandler (index, subindex,
 80027ac:	88da      	ldrh	r2, [r3, #6]
 80027ae:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80027b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd ff6f 	bl	8000698 <ESC_upload_post_objecthandler>
 80027ba:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort != 0)
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d007      	beq.n	80027d2 <SDO_upload+0x37e>
               {
                  set_state_idle (MBXout, index, subindex, abort);
 80027c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80027c6:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80027c8:	7c78      	ldrb	r0, [r7, #17]
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	f7ff fe20 	bl	8002410 <set_state_idle>
                  return;
 80027d0:	e01a      	b.n	8002808 <SDO_upload+0x3b4>
               }
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 80027d2:	7c7b      	ldrb	r3, [r7, #17]
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <SDO_upload+0x3c0>)
 80027d6:	2103      	movs	r1, #3
 80027d8:	54d1      	strb	r1, [r2, r3]
 80027da:	e00e      	b.n	80027fa <SDO_upload+0x3a6>
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 80027dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80027e0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <SDO_upload+0x3c4>)
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7ff fdcb 	bl	8002380 <SDO_abort>
 80027ea:	e006      	b.n	80027fa <SDO_upload+0x3a6>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 80027ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80027f0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <SDO_upload+0x3c8>)
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7ff fdc3 	bl	8002380 <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SDO_upload+0x3c0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <SDO_upload+0x3bc>)
 8002802:	2200      	movs	r2, #0
 8002804:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8002808:	3734      	adds	r7, #52	; 0x34
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}
 800280e:	bf00      	nop
 8002810:	20000350 	.word	0x20000350
 8002814:	200002a4 	.word	0x200002a4
 8002818:	06090011 	.word	0x06090011
 800281c:	06020000 	.word	0x06020000

08002820 <complete_access_get_variables>:

static uint32_t complete_access_get_variables(_COEsdo *coesdo, uint16_t *index,
                                              uint8_t *subindex, int32_t *nidx,
                                              int16_t *nsub)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
   *index = etohs (coesdo->index);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002834:	b29a      	uxth	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	801a      	strh	r2, [r3, #0]
   *subindex = coesdo->subindex;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	7ada      	ldrb	r2, [r3, #11]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	701a      	strb	r2, [r3, #0]

   /* A Complete Access must start with Subindex 0 or Subindex 1 */
   if (*subindex > 1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d901      	bls.n	800284e <complete_access_get_variables+0x2e>
   {
      return ABORT_UNSUPPORTED;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <complete_access_get_variables+0x7c>)
 800284c:	e021      	b.n	8002892 <complete_access_get_variables+0x72>
   }

   *nidx = SDO_findobject (*index);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fc08 	bl	8002068 <SDO_findobject>
 8002858:	4602      	mov	r2, r0
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	601a      	str	r2, [r3, #0]
   if (*nidx < 0)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da01      	bge.n	800286a <complete_access_get_variables+0x4a>
   {
      return ABORT_NOOBJECT;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <complete_access_get_variables+0x80>)
 8002868:	e013      	b.n	8002892 <complete_access_get_variables+0x72>
   }

   *nsub = SDO_findsubindex (*nidx, *subindex);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f7ff fb99 	bl	8001fac <SDO_findsubindex>
 800287a:	4603      	mov	r3, r0
 800287c:	461a      	mov	r2, r3
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	801a      	strh	r2, [r3, #0]
   if (*nsub < 0)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002888:	2b00      	cmp	r3, #0
 800288a:	da01      	bge.n	8002890 <complete_access_get_variables+0x70>
   {
      return ABORT_NOSUBINDEX;
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <complete_access_get_variables+0x84>)
 800288e:	e000      	b.n	8002892 <complete_access_get_variables+0x72>
   }

   return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	06010000 	.word	0x06010000
 80028a0:	06020000 	.word	0x06020000
 80028a4:	06090011 	.word	0x06090011

080028a8 <complete_access_subindex_loop>:
                                              int32_t nidx,
                                              int16_t nsub,
                                              uint8_t *mbxdata,
                                              load_t load_type,
                                              uint32_t max_bytes)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80fb      	strh	r3, [r7, #6]
   /* Objects with dynamic entries cannot be accessed with Complete Access */
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	885b      	ldrh	r3, [r3, #2]
 80028bc:	2b09      	cmp	r3, #9
 80028be:	d007      	beq.n	80028d0 <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	885b      	ldrh	r3, [r3, #2]
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 80028c4:	2b0a      	cmp	r3, #10
 80028c6:	d003      	beq.n	80028d0 <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_UNICODE_STRING))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	885b      	ldrh	r3, [r3, #2]
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 80028cc:	2b0b      	cmp	r3, #11
 80028ce:	d101      	bne.n	80028d4 <complete_access_subindex_loop+0x2c>
   {
      return ABORT_CA_NOT_SUPPORTED;
 80028d0:	4ba6      	ldr	r3, [pc, #664]	; (8002b6c <complete_access_subindex_loop+0x2c4>)
 80028d2:	e153      	b.n	8002b7c <complete_access_subindex_loop+0x2d4>
   }

   uint32_t size = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24

   /* Clear padded mbxdata byte [1] on upload */
   if ((load_type == UPLOAD) && (mbxdata != NULL))
 80028d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 8139 	bne.w	8002b54 <complete_access_subindex_loop+0x2ac>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8135 	beq.w	8002b54 <complete_access_subindex_loop+0x2ac>
   {
      mbxdata[1] = 0;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
   }

   while (nsub <= SDOobjects[nidx].maxsub)
 80028f2:	e12f      	b.n	8002b54 <complete_access_subindex_loop+0x2ac>
   {
      uint16_t bitlen = (objd + nsub)->bitlength;
 80028f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4413      	add	r3, r2
 8002906:	889b      	ldrh	r3, [r3, #4]
 8002908:	847b      	strh	r3, [r7, #34]	; 0x22
      void *ul_source = ((objd + nsub)->data != NULL) ?
 800290a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	691b      	ldr	r3, [r3, #16]
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <complete_access_subindex_loop+0x90>
 8002922:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	e009      	b.n	800294c <complete_access_subindex_loop+0xa4>
 8002938:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	461a      	mov	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	330c      	adds	r3, #12
      void *ul_source = ((objd + nsub)->data != NULL) ?
 800294c:	61fb      	str	r3, [r7, #28]
      uint8_t bitoffset = size % 8;
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	76fb      	strb	r3, [r7, #27]
      uint8_t access = (objd + nsub)->flags & 0x3f;
 8002958:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	461a      	mov	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	88db      	ldrh	r3, [r3, #6]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002972:	76bb      	strb	r3, [r7, #26]
      uint8_t state = ESCvar.ALstatus & 0x0f;
 8002974:	4b7e      	ldr	r3, [pc, #504]	; (8002b70 <complete_access_subindex_loop+0x2c8>)
 8002976:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	767b      	strb	r3, [r7, #25]

      if ((bitlen % 8) == 0)
 8002982:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d16f      	bne.n	8002a6e <complete_access_subindex_loop+0x1c6>
      {
         if (bitoffset != 0)
 800298e:	7efb      	ldrb	r3, [r7, #27]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <complete_access_subindex_loop+0xf6>
         {
            /* move on to next byte boundary */
            size += (8U - bitoffset);
 8002994:	7efb      	ldrb	r3, [r7, #27]
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	3308      	adds	r3, #8
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
         }
         if (mbxdata != NULL)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80be 	beq.w	8002b22 <complete_access_subindex_loop+0x27a>
         {
            /* copy a non-bit data type to a byte boundary */
            if (load_type == UPLOAD)
 80029a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d131      	bne.n	8002a12 <complete_access_subindex_loop+0x16a>
            {
               if (READ_ACCESS(access, state))
 80029ae:	7ebb      	ldrb	r3, [r7, #26]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <complete_access_subindex_loop+0x116>
 80029b8:	7e7b      	ldrb	r3, [r7, #25]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d00f      	beq.n	80029de <complete_access_subindex_loop+0x136>
 80029be:	7ebb      	ldrb	r3, [r7, #26]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <complete_access_subindex_loop+0x126>
 80029c8:	7e7b      	ldrb	r3, [r7, #25]
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d007      	beq.n	80029de <complete_access_subindex_loop+0x136>
 80029ce:	7ebb      	ldrb	r3, [r7, #26]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00f      	beq.n	80029f8 <complete_access_subindex_loop+0x150>
 80029d8:	7e7b      	ldrb	r3, [r7, #25]
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d10c      	bne.n	80029f8 <complete_access_subindex_loop+0x150>
               {
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	3307      	adds	r3, #7
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	18d0      	adds	r0, r2, r3
                        BITS2BYTES(bitlen));
 80029e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029ea:	3307      	adds	r3, #7
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	461a      	mov	r2, r3
 80029f0:	69f9      	ldr	r1, [r7, #28]
 80029f2:	f00a fc2a 	bl	800d24a <memcpy>
 80029f6:	e094      	b.n	8002b22 <complete_access_subindex_loop+0x27a>
               }
               else
               {
                  /* return zeroes for upload of WO objects */
                  memset(&mbxdata[BITS2BYTES(size)], 0, BITS2BYTES(bitlen));
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	3307      	adds	r3, #7
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	18d0      	adds	r0, r2, r3
 8002a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a04:	3307      	adds	r3, #7
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f00a fc2b 	bl	800d266 <memset>
 8002a10:	e087      	b.n	8002b22 <complete_access_subindex_loop+0x27a>
               }
            }
            /* download of RO objects shall be ignored */
            else if (WRITE_ACCESS(access, state))
 8002a12:	7ebb      	ldrb	r3, [r7, #26]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <complete_access_subindex_loop+0x17a>
 8002a1c:	7e7b      	ldrb	r3, [r7, #25]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d00f      	beq.n	8002a42 <complete_access_subindex_loop+0x19a>
 8002a22:	7ebb      	ldrb	r3, [r7, #26]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <complete_access_subindex_loop+0x18a>
 8002a2c:	7e7b      	ldrb	r3, [r7, #25]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d007      	beq.n	8002a42 <complete_access_subindex_loop+0x19a>
 8002a32:	7ebb      	ldrb	r3, [r7, #26]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d072      	beq.n	8002b22 <complete_access_subindex_loop+0x27a>
 8002a3c:	7e7b      	ldrb	r3, [r7, #25]
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d16f      	bne.n	8002b22 <complete_access_subindex_loop+0x27a>
            {
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 8002a42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	6918      	ldr	r0, [r3, #16]
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3307      	adds	r3, #7
 8002a5a:	08db      	lsrs	r3, r3, #3
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	18d1      	adds	r1, r2, r3
                     BITS2BYTES(bitlen));
 8002a60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a62:	3307      	adds	r3, #7
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	461a      	mov	r2, r3
 8002a68:	f00a fbef 	bl	800d24a <memcpy>
 8002a6c:	e059      	b.n	8002b22 <complete_access_subindex_loop+0x27a>
            }
         }
      }
      else if ((load_type == UPLOAD) && (mbxdata != NULL))
 8002a6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d155      	bne.n	8002b22 <complete_access_subindex_loop+0x27a>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d052      	beq.n	8002b22 <complete_access_subindex_loop+0x27a>
      {
         /* copy a bit data type into correct position */
         uint32_t bitmask = (1U << bitlen) - 1U;
 8002a7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a7e:	2201      	movs	r2, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
         uint32_t tempmask;
         if (READ_ACCESS(access, state))
 8002a88:	7ebb      	ldrb	r3, [r7, #26]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <complete_access_subindex_loop+0x1f0>
 8002a92:	7e7b      	ldrb	r3, [r7, #25]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d00f      	beq.n	8002ab8 <complete_access_subindex_loop+0x210>
 8002a98:	7ebb      	ldrb	r3, [r7, #26]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <complete_access_subindex_loop+0x200>
 8002aa2:	7e7b      	ldrb	r3, [r7, #25]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d007      	beq.n	8002ab8 <complete_access_subindex_loop+0x210>
 8002aa8:	7ebb      	ldrb	r3, [r7, #26]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <complete_access_subindex_loop+0x252>
 8002ab2:	7e7b      	ldrb	r3, [r7, #25]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d120      	bne.n	8002afa <complete_access_subindex_loop+0x252>
         {
            if (bitoffset == 0)
 8002ab8:	7efb      	ldrb	r3, [r7, #27]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <complete_access_subindex_loop+0x222>
            {
               mbxdata[BITSPOS2BYTESOFFSET(size)] = 0;
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	08db      	lsrs	r3, r3, #3
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
            }
            tempmask = (*(uint8_t *)ul_source & bitmask) << bitoffset;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	7efb      	ldrb	r3, [r7, #27]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] |= (uint8_t)tempmask;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	08db      	lsrs	r3, r3, #3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	7819      	ldrb	r1, [r3, #0]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	4403      	add	r3, r0
 8002af2:	430a      	orrs	r2, r1
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e013      	b.n	8002b22 <complete_access_subindex_loop+0x27a>
         }
         else
         {
            tempmask = ~(bitmask << bitoffset);
 8002afa:	7efb      	ldrb	r3, [r7, #27]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] &= (uint8_t)tempmask;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	7819      	ldrb	r1, [r3, #0]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	6838      	ldr	r0, [r7, #0]
 8002b1a:	4403      	add	r3, r0
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
         }
      }

      /* Subindex 0 is padded to 16 bit */
      size += (nsub == 0) ? 16 : bitlen;
 8002b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <complete_access_subindex_loop+0x286>
 8002b2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b2c:	e000      	b.n	8002b30 <complete_access_subindex_loop+0x288>
 8002b2e:	2310      	movs	r3, #16
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	4413      	add	r3, r2
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
      nsub++;
 8002b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	80fb      	strh	r3, [r7, #6]

      if ((max_bytes > 0) && (BITS2BYTES(size) >= max_bytes))
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <complete_access_subindex_loop+0x2ac>
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	3307      	adds	r3, #7
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d911      	bls.n	8002b78 <complete_access_subindex_loop+0x2d0>
   while (nsub <= SDOobjects[nidx].maxsub)
 8002b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b58:	4906      	ldr	r1, [pc, #24]	; (8002b74 <complete_access_subindex_loop+0x2cc>)
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	440a      	add	r2, r1
 8002b60:	3204      	adds	r2, #4
 8002b62:	7812      	ldrb	r2, [r2, #0]
 8002b64:	4293      	cmp	r3, r2
 8002b66:	f77f aec5 	ble.w	80028f4 <complete_access_subindex_loop+0x4c>
 8002b6a:	e006      	b.n	8002b7a <complete_access_subindex_loop+0x2d2>
 8002b6c:	06010004 	.word	0x06010004
 8002b70:	20000350 	.word	0x20000350
 8002b74:	0800eab8 	.word	0x0800eab8
      {
         break;
 8002b78:	bf00      	nop
      }
   }

   return size;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <init_coesdo>:
static void init_coesdo(_COEsdo *coesdo,
                        uint8_t sdoservice,
                        uint8_t command,
                        uint16_t index,
                        uint8_t subindex)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	70fb      	strb	r3, [r7, #3]
 8002b96:	460b      	mov	r3, r1
 8002b98:	70bb      	strb	r3, [r7, #2]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	803b      	strh	r3, [r7, #0]
   coesdo->mbxheader.length = htoes(COE_DEFAULTLENGTH);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	220a      	movs	r2, #10
 8002ba2:	801a      	strh	r2, [r3, #0]
   coesdo->mbxheader.mbxtype = MBXCOE;
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	7953      	ldrb	r3, [r2, #5]
 8002ba8:	2103      	movs	r1, #3
 8002baa:	f361 0303 	bfi	r3, r1, #0, #4
 8002bae:	7153      	strb	r3, [r2, #5]
   coesdo->coeheader.numberservice = htoes(sdoservice << 12);
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	031b      	lsls	r3, r3, #12
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	80da      	strh	r2, [r3, #6]
   coesdo->command = command;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	78ba      	ldrb	r2, [r7, #2]
 8002bc0:	721a      	strb	r2, [r3, #8]
   coesdo->index = htoes(index);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	883a      	ldrh	r2, [r7, #0]
 8002bc6:	f8a3 2009 	strh.w	r2, [r3, #9]
   coesdo->subindex = subindex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7c3a      	ldrb	r2, [r7, #16]
 8002bce:	72da      	strb	r2, [r3, #11]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <SDO_upload_complete_access>:
 *  sending the content requested in a free Mailbox buffer. Depending of
 *  size of data expedited, normal or segmented transfer is used.
 *  On error an SDO Abort will be sent.
 */
static void SDO_upload_complete_access (void)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08d      	sub	sp, #52	; 0x34
 8002be0:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 8002be2:	4b87      	ldr	r3, [pc, #540]	; (8002e00 <SDO_upload_complete_access+0x224>)
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 8002be6:	f107 0008 	add.w	r0, r7, #8
 8002bea:	f107 020d 	add.w	r2, r7, #13
 8002bee:	f107 010e 	add.w	r1, r7, #14
 8002bf2:	1dbb      	adds	r3, r7, #6
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bfa:	f7ff fe11 	bl	8002820 <complete_access_get_variables>
 8002bfe:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d006      	beq.n	8002c14 <SDO_upload_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 8002c06:	89f9      	ldrh	r1, [r7, #14]
 8002c08:	7b7a      	ldrb	r2, [r7, #13]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff fbff 	bl	8002410 <set_state_idle>
      return;
 8002c12:	e0f2      	b.n	8002dfa <SDO_upload_complete_access+0x21e>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 8002c14:	f7fe fa44 	bl	80010a0 <ESC_claimbuffer>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	77fb      	strb	r3, [r7, #31]
   if (MBXout == 0)
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <SDO_upload_complete_access+0x54>
   {
      /* It is a bad idea to call SDO_abort when ESC_claimbuffer fails,
       * because SDO_abort will also call ESC_claimbuffer ...
       */
      set_state_idle (0, index, subindex, 0);
 8002c22:	89f9      	ldrh	r1, [r7, #14]
 8002c24:	7b7a      	ldrb	r2, [r7, #13]
 8002c26:	2300      	movs	r3, #0
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7ff fbf1 	bl	8002410 <set_state_idle>
      return;
 8002c2e:	e0e4      	b.n	8002dfa <SDO_upload_complete_access+0x21e>
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a74      	ldr	r2, [pc, #464]	; (8002e04 <SDO_upload_complete_access+0x228>)
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	4413      	add	r3, r2
 8002c38:	330c      	adds	r3, #12
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, UPLOAD, 0);
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	69b8      	ldr	r0, [r7, #24]
 8002c50:	f7ff fe2a 	bl	80028a8 <complete_access_subindex_loop>
 8002c54:	4603      	mov	r3, r0
 8002c56:	603b      	str	r3, [r7, #0]

   /* expedited bits used calculation */
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	d808      	bhi.n	8002c70 <SDO_upload_complete_access+0x94>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	f1c3 0303 	rsb	r3, r3, #3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e000      	b.n	8002c72 <SDO_upload_complete_access+0x96>
 8002c70:	2300      	movs	r3, #0
 8002c72:	75fb      	strb	r3, [r7, #23]

   /* convert bits to bytes */
   size = BITS2BYTES(size);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3307      	adds	r3, #7
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	603b      	str	r3, [r7, #0]

   if (size > 0xffff)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d306      	bcc.n	8002c92 <SDO_upload_complete_access+0xb6>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (MBXout, index, subindex, size);
 8002c84:	89f9      	ldrh	r1, [r7, #14]
 8002c86:	7b7a      	ldrb	r2, [r7, #13]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	7ff8      	ldrb	r0, [r7, #31]
 8002c8c:	f7ff fbc0 	bl	8002410 <set_state_idle>
      return;
 8002c90:	e0b3      	b.n	8002dfa <SDO_upload_complete_access+0x21e>
   }

   /* check that upload data fits in the preallocated buffer */
   if ((size + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	331e      	adds	r3, #30
 8002c96:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c9a:	d906      	bls.n	8002caa <SDO_upload_complete_access+0xce>
   {
      set_state_idle (MBXout, index, subindex, ABORT_CA_NOT_SUPPORTED);
 8002c9c:	89f9      	ldrh	r1, [r7, #14]
 8002c9e:	7b7a      	ldrb	r2, [r7, #13]
 8002ca0:	7ff8      	ldrb	r0, [r7, #31]
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <SDO_upload_complete_access+0x22c>)
 8002ca4:	f7ff fbb4 	bl	8002410 <set_state_idle>
      return;
 8002ca8:	e0a7      	b.n	8002dfa <SDO_upload_complete_access+0x21e>
   }
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 8002caa:	89f8      	ldrh	r0, [r7, #14]
 8002cac:	7b79      	ldrb	r1, [r7, #13]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	691a      	ldr	r2, [r3, #16]
         objd->data, (size_t *)&size, objd->flags | COMPLETE_ACCESS_FLAG);
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	88db      	ldrh	r3, [r3, #6]
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 8002cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	463c      	mov	r4, r7
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	4623      	mov	r3, r4
 8002cc6:	f7fd fcc7 	bl	8000658 <ESC_upload_pre_objecthandler>
 8002cca:	6238      	str	r0, [r7, #32]
   if (abortcode != 0)
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d006      	beq.n	8002ce0 <SDO_upload_complete_access+0x104>
   {
      set_state_idle (MBXout, index, subindex, abortcode);
 8002cd2:	89f9      	ldrh	r1, [r7, #14]
 8002cd4:	7b7a      	ldrb	r2, [r7, #13]
 8002cd6:	7ff8      	ldrb	r0, [r7, #31]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f7ff fb99 	bl	8002410 <set_state_idle>
      return;
 8002cde:	e08c      	b.n	8002dfa <SDO_upload_complete_access+0x21e>
   }

   /* copy subindex data into the preallocated buffer */
   complete_access_subindex_loop(objd, nidx, nsub, ESCvar.mbxdata, UPLOAD, 0);
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <SDO_upload_complete_access+0x230>)
 8002cf0:	69b8      	ldr	r0, [r7, #24]
 8002cf2:	f7ff fdd9 	bl	80028a8 <complete_access_subindex_loop>

   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	4a45      	ldr	r2, [pc, #276]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002cfa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	4a3f      	ldr	r2, [pc, #252]	; (8002e00 <SDO_upload_complete_access+0x224>)
 8002d02:	4413      	add	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
   init_coesdo(coeres, COE_SDORESPONSE,
 8002d06:	89fa      	ldrh	r2, [r7, #14]
 8002d08:	7b7b      	ldrb	r3, [r7, #13]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	2251      	movs	r2, #81	; 0x51
 8002d10:	2103      	movs	r1, #3
 8002d12:	6938      	ldr	r0, [r7, #16]
 8002d14:	f7ff ff36 	bl	8002b84 <init_coesdo>
         COE_COMMAND_UPLOADRESPONSE | COE_COMPLETEACCESS | COE_SIZE_INDICATOR,
         index, subindex);

   ESCvar.segmented = 0;
 8002d18:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

   if (size <= 4)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d811      	bhi.n	8002d4a <SDO_upload_complete_access+0x16e>
   {
      /* expedited response, i.e. length <= 4 bytes */
      coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	7a1a      	ldrb	r2, [r3, #8]
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	721a      	strb	r2, [r3, #8]
      memcpy(&(coeres->size), ESCvar.mbxdata, size);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	4932      	ldr	r1, [pc, #200]	; (8002e0c <SDO_upload_complete_access+0x230>)
 8002d42:	4618      	mov	r0, r3
 8002d44:	f00a fa81 	bl	800d24a <memcpy>
 8002d48:	e031      	b.n	8002dae <SDO_upload_complete_access+0x1d2>
   }
   else
   {
      /* normal response, i.e. length > 4 bytes */
      coeres->size = htoel (size);
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	60da      	str	r2, [r3, #12]

      if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f103 020a 	add.w	r2, r3, #10
 8002d56:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5a:	3b06      	subs	r3, #6
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d918      	bls.n	8002d92 <SDO_upload_complete_access+0x1b6>
      {
         /* segmented transfer needed */
         /* set total size in bytes */
         ESCvar.frags = size;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4a2b      	ldr	r2, [pc, #172]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002d64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8002d68:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6c:	3b10      	subs	r3, #16
 8002d6e:	603b      	str	r3, [r7, #0]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002d74:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         /* signal segmented transfer */
         ESCvar.segmented = MBXSEU;
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata;
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002d82:	4a22      	ldr	r2, [pc, #136]	; (8002e0c <SDO_upload_complete_access+0x230>)
 8002d84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002d8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d8e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      }

      coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	330a      	adds	r3, #10
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	801a      	strh	r2, [r3, #0]
      memcpy((&(coeres->size)) + 1, ESCvar.mbxdata, size);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	330c      	adds	r3, #12
 8002da2:	3304      	adds	r3, #4
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	4919      	ldr	r1, [pc, #100]	; (8002e0c <SDO_upload_complete_access+0x230>)
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00a fa4e 	bl	800d24a <memcpy>
   }

   if (ESCvar.segmented == 0)
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <SDO_upload_complete_access+0x234>)
 8002db0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d116      	bne.n	8002de6 <SDO_upload_complete_access+0x20a>
   {
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 8002db8:	89f8      	ldrh	r0, [r7, #14]
 8002dba:	7b79      	ldrb	r1, [r7, #13]
            objd->flags | COMPLETE_ACCESS_FLAG);
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	88db      	ldrh	r3, [r3, #6]
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 8002dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f7fd fc64 	bl	8000698 <ESC_upload_post_objecthandler>
 8002dd0:	6238      	str	r0, [r7, #32]

      if (abortcode != 0)
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <SDO_upload_complete_access+0x20a>
      {
         set_state_idle (MBXout, index, subindex, abortcode);
 8002dd8:	89f9      	ldrh	r1, [r7, #14]
 8002dda:	7b7a      	ldrb	r2, [r7, #13]
 8002ddc:	7ff8      	ldrb	r0, [r7, #31]
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f7ff fb16 	bl	8002410 <set_state_idle>
         return;
 8002de4:	e009      	b.n	8002dfa <SDO_upload_complete_access+0x21e>
      }
   }

   MBXcontrol[MBXout].state = MBXstate_outreq;
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <SDO_upload_complete_access+0x238>)
 8002dea:	2103      	movs	r1, #3
 8002dec:	54d1      	strb	r1, [r2, r3]

   set_state_idle (MBXout, index, subindex, 0);
 8002dee:	89f9      	ldrh	r1, [r7, #14]
 8002df0:	7b7a      	ldrb	r2, [r7, #13]
 8002df2:	7ff8      	ldrb	r0, [r7, #31]
 8002df4:	2300      	movs	r3, #0
 8002df6:	f7ff fb0b 	bl	8002410 <set_state_idle>
}
 8002dfa:	372c      	adds	r7, #44	; 0x2c
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}
 8002e00:	20000124 	.word	0x20000124
 8002e04:	0800eab8 	.word	0x0800eab8
 8002e08:	06010004 	.word	0x06010004
 8002e0c:	2000043a 	.word	0x2000043a
 8002e10:	20000350 	.word	0x20000350
 8002e14:	200002a4 	.word	0x200002a4

08002e18 <SDO_uploadsegment>:

/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 */
static void SDO_uploadsegment (void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af02      	add	r7, sp, #8
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset, abort;
   coesdo = (_COEsdo *) &MBX[0];
 8002e1e:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <SDO_uploadsegment+0x168>)
 8002e20:	61bb      	str	r3, [r7, #24]
   MBXout = ESC_claimbuffer ();
 8002e22:	f7fe f93d 	bl	80010a0 <ESC_claimbuffer>
 8002e26:	4603      	mov	r3, r0
 8002e28:	75fb      	strb	r3, [r7, #23]
   if (MBXout)
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 809d 	beq.w	8002f6c <SDO_uploadsegment+0x154>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	4a53      	ldr	r2, [pc, #332]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002e36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	4a50      	ldr	r2, [pc, #320]	; (8002f80 <SDO_uploadsegment+0x168>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
      offset = ESCvar.fragsleft;
 8002e42:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002e44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e48:	60fb      	str	r3, [r7, #12]
      size = ESCvar.frags - ESCvar.fragsleft;
 8002e4a:	4b4e      	ldr	r3, [pc, #312]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002e4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	61fb      	str	r3, [r7, #28]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
            (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	7a1b      	ldrb	r3, [r3, #8]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	72fb      	strb	r3, [r7, #11]
      init_coesdo(coeres, COE_SDORESPONSE, command,
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002e6a:	b299      	uxth	r1, r3
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	7adb      	ldrb	r3, [r3, #11]
 8002e70:	7afa      	ldrb	r2, [r7, #11]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	460b      	mov	r3, r1
 8002e76:	2103      	movs	r1, #3
 8002e78:	6938      	ldr	r0, [r7, #16]
 8002e7a:	f7ff fe83 	bl	8002b84 <init_coesdo>
            coesdo->index, coesdo->subindex);
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	1cda      	adds	r2, r3, #3
 8002e82:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e86:	3b06      	subs	r3, #6
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d912      	bls.n	8002eb2 <SDO_uploadsegment+0x9a>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e90:	3b09      	subs	r3, #9
 8002e92:	61fb      	str	r3, [r7, #28]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002e96:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002ea0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3303      	adds	r3, #3
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	801a      	strh	r2, [r3, #0]
 8002eb0:	e02c      	b.n	8002f0c <SDO_uploadsegment+0xf4>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 8002eb2:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 8002eba:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 8002ec2:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         coeres->command |= COE_COMMAND_LASTSEGMENTBIT;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	7a1b      	ldrb	r3, [r3, #8]
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d906      	bls.n	8002eec <SDO_uploadsegment+0xd4>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3303      	adds	r3, #3
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	801a      	strh	r2, [r3, #0]
 8002eea:	e00f      	b.n	8002f0c <SDO_uploadsegment+0xf4>
         }
         else
         {
            coeres->command |= (uint8_t)((7U - size) << 1);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	7a1a      	ldrb	r2, [r3, #8]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f1c3 0307 	rsb	r3, r3, #7
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4313      	orrs	r3, r2
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	220a      	movs	r2, #10
 8002f0a:	801a      	strh	r2, [r3, #0]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1,
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002f0e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	18d0      	adds	r0, r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7ff fa1e 	bl	8002360 <copy2mbx>
            size);        /* copy to mailbox */

      if (ESCvar.segmented == 0)
 8002f24:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002f26:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11a      	bne.n	8002f64 <SDO_uploadsegment+0x14c>
      {
         abort = ESC_upload_post_objecthandler (etohs (coesdo->index),
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002f34:	b298      	uxth	r0, r3
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	7adb      	ldrb	r3, [r3, #11]
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002f3c:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7fd fba9 	bl	8000698 <ESC_upload_post_objecthandler>
 8002f46:	6078      	str	r0, [r7, #4]
               coesdo->subindex, ESCvar.flags);
         if (abort != 0)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <SDO_uploadsegment+0x14c>
         {
            set_state_idle (MBXout, etohs (coesdo->index), coesdo->subindex, abort);
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002f54:	b299      	uxth	r1, r3
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	7ada      	ldrb	r2, [r3, #11]
 8002f5a:	7df8      	ldrb	r0, [r7, #23]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f7ff fa57 	bl	8002410 <set_state_idle>
            return;
 8002f62:	e00a      	b.n	8002f7a <SDO_uploadsegment+0x162>
         }
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <SDO_uploadsegment+0x170>)
 8002f68:	2103      	movs	r1, #3
 8002f6a:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <SDO_uploadsegment+0x170>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <SDO_uploadsegment+0x16c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000124 	.word	0x20000124
 8002f84:	20000350 	.word	0x20000350
 8002f88:	200002a4 	.word	0x200002a4

08002f8c <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
static void SDO_download (void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b090      	sub	sp, #64	; 0x40
 8002f90:	af02      	add	r7, sp, #8
   uint32_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   uint32_t abort;

   coesdo = (_COEsdo *) &MBX[0];
 8002f92:	4b89      	ldr	r3, [pc, #548]	; (80031b8 <SDO_download+0x22c>)
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   index = etohs (coesdo->index);
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002f9e:	857b      	strh	r3, [r7, #42]	; 0x2a
   subindex = coesdo->subindex;
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	7adb      	ldrb	r3, [r3, #11]
 8002fa4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   nidx = SDO_findobject (index);
 8002fa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f85c 	bl	8002068 <SDO_findobject>
 8002fb0:	6278      	str	r0, [r7, #36]	; 0x24
   if (nidx >= 0)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f2c0 818c 	blt.w	80032d2 <SDO_download+0x346>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8002fba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fc2:	f7fe fff3 	bl	8001fac <SDO_findsubindex>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	847b      	strh	r3, [r7, #34]	; 0x22
      if (nsub >= 0)
 8002fca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f2c0 8177 	blt.w	80032c2 <SDO_download+0x336>
      {
         objd = SDOobjects[nidx].objdesc;
 8002fd4:	4a79      	ldr	r2, [pc, #484]	; (80031bc <SDO_download+0x230>)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	4413      	add	r3, r2
 8002fdc:	330c      	adds	r3, #12
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	61fb      	str	r3, [r7, #28]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 8002fe2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	88db      	ldrh	r3, [r3, #6]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffc:	76fb      	strb	r3, [r7, #27]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 8002ffe:	4b70      	ldr	r3, [pc, #448]	; (80031c0 <SDO_download+0x234>)
 8003000:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	76bb      	strb	r3, [r7, #26]
         if (WRITE_ACCESS(access, state))
 800300c:	7efb      	ldrb	r3, [r7, #27]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <SDO_download+0x90>
 8003016:	7ebb      	ldrb	r3, [r7, #26]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d011      	beq.n	8003040 <SDO_download+0xb4>
 800301c:	7efb      	ldrb	r3, [r7, #27]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <SDO_download+0xa0>
 8003026:	7ebb      	ldrb	r3, [r7, #26]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d009      	beq.n	8003040 <SDO_download+0xb4>
 800302c:	7efb      	ldrb	r3, [r7, #27]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8132 	beq.w	800329c <SDO_download+0x310>
 8003038:	7ebb      	ldrb	r3, [r7, #26]
 800303a:	2b08      	cmp	r3, #8
 800303c:	f040 812e 	bne.w	800329c <SDO_download+0x310>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	7a1b      	ldrb	r3, [r3, #8]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <SDO_download+0xd8>
            {
               size = 4U - ((coesdo->command & 0x0CU) >> 2);
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	7a1b      	ldrb	r3, [r3, #8]
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	f1c3 0304 	rsb	r3, r3, #4
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
               mbxdata = &(coesdo->size);
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	330c      	adds	r3, #12
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
 8003062:	e007      	b.n	8003074 <SDO_download+0xe8>
            }
            else
            {
               /* normal download */
               size = (etohl (coesdo->size) & 0xffff);
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	b29b      	uxth	r3, r3
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
               mbxdata = (&(coesdo->size)) + 1;
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	330c      	adds	r3, #12
 8003070:	3304      	adds	r3, #4
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
            }
            actsize = BITS2BYTES((objd + nsub)->bitlength);
 8003074:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	889b      	ldrh	r3, [r3, #4]
 8003088:	3307      	adds	r3, #7
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	617b      	str	r3, [r7, #20]
            if (actsize != size)
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	429a      	cmp	r2, r3
 8003094:	d042      	beq.n	800311c <SDO_download+0x190>
            {
               /* entries with data types VISIBLE_STRING, OCTET_STRING,
                * UNICODE_STRING, ARRAY_OF_INT, ARRAY_OF_SINT,
                * ARRAY_OF_DINT, and ARRAY_OF_UDINT may have flexible length
                */
               uint16_t type = (objd + nsub)->datatype;
 8003096:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	461a      	mov	r2, r3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	885b      	ldrh	r3, [r3, #2]
 80030aa:	827b      	strh	r3, [r7, #18]
               if (type == DTYPE_VISIBLE_STRING)
 80030ac:	8a7b      	ldrh	r3, [r7, #18]
 80030ae:	2b09      	cmp	r3, #9
 80030b0:	d113      	bne.n	80030da <SDO_download+0x14e>
               {
                  /* pad with zeroes up to the maximum size of the entry */
                  memset((objd + nsub)->data + size, 0, actsize - size);
 80030b2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	461a      	mov	r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	18d0      	adds	r0, r2, r3
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	2100      	movs	r1, #0
 80030d4:	f00a f8c7 	bl	800d266 <memset>
 80030d8:	e020      	b.n	800311c <SDO_download+0x190>
               }
               else if ((type != DTYPE_OCTET_STRING) &&
 80030da:	8a7b      	ldrh	r3, [r7, #18]
 80030dc:	2b0a      	cmp	r3, #10
 80030de:	d01d      	beq.n	800311c <SDO_download+0x190>
 80030e0:	8a7b      	ldrh	r3, [r7, #18]
 80030e2:	2b0b      	cmp	r3, #11
 80030e4:	d01a      	beq.n	800311c <SDO_download+0x190>
                        (type != DTYPE_UNICODE_STRING) &&
 80030e6:	8a7b      	ldrh	r3, [r7, #18]
 80030e8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80030ec:	d016      	beq.n	800311c <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_INT) &&
 80030ee:	8a7b      	ldrh	r3, [r7, #18]
 80030f0:	f240 2261 	movw	r2, #609	; 0x261
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d011      	beq.n	800311c <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_SINT) &&
 80030f8:	8a7b      	ldrh	r3, [r7, #18]
 80030fa:	f240 2262 	movw	r2, #610	; 0x262
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00c      	beq.n	800311c <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_DINT) &&
 8003102:	8a7b      	ldrh	r3, [r7, #18]
 8003104:	f240 2263 	movw	r2, #611	; 0x263
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_UDINT))
               {
                  set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800310c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003110:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003112:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <SDO_download+0x238>)
 8003114:	2000      	movs	r0, #0
 8003116:	f7ff f97b 	bl	8002410 <set_state_idle>
                  return;
 800311a:	e0ea      	b.n	80032f2 <SDO_download+0x366>
            abort = ESC_download_pre_objecthandler (
                  index,
                  subindex,
                  mbxdata,
                  size,
                  (objd + nsub)->flags
 800311c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	461a      	mov	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
            abort = ESC_download_pre_objecthandler (
 800312e:	88db      	ldrh	r3, [r3, #6]
 8003130:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003134:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313c:	f7fd fa22 	bl	8000584 <ESC_download_pre_objecthandler>
 8003140:	60f8      	str	r0, [r7, #12]
            );
            if (abort == 0)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 80a1 	bne.w	800328c <SDO_download+0x300>
            {
               if ((size > 4) &&
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	2b04      	cmp	r3, #4
 800314e:	d93b      	bls.n	80031c8 <SDO_download+0x23c>
                     (size > (coesdo->mbxheader.length - COE_HEADERSIZE)))
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	3b0a      	subs	r3, #10
               if ((size > 4) &&
 8003156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003158:	429a      	cmp	r2, r3
 800315a:	d935      	bls.n	80031c8 <SDO_download+0x23c>
               {
                  size = coesdo->mbxheader.length - COE_HEADERSIZE;
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	3b0a      	subs	r3, #10
 8003162:	637b      	str	r3, [r7, #52]	; 0x34
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSED;
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <SDO_download+0x234>)
 8003166:	2250      	movs	r2, #80	; 0x50
 8003168:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                  ESCvar.data = (objd + nsub)->data + size;
 800316c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	461a      	mov	r2, r3
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003182:	4413      	add	r3, r2
 8003184:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <SDO_download+0x234>)
 8003186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                  ESCvar.index = index;
 800318a:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <SDO_download+0x234>)
 800318c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800318e:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
                  ESCvar.subindex = subindex;
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <SDO_download+0x234>)
 8003194:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003198:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
                  ESCvar.flags = (objd + nsub)->flags;
 800319c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	461a      	mov	r2, r3
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	88da      	ldrh	r2, [r3, #6]
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <SDO_download+0x234>)
 80031b2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80031b6:	e00b      	b.n	80031d0 <SDO_download+0x244>
 80031b8:	20000124 	.word	0x20000124
 80031bc:	0800eab8 	.word	0x0800eab8
 80031c0:	20000350 	.word	0x20000350
 80031c4:	06070010 	.word	0x06070010
               }
               else
               {
                  ESCvar.segmented = 0;
 80031c8:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <SDO_download+0x36c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
               }
               copy2mbx (mbxdata, (objd + nsub)->data, size);
 80031d0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	461a      	mov	r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e6:	4619      	mov	r1, r3
 80031e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ea:	f7ff f8b9 	bl	8002360 <copy2mbx>
               MBXout = ESC_claimbuffer ();
 80031ee:	f7fd ff57 	bl	80010a0 <ESC_claimbuffer>
 80031f2:	4603      	mov	r3, r0
 80031f4:	72fb      	strb	r3, [r7, #11]
               if (MBXout)
 80031f6:	7afb      	ldrb	r3, [r7, #11]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d026      	beq.n	800324a <SDO_download+0x2be>
               {
                  coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80031fc:	7afb      	ldrb	r3, [r7, #11]
 80031fe:	4a3e      	ldr	r2, [pc, #248]	; (80032f8 <SDO_download+0x36c>)
 8003200:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <SDO_download+0x370>)
 8003208:	4413      	add	r3, r2
 800320a:	607b      	str	r3, [r7, #4]
                  coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	220a      	movs	r2, #10
 8003210:	801a      	strh	r2, [r3, #0]
                  coeres->mbxheader.mbxtype = MBXCOE;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	7953      	ldrb	r3, [r2, #5]
 8003216:	2103      	movs	r1, #3
 8003218:	f361 0303 	bfi	r3, r1, #0, #4
 800321c:	7153      	strb	r3, [r2, #5]
                  coeres->coeheader.numberservice =
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003224:	80da      	strh	r2, [r3, #6]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                  coeres->index = htoes (index);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800322a:	f8a3 2009 	strh.w	r2, [r3, #9]
                  coeres->subindex = subindex;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003234:	72da      	strb	r2, [r3, #11]
                  coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2260      	movs	r2, #96	; 0x60
 800323a:	721a      	strb	r2, [r3, #8]
                  coeres->size = htoel (0);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
                  MBXcontrol[MBXout].state = MBXstate_outreq;
 8003242:	7afb      	ldrb	r3, [r7, #11]
 8003244:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <SDO_download+0x374>)
 8003246:	2103      	movs	r1, #3
 8003248:	54d1      	strb	r1, [r2, r3]
               }
               if (ESCvar.segmented == 0)
 800324a:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <SDO_download+0x36c>)
 800324c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003250:	2b00      	cmp	r3, #0
 8003252:	d146      	bne.n	80032e2 <SDO_download+0x356>
               {
                  /* external object write handler */
                  abort = ESC_download_post_objecthandler (index, subindex, (objd + nsub)->flags);
 8003254:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	461a      	mov	r2, r3
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	88da      	ldrh	r2, [r3, #6]
 8003268:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800326c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f9d6 	bl	8000620 <ESC_download_post_objecthandler>
 8003274:	60f8      	str	r0, [r7, #12]
                  if (abort != 0)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d032      	beq.n	80032e2 <SDO_download+0x356>
                  {
                     SDO_abort (MBXout, index, subindex, abort);
 800327c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003280:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003282:	7af8      	ldrb	r0, [r7, #11]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f7ff f87b 	bl	8002380 <SDO_abort>
            if (abort == 0)
 800328a:	e02a      	b.n	80032e2 <SDO_download+0x356>
                  }
               }
            }
            else
            {
               SDO_abort (0, index, subindex, abort);
 800328c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003290:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2000      	movs	r0, #0
 8003296:	f7ff f873 	bl	8002380 <SDO_abort>
            if (abort == 0)
 800329a:	e022      	b.n	80032e2 <SDO_download+0x356>
            }
         }
         else
         {
            if (access == ATYPE_RO)
 800329c:	7efb      	ldrb	r3, [r7, #27]
 800329e:	2b07      	cmp	r3, #7
 80032a0:	d107      	bne.n	80032b2 <SDO_download+0x326>
            {
               SDO_abort (0, index, subindex, ABORT_READONLY);
 80032a2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80032a6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <SDO_download+0x378>)
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7ff f868 	bl	8002380 <SDO_abort>
 80032b0:	e018      	b.n	80032e4 <SDO_download+0x358>

            }
            else
            {
               SDO_abort (0, index, subindex, ABORT_NOTINTHISSTATE);
 80032b2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80032b6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <SDO_download+0x37c>)
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7ff f860 	bl	8002380 <SDO_abort>
 80032c0:	e010      	b.n	80032e4 <SDO_download+0x358>
            }
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 80032c2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80032c6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <SDO_download+0x380>)
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7ff f858 	bl	8002380 <SDO_abort>
 80032d0:	e008      	b.n	80032e4 <SDO_download+0x358>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 80032d2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80032d6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <SDO_download+0x384>)
 80032da:	2000      	movs	r0, #0
 80032dc:	f7ff f850 	bl	8002380 <SDO_abort>
 80032e0:	e000      	b.n	80032e4 <SDO_download+0x358>
            if (abort == 0)
 80032e2:	bf00      	nop
   }
   MBXcontrol[0].state = MBXstate_idle;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <SDO_download+0x374>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 80032ea:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <SDO_download+0x36c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 80032f2:	3738      	adds	r7, #56	; 0x38
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000350 	.word	0x20000350
 80032fc:	20000124 	.word	0x20000124
 8003300:	200002a4 	.word	0x200002a4
 8003304:	06010002 	.word	0x06010002
 8003308:	08000022 	.word	0x08000022
 800330c:	06090011 	.word	0x06090011
 8003310:	06020000 	.word	0x06020000

08003314 <SDO_download_complete_access>:
/** Function for handling incoming requested SDO Download with Complete Access,
 *  validating the request and sending a response. On error an SDO Abort will
 *  be sent.
 */
static void SDO_download_complete_access (void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	; 0x38
 8003318:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <SDO_download_complete_access+0x20c>)
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 800331e:	f107 0008 	add.w	r0, r7, #8
 8003322:	f107 020d 	add.w	r2, r7, #13
 8003326:	f107 010e 	add.w	r1, r7, #14
 800332a:	1dbb      	adds	r3, r7, #6
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	4603      	mov	r3, r0
 8003330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003332:	f7ff fa75 	bl	8002820 <complete_access_get_variables>
 8003336:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <SDO_download_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 800333e:	89f9      	ldrh	r1, [r7, #14]
 8003340:	7b7a      	ldrb	r2, [r7, #13]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2000      	movs	r0, #0
 8003346:	f7ff f863 	bl	8002410 <set_state_idle>
      return;
 800334a:	e0e6      	b.n	800351a <SDO_download_complete_access+0x206>
   }

   uint32_t bytes;
   uint32_t *mbxdata = &(coesdo->size);
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	330c      	adds	r3, #12
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28

   if (coesdo->command & COE_EXPEDITED_INDICATOR)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	7a1b      	ldrb	r3, [r3, #8]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <SDO_download_complete_access+0x5c>
   {
      /* expedited download */
      bytes = 4U - ((coesdo->command & 0x0CU) >> 2);
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	7a1b      	ldrb	r3, [r3, #8]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	f1c3 0304 	rsb	r3, r3, #4
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336e:	e006      	b.n	800337e <SDO_download_complete_access+0x6a>
   }
   else
   {
      /* normal download */
      bytes = (etohl (coesdo->size) & 0xffff);
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	b29b      	uxth	r3, r3
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
      mbxdata++;
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	3304      	adds	r3, #4
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a68      	ldr	r2, [pc, #416]	; (8003524 <SDO_download_complete_access+0x210>)
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	4413      	add	r3, r2
 8003386:	330c      	adds	r3, #12
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61fb      	str	r3, [r7, #28]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, DOWNLOAD, 0);
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003392:	2300      	movs	r3, #0
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	2301      	movs	r3, #1
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2300      	movs	r3, #0
 800339c:	69f8      	ldr	r0, [r7, #28]
 800339e:	f7ff fa83 	bl	80028a8 <complete_access_subindex_loop>
 80033a2:	61b8      	str	r0, [r7, #24]
   size = BITS2BYTES(size);
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3307      	adds	r3, #7
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	61bb      	str	r3, [r7, #24]
   if (size > 0xffff)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d306      	bcc.n	80033c2 <SDO_download_complete_access+0xae>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (0, index, subindex, size);
 80033b4:	89f9      	ldrh	r1, [r7, #14]
 80033b6:	7b7a      	ldrb	r2, [r7, #13]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7ff f828 	bl	8002410 <set_state_idle>
      return;
 80033c0:	e0ab      	b.n	800351a <SDO_download_complete_access+0x206>
    * "The SDO Download Complete Access data length shall always match
    * the full current object size (defined by SubIndex0)".
    * But EtherCAT Conformance Test Tool doesn't follow this rule for some test
    * cases, which is the reason to here only check for 'less than or equal'.
    */
   else if (bytes <= size)
 80033c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d87b      	bhi.n	80034c2 <SDO_download_complete_access+0x1ae>
   {
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 80033ca:	89f8      	ldrh	r0, [r7, #14]
 80033cc:	7b79      	ldrb	r1, [r7, #13]
            size, objd->flags | COMPLETE_ACCESS_FLAG);
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	88db      	ldrh	r3, [r3, #6]
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 80033d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033da:	b29b      	uxth	r3, r3
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e2:	f7fd f8cf 	bl	8000584 <ESC_download_pre_objecthandler>
 80033e6:	6238      	str	r0, [r7, #32]
      if (abortcode != 0)
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <SDO_download_complete_access+0xe8>
      {
         set_state_idle (0, index, subindex, abortcode);
 80033ee:	89f9      	ldrh	r1, [r7, #14]
 80033f0:	7b7a      	ldrb	r2, [r7, #13]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7ff f80b 	bl	8002410 <set_state_idle>
         return;
 80033fa:	e08e      	b.n	800351a <SDO_download_complete_access+0x206>
      }

      if ((bytes + COE_HEADERSIZE) > ESC_MBXDSIZE)
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	f103 020a 	add.w	r2, r3, #10
 8003402:	4b49      	ldr	r3, [pc, #292]	; (8003528 <SDO_download_complete_access+0x214>)
 8003404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003406:	3b06      	subs	r3, #6
 8003408:	429a      	cmp	r2, r3
 800340a:	d934      	bls.n	8003476 <SDO_download_complete_access+0x162>
      {
         /* check that download data fits in the preallocated buffer */
         if ((bytes + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	331e      	adds	r3, #30
 8003410:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003414:	d906      	bls.n	8003424 <SDO_download_complete_access+0x110>
         {
             set_state_idle(0, index, subindex, ABORT_CA_NOT_SUPPORTED);
 8003416:	89f9      	ldrh	r1, [r7, #14]
 8003418:	7b7a      	ldrb	r2, [r7, #13]
 800341a:	4b44      	ldr	r3, [pc, #272]	; (800352c <SDO_download_complete_access+0x218>)
 800341c:	2000      	movs	r0, #0
 800341e:	f7fe fff7 	bl	8002410 <set_state_idle>
             return;
 8003422:	e07a      	b.n	800351a <SDO_download_complete_access+0x206>
         }
         /* set total size in bytes */
         ESCvar.frags = bytes;
 8003424:	4a40      	ldr	r2, [pc, #256]	; (8003528 <SDO_download_complete_access+0x214>)
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800342c:	4b3e      	ldr	r3, [pc, #248]	; (8003528 <SDO_download_complete_access+0x214>)
 800342e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003430:	3b10      	subs	r3, #16
 8003432:	61bb      	str	r3, [r7, #24]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 8003434:	4a3c      	ldr	r2, [pc, #240]	; (8003528 <SDO_download_complete_access+0x214>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         ESCvar.segmented = MBXSED;
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <SDO_download_complete_access+0x214>)
 800343e:	2250      	movs	r2, #80	; 0x50
 8003440:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata + size;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <SDO_download_complete_access+0x21c>)
 8003448:	4413      	add	r3, r2
 800344a:	4a37      	ldr	r2, [pc, #220]	; (8003528 <SDO_download_complete_access+0x214>)
 800344c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
         ESCvar.index = index;
 8003450:	89fa      	ldrh	r2, [r7, #14]
 8003452:	4b35      	ldr	r3, [pc, #212]	; (8003528 <SDO_download_complete_access+0x214>)
 8003454:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
         ESCvar.subindex = subindex;
 8003458:	7b7a      	ldrb	r2, [r7, #13]
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <SDO_download_complete_access+0x214>)
 800345c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 8003460:	4b31      	ldr	r3, [pc, #196]	; (8003528 <SDO_download_complete_access+0x214>)
 8003462:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003466:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
         /* Store the data */
         copy2mbx (mbxdata, ESCvar.mbxdata, size);
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4930      	ldr	r1, [pc, #192]	; (8003530 <SDO_download_complete_access+0x21c>)
 800346e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003470:	f7fe ff76 	bl	8002360 <copy2mbx>
 8003474:	e02c      	b.n	80034d0 <SDO_download_complete_access+0x1bc>
      }
      else
      {
         ESCvar.segmented = 0;
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <SDO_download_complete_access+0x214>)
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         /* copy download data to subindexes */
         complete_access_subindex_loop(objd, nidx, nsub, (uint8_t *)mbxdata, DOWNLOAD, bytes);
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	2301      	movs	r3, #1
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	69f8      	ldr	r0, [r7, #28]
 8003490:	f7ff fa0a 	bl	80028a8 <complete_access_subindex_loop>

         abortcode = ESC_download_post_objecthandler(index, subindex,
 8003494:	89f8      	ldrh	r0, [r7, #14]
 8003496:	7b79      	ldrb	r1, [r7, #13]
               objd->flags | COMPLETE_ACCESS_FLAG);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	88db      	ldrh	r3, [r3, #6]
         abortcode = ESC_download_post_objecthandler(index, subindex,
 800349c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	f7fd f8ba 	bl	8000620 <ESC_download_post_objecthandler>
 80034ac:	6238      	str	r0, [r7, #32]
         if (abortcode != 0)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <SDO_download_complete_access+0x1bc>
         {
            set_state_idle (0, index, subindex, abortcode);
 80034b4:	89f9      	ldrh	r1, [r7, #14]
 80034b6:	7b7a      	ldrb	r2, [r7, #13]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fe ffa8 	bl	8002410 <set_state_idle>
            return;
 80034c0:	e02b      	b.n	800351a <SDO_download_complete_access+0x206>
         }
      }
   }
   else
   {
      set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 80034c2:	89f9      	ldrh	r1, [r7, #14]
 80034c4:	7b7a      	ldrb	r2, [r7, #13]
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <SDO_download_complete_access+0x220>)
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fe ffa1 	bl	8002410 <set_state_idle>
      return;
 80034ce:	e024      	b.n	800351a <SDO_download_complete_access+0x206>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 80034d0:	f7fd fde6 	bl	80010a0 <ESC_claimbuffer>
 80034d4:	4603      	mov	r3, r0
 80034d6:	75fb      	strb	r3, [r7, #23]
   if (MBXout > 0)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d017      	beq.n	800350e <SDO_download_complete_access+0x1fa>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	4a11      	ldr	r2, [pc, #68]	; (8003528 <SDO_download_complete_access+0x214>)
 80034e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <SDO_download_complete_access+0x20c>)
 80034ea:	4413      	add	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
      init_coesdo(coeres, COE_SDORESPONSE,
 80034ee:	89fa      	ldrh	r2, [r7, #14]
 80034f0:	7b7b      	ldrb	r3, [r7, #13]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	2270      	movs	r2, #112	; 0x70
 80034f8:	2103      	movs	r1, #3
 80034fa:	6938      	ldr	r0, [r7, #16]
 80034fc:	f7ff fb42 	bl	8002b84 <init_coesdo>
                  COE_COMMAND_DOWNLOADRESPONSE | COE_COMPLETEACCESS,
                  index, subindex);

      coeres->size = 0;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <SDO_download_complete_access+0x224>)
 800350a:	2103      	movs	r1, #3
 800350c:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (MBXout, index, subindex, 0);
 800350e:	89f9      	ldrh	r1, [r7, #14]
 8003510:	7b7a      	ldrb	r2, [r7, #13]
 8003512:	7df8      	ldrb	r0, [r7, #23]
 8003514:	2300      	movs	r3, #0
 8003516:	f7fe ff7b 	bl	8002410 <set_state_idle>
}
 800351a:	3730      	adds	r7, #48	; 0x30
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000124 	.word	0x20000124
 8003524:	0800eab8 	.word	0x0800eab8
 8003528:	20000350 	.word	0x20000350
 800352c:	06010004 	.word	0x06010004
 8003530:	2000043a 	.word	0x2000043a
 8003534:	06070010 	.word	0x06070010
 8003538:	200002a4 	.word	0x200002a4

0800353c <SDO_downloadsegment>:

static void SDO_downloadsegment (void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08c      	sub	sp, #48	; 0x30
 8003540:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 8003542:	4b6d      	ldr	r3, [pc, #436]	; (80036f8 <SDO_downloadsegment+0x1bc>)
 8003544:	623b      	str	r3, [r7, #32]
   uint8_t MBXout = ESC_claimbuffer ();
 8003546:	f7fd fdab 	bl	80010a0 <ESC_claimbuffer>
 800354a:	4603      	mov	r3, r0
 800354c:	77fb      	strb	r3, [r7, #31]
   if (MBXout)
 800354e:	7ffb      	ldrb	r3, [r7, #31]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80c7 	beq.w	80036e4 <SDO_downloadsegment+0x1a8>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	4a68      	ldr	r2, [pc, #416]	; (80036fc <SDO_downloadsegment+0x1c0>)
 800355a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	4a65      	ldr	r2, [pc, #404]	; (80036f8 <SDO_downloadsegment+0x1bc>)
 8003562:	4413      	add	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
      uint32_t size = coesdo->mbxheader.length - 3U;
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	3b03      	subs	r3, #3
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
      if (size == 7)
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	2b07      	cmp	r3, #7
 8003572:	d107      	bne.n	8003584 <SDO_downloadsegment+0x48>
      {
         size = 7 - ((coesdo->command >> 1) & 7);
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	7a1b      	ldrb	r3, [r3, #8]
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
      }
      uint8_t command = COE_COMMAND_DOWNLOADSEGRESP;
 8003584:	2320      	movs	r3, #32
 8003586:	75fb      	strb	r3, [r7, #23]
      uint8_t command2 = (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	7a1b      	ldrb	r3, [r3, #8]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	75bb      	strb	r3, [r7, #22]
      command |= command2;
 8003592:	7dfa      	ldrb	r2, [r7, #23]
 8003594:	7dbb      	ldrb	r3, [r7, #22]
 8003596:	4313      	orrs	r3, r2
 8003598:	75fb      	strb	r3, [r7, #23]
      init_coesdo(coeres, COE_SDORESPONSE, command, 0, 0);
 800359a:	7dfa      	ldrb	r2, [r7, #23]
 800359c:	2300      	movs	r3, #0
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	2103      	movs	r1, #3
 80035a4:	69b8      	ldr	r0, [r7, #24]
 80035a6:	f7ff faed 	bl	8002b84 <init_coesdo>

      void *mbxdata = &(coesdo->index);  /* data pointer */
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	3309      	adds	r3, #9
 80035ae:	613b      	str	r3, [r7, #16]
      copy2mbx (mbxdata, ESCvar.data, size);
 80035b0:	4b52      	ldr	r3, [pc, #328]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80035b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	4619      	mov	r1, r3
 80035ba:	6938      	ldr	r0, [r7, #16]
 80035bc:	f7fe fed0 	bl	8002360 <copy2mbx>

      if (coesdo->command & COE_COMMAND_LASTSEGMENTBIT)
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	7a1b      	ldrb	r3, [r3, #8]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d077      	beq.n	80036bc <SDO_downloadsegment+0x180>
      {
         if(ESCvar.flags == COMPLETE_ACCESS_FLAG)
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80035ce:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d6:	d14a      	bne.n	800366e <SDO_downloadsegment+0x132>
         {
            int32_t nidx;
            int16_t nsub;

            if(ESCvar.frags > ESCvar.fragsleft + size)
 80035d8:	4b48      	ldr	r3, [pc, #288]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80035da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80035e0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	440b      	add	r3, r1
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d90a      	bls.n	8003602 <SDO_downloadsegment+0xc6>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_TYPEMISMATCH);
 80035ec:	4b43      	ldr	r3, [pc, #268]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80035ee:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 80035f2:	4b42      	ldr	r3, [pc, #264]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80035f4:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 80035f8:	4b41      	ldr	r3, [pc, #260]	; (8003700 <SDO_downloadsegment+0x1c4>)
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fe ff08 	bl	8002410 <set_state_idle>
               return;
 8003600:	e076      	b.n	80036f0 <SDO_downloadsegment+0x1b4>
            }

            nidx = SDO_findobject(ESCvar.index);
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003604:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe fd2d 	bl	8002068 <SDO_findobject>
 800360e:	60f8      	str	r0, [r7, #12]
            nsub = SDO_findsubindex (nidx, ESCvar.subindex);
 8003610:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003612:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8003616:	4619      	mov	r1, r3
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7fe fcc7 	bl	8001fac <SDO_findsubindex>
 800361e:	4603      	mov	r3, r0
 8003620:	817b      	strh	r3, [r7, #10]

            if ((nidx < 0) || (nsub < 0))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db03      	blt.n	8003630 <SDO_downloadsegment+0xf4>
 8003628:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800362c:	2b00      	cmp	r3, #0
 800362e:	da0a      	bge.n	8003646 <SDO_downloadsegment+0x10a>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_NOOBJECT);
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003632:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 8003636:	4b31      	ldr	r3, [pc, #196]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003638:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <SDO_downloadsegment+0x1c8>)
 800363e:	2000      	movs	r0, #0
 8003640:	f7fe fee6 	bl	8002410 <set_state_idle>
               return;
 8003644:	e054      	b.n	80036f0 <SDO_downloadsegment+0x1b4>
            }

            /* copy download data to subindexes */
            const _objd *objd = SDOobjects[nidx].objdesc;
 8003646:	4a30      	ldr	r2, [pc, #192]	; (8003708 <SDO_downloadsegment+0x1cc>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	4413      	add	r3, r2
 800364e:	330c      	adds	r3, #12
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	607b      	str	r3, [r7, #4]
            complete_access_subindex_loop(objd,
 8003654:	4b29      	ldr	r3, [pc, #164]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800365a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	2301      	movs	r3, #1
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <SDO_downloadsegment+0x1d0>)
 8003666:	68f9      	ldr	r1, [r7, #12]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff f91d 	bl	80028a8 <complete_access_subindex_loop>
                  DOWNLOAD,
                  ESCvar.frags);

         }
         /* last segment */
         ESCvar.segmented = 0;
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 8003676:	4b21      	ldr	r3, [pc, #132]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003678:	2200      	movs	r2, #0
 800367a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 800367e:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003680:	2200      	movs	r2, #0
 8003682:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         /* external object write handler */
         uint32_t abort = ESC_download_post_objecthandler
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003688:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800368c:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <SDO_downloadsegment+0x1c0>)
 800368e:	f892 10a6 	ldrb.w	r1, [r2, #166]	; 0xa6
 8003692:	4a1a      	ldr	r2, [pc, #104]	; (80036fc <SDO_downloadsegment+0x1c0>)
 8003694:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 8003698:	4618      	mov	r0, r3
 800369a:	f7fc ffc1 	bl	8000620 <ESC_download_post_objecthandler>
 800369e:	6038      	str	r0, [r7, #0]
               (ESCvar.index, ESCvar.subindex, ESCvar.flags);
         if (abort != 0)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01a      	beq.n	80036dc <SDO_downloadsegment+0x1a0>
         {
            set_state_idle (MBXout, ESCvar.index, ESCvar.subindex, abort);
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80036a8:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80036ae:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 80036b2:	7ff8      	ldrb	r0, [r7, #31]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f7fe feab 	bl	8002410 <set_state_idle>
            return;
 80036ba:	e019      	b.n	80036f0 <SDO_downloadsegment+0x1b4>
         }
      }
      else
      {
         /* more segmented transfer needed: increase offset */
         ESCvar.data += size;
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80036be:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	4413      	add	r3, r2
 80036c6:	4a0d      	ldr	r2, [pc, #52]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80036c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
         /* number of bytes done */
         ESCvar.fragsleft += size;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80036ce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	4413      	add	r3, r2
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <SDO_downloadsegment+0x1c0>)
 80036d8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 80036dc:	7ffb      	ldrb	r3, [r7, #31]
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <SDO_downloadsegment+0x1d4>)
 80036e0:	2103      	movs	r1, #3
 80036e2:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (0, 0, 0, 0);
 80036e4:	2300      	movs	r3, #0
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7fe fe90 	bl	8002410 <set_state_idle>
}
 80036f0:	3728      	adds	r7, #40	; 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000124 	.word	0x20000124
 80036fc:	20000350 	.word	0x20000350
 8003700:	06070010 	.word	0x06070010
 8003704:	06020000 	.word	0x06020000
 8003708:	0800eab8 	.word	0x0800eab8
 800370c:	2000043a 	.word	0x2000043a
 8003710:	200002a4 	.word	0x200002a4

08003714 <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
static void SDO_infoerror (uint32_t abortcode)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 800371c:	f7fd fcc0 	bl	80010a0 <ESC_claimbuffer>
 8003720:	4603      	mov	r3, r0
 8003722:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d039      	beq.n	800379e <SDO_infoerror+0x8a>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <SDO_infoerror+0x94>)
 800372e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <SDO_infoerror+0x98>)
 8003736:	4413      	add	r3, r2
 8003738:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_HEADERSIZE);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	220a      	movs	r2, #10
 800373e:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	7953      	ldrb	r3, [r2, #5]
 8003744:	2103      	movs	r1, #3
 8003746:	f361 0303 	bfi	r3, r1, #0, #4
 800374a:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003752:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	7a13      	ldrb	r3, [r2, #8]
 8003758:	2107      	movs	r1, #7
 800375a:	f361 0306 	bfi	r3, r1, #0, #7
 800375e:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	7a13      	ldrb	r3, [r2, #8]
 8003764:	f36f 13c7 	bfc	r3, #7, #1
 8003768:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	815a      	strh	r2, [r3, #10]
      coeres->index = (uint16_t)htoel (abortcode);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	b29a      	uxth	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	819a      	strh	r2, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	b29a      	uxth	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	81da      	strh	r2, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <SDO_infoerror+0x9c>)
 800378c:	2103      	movs	r1, #3
 800378e:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <SDO_infoerror+0x9c>)
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <SDO_infoerror+0x94>)
 8003798:	2200      	movs	r2, #0
 800379a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000350 	.word	0x20000350
 80037ac:	20000124 	.word	0x20000124
 80037b0:	200002a4 	.word	0x200002a4

080037b4 <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
static void SDO_getodlist (void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
   uint32_t frags;
   uint8_t MBXout = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 80037c2:	e002      	b.n	80037ca <SDO_getodlist+0x16>
   {
      entries++;
 80037c4:	8abb      	ldrh	r3, [r7, #20]
 80037c6:	3301      	adds	r3, #1
 80037c8:	82bb      	strh	r3, [r7, #20]
   while (SDOobjects[entries].index != 0xffff)
 80037ca:	8abb      	ldrh	r3, [r7, #20]
 80037cc:	4a7a      	ldr	r2, [pc, #488]	; (80039b8 <SDO_getodlist+0x204>)
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037d8:	4293      	cmp	r3, r2
 80037da:	d1f3      	bne.n	80037c4 <SDO_getodlist+0x10>
   }
   ESCvar.entries = entries;
 80037dc:	4a77      	ldr	r2, [pc, #476]	; (80039bc <SDO_getodlist+0x208>)
 80037de:	8abb      	ldrh	r3, [r7, #20]
 80037e0:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
   frags = ((uint32_t)(entries << 1) + ODLISTSIZE - 1U);
 80037e4:	8abb      	ldrh	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4619      	mov	r1, r3
 80037ea:	4b74      	ldr	r3, [pc, #464]	; (80039bc <SDO_getodlist+0x208>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	885b      	ldrh	r3, [r3, #2]
 80037f0:	f1a3 020e 	sub.w	r2, r3, #14
 80037f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80037f8:	4013      	ands	r3, r2
 80037fa:	440b      	add	r3, r1
 80037fc:	3b01      	subs	r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
   frags /= ODLISTSIZE;
 8003800:	4b6e      	ldr	r3, [pc, #440]	; (80039bc <SDO_getodlist+0x208>)
 8003802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003804:	885b      	ldrh	r3, [r3, #2]
 8003806:	f1a3 020e 	sub.w	r2, r3, #14
 800380a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800380e:	4013      	ands	r3, r2
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	60bb      	str	r3, [r7, #8]
   coer = (_COEobjdesc *) &MBX[0];
 8003818:	4b69      	ldr	r3, [pc, #420]	; (80039c0 <SDO_getodlist+0x20c>)
 800381a:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	899b      	ldrh	r3, [r3, #12]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d903      	bls.n	800382c <SDO_getodlist+0x78>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 8003824:	4867      	ldr	r0, [pc, #412]	; (80039c4 <SDO_getodlist+0x210>)
 8003826:	f7ff ff75 	bl	8003714 <SDO_infoerror>
 800382a:	e003      	b.n	8003834 <SDO_getodlist+0x80>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 800382c:	f7fd fc38 	bl	80010a0 <ESC_claimbuffer>
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80ba 	beq.w	80039b0 <SDO_getodlist+0x1fc>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	4a5f      	ldr	r2, [pc, #380]	; (80039bc <SDO_getodlist+0x208>)
 8003840:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	4a5e      	ldr	r2, [pc, #376]	; (80039c0 <SDO_getodlist+0x20c>)
 8003848:	4413      	add	r3, r2
 800384a:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	7953      	ldrb	r3, [r2, #5]
 8003850:	2103      	movs	r1, #3
 8003852:	f361 0303 	bfi	r3, r1, #0, #4
 8003856:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800385e:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	7a13      	ldrb	r3, [r2, #8]
 8003864:	2102      	movs	r1, #2
 8003866:	f361 0306 	bfi	r3, r1, #0, #7
 800386a:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	899b      	ldrh	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d13e      	bne.n	80038f2 <SDO_getodlist+0x13e>
      {
         coel->index = htoes (0x00);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	819a      	strh	r2, [r3, #12]
         coel->infoheader.incomplete = 0;
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	7a13      	ldrb	r3, [r2, #8]
 800387e:	f36f 13c7 	bfc	r3, #7, #1
 8003882:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2200      	movs	r2, #0
 8003888:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2200      	movs	r2, #0
 800388e:	815a      	strh	r2, [r3, #10]
         MBXcontrol[0].state = MBXstate_idle;
 8003890:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <SDO_getodlist+0x214>)
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8003896:	4b49      	ldr	r3, [pc, #292]	; (80039bc <SDO_getodlist+0x208>)
 8003898:	2200      	movs	r2, #0
 800389a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         ESCvar.frags = frags;
 800389e:	4a47      	ldr	r2, [pc, #284]	; (80039bc <SDO_getodlist+0x208>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	4a44      	ldr	r2, [pc, #272]	; (80039bc <SDO_getodlist+0x208>)
 80038ac:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         p = &(coel->datatype);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	330e      	adds	r3, #14
 80038b4:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8aba      	ldrh	r2, [r7, #20]
 80038ba:	801a      	strh	r2, [r3, #0]
         p++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3302      	adds	r3, #2
 80038c0:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	801a      	strh	r2, [r3, #0]
         p++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3302      	adds	r3, #2
 80038cc:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	801a      	strh	r2, [r3, #0]
         p++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3302      	adds	r3, #2
 80038d8:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	801a      	strh	r2, [r3, #0]
         p++;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3302      	adds	r3, #2
 80038e4:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2212      	movs	r2, #18
 80038f0:	801a      	strh	r2, [r3, #0]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	899b      	ldrh	r3, [r3, #12]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d156      	bne.n	80039a8 <SDO_getodlist+0x1f4>
      {
         if (frags > 1)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d912      	bls.n	8003926 <SDO_getodlist+0x172>
         {
            coel->infoheader.incomplete = 1;
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	7a13      	ldrb	r3, [r2, #8]
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <SDO_getodlist+0x208>)
 800390c:	2213      	movs	r2, #19
 800390e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
            n = ODLISTSIZE >> 1;
 8003912:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <SDO_getodlist+0x208>)
 8003914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003916:	885b      	ldrh	r3, [r3, #2]
 8003918:	3b0e      	subs	r3, #14
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	b29b      	uxth	r3, r3
 800391e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003922:	823b      	strh	r3, [r7, #16]
 8003924:	e00d      	b.n	8003942 <SDO_getodlist+0x18e>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	7a13      	ldrb	r3, [r2, #8]
 800392a:	f36f 13c7 	bfc	r3, #7, #1
 800392e:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <SDO_getodlist+0x214>)
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <SDO_getodlist+0x208>)
 8003938:	2200      	movs	r2, #0
 800393a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
            n = entries;
 800393e:	8abb      	ldrh	r3, [r7, #20]
 8003940:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 8003948:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <SDO_getodlist+0x208>)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3b01      	subs	r3, #1
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <SDO_getodlist+0x208>)
 8003956:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <SDO_getodlist+0x208>)
 800395c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003960:	b29a      	uxth	r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (0x01);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	819a      	strh	r2, [r3, #12]

         p = &(coel->datatype);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	330e      	adds	r3, #14
 8003970:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8003972:	2300      	movs	r3, #0
 8003974:	827b      	strh	r3, [r7, #18]
 8003976:	e00c      	b.n	8003992 <SDO_getodlist+0x1de>
         {
            *p = htoes (SDOobjects[i].index);
 8003978:	8a7b      	ldrh	r3, [r7, #18]
 800397a:	4a0f      	ldr	r2, [pc, #60]	; (80039b8 <SDO_getodlist+0x204>)
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	4413      	add	r3, r2
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	801a      	strh	r2, [r3, #0]
            p++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3302      	adds	r3, #2
 800398a:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 800398c:	8a7b      	ldrh	r3, [r7, #18]
 800398e:	3301      	adds	r3, #1
 8003990:	827b      	strh	r3, [r7, #18]
 8003992:	8a7a      	ldrh	r2, [r7, #18]
 8003994:	8a3b      	ldrh	r3, [r7, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	d3ee      	bcc.n	8003978 <SDO_getodlist+0x1c4>
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 800399a:	8a3b      	ldrh	r3, [r7, #16]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3308      	adds	r3, #8
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <SDO_getodlist+0x214>)
 80039ac:	2103      	movs	r1, #3
 80039ae:	54d1      	strb	r1, [r2, r3]
   }
}
 80039b0:	bf00      	nop
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	0800eab8 	.word	0x0800eab8
 80039bc:	20000350 	.word	0x20000350
 80039c0:	20000124 	.word	0x20000124
 80039c4:	06010000 	.word	0x06010000
 80039c8:	200002a4 	.word	0x200002a4

080039cc <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 */
static void SDO_getodlistcont (void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 80039d2:	f7fd fb65 	bl	80010a0 <ESC_claimbuffer>
 80039d6:	4603      	mov	r3, r0
 80039d8:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8088 	beq.w	8003af2 <SDO_getodlistcont+0x126>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	4a45      	ldr	r2, [pc, #276]	; (8003afc <SDO_getodlistcont+0x130>)
 80039e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	4a44      	ldr	r2, [pc, #272]	; (8003b00 <SDO_getodlistcont+0x134>)
 80039ee:	4413      	add	r3, r2
 80039f0:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	7953      	ldrb	r3, [r2, #5]
 80039f6:	2103      	movs	r1, #3
 80039f8:	f361 0303 	bfi	r3, r1, #0, #4
 80039fc:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a04:	80da      	strh	r2, [r3, #6]
         htoes (COE_SDOINFORMATION << 12);
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	7a13      	ldrb	r3, [r2, #8]
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	f361 0306 	bfi	r3, r1, #0, #7
 8003a10:	7213      	strb	r3, [r2, #8]
      s = (uint16_t)((ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1));
 8003a12:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a14:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a18:	4b38      	ldr	r3, [pc, #224]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	885b      	ldrh	r3, [r3, #2]
 8003a28:	3b0e      	subs	r3, #14
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	fb12 f303 	smulbb	r3, r2, r3
 8003a38:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 8003a3a:	4b30      	ldr	r3, [pc, #192]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d911      	bls.n	8003a68 <SDO_getodlistcont+0x9c>
      {
         coel->infoheader.incomplete = 1;
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	7a13      	ldrb	r3, [r2, #8]
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	7213      	strb	r3, [r2, #8]
         n = (uint16_t)(s + (ODLISTSIZE >> 1));
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a52:	885b      	ldrh	r3, [r3, #2]
 8003a54:	3b0e      	subs	r3, #14
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	4413      	add	r3, r2
 8003a64:	82bb      	strh	r3, [r7, #20]
 8003a66:	e00f      	b.n	8003a88 <SDO_getodlistcont+0xbc>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	7a13      	ldrb	r3, [r2, #8]
 8003a6c:	f36f 13c7 	bfc	r3, #7, #1
 8003a70:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 8003a72:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <SDO_getodlistcont+0x138>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8003a78:	4b20      	ldr	r3, [pc, #128]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         n = ESCvar.entries;
 8003a80:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a82:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8003a86:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a94:	3b01      	subs	r3, #1
 8003a96:	4a19      	ldr	r2, [pc, #100]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a98:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      coel->infoheader.fragmentsleft = htoes ((uint16_t)ESCvar.fragsleft);
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <SDO_getodlistcont+0x130>)
 8003a9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	82fb      	strh	r3, [r7, #22]
 8003ab2:	e00c      	b.n	8003ace <SDO_getodlistcont+0x102>
      {
         *p = htoes (SDOobjects[i].index);
 8003ab4:	8afb      	ldrh	r3, [r7, #22]
 8003ab6:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <SDO_getodlistcont+0x13c>)
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	4413      	add	r3, r2
 8003abc:	881a      	ldrh	r2, [r3, #0]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	801a      	strh	r2, [r3, #0]
         p++;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8003ac8:	8afb      	ldrh	r3, [r7, #22]
 8003aca:	3301      	adds	r3, #1
 8003acc:	82fb      	strh	r3, [r7, #22]
 8003ace:	8afa      	ldrh	r2, [r7, #22]
 8003ad0:	8abb      	ldrh	r3, [r7, #20]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3ee      	bcc.n	8003ab4 <SDO_getodlistcont+0xe8>
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 8003ad6:	8aba      	ldrh	r2, [r7, #20]
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3306      	adds	r3, #6
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <SDO_getodlistcont+0x138>)
 8003aee:	2103      	movs	r1, #3
 8003af0:	54d1      	strb	r1, [r2, r3]
   }
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000350 	.word	0x20000350
 8003b00:	20000124 	.word	0x20000124
 8003b04:	200002a4 	.word	0x200002a4
 8003b08:	0800eab8 	.word	0x0800eab8

08003b0c <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_getod (void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08c      	sub	sp, #48	; 0x30
 8003b10:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 8003b18:	4b74      	ldr	r3, [pc, #464]	; (8003cec <SDO_getod+0x1e0>)
 8003b1a:	623b      	str	r3, [r7, #32]
   index = etohs (coer->index);
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	899b      	ldrh	r3, [r3, #12]
 8003b20:	83fb      	strh	r3, [r7, #30]
   nidx = SDO_findobject (index);
 8003b22:	8bfb      	ldrh	r3, [r7, #30]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fa9f 	bl	8002068 <SDO_findobject>
 8003b2a:	61b8      	str	r0, [r7, #24]
   if (nidx >= 0)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f2c0 80d4 	blt.w	8003cdc <SDO_getod+0x1d0>
   {
      MBXout = ESC_claimbuffer ();
 8003b34:	f7fd fab4 	bl	80010a0 <ESC_claimbuffer>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	75fb      	strb	r3, [r7, #23]
      if (MBXout)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80cf 	beq.w	8003ce2 <SDO_getod+0x1d6>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	4a6a      	ldr	r2, [pc, #424]	; (8003cf0 <SDO_getod+0x1e4>)
 8003b48:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	4a67      	ldr	r2, [pc, #412]	; (8003cec <SDO_getod+0x1e0>)
 8003b50:	4413      	add	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
         coel->mbxheader.mbxtype = MBXCOE;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	7953      	ldrb	r3, [r2, #5]
 8003b58:	2103      	movs	r1, #3
 8003b5a:	f361 0303 	bfi	r3, r1, #0, #4
 8003b5e:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b66:	80da      	strh	r2, [r3, #6]
            htoes (COE_SDOINFORMATION << 12);
         coel->infoheader.opcode = COE_GETODRESPONSE;
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	7a13      	ldrb	r3, [r2, #8]
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	f361 0306 	bfi	r3, r1, #0, #7
 8003b72:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	7a13      	ldrb	r3, [r2, #8]
 8003b78:	f36f 13c7 	bfc	r3, #7, #1
 8003b7c:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2200      	movs	r2, #0
 8003b82:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2200      	movs	r2, #0
 8003b88:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (index);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	8bfa      	ldrh	r2, [r7, #30]
 8003b8e:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 8003b90:	4a58      	ldr	r2, [pc, #352]	; (8003cf4 <SDO_getod+0x1e8>)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4413      	add	r3, r2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	2b07      	cmp	r3, #7
 8003b9e:	d120      	bne.n	8003be2 <SDO_getod+0xd6>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	69b8      	ldr	r0, [r7, #24]
 8003ba4:	f7fe fa02 	bl	8001fac <SDO_findsubindex>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8003bac:	4a51      	ldr	r2, [pc, #324]	; (8003cf4 <SDO_getod+0x1e8>)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	4413      	add	r3, r2
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	4413      	add	r3, r2
 8003bca:	885a      	ldrh	r2, [r3, #2]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 8003bd0:	4a48      	ldr	r2, [pc, #288]	; (8003cf4 <SDO_getod+0x1e8>)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	741a      	strb	r2, [r3, #16]
 8003be0:	e037      	b.n	8003c52 <SDO_getod+0x146>
         }
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 8003be2:	4a44      	ldr	r2, [pc, #272]	; (8003cf4 <SDO_getod+0x1e8>)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	4413      	add	r3, r2
 8003bea:	3302      	adds	r3, #2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d122      	bne.n	8003c38 <SDO_getod+0x12c>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	69b8      	ldr	r0, [r7, #24]
 8003bf6:	f7fe f9d9 	bl	8001fac <SDO_findsubindex>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	60fb      	str	r3, [r7, #12]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8003bfe:	4a3d      	ldr	r2, [pc, #244]	; (8003cf4 <SDO_getod+0x1e8>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	330c      	adds	r3, #12
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60bb      	str	r3, [r7, #8]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	885a      	ldrh	r2, [r3, #2]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 8003c22:	4a34      	ldr	r2, [pc, #208]	; (8003cf4 <SDO_getod+0x1e8>)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	4413      	add	r3, r2
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	741a      	strb	r2, [r3, #16]
 8003c36:	e00c      	b.n	8003c52 <SDO_getod+0x146>
         }
         else
         {
            coel->datatype = htoes (0);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <SDO_getod+0x1e8>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	4413      	add	r3, r2
 8003c46:	330c      	adds	r3, #12
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	741a      	strb	r2, [r3, #16]
         }
         coel->objectcode = (uint8_t)SDOobjects[nidx].objtype;
 8003c52:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <SDO_getod+0x1e8>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 8003c64:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <SDO_getod+0x1e8>)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
         d = (uint8_t *) &(coel->name);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3312      	adds	r3, #18
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8003c78:	e00e      	b.n	8003c98 <SDO_getod+0x18c>
         {
            *d = *s;
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	701a      	strb	r2, [r3, #0]
            n++;
 8003c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c86:	3301      	adds	r3, #1
 8003c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            s++;
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	3301      	adds	r3, #1
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
            d++;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	3301      	adds	r3, #1
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d006      	beq.n	8003cae <SDO_getod+0x1a2>
 8003ca0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <SDO_getod+0x1e4>)
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	3b12      	subs	r3, #18
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3e5      	bcc.n	8003c7a <SDO_getod+0x16e>
         }
         *d = *s;
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x0C + n);
 8003cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <SDO_getod+0x1ec>)
 8003cc8:	2103      	movs	r1, #3
 8003cca:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <SDO_getod+0x1ec>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <SDO_getod+0x1e4>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8003cda:	e002      	b.n	8003ce2 <SDO_getod+0x1d6>
      SDO_infoerror (ABORT_NOOBJECT);
 8003cdc:	4807      	ldr	r0, [pc, #28]	; (8003cfc <SDO_getod+0x1f0>)
 8003cde:	f7ff fd19 	bl	8003714 <SDO_infoerror>
}
 8003ce2:	bf00      	nop
 8003ce4:	3730      	adds	r7, #48	; 0x30
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000124 	.word	0x20000124
 8003cf0:	20000350 	.word	0x20000350
 8003cf4:	0800eab8 	.word	0x0800eab8
 8003cf8:	200002a4 	.word	0x200002a4
 8003cfc:	06020000 	.word	0x06020000

08003d00 <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_geted (void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	; 0x28
 8003d04:	af00      	add	r7, sp, #0
   int16_t nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <SDO_geted+0x1a0>)
 8003d0c:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	7b1a      	ldrb	r2, [r3, #12]
 8003d12:	7b5b      	ldrb	r3, [r3, #13]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	4313      	orrs	r3, r2
 8003d18:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	7b9b      	ldrb	r3, [r3, #14]
 8003d1e:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 8003d20:	8afb      	ldrh	r3, [r7, #22]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe f9a0 	bl	8002068 <SDO_findobject>
 8003d28:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f2c0 80b0 	blt.w	8003e92 <SDO_geted+0x192>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8003d32:	7d7b      	ldrb	r3, [r7, #21]
 8003d34:	4619      	mov	r1, r3
 8003d36:	6938      	ldr	r0, [r7, #16]
 8003d38:	f7fe f938 	bl	8001fac <SDO_findsubindex>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	81fb      	strh	r3, [r7, #14]
      if (nsub >= 0)
 8003d40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f2c0 80a0 	blt.w	8003e8a <SDO_geted+0x18a>
      {
         objd = SDOobjects[nidx].objdesc;
 8003d4a:	4a56      	ldr	r2, [pc, #344]	; (8003ea4 <SDO_geted+0x1a4>)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	4413      	add	r3, r2
 8003d52:	330c      	adds	r3, #12
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 8003d58:	f7fd f9a2 	bl	80010a0 <ESC_claimbuffer>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8098 	beq.w	8003e98 <SDO_geted+0x198>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	4a4f      	ldr	r2, [pc, #316]	; (8003ea8 <SDO_geted+0x1a8>)
 8003d6c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	4a4b      	ldr	r2, [pc, #300]	; (8003ea0 <SDO_geted+0x1a0>)
 8003d74:	4413      	add	r3, r2
 8003d76:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	7953      	ldrb	r3, [r2, #5]
 8003d7c:	2103      	movs	r1, #3
 8003d7e:	f361 0303 	bfi	r3, r1, #0, #4
 8003d82:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	719a      	strb	r2, [r3, #6]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d90:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	7a13      	ldrb	r3, [r2, #8]
 8003d96:	2106      	movs	r1, #6
 8003d98:	f361 0306 	bfi	r3, r1, #0, #7
 8003d9c:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	7a13      	ldrb	r3, [r2, #8]
 8003da2:	f36f 13c7 	bfc	r3, #7, #1
 8003da6:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes (0);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	729a      	strb	r2, [r3, #10]
 8003db4:	2200      	movs	r2, #0
 8003db6:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	8afa      	ldrh	r2, [r7, #22]
 8003dbc:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	7d7a      	ldrb	r2, [r7, #21]
 8003dc2:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2207      	movs	r2, #7
 8003dc8:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 8003dca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4413      	add	r3, r2
 8003ddc:	885a      	ldrh	r2, [r3, #2]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 8003de2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	461a      	mov	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4413      	add	r3, r2
 8003df4:	889a      	ldrh	r2, [r3, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->flags);
 8003dfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	461a      	mov	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	88da      	ldrh	r2, [r3, #6]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 8003e12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4413      	add	r3, r2
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	3316      	adds	r3, #22
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8003e2e:	e00c      	b.n	8003e4a <SDO_geted+0x14a>
            {
               *d = *s;
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	701a      	strb	r2, [r3, #0]
               n++;
 8003e38:	7ffb      	ldrb	r3, [r7, #31]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	77fb      	strb	r3, [r7, #31]
               s++;
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	3301      	adds	r3, #1
 8003e42:	623b      	str	r3, [r7, #32]
               d++;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	3301      	adds	r3, #1
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <SDO_geted+0x15e>
 8003e52:	7ffa      	ldrb	r2, [r7, #31]
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <SDO_geted+0x1a8>)
 8003e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e58:	3b16      	subs	r3, #22
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3e8      	bcc.n	8003e30 <SDO_geted+0x130>
            }
            *d = *s;
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes (0x10 + n);
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3310      	adds	r3, #16
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <SDO_geted+0x1ac>)
 8003e76:	2103      	movs	r1, #3
 8003e78:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <SDO_geted+0x1ac>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <SDO_geted+0x1a8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8003e88:	e006      	b.n	8003e98 <SDO_geted+0x198>
         SDO_infoerror (ABORT_NOSUBINDEX);
 8003e8a:	4809      	ldr	r0, [pc, #36]	; (8003eb0 <SDO_geted+0x1b0>)
 8003e8c:	f7ff fc42 	bl	8003714 <SDO_infoerror>
}
 8003e90:	e002      	b.n	8003e98 <SDO_geted+0x198>
      SDO_infoerror (ABORT_NOOBJECT);
 8003e92:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <SDO_geted+0x1b4>)
 8003e94:	f7ff fc3e 	bl	8003714 <SDO_infoerror>
}
 8003e98:	bf00      	nop
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000124 	.word	0x20000124
 8003ea4:	0800eab8 	.word	0x0800eab8
 8003ea8:	20000350 	.word	0x20000350
 8003eac:	200002a4 	.word	0x200002a4
 8003eb0:	06090011 	.word	0x06090011
 8003eb4:	06020000 	.word	0x06020000

08003eb8 <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint16_t service;
   if (ESCvar.MBXrun == 0)
 8003ebe:	4b67      	ldr	r3, [pc, #412]	; (800405c <ESC_coeprocess+0x1a4>)
 8003ec0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80c4 	beq.w	8004052 <ESC_coeprocess+0x19a>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 8003eca:	4b64      	ldr	r3, [pc, #400]	; (800405c <ESC_coeprocess+0x1a4>)
 8003ecc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d119      	bne.n	8003f08 <ESC_coeprocess+0x50>
 8003ed4:	4b62      	ldr	r3, [pc, #392]	; (8004060 <ESC_coeprocess+0x1a8>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d115      	bne.n	8003f08 <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <ESC_coeprocess+0x1ac>)
 8003ede:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	795b      	ldrb	r3, [r3, #5]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d10c      	bne.n	8003f08 <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b07      	cmp	r3, #7
 8003ef6:	d803      	bhi.n	8003f00 <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 8003ef8:	2008      	movs	r0, #8
 8003efa:	f7fd f955 	bl	80011a8 <MBX_error>
 8003efe:	e003      	b.n	8003f08 <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 8003f00:	4b56      	ldr	r3, [pc, #344]	; (800405c <ESC_coeprocess+0x1a4>)
 8003f02:	2203      	movs	r2, #3
 8003f04:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 8003f08:	4b54      	ldr	r3, [pc, #336]	; (800405c <ESC_coeprocess+0x1a4>)
 8003f0a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003f0e:	2b13      	cmp	r3, #19
 8003f10:	d106      	bne.n	8003f20 <ESC_coeprocess+0x68>
 8003f12:	4b52      	ldr	r3, [pc, #328]	; (800405c <ESC_coeprocess+0x1a4>)
 8003f14:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 8003f1c:	f7ff fd56 	bl	80039cc <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 8003f20:	4b4e      	ldr	r3, [pc, #312]	; (800405c <ESC_coeprocess+0x1a4>)
 8003f22:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	f040 8094 	bne.w	8004054 <ESC_coeprocess+0x19c>
   {
      coesdo = (_COEsdo *) &MBX[0];
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <ESC_coeprocess+0x1ac>)
 8003f2e:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 8003f30:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <ESC_coeprocess+0x1ac>)
 8003f32:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	88db      	ldrh	r3, [r3, #6]
 8003f38:	0b1b      	lsrs	r3, r3, #12
 8003f3a:	807b      	strh	r3, [r7, #2]
      if (service == COE_SDOREQUEST)
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d142      	bne.n	8003fc8 <ESC_coeprocess+0x110>
      {
         if ((SDO_COMMAND(coesdo->command) == COE_COMMAND_UPLOADREQUEST)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	7a1b      	ldrb	r3, [r3, #8]
 8003f46:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d10f      	bne.n	8003f6e <ESC_coeprocess+0xb6>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	2b0a      	cmp	r3, #10
 8003f54:	d10b      	bne.n	8003f6e <ESC_coeprocess+0xb6>
         {
            /* initiate SDO upload request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	7a1b      	ldrb	r3, [r3, #8]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <ESC_coeprocess+0xb0>
            {
               SDO_upload_complete_access ();
 8003f62:	f7fe fe3b 	bl	8002bdc <SDO_upload_complete_access>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8003f66:	e075      	b.n	8004054 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_upload ();
 8003f68:	f7fe fa74 	bl	8002454 <SDO_upload>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8003f6c:	e072      	b.n	8004054 <ESC_coeprocess+0x19c>
            }
         }
         else if (((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	7a1b      	ldrb	r3, [r3, #8]
 8003f72:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003f76:	2b60      	cmp	r3, #96	; 0x60
 8003f78:	d10b      	bne.n	8003f92 <ESC_coeprocess+0xda>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	2b0a      	cmp	r3, #10
 8003f80:	d107      	bne.n	8003f92 <ESC_coeprocess+0xda>
               && (ESCvar.segmented == MBXSEU))
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <ESC_coeprocess+0x1a4>)
 8003f84:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d102      	bne.n	8003f92 <ESC_coeprocess+0xda>
         {
            /* SDO upload segment request */
            SDO_uploadsegment ();
 8003f8c:	f7fe ff44 	bl	8002e18 <SDO_uploadsegment>
 8003f90:	e060      	b.n	8004054 <ESC_coeprocess+0x19c>
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADREQUEST)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	7a1b      	ldrb	r3, [r3, #8]
 8003f96:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d10b      	bne.n	8003fb6 <ESC_coeprocess+0xfe>
         {
            /* initiate SDO download request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	7a1b      	ldrb	r3, [r3, #8]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <ESC_coeprocess+0xf8>
            {
               SDO_download_complete_access ();
 8003faa:	f7ff f9b3 	bl	8003314 <SDO_download_complete_access>
 8003fae:	e051      	b.n	8004054 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_download ();
 8003fb0:	f7fe ffec 	bl	8002f8c <SDO_download>
 8003fb4:	e04e      	b.n	8004054 <ESC_coeprocess+0x19c>
            }
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADSEGREQ)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	7a1b      	ldrb	r3, [r3, #8]
 8003fba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d148      	bne.n	8004054 <ESC_coeprocess+0x19c>
         {
            /* SDO download segment request */
            SDO_downloadsegment ();
 8003fc2:	f7ff fabb 	bl	800353c <SDO_downloadsegment>
 8003fc6:	e045      	b.n	8004054 <ESC_coeprocess+0x19c>
         }
      }
      /* initiate SDO get OD list */
      else
      {
         if ((service == COE_SDOINFORMATION)
 8003fc8:	887b      	ldrh	r3, [r7, #2]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d109      	bne.n	8003fe2 <ESC_coeprocess+0x12a>
               && (coeobjdesc->infoheader.opcode == 0x01))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7a1b      	ldrb	r3, [r3, #8]
 8003fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d102      	bne.n	8003fe2 <ESC_coeprocess+0x12a>
         {
            SDO_getodlist ();
 8003fdc:	f7ff fbea 	bl	80037b4 <SDO_getodlist>
 8003fe0:	e038      	b.n	8004054 <ESC_coeprocess+0x19c>
         }
         /* initiate SDO get OD */
         else
         {
            if ((service == COE_SDOINFORMATION)
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d109      	bne.n	8003ffc <ESC_coeprocess+0x144>
                  && (coeobjdesc->infoheader.opcode == 0x03))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7a1b      	ldrb	r3, [r3, #8]
 8003fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d102      	bne.n	8003ffc <ESC_coeprocess+0x144>
            {
               SDO_getod ();
 8003ff6:	f7ff fd89 	bl	8003b0c <SDO_getod>
 8003ffa:	e02b      	b.n	8004054 <ESC_coeprocess+0x19c>
            }
            /* initiate SDO get ED */
            else
            {
               if ((service == COE_SDOINFORMATION)
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d109      	bne.n	8004016 <ESC_coeprocess+0x15e>
                     && (coeobjdesc->infoheader.opcode == 0x05))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7a1b      	ldrb	r3, [r3, #8]
 8004006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b05      	cmp	r3, #5
 800400e:	d102      	bne.n	8004016 <ESC_coeprocess+0x15e>
               {
                  SDO_geted ();
 8004010:	f7ff fe76 	bl	8003d00 <SDO_geted>
 8004014:	e01e      	b.n	8004054 <ESC_coeprocess+0x19c>
               }
               else
               {
                  /* COE not recognised above */
                  if (ESCvar.xoe == MBXCOE)
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <ESC_coeprocess+0x1a4>)
 8004018:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800401c:	2b03      	cmp	r3, #3
 800401e:	d119      	bne.n	8004054 <ESC_coeprocess+0x19c>
                  {
                     if (service == 0)
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <ESC_coeprocess+0x176>
                     {
                        MBX_error (MBXERR_INVALIDHEADER);
 8004026:	2005      	movs	r0, #5
 8004028:	f7fd f8be 	bl	80011a8 <MBX_error>
 800402c:	e009      	b.n	8004042 <ESC_coeprocess+0x18a>
                     }
                     else
                     {
                        SDO_abort (0, etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004034:	b299      	uxth	r1, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	7ada      	ldrb	r2, [r3, #11]
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <ESC_coeprocess+0x1b0>)
 800403c:	2000      	movs	r0, #0
 800403e:	f7fe f99f 	bl	8002380 <SDO_abort>
                     }
                     MBXcontrol[0].state = MBXstate_idle;
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <ESC_coeprocess+0x1a8>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
                     ESCvar.xoe = 0;
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <ESC_coeprocess+0x1a4>)
 800404a:	2200      	movs	r2, #0
 800404c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8004050:	e000      	b.n	8004054 <ESC_coeprocess+0x19c>
      return;
 8004052:	bf00      	nop
               }
            }
         }
      }
   }
}
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000350 	.word	0x20000350
 8004060:	200002a4 	.word	0x200002a4
 8004064:	20000124 	.word	0x20000124
 8004068:	06010000 	.word	0x06010000

0800406c <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, unsigned int offset, unsigned int length)
{
 800406c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004070:	b092      	sub	sp, #72	; 0x48
 8004072:	af00      	add	r7, sp, #0
 8004074:	6278      	str	r0, [r7, #36]	; 0x24
 8004076:	6239      	str	r1, [r7, #32]
 8004078:	61fa      	str	r2, [r7, #28]
   const unsigned int word_offset = offset / 64;
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	63fb      	str	r3, [r7, #60]	; 0x3c
   const unsigned int bit_offset = offset % 64;
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004086:	63bb      	str	r3, [r7, #56]	; 0x38
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d018      	beq.n	80040c0 <COE_bitsliceGet+0x54>
 800408e:	f04f 0201 	mov.w	r2, #1
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	69fe      	ldr	r6, [r7, #28]
 8004098:	f1a6 0120 	sub.w	r1, r6, #32
 800409c:	f1c6 0020 	rsb	r0, r6, #32
 80040a0:	fa03 f506 	lsl.w	r5, r3, r6
 80040a4:	fa02 f101 	lsl.w	r1, r2, r1
 80040a8:	430d      	orrs	r5, r1
 80040aa:	fa22 f000 	lsr.w	r0, r2, r0
 80040ae:	4305      	orrs	r5, r0
 80040b0:	fa02 f406 	lsl.w	r4, r2, r6
 80040b4:	1e63      	subs	r3, r4, #1
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	f145 33ff 	adc.w	r3, r5, #4294967295
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e005      	b.n	80040cc <COE_bitsliceGet+0x60>
 80040c0:	f04f 33ff 	mov.w	r3, #4294967295
 80040c4:	f04f 34ff 	mov.w	r4, #4294967295
 80040c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80040cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80040d0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
   uint64_t w0;
   uint64_t w1 = 0;
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 80040e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e6:	4413      	add	r3, r2
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   w0 = w0 >> bit_offset;
 80040f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040f6:	f1c1 0420 	rsb	r4, r1, #32
 80040fa:	f1a1 0020 	sub.w	r0, r1, #32
 80040fe:	fa22 fa01 	lsr.w	sl, r2, r1
 8004102:	fa03 f404 	lsl.w	r4, r3, r4
 8004106:	ea4a 0a04 	orr.w	sl, sl, r4
 800410a:	fa23 f000 	lsr.w	r0, r3, r0
 800410e:	ea4a 0a00 	orr.w	sl, sl, r0
 8004112:	fa23 fb01 	lsr.w	fp, r3, r1
 8004116:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	4413      	add	r3, r2
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d91f      	bls.n	8004164 <COE_bitsliceGet+0xf8>
   {
      w1 = bitmap[word_offset + 1];
 8004124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004126:	3301      	adds	r3, #1
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	4413      	add	r3, r2
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      w1 = w1 << (64 - bit_offset);
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 800413c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004140:	f1a1 0420 	sub.w	r4, r1, #32
 8004144:	f1c1 0020 	rsb	r0, r1, #32
 8004148:	fa03 f901 	lsl.w	r9, r3, r1
 800414c:	fa02 f404 	lsl.w	r4, r2, r4
 8004150:	ea49 0904 	orr.w	r9, r9, r4
 8004154:	fa22 f000 	lsr.w	r0, r2, r0
 8004158:	ea49 0900 	orr.w	r9, r9, r0
 800415c:	fa02 f801 	lsl.w	r8, r2, r1
 8004160:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
   }

   w0 = (w1 | w0);
 8004164:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800416c:	ea40 0402 	orr.w	r4, r0, r2
 8004170:	603c      	str	r4, [r7, #0]
 8004172:	430b      	orrs	r3, r1
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	e9d7 3400 	ldrd	r3, r4, [r7]
 800417a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
   return (w0 & mask);
 800417e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004182:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004186:	ea00 0402 	and.w	r4, r0, r2
 800418a:	60bc      	str	r4, [r7, #8]
 800418c:	400b      	ands	r3, r1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	3748      	adds	r7, #72	; 0x48
 800419a:	46bd      	mov	sp, r7
 800419c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041a0:	4770      	bx	lr

080041a2 <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, unsigned int offset, unsigned int length,
                             uint64_t value)
{
 80041a2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041a6:	b0aa      	sub	sp, #168	; 0xa8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6678      	str	r0, [r7, #100]	; 0x64
 80041ac:	6639      	str	r1, [r7, #96]	; 0x60
 80041ae:	65fa      	str	r2, [r7, #92]	; 0x5c
   const unsigned int word_offset = offset / 64;
 80041b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   const unsigned int bit_offset = offset % 64;
 80041b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 80041c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d018      	beq.n	80041fa <COE_bitsliceSet+0x58>
 80041c8:	f04f 0201 	mov.w	r2, #1
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 80041d2:	f1a6 0120 	sub.w	r1, r6, #32
 80041d6:	f1c6 0020 	rsb	r0, r6, #32
 80041da:	fa03 f506 	lsl.w	r5, r3, r6
 80041de:	fa02 f101 	lsl.w	r1, r2, r1
 80041e2:	430d      	orrs	r5, r1
 80041e4:	fa22 f000 	lsr.w	r0, r2, r0
 80041e8:	4305      	orrs	r5, r0
 80041ea:	fa02 f406 	lsl.w	r4, r2, r6
 80041ee:	1e63      	subs	r3, r4, #1
 80041f0:	643b      	str	r3, [r7, #64]	; 0x40
 80041f2:	f145 33ff 	adc.w	r3, r5, #4294967295
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
 80041f8:	e005      	b.n	8004206 <COE_bitsliceSet+0x64>
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	f04f 34ff 	mov.w	r4, #4294967295
 8004202:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8004206:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800420a:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
   const uint64_t mask0 = mask << bit_offset;
 800420e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004212:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8004216:	f1a4 0120 	sub.w	r1, r4, #32
 800421a:	f1c4 0020 	rsb	r0, r4, #32
 800421e:	fa03 f904 	lsl.w	r9, r3, r4
 8004222:	fa02 f101 	lsl.w	r1, r2, r1
 8004226:	ea49 0901 	orr.w	r9, r9, r1
 800422a:	fa22 f000 	lsr.w	r0, r2, r0
 800422e:	ea49 0900 	orr.w	r9, r9, r0
 8004232:	fa02 f804 	lsl.w	r8, r2, r4
 8004236:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
   uint64_t v0 = value << bit_offset;
 800423a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800423e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8004242:	f1a4 0120 	sub.w	r1, r4, #32
 8004246:	f1c4 0020 	rsb	r0, r4, #32
 800424a:	fa03 fb04 	lsl.w	fp, r3, r4
 800424e:	fa02 f101 	lsl.w	r1, r2, r1
 8004252:	ea4b 0b01 	orr.w	fp, fp, r1
 8004256:	fa22 f000 	lsr.w	r0, r2, r0
 800425a:	ea4b 0b00 	orr.w	fp, fp, r0
 800425e:	fa02 fa04 	lsl.w	sl, r2, r4
 8004262:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
   uint64_t w0 = bitmap[word_offset];
 8004266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800426a:	00da      	lsls	r2, r3, #3
 800426c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800426e:	4413      	add	r3, r2
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 8004278:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800427c:	43d1      	mvns	r1, r2
 800427e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004280:	43db      	mvns	r3, r3
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004284:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004288:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800428c:	4621      	mov	r1, r4
 800428e:	4011      	ands	r1, r2
 8004290:	6339      	str	r1, [r7, #48]	; 0x30
 8004292:	4629      	mov	r1, r5
 8004294:	4019      	ands	r1, r3
 8004296:	6379      	str	r1, [r7, #52]	; 0x34
 8004298:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800429c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80042a0:	ea00 0402 	and.w	r4, r0, r2
 80042a4:	62bc      	str	r4, [r7, #40]	; 0x28
 80042a6:	400b      	ands	r3, r1
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042ae:	4623      	mov	r3, r4
 80042b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042b4:	4602      	mov	r2, r0
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	462b      	mov	r3, r5
 80042bc:	460a      	mov	r2, r1
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80042c6:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
   bitmap[word_offset] = w0;
 80042ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042d2:	18d1      	adds	r1, r2, r3
 80042d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80042d8:	e9c1 2300 	strd	r2, r3, [r1]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 80042dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042e2:	4413      	add	r3, r2
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d976      	bls.n	80043d6 <COE_bitsliceSet+0x234>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 80042e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042ec:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
 80042f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80042f4:	f1c4 0120 	rsb	r1, r4, #32
 80042f8:	f1a4 0020 	sub.w	r0, r4, #32
 80042fc:	fa22 f504 	lsr.w	r5, r2, r4
 8004300:	653d      	str	r5, [r7, #80]	; 0x50
 8004302:	fa03 f101 	lsl.w	r1, r3, r1
 8004306:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8004308:	430d      	orrs	r5, r1
 800430a:	653d      	str	r5, [r7, #80]	; 0x50
 800430c:	fa23 f000 	lsr.w	r0, r3, r0
 8004310:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004312:	4301      	orrs	r1, r0
 8004314:	6539      	str	r1, [r7, #80]	; 0x50
 8004316:	40e3      	lsrs	r3, r4
 8004318:	657b      	str	r3, [r7, #84]	; 0x54
 800431a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800431e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      uint64_t v1 = value >> (64 - bit_offset);
 8004322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004326:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
 800432a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800432e:	f1c0 0420 	rsb	r4, r0, #32
 8004332:	f1a0 0120 	sub.w	r1, r0, #32
 8004336:	fa22 f500 	lsr.w	r5, r2, r0
 800433a:	64bd      	str	r5, [r7, #72]	; 0x48
 800433c:	fa03 f404 	lsl.w	r4, r3, r4
 8004340:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8004342:	4325      	orrs	r5, r4
 8004344:	64bd      	str	r5, [r7, #72]	; 0x48
 8004346:	fa23 f101 	lsr.w	r1, r3, r1
 800434a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800434c:	430c      	orrs	r4, r1
 800434e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004350:	40c3      	lsrs	r3, r0
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004354:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004358:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
      uint64_t w1 = bitmap[word_offset + 1];
 800435c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004360:	3301      	adds	r3, #1
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004366:	4413      	add	r3, r2
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

      w1 = (w1 & ~mask1) | (v1 & mask1);
 8004370:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004374:	43d1      	mvns	r1, r2
 8004376:	6239      	str	r1, [r7, #32]
 8004378:	43db      	mvns	r3, r3
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004380:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004384:	4621      	mov	r1, r4
 8004386:	4011      	ands	r1, r2
 8004388:	61b9      	str	r1, [r7, #24]
 800438a:	4629      	mov	r1, r5
 800438c:	4019      	ands	r1, r3
 800438e:	61f9      	str	r1, [r7, #28]
 8004390:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004394:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004398:	ea00 0402 	and.w	r4, r0, r2
 800439c:	613c      	str	r4, [r7, #16]
 800439e:	400b      	ands	r3, r1
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80043a6:	4623      	mov	r3, r4
 80043a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043ac:	4602      	mov	r2, r0
 80043ae:	4313      	orrs	r3, r2
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	462b      	mov	r3, r5
 80043b4:	460a      	mov	r2, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80043be:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
      bitmap[word_offset + 1] = w1;
 80043c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043c6:	3301      	adds	r3, #1
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043cc:	18d1      	adds	r1, r2, r3
 80043ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80043d2:	e9c1 2300 	strd	r2, r3, [r1]
   }
}
 80043d6:	bf00      	nop
 80043d8:	37a8      	adds	r7, #168	; 0xa8
 80043da:	46bd      	mov	sp, r7
 80043dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043e0:	4770      	bx	lr
	...

080043e4 <COE_getValue>:
 *
 * @param[in] obj   = object description
 * @return object value
 */
static uint64_t COE_getValue (const _objd * obj)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
   uint64_t value = 0;
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9c7 2302 	strd	r2, r3, [r7, #8]

   /* TODO: const data */

   switch(obj->datatype)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	885b      	ldrh	r3, [r3, #2]
 80043fe:	3b01      	subs	r3, #1
 8004400:	2b36      	cmp	r3, #54	; 0x36
 8004402:	f200 8095 	bhi.w	8004530 <COE_getValue+0x14c>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <COE_getValue+0x28>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	080044e9 	.word	0x080044e9
 8004410:	080044e9 	.word	0x080044e9
 8004414:	080044fd 	.word	0x080044fd
 8004418:	08004511 	.word	0x08004511
 800441c:	080044e9 	.word	0x080044e9
 8004420:	080044fd 	.word	0x080044fd
 8004424:	08004511 	.word	0x08004511
 8004428:	08004511 	.word	0x08004511
 800442c:	08004531 	.word	0x08004531
 8004430:	08004531 	.word	0x08004531
 8004434:	08004531 	.word	0x08004531
 8004438:	08004531 	.word	0x08004531
 800443c:	08004531 	.word	0x08004531
 8004440:	08004531 	.word	0x08004531
 8004444:	08004531 	.word	0x08004531
 8004448:	08004531 	.word	0x08004531
 800444c:	08004523 	.word	0x08004523
 8004450:	08004531 	.word	0x08004531
 8004454:	08004531 	.word	0x08004531
 8004458:	08004531 	.word	0x08004531
 800445c:	08004523 	.word	0x08004523
 8004460:	08004531 	.word	0x08004531
 8004464:	08004531 	.word	0x08004531
 8004468:	08004531 	.word	0x08004531
 800446c:	08004531 	.word	0x08004531
 8004470:	08004531 	.word	0x08004531
 8004474:	08004523 	.word	0x08004523
 8004478:	08004531 	.word	0x08004531
 800447c:	08004531 	.word	0x08004531
 8004480:	08004531 	.word	0x08004531
 8004484:	08004531 	.word	0x08004531
 8004488:	08004531 	.word	0x08004531
 800448c:	08004531 	.word	0x08004531
 8004490:	08004531 	.word	0x08004531
 8004494:	08004531 	.word	0x08004531
 8004498:	08004531 	.word	0x08004531
 800449c:	08004531 	.word	0x08004531
 80044a0:	08004531 	.word	0x08004531
 80044a4:	08004531 	.word	0x08004531
 80044a8:	08004531 	.word	0x08004531
 80044ac:	08004531 	.word	0x08004531
 80044b0:	08004531 	.word	0x08004531
 80044b4:	08004531 	.word	0x08004531
 80044b8:	08004531 	.word	0x08004531
 80044bc:	080044e9 	.word	0x080044e9
 80044c0:	080044fd 	.word	0x080044fd
 80044c4:	08004511 	.word	0x08004511
 80044c8:	080044e9 	.word	0x080044e9
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	080044e9 	.word	0x080044e9
 80044d4:	080044e9 	.word	0x080044e9
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044e9 	.word	0x080044e9
 80044e0:	080044e9 	.word	0x080044e9
 80044e4:	080044e9 	.word	0x080044e9
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      value = *(uint8_t *)obj->data;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2200      	movs	r2, #0
 80044f2:	469a      	mov	sl, r3
 80044f4:	4693      	mov	fp, r2
 80044f6:	e9c7 ab02 	strd	sl, fp, [r7, #8]
      break;
 80044fa:	e020      	b.n	800453e <COE_getValue+0x15a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      value = *(uint16_t *)obj->data;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	2200      	movs	r2, #0
 8004506:	4698      	mov	r8, r3
 8004508:	4691      	mov	r9, r2
 800450a:	e9c7 8902 	strd	r8, r9, [r7, #8]
      break;
 800450e:	e016      	b.n	800453e <COE_getValue+0x15a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      value = *(uint32_t *)obj->data;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	461c      	mov	r4, r3
 800451a:	4615      	mov	r5, r2
 800451c:	e9c7 4502 	strd	r4, r5, [r7, #8]
      break;
 8004520:	e00d      	b.n	800453e <COE_getValue+0x15a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      value = *(uint64_t *)obj->data;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      break;
 800452e:	e006      	b.n	800453e <COE_getValue+0x15a>

   default:
      CC_ASSERT (0);
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <COE_getValue+0x16c>)
 8004532:	4a08      	ldr	r2, [pc, #32]	; (8004554 <COE_getValue+0x170>)
 8004534:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 8004538:	4807      	ldr	r0, [pc, #28]	; (8004558 <COE_getValue+0x174>)
 800453a:	f008 fd33 	bl	800cfa4 <__assert_func>
   }

   return value;
 800453e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454e:	bf00      	nop
 8004550:	0800e120 	.word	0x0800e120
 8004554:	0800e3a0 	.word	0x0800e3a0
 8004558:	0800e124 	.word	0x0800e124

0800455c <COE_setValue>:
 *
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	e9c7 2300 	strd	r2, r3, [r7]
   switch(obj->datatype)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	885b      	ldrh	r3, [r3, #2]
 800456c:	3b01      	subs	r3, #1
 800456e:	2b36      	cmp	r3, #54	; 0x36
 8004570:	f200 8088 	bhi.w	8004684 <COE_setValue+0x128>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <COE_setValue+0x20>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	08004659 	.word	0x08004659
 8004580:	08004659 	.word	0x08004659
 8004584:	08004663 	.word	0x08004663
 8004588:	0800466d 	.word	0x0800466d
 800458c:	08004659 	.word	0x08004659
 8004590:	08004663 	.word	0x08004663
 8004594:	0800466d 	.word	0x0800466d
 8004598:	0800466d 	.word	0x0800466d
 800459c:	08004685 	.word	0x08004685
 80045a0:	08004685 	.word	0x08004685
 80045a4:	08004685 	.word	0x08004685
 80045a8:	08004685 	.word	0x08004685
 80045ac:	08004685 	.word	0x08004685
 80045b0:	08004685 	.word	0x08004685
 80045b4:	08004685 	.word	0x08004685
 80045b8:	08004685 	.word	0x08004685
 80045bc:	08004677 	.word	0x08004677
 80045c0:	08004685 	.word	0x08004685
 80045c4:	08004685 	.word	0x08004685
 80045c8:	08004685 	.word	0x08004685
 80045cc:	08004677 	.word	0x08004677
 80045d0:	08004685 	.word	0x08004685
 80045d4:	08004685 	.word	0x08004685
 80045d8:	08004685 	.word	0x08004685
 80045dc:	08004685 	.word	0x08004685
 80045e0:	08004685 	.word	0x08004685
 80045e4:	08004677 	.word	0x08004677
 80045e8:	08004685 	.word	0x08004685
 80045ec:	08004685 	.word	0x08004685
 80045f0:	08004685 	.word	0x08004685
 80045f4:	08004685 	.word	0x08004685
 80045f8:	08004685 	.word	0x08004685
 80045fc:	08004685 	.word	0x08004685
 8004600:	08004685 	.word	0x08004685
 8004604:	08004685 	.word	0x08004685
 8004608:	08004685 	.word	0x08004685
 800460c:	08004685 	.word	0x08004685
 8004610:	08004685 	.word	0x08004685
 8004614:	08004685 	.word	0x08004685
 8004618:	08004685 	.word	0x08004685
 800461c:	08004685 	.word	0x08004685
 8004620:	08004685 	.word	0x08004685
 8004624:	08004685 	.word	0x08004685
 8004628:	08004685 	.word	0x08004685
 800462c:	08004659 	.word	0x08004659
 8004630:	08004663 	.word	0x08004663
 8004634:	0800466d 	.word	0x0800466d
 8004638:	08004659 	.word	0x08004659
 800463c:	08004659 	.word	0x08004659
 8004640:	08004659 	.word	0x08004659
 8004644:	08004659 	.word	0x08004659
 8004648:	08004659 	.word	0x08004659
 800464c:	08004659 	.word	0x08004659
 8004650:	08004659 	.word	0x08004659
 8004654:	08004659 	.word	0x08004659
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	783a      	ldrb	r2, [r7, #0]
 800465e:	701a      	strb	r2, [r3, #0]
      break;
 8004660:	e011      	b.n	8004686 <COE_setValue+0x12a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	883a      	ldrh	r2, [r7, #0]
 8004668:	801a      	strh	r2, [r3, #0]
      break;
 800466a:	e00c      	b.n	8004686 <COE_setValue+0x12a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	601a      	str	r2, [r3, #0]
      break;
 8004674:	e007      	b.n	8004686 <COE_setValue+0x12a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6919      	ldr	r1, [r3, #16]
 800467a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467e:	e9c1 2300 	strd	r2, r3, [r1]
      break;
 8004682:	e000      	b.n	8004686 <COE_setValue+0x12a>

   default:
      DPRINT ("ignored\n");
      break;
 8004684:	bf00      	nop
   }
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop

08004694 <COE_initDefaultValues>:

/**
 * Init default values for SDO objects
 */
void COE_initDefaultValues (void)
{
 8004694:	b5b0      	push	{r4, r5, r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Let application decide if initialization will be skipped */
   if (ESCvar.skip_default_initialization)
 800469a:	4b32      	ldr	r3, [pc, #200]	; (8004764 <COE_initDefaultValues+0xd0>)
 800469c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d15a      	bne.n	800475a <COE_initDefaultValues+0xc6>
   {
      return;
   }

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	e046      	b.n	8004738 <COE_initDefaultValues+0xa4>
   {
      objd = SDOobjects[n].objdesc;
 80046aa:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <COE_initDefaultValues+0xd4>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	4413      	add	r3, r2
 80046b2:	330c      	adds	r3, #12
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	607b      	str	r3, [r7, #4]
      maxsub = SDOobjects[n].maxsub;
 80046b8:	4a2b      	ldr	r2, [pc, #172]	; (8004768 <COE_initDefaultValues+0xd4>)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	4413      	add	r3, r2
 80046c0:	3304      	adds	r3, #4
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	70fb      	strb	r3, [r7, #3]

      i = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
      do
      {
         if (objd[i].data != NULL)
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d018      	beq.n	8004712 <COE_initDefaultValues+0x7e>
         {
            COE_setValue (&objd[i], objd[i].value);
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1899      	adds	r1, r3, r2
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4413      	add	r3, r2
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	461c      	mov	r4, r3
 8004706:	4615      	mov	r5, r2
 8004708:	4622      	mov	r2, r4
 800470a:	462b      	mov	r3, r5
 800470c:	4608      	mov	r0, r1
 800470e:	f7ff ff25 	bl	800455c <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
         }
      } while (objd[i++].subindex < maxsub);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	60fa      	str	r2, [r7, #12]
 8004718:	461a      	mov	r2, r3
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	b29b      	uxth	r3, r3
 800472e:	429a      	cmp	r2, r3
 8004730:	d3cb      	bcc.n	80046ca <COE_initDefaultValues+0x36>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	3301      	adds	r3, #1
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <COE_initDefaultValues+0xd4>)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004746:	4293      	cmp	r3, r2
 8004748:	d1af      	bne.n	80046aa <COE_initDefaultValues+0x16>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <COE_initDefaultValues+0xd0>)
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <COE_initDefaultValues+0xc8>
   {
      ESCvar.set_defaults_hook();
 8004752:	4b04      	ldr	r3, [pc, #16]	; (8004764 <COE_initDefaultValues+0xd0>)
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	4798      	blx	r3
 8004758:	e000      	b.n	800475c <COE_initDefaultValues+0xc8>
      return;
 800475a:	bf00      	nop
   }
}
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bdb0      	pop	{r4, r5, r7, pc}
 8004762:	bf00      	nop
 8004764:	20000350 	.word	0x20000350
 8004768:	0800eab8 	.word	0x0800eab8

0800476c <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <COE_pdoPack+0x24>
 8004782:	4b28      	ldr	r3, [pc, #160]	; (8004824 <COE_pdoPack+0xb8>)
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <COE_pdoPack+0xbc>)
 8004786:	f240 61fa 	movw	r1, #1786	; 0x6fa
 800478a:	4828      	ldr	r0, [pc, #160]	; (800482c <COE_pdoPack+0xc0>)
 800478c:	f008 fc0a 	bl	800cfa4 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8004790:	2300      	movs	r3, #0
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	e03c      	b.n	8004810 <COE_pdoPack+0xa4>
   {
      const _objd * obj = mappings[ix].obj;
 8004796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004798:	4613      	mov	r3, r2
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	4613      	mov	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d022      	beq.n	800480a <COE_pdoPack+0x9e>
      {
         if (obj->bitlength > 64)
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	889b      	ldrh	r3, [r3, #4]
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d90d      	bls.n	80047e8 <COE_pdoPack+0x7c>
         {
            memcpy (
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	08db      	lsrs	r3, r3, #3
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	18d0      	adds	r0, r2, r3
               obj->data,
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	6919      	ldr	r1, [r3, #16]
               BITS2BYTES (obj->bitlength)
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	889b      	ldrh	r3, [r3, #4]
 80047dc:	3307      	adds	r3, #7
            memcpy (
 80047de:	08db      	lsrs	r3, r3, #3
 80047e0:	461a      	mov	r2, r3
 80047e2:	f008 fd32 	bl	800d24a <memcpy>
 80047e6:	e010      	b.n	800480a <COE_pdoPack+0x9e>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 80047e8:	6a38      	ldr	r0, [r7, #32]
 80047ea:	f7ff fdfb 	bl	80043e4 <COE_getValue>
 80047ee:	e9c7 0104 	strd	r0, r1, [r7, #16]
            COE_bitsliceSet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength,
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	889b      	ldrh	r3, [r3, #4]
            COE_bitsliceSet (
 80047f6:	4619      	mov	r1, r3
 80047f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047fc:	e9cd 2300 	strd	r2, r3, [sp]
 8004800:	460a      	mov	r2, r1
 8004802:	69f9      	ldr	r1, [r7, #28]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff fccc 	bl	80041a2 <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	3301      	adds	r3, #1
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	dbbe      	blt.n	8004796 <COE_pdoPack+0x2a>
               value
            );
         }
      }
   }
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	0800e14c 	.word	0x0800e14c
 8004828:	0800e3b0 	.word	0x0800e3b0
 800482c:	0800e124 	.word	0x0800e124

08004830 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	2b00      	cmp	r3, #0
 8004844:	d006      	beq.n	8004854 <COE_pdoUnpack+0x24>
 8004846:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <COE_pdoUnpack+0xb0>)
 8004848:	4a26      	ldr	r2, [pc, #152]	; (80048e4 <COE_pdoUnpack+0xb4>)
 800484a:	f240 7129 	movw	r1, #1833	; 0x729
 800484e:	4826      	ldr	r0, [pc, #152]	; (80048e8 <COE_pdoUnpack+0xb8>)
 8004850:	f008 fba8 	bl	800cfa4 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
 8004858:	e039      	b.n	80048ce <COE_pdoUnpack+0x9e>
   {
      const _objd * obj = mappings[ix].obj;
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	4613      	mov	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 800486e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01f      	beq.n	80048c8 <COE_pdoUnpack+0x98>
      {
         if (obj->bitlength > 64)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	889b      	ldrh	r3, [r3, #4]
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d90d      	bls.n	80048ac <COE_pdoUnpack+0x7c>
         {
            memcpy (
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	6918      	ldr	r0, [r3, #16]
               obj->data,
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	18d1      	adds	r1, r2, r3
               BITS2BYTES (obj->bitlength)
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	889b      	ldrh	r3, [r3, #4]
 80048a0:	3307      	adds	r3, #7
            memcpy (
 80048a2:	08db      	lsrs	r3, r3, #3
 80048a4:	461a      	mov	r2, r3
 80048a6:	f008 fcd0 	bl	800d24a <memcpy>
 80048aa:	e00d      	b.n	80048c8 <COE_pdoUnpack+0x98>
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	889b      	ldrh	r3, [r3, #4]
            uint64_t value = COE_bitsliceGet (
 80048b0:	461a      	mov	r2, r3
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff fbd9 	bl	800406c <COE_bitsliceGet>
 80048ba:	e9c7 0104 	strd	r0, r1, [r7, #16]
            );
            COE_setValue (obj, value);
 80048be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048c2:	6a38      	ldr	r0, [r7, #32]
 80048c4:	f7ff fe4a 	bl	800455c <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	3301      	adds	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
 80048ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	dbc1      	blt.n	800485a <COE_pdoUnpack+0x2a>
         }
      }
   }
}
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	3728      	adds	r7, #40	; 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	0800e14c 	.word	0x0800e14c
 80048e4:	0800e3bc 	.word	0x0800e3bc
 80048e8:	0800e124 	.word	0x0800e124

080048ec <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
   int32_t nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fd fbb5 	bl	8002068 <SDO_findobject>
 80048fe:	60f8      	str	r0, [r7, #12]
   if (nidx == -1)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d101      	bne.n	800490c <COE_maxSub+0x20>
      return 0;
 8004908:	2300      	movs	r3, #0
 800490a:	e01b      	b.n	8004944 <COE_maxSub+0x58>

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 800490c:	4a0f      	ldr	r2, [pc, #60]	; (800494c <COE_maxSub+0x60>)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	4413      	add	r3, r2
 8004914:	330c      	adds	r3, #12
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <COE_maxSub+0x44>
 800491e:	4a0b      	ldr	r2, [pc, #44]	; (800494c <COE_maxSub+0x60>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	4413      	add	r3, r2
 8004926:	330c      	adds	r3, #12
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	e007      	b.n	8004940 <COE_maxSub+0x54>
 8004930:	4a06      	ldr	r2, [pc, #24]	; (800494c <COE_maxSub+0x60>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	4413      	add	r3, r2
 8004938:	330c      	adds	r3, #12
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	72fb      	strb	r3, [r7, #11]
   return maxsub;
 8004942:	7afb      	ldrb	r3, [r7, #11]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	0800eab8 	.word	0x0800eab8

08004950 <FOE_fopen>:
 * @param[in] op        = Request op-code
 * @return 0= if we succeed, FOE_ERR_NOTFOUND something wrong with filename or
 * password
 */
static uint32_t FOE_fopen (char *name, uint8_t num_chars, uint32_t pass, uint8_t op)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	461a      	mov	r2, r3
 800495c:	460b      	mov	r3, r1
 800495e:	72fb      	strb	r3, [r7, #11]
 8004960:	4613      	mov	r3, r2
 8004962:	72bb      	strb	r3, [r7, #10]
   uint32_t i;

   /* Unpack the file name into characters we can look at. */
   if (num_chars > FOE_FN_MAX)
 8004964:	7afb      	ldrb	r3, [r7, #11]
 8004966:	2b1f      	cmp	r3, #31
 8004968:	d901      	bls.n	800496e <FOE_fopen+0x1e>
   {
      num_chars = FOE_FN_MAX;
 800496a:	231f      	movs	r3, #31
 800496c:	72fb      	strb	r3, [r7, #11]
   }

   for (i = 0; i < num_chars; i++)
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	e00b      	b.n	800498c <FOE_fopen+0x3c>
   {
      foe_file_name[i] = name[i];
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	7819      	ldrb	r1, [r3, #0]
 800497c:	4a49      	ldr	r2, [pc, #292]	; (8004aa4 <FOE_fopen+0x154>)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	4413      	add	r3, r2
 8004982:	460a      	mov	r2, r1
 8004984:	701a      	strb	r2, [r3, #0]
   for (i = 0; i < num_chars; i++)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3301      	adds	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	7afb      	ldrb	r3, [r7, #11]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	429a      	cmp	r2, r3
 8004992:	d3ef      	bcc.n	8004974 <FOE_fopen+0x24>
   }
   foe_file_name[i] = '\0';
 8004994:	4a43      	ldr	r2, [pc, #268]	; (8004aa4 <FOE_fopen+0x154>)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	4413      	add	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]

   /* Figure out what file they're talking about. */
   for (i = 0; i < foe_cfg->n_files; i++)
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e072      	b.n	8004a8a <FOE_fopen+0x13a>
   {
      if (0 == strncmp (foe_file_name, foe_cfg->files[i].name, num_chars))
 80049a4:	4b40      	ldr	r3, [pc, #256]	; (8004aa8 <FOE_fopen+0x158>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	015b      	lsls	r3, r3, #5
 80049ae:	4413      	add	r3, r2
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	7afa      	ldrb	r2, [r7, #11]
 80049b4:	4619      	mov	r1, r3
 80049b6:	483b      	ldr	r0, [pc, #236]	; (8004aa4 <FOE_fopen+0x154>)
 80049b8:	f009 f89d 	bl	800daf6 <strncmp>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d160      	bne.n	8004a84 <FOE_fopen+0x134>
      {
         if (pass != foe_cfg->files[i].filepass)
 80049c2:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <FOE_fopen+0x158>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	015b      	lsls	r3, r3, #5
 80049cc:	4413      	add	r3, r2
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d002      	beq.n	80049dc <FOE_fopen+0x8c>
         {
            return FOE_ERR_NORIGHTS;
 80049d6:	f248 030a 	movw	r3, #32778	; 0x800a
 80049da:	e05e      	b.n	8004a9a <FOE_fopen+0x14a>
         }

         if (op == FOE_OP_WRQ &&
 80049dc:	7abb      	ldrb	r3, [r7, #10]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d110      	bne.n	8004a04 <FOE_fopen+0xb4>
             (foe_cfg->files[i].write_only_in_boot) &&
 80049e2:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <FOE_fopen+0x158>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	015b      	lsls	r3, r3, #5
 80049ec:	4413      	add	r3, r2
 80049ee:	7e1b      	ldrb	r3, [r3, #24]
         if (op == FOE_OP_WRQ &&
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <FOE_fopen+0xb4>
             (ESCvar.ALstatus != ESCboot))
 80049f4:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <FOE_fopen+0x15c>)
 80049f6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
             (foe_cfg->files[i].write_only_in_boot) &&
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d002      	beq.n	8004a04 <FOE_fopen+0xb4>
         {
            return FOE_ERR_NOTINBOOTSTRAP;
 80049fe:	f248 0309 	movw	r3, #32777	; 0x8009
 8004a02:	e04a      	b.n	8004a9a <FOE_fopen+0x14a>
         }

         foe_file = &foe_cfg->files[i];
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <FOE_fopen+0x158>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	015b      	lsls	r3, r3, #5
 8004a0e:	4413      	add	r3, r2
 8004a10:	4a27      	ldr	r2, [pc, #156]	; (8004ab0 <FOE_fopen+0x160>)
 8004a12:	6013      	str	r3, [r2, #0]
         foe_file->address_offset = 0;
 8004a14:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <FOE_fopen+0x160>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	60da      	str	r2, [r3, #12]
         foe_file->total_size = 0;
 8004a1c:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <FOE_fopen+0x160>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2200      	movs	r2, #0
 8004a22:	611a      	str	r2, [r3, #16]
         switch (op)
 8004a24:	7abb      	ldrb	r3, [r7, #10]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d002      	beq.n	8004a30 <FOE_fopen+0xe0>
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d015      	beq.n	8004a5a <FOE_fopen+0x10a>
 8004a2e:	e029      	b.n	8004a84 <FOE_fopen+0x134>
         {
            case FOE_OP_RRQ:
            {
               FOEvar.fposition = 0;
 8004a30:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <FOE_fopen+0x164>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	71da      	strb	r2, [r3, #7]
 8004a36:	2200      	movs	r2, #0
 8004a38:	721a      	strb	r2, [r3, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	725a      	strb	r2, [r3, #9]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	729a      	strb	r2, [r3, #10]
               FOEvar.fend = foe_cfg->files[i].max_data;
 8004a42:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <FOE_fopen+0x158>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	015b      	lsls	r3, r3, #5
 8004a4c:	4413      	add	r3, r2
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <FOE_fopen+0x164>)
 8004a52:	f8c2 300f 	str.w	r3, [r2, #15]
               return 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e01f      	b.n	8004a9a <FOE_fopen+0x14a>
            }
            case FOE_OP_WRQ:
            {
               FOEvar.fposition = 0;
 8004a5a:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <FOE_fopen+0x164>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	71da      	strb	r2, [r3, #7]
 8004a60:	2200      	movs	r2, #0
 8004a62:	721a      	strb	r2, [r3, #8]
 8004a64:	2200      	movs	r2, #0
 8004a66:	725a      	strb	r2, [r3, #9]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	729a      	strb	r2, [r3, #10]
               FOEvar.fend = foe_cfg->files[i].max_data;
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <FOE_fopen+0x158>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	015b      	lsls	r3, r3, #5
 8004a76:	4413      	add	r3, r2
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <FOE_fopen+0x164>)
 8004a7c:	f8c2 300f 	str.w	r3, [r2, #15]
               return 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e00a      	b.n	8004a9a <FOE_fopen+0x14a>
   for (i = 0; i < foe_cfg->n_files; i++)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	3301      	adds	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <FOE_fopen+0x158>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d386      	bcc.n	80049a4 <FOE_fopen+0x54>
            }
         }
      }
   }

   return FOE_ERR_NOTFOUND;
 8004a96:	f248 0301 	movw	r3, #32769	; 0x8001
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2000061c 	.word	0x2000061c
 8004aa8:	2000063c 	.word	0x2000063c
 8004aac:	20000350 	.word	0x20000350
 8004ab0:	20000640 	.word	0x20000640
 8004ab4:	20000644 	.word	0x20000644

08004ab8 <FOE_fwrite>:
 * @param[in] length = Length of data to read

 * @return Number of copied bytes.
 */
static uint32_t FOE_fwrite (uint8_t *data, uint32_t length)
{
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
    uint32_t ncopied = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
    uint32_t failed = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]

    DPRINT("FOE_fwrite\n");
    FOEvar.fprevposition = FOEvar.fposition;
 8004aca:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004acc:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8004ad0:	4a33      	ldr	r2, [pc, #204]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004ad2:	f8c2 300b 	str.w	r3, [r2, #11]
    while (length && (FOEvar.fend - FOEvar.fposition) && !failed)
 8004ad6:	e048      	b.n	8004b6a <FOE_fwrite+0xb2>
    {
       length--;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	603b      	str	r3, [r7, #0]
       foe_cfg->fbuffer[FOEvar.fbufposition++] = *(data++);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	4a2f      	ldr	r2, [pc, #188]	; (8004ba4 <FOE_fwrite+0xec>)
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	6811      	ldr	r1, [r2, #0]
 8004aea:	4a2d      	ldr	r2, [pc, #180]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004aec:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8004af0:	b292      	uxth	r2, r2
 8004af2:	1c50      	adds	r0, r2, #1
 8004af4:	b284      	uxth	r4, r0
 8004af6:	482a      	ldr	r0, [pc, #168]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004af8:	f8a0 4001 	strh.w	r4, [r0, #1]
 8004afc:	440a      	add	r2, r1
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	7013      	strb	r3, [r2, #0]
       if(FOEvar.fbufposition >= foe_cfg->buffer_size)
 8004b02:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004b04:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <FOE_fwrite+0xec>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d31c      	bcc.n	8004b50 <FOE_fwrite+0x98>
       {
          failed = foe_file->write_function (foe_file, foe_cfg->fbuffer, FOEvar.fbufposition);
 8004b16:	4b24      	ldr	r3, [pc, #144]	; (8004ba8 <FOE_fwrite+0xf0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <FOE_fwrite+0xf0>)
 8004b1e:	6810      	ldr	r0, [r2, #0]
 8004b20:	4a20      	ldr	r2, [pc, #128]	; (8004ba4 <FOE_fwrite+0xec>)
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	6811      	ldr	r1, [r2, #0]
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004b28:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	4798      	blx	r3
 8004b30:	60b8      	str	r0, [r7, #8]
          FOEvar.fbufposition = 0;
 8004b32:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	705a      	strb	r2, [r3, #1]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	709a      	strb	r2, [r3, #2]
          foe_file->address_offset += foe_cfg->buffer_size;
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <FOE_fwrite+0xf0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68d9      	ldr	r1, [r3, #12]
 8004b42:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <FOE_fwrite+0xec>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <FOE_fwrite+0xf0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	60da      	str	r2, [r3, #12]
       }
       FOEvar.fposition++;
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004b52:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8004b56:	3301      	adds	r3, #1
 8004b58:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004b5a:	f8c2 3007 	str.w	r3, [r2, #7]
       if(failed)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <FOE_fwrite+0xb2>
       {
          DPRINT("Failed FOE_fwrite ncopied=%d\n", ncopied);
       }
       else
       {
          ncopied++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
    while (length && (FOEvar.fend - FOEvar.fposition) && !failed)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <FOE_fwrite+0xce>
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004b72:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <FOE_fwrite+0xe8>)
 8004b78:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d002      	beq.n	8004b86 <FOE_fwrite+0xce>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0a8      	beq.n	8004ad8 <FOE_fwrite+0x20>
       }
    }

    foe_file->total_size += ncopied;
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <FOE_fwrite+0xf0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6919      	ldr	r1, [r3, #16]
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <FOE_fwrite+0xf0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	440a      	add	r2, r1
 8004b94:	611a      	str	r2, [r3, #16]

    DPRINT("FOE_fwrite END with : %d\n",ncopied);
    return ncopied;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd90      	pop	{r4, r7, pc}
 8004ba0:	20000644 	.word	0x20000644
 8004ba4:	2000063c 	.word	0x2000063c
 8004ba8:	20000640 	.word	0x20000640

08004bac <FOE_fclose>:
 * if we have filled the buffers or not.
 *
 * @return Number of copied bytes on success, 0= if failed.
 */
static uint32_t FOE_fclose (void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
   uint32_t failed = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	607b      	str	r3, [r7, #4]

   DPRINT("FOE_fclose\n");
   
   failed = foe_file->write_function (foe_file, foe_cfg->fbuffer, FOEvar.fbufposition);
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <FOE_fclose+0x54>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4a10      	ldr	r2, [pc, #64]	; (8004c00 <FOE_fclose+0x54>)
 8004bbe:	6810      	ldr	r0, [r2, #0]
 8004bc0:	4a10      	ldr	r2, [pc, #64]	; (8004c04 <FOE_fclose+0x58>)
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	6811      	ldr	r1, [r2, #0]
 8004bc6:	4a10      	ldr	r2, [pc, #64]	; (8004c08 <FOE_fclose+0x5c>)
 8004bc8:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8004bcc:	b292      	uxth	r2, r2
 8004bce:	4798      	blx	r3
 8004bd0:	6078      	str	r0, [r7, #4]
   foe_file->address_offset += FOEvar.fbufposition;
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <FOE_fclose+0x54>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <FOE_fclose+0x5c>)
 8004bda:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4619      	mov	r1, r3
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <FOE_fclose+0x54>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	440a      	add	r2, r1
 8004be8:	60da      	str	r2, [r3, #12]
   FOEvar.fbufposition = 0;
 8004bea:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <FOE_fclose+0x5c>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	705a      	strb	r2, [r3, #1]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	709a      	strb	r2, [r3, #2]

   return failed;
 8004bf4:	687b      	ldr	r3, [r7, #4]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000640 	.word	0x20000640
 8004c04:	2000063c 	.word	0x2000063c
 8004c08:	20000644 	.word	0x20000644

08004c0c <FOE_init>:

/** Initialize by clearing all current status variables.
 *
 */
void FOE_init ()
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
   DPRINT("FOE_init\n");
   FOEvar.foepacket = 0;
 8004c10:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <FOE_init+0x54>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	70da      	strb	r2, [r3, #3]
 8004c16:	2200      	movs	r2, #0
 8004c18:	711a      	strb	r2, [r3, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	715a      	strb	r2, [r3, #5]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	719a      	strb	r2, [r3, #6]
   FOEvar.foestate = FOE_READY;
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <FOE_init+0x54>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
   FOEvar.fposition = 0;
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <FOE_init+0x54>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	71da      	strb	r2, [r3, #7]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	721a      	strb	r2, [r3, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	725a      	strb	r2, [r3, #9]
 8004c36:	2200      	movs	r2, #0
 8004c38:	729a      	strb	r2, [r3, #10]
   FOEvar.fprevposition = 0;
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <FOE_init+0x54>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	72da      	strb	r2, [r3, #11]
 8004c40:	2200      	movs	r2, #0
 8004c42:	731a      	strb	r2, [r3, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	735a      	strb	r2, [r3, #13]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	739a      	strb	r2, [r3, #14]
   FOEvar.fbufposition = 0;
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <FOE_init+0x54>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	705a      	strb	r2, [r3, #1]
 8004c52:	2200      	movs	r2, #0
 8004c54:	709a      	strb	r2, [r3, #2]
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	20000644 	.word	0x20000644

08004c64 <FOE_abort>:
/** Function for sending an FOE abort frame.
 *
 * @param[in] code   = abort code
 */
static void FOE_abort (uint32_t code)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
   _FOE *foembx;
   uint8_t mbxhandle;

   if (code)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d025      	beq.n	8004cbe <FOE_abort+0x5a>
   {
      /* Send back an error packet. */
      mbxhandle = ESC_claimbuffer ();
 8004c72:	f7fc fa15 	bl	80010a0 <ESC_claimbuffer>
 8004c76:	4603      	mov	r3, r0
 8004c78:	73fb      	strb	r3, [r7, #15]
      if (mbxhandle)
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01e      	beq.n	8004cbe <FOE_abort+0x5a>
      {
         foembx = (_FOE *) &MBX[mbxhandle * ESC_MBXSIZE];
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <FOE_abort+0x68>)
 8004c84:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <FOE_abort+0x6c>)
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]
         foembx->mbxheader.length = htoes (ESC_FOEHSIZE);   /* Don't bother with error text for now. */
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f042 0206 	orr.w	r2, r2, #6
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	705a      	strb	r2, [r3, #1]
         foembx->mbxheader.mbxtype = MBXFOE;
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	7953      	ldrb	r3, [r2, #5]
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	f361 0303 	bfi	r3, r1, #0, #4
 8004ca8:	7153      	strb	r3, [r2, #5]
         foembx->foeheader.opcode = FOE_OP_ERR;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2205      	movs	r2, #5
 8004cae:	719a      	strb	r2, [r3, #6]
         foembx->foeheader.errorcode = htoel (code);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
         MBXcontrol[mbxhandle].state = MBXstate_outreq;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	4a06      	ldr	r2, [pc, #24]	; (8004cd4 <FOE_abort+0x70>)
 8004cba:	2103      	movs	r1, #3
 8004cbc:	54d1      	strb	r1, [r2, r3]
      }
      /* Nothing we can do if we can't get an outbound mailbox. */
   }
   DPRINT("FOE_abort: 0x%X\n", code);
   FOE_init ();
 8004cbe:	f7ff ffa5 	bl	8004c0c <FOE_init>
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000350 	.word	0x20000350
 8004cd0:	20000124 	.word	0x20000124
 8004cd4:	200002a4 	.word	0x200002a4

08004cd8 <FOE_send_ack>:
/** Sends an FoE ack data frame.

 * @return 0= or error number.
 */
static uint32_t FOE_send_ack ()
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint8_t mbxhandle;

   mbxhandle = ESC_claimbuffer ();
 8004cde:	f7fc f9df 	bl	80010a0 <ESC_claimbuffer>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	71fb      	strb	r3, [r7, #7]
   if (mbxhandle)
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d029      	beq.n	8004d40 <FOE_send_ack+0x68>
   {
      DPRINT("FOE_send_ack\n");
      foembx = (_FOE *) &MBX[mbxhandle * ESC_MBXSIZE];
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <FOE_send_ack+0x74>)
 8004cf0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <FOE_send_ack+0x78>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	603b      	str	r3, [r7, #0]
      foembx->mbxheader.length = htoes (ESC_FOEHSIZE);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f042 0206 	orr.w	r2, r2, #6
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	2200      	movs	r2, #0
 8004d08:	705a      	strb	r2, [r3, #1]
      foembx->mbxheader.mbxtype = MBXFOE;
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	7953      	ldrb	r3, [r2, #5]
 8004d0e:	2104      	movs	r1, #4
 8004d10:	f361 0303 	bfi	r3, r1, #0, #4
 8004d14:	7153      	strb	r3, [r2, #5]
      foembx->foeheader.opcode = FOE_OP_ACK;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2204      	movs	r2, #4
 8004d1a:	719a      	strb	r2, [r3, #6]
      foembx->foeheader.packetnumber = htoel (FOEvar.foepacket);
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <FOE_send_ack+0x7c>)
 8004d1e:	f8d3 2003 	ldr.w	r2, [r3, #3]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	609a      	str	r2, [r3, #8]
      FOEvar.foepacket++;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <FOE_send_ack+0x7c>)
 8004d28:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <FOE_send_ack+0x7c>)
 8004d30:	f8c2 3003 	str.w	r3, [r2, #3]
      MBXcontrol[mbxhandle].state = MBXstate_outreq;
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <FOE_send_ack+0x80>)
 8004d38:	2103      	movs	r1, #3
 8004d3a:	54d1      	strb	r1, [r2, r3]
      return 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e001      	b.n	8004d44 <FOE_send_ack+0x6c>
   }
   else
   {
      DPRINT("ERROR:FOE_send_ack\n");
      return FOE_ERR_PROGERROR;
 8004d40:	f248 030b 	movw	r3, #32779	; 0x800b
   }
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000350 	.word	0x20000350
 8004d50:	20000124 	.word	0x20000124
 8004d54:	20000644 	.word	0x20000644
 8004d58:	200002a4 	.word	0x200002a4

08004d5c <FOE_write>:
/** FoE write request handler. Starts with Initialize, Open and Ack that we can/will
 * receive data. On error we will send FOE Abort.
 *
 */
static void FOE_write ()
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint32_t password;
   uint32_t res;
   uint8_t data_len;

   if (FOEvar.foestate != FOE_READY)
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <FOE_write+0x74>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <FOE_write+0x18>
   {
      FOE_abort (FOE_ERR_ILLEGAL);
 8004d6a:	f248 0004 	movw	r0, #32772	; 0x8004
 8004d6e:	f7ff ff79 	bl	8004c64 <FOE_abort>
      return;
 8004d72:	e029      	b.n	8004dc8 <FOE_write+0x6c>
   }

   FOE_init ();
 8004d74:	f7ff ff4a 	bl	8004c0c <FOE_init>
   foembx = (_FOE *) &MBX[0];
 8004d78:	4b16      	ldr	r3, [pc, #88]	; (8004dd4 <FOE_write+0x78>)
 8004d7a:	60fb      	str	r3, [r7, #12]
   data_len = (uint8_t)(etohs (foembx->mbxheader.length) - ESC_FOEHSIZE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	3b06      	subs	r3, #6
 8004d86:	72fb      	strb	r3, [r7, #11]
   password = etohl (foembx->foeheader.password);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	607b      	str	r3, [r7, #4]

   /* Get an address we can write the file to, if possible. */
   res = FOE_fopen (foembx->filename, data_len, password, FOE_OP_WRQ);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f103 000c 	add.w	r0, r3, #12
 8004d94:	7af9      	ldrb	r1, [r7, #11]
 8004d96:	2302      	movs	r3, #2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	f7ff fdd9 	bl	8004950 <FOE_fopen>
 8004d9e:	6038      	str	r0, [r7, #0]
   DPRINT("%s %sOK, file \"%s\"\n", __func__, (res == 0) ? "" : "N", foe_file_name);
   if (res == 0)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <FOE_write+0x66>
   {
      res = FOE_send_ack ();
 8004da6:	f7ff ff97 	bl	8004cd8 <FOE_send_ack>
 8004daa:	6038      	str	r0, [r7, #0]
      if (res)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <FOE_write+0x5e>
      {
         FOE_abort (res);
 8004db2:	6838      	ldr	r0, [r7, #0]
 8004db4:	f7ff ff56 	bl	8004c64 <FOE_abort>
 8004db8:	e006      	b.n	8004dc8 <FOE_write+0x6c>
      }
      else
      {
         FOEvar.foestate = FOE_WAIT_FOR_DATA;
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <FOE_write+0x74>)
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e002      	b.n	8004dc8 <FOE_write+0x6c>
      }
   }
   else
   {
      FOE_abort (res);
 8004dc2:	6838      	ldr	r0, [r7, #0]
 8004dc4:	f7ff ff4e 	bl	8004c64 <FOE_abort>
   }
}
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000644 	.word	0x20000644
 8004dd4:	20000124 	.word	0x20000124

08004dd8 <FOE_data>:
/** FoE data request handler. Validates and reads data until we're finished. Every
 * read frame followed by an Ack frame. On error we will send FOE Abort.
 *
 */
static void FOE_data ()
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint32_t packet;
   uint32_t data_len, ncopied;
   uint32_t res;

   if(FOEvar.foestate != FOE_WAIT_FOR_DATA)
 8004dde:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <FOE_data+0xf0>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d004      	beq.n	8004df0 <FOE_data+0x18>
   {
      FOE_abort(FOE_ERR_ILLEGAL);
 8004de6:	f248 0004 	movw	r0, #32772	; 0x8004
 8004dea:	f7ff ff3b 	bl	8004c64 <FOE_abort>
      return;
 8004dee:	e068      	b.n	8004ec2 <FOE_data+0xea>
   }

   foembx = (_FOE*)&MBX[0];
 8004df0:	4b36      	ldr	r3, [pc, #216]	; (8004ecc <FOE_data+0xf4>)
 8004df2:	617b      	str	r3, [r7, #20]
   data_len = etohs(foembx->mbxheader.length) - ESC_FOEHSIZE;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b06      	subs	r3, #6
 8004dfc:	613b      	str	r3, [r7, #16]
   packet = etohl(foembx->foeheader.packetnumber);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60fb      	str	r3, [r7, #12]

   if (packet != FOEvar.foepacket)
 8004e04:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <FOE_data+0xf0>)
 8004e06:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d004      	beq.n	8004e1a <FOE_data+0x42>
   {
      DPRINT("FOE_data packet error, packet: %d, foeheader.packet: %d\n",packet,FOEvar.foepacket);
      FOE_abort (FOE_ERR_PACKETNO);
 8004e10:	f248 0005 	movw	r0, #32773	; 0x8005
 8004e14:	f7ff ff26 	bl	8004c64 <FOE_abort>
 8004e18:	e053      	b.n	8004ec2 <FOE_data+0xea>
   }
   else if (data_len == 0)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d107      	bne.n	8004e30 <FOE_data+0x58>
   {
      DPRINT("FOE_data completed\n");
      FOE_fclose ();
 8004e20:	f7ff fec4 	bl	8004bac <FOE_fclose>
      res = FOE_send_ack ();
 8004e24:	f7ff ff58 	bl	8004cd8 <FOE_send_ack>
 8004e28:	6078      	str	r0, [r7, #4]
      FOE_init ();
 8004e2a:	f7ff feef 	bl	8004c0c <FOE_init>
 8004e2e:	e048      	b.n	8004ec2 <FOE_data+0xea>
   }
   else if (FOEvar.fposition + data_len > FOEvar.fend)
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <FOE_data+0xf0>)
 8004e32:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	441a      	add	r2, r3
 8004e3a:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <FOE_data+0xf0>)
 8004e3c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d904      	bls.n	8004e4e <FOE_data+0x76>
   {
      DPRINT("FOE_data disk full\n");
      FOE_abort (FOE_ERR_DISKFULL);
 8004e44:	f248 0003 	movw	r0, #32771	; 0x8003
 8004e48:	f7ff ff0c 	bl	8004c64 <FOE_abort>
 8004e4c:	e039      	b.n	8004ec2 <FOE_data+0xea>
   }
   else
   {
      ncopied = FOE_fwrite (foembx->data, data_len);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	330c      	adds	r3, #12
 8004e52:	6939      	ldr	r1, [r7, #16]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fe2f 	bl	8004ab8 <FOE_fwrite>
 8004e5a:	60b8      	str	r0, [r7, #8]
      if (!ncopied)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d104      	bne.n	8004e6c <FOE_data+0x94>
      {
         DPRINT("FOE_data no copied\n");
         FOE_abort (FOE_ERR_PROGERROR);
 8004e62:	f248 000b 	movw	r0, #32779	; 0x800b
 8004e66:	f7ff fefd 	bl	8004c64 <FOE_abort>
 8004e6a:	e02a      	b.n	8004ec2 <FOE_data+0xea>
      }
      else if (data_len == ESC_FOE_DATA_SIZE)
 8004e6c:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <FOE_data+0xf8>)
 8004e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e70:	3b0c      	subs	r3, #12
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d111      	bne.n	8004e9c <FOE_data+0xc4>
      {
         DPRINT("FOE_data data_len == FOE_DATA_SIZE\n");
         if (ncopied != data_len)
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d003      	beq.n	8004e88 <FOE_data+0xb0>
         {
            DPRINT("FOE_data only %d of %d copied\n",ncopied, data_len);
            FOE_abort (FOE_ERR_PROGERROR);
 8004e80:	f248 000b 	movw	r0, #32779	; 0x800b
 8004e84:	f7ff feee 	bl	8004c64 <FOE_abort>
         }
         res = FOE_send_ack ();
 8004e88:	f7ff ff26 	bl	8004cd8 <FOE_send_ack>
 8004e8c:	6078      	str	r0, [r7, #4]
         if (res)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d016      	beq.n	8004ec2 <FOE_data+0xea>
         {
            FOE_abort (res);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fee5 	bl	8004c64 <FOE_abort>
 8004e9a:	e012      	b.n	8004ec2 <FOE_data+0xea>
         }
      }
      else
      {
         if ((ncopied != data_len) || FOE_fclose ())
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d104      	bne.n	8004eae <FOE_data+0xd6>
 8004ea4:	f7ff fe82 	bl	8004bac <FOE_fclose>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <FOE_data+0xe0>
         {
            DPRINT("FOE_fclose failed to write extra buffer\n");
            FOE_abort (FOE_ERR_PROGERROR);
 8004eae:	f248 000b 	movw	r0, #32779	; 0x800b
 8004eb2:	f7ff fed7 	bl	8004c64 <FOE_abort>
 8004eb6:	e004      	b.n	8004ec2 <FOE_data+0xea>
         }
         else
         {
            DPRINT("FOE_data completed\n");
            res = FOE_send_ack ();
 8004eb8:	f7ff ff0e 	bl	8004cd8 <FOE_send_ack>
 8004ebc:	6078      	str	r0, [r7, #4]
            FOE_init ();
 8004ebe:	f7ff fea5 	bl	8004c0c <FOE_init>
         }
      }
   }
}
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000644 	.word	0x20000644
 8004ecc:	20000124 	.word	0x20000124
 8004ed0:	20000350 	.word	0x20000350

08004ed4 <FOE_error>:

/** FoE error requesthandler. Send an FOE Abort.
 *
 */
static void FOE_error ()
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
   /* Master panic! abort the transfer. */
   FOE_abort (0);
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f7ff fec3 	bl	8004c64 <FOE_abort>
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <ESC_foeprocess>:
 * data, distributing the mailboxes to appropriate FOE functions depending
 * on requested opcode.
 * On Error an FoE Error or FoE Abort will be sent.
 */
void ESC_foeprocess (void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _FOE *foembx;

   if (ESCvar.MBXrun == 0)
 8004eea:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <ESC_foeprocess+0xa8>)
 8004eec:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d046      	beq.n	8004f82 <ESC_foeprocess+0x9e>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 8004ef4:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <ESC_foeprocess+0xa8>)
 8004ef6:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d110      	bne.n	8004f20 <ESC_foeprocess+0x3c>
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <ESC_foeprocess+0xac>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10c      	bne.n	8004f20 <ESC_foeprocess+0x3c>
   {
      mbh = (_MBXh *) &MBX[0];
 8004f06:	4b23      	ldr	r3, [pc, #140]	; (8004f94 <ESC_foeprocess+0xb0>)
 8004f08:	607b      	str	r3, [r7, #4]
      if (mbh->mbxtype == MBXFOE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	795b      	ldrb	r3, [r3, #5]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d103      	bne.n	8004f20 <ESC_foeprocess+0x3c>
      {
         ESCvar.xoe = MBXFOE;
 8004f18:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <ESC_foeprocess+0xa8>)
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      }
   }
   if (ESCvar.xoe == MBXFOE)
 8004f20:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <ESC_foeprocess+0xa8>)
 8004f22:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d12c      	bne.n	8004f84 <ESC_foeprocess+0xa0>
   {
      foembx = (_FOE *) &MBX[0];
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <ESC_foeprocess+0xb0>)
 8004f2c:	603b      	str	r3, [r7, #0]
      /* Verify the size of the file data. */
      if (etohs (foembx->mbxheader.length) < ESC_FOEHSIZE)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d803      	bhi.n	8004f40 <ESC_foeprocess+0x5c>
      {
         FOE_abort (MBXERR_SIZETOOSHORT);
 8004f38:	2006      	movs	r0, #6
 8004f3a:	f7ff fe93 	bl	8004c64 <FOE_abort>
 8004f3e:	e018      	b.n	8004f72 <ESC_foeprocess+0x8e>
      }
      else
      {
         switch (foembx->foeheader.opcode)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	799b      	ldrb	r3, [r3, #6]
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	d00c      	beq.n	8004f62 <ESC_foeprocess+0x7e>
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	dc0d      	bgt.n	8004f68 <ESC_foeprocess+0x84>
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d002      	beq.n	8004f56 <ESC_foeprocess+0x72>
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d003      	beq.n	8004f5c <ESC_foeprocess+0x78>
 8004f54:	e008      	b.n	8004f68 <ESC_foeprocess+0x84>
         {
            case FOE_OP_WRQ:
            {
               DPRINT("FOE_OP_WRQ\n");
               FOE_write ();
 8004f56:	f7ff ff01 	bl	8004d5c <FOE_write>
               break;
 8004f5a:	e00a      	b.n	8004f72 <ESC_foeprocess+0x8e>
            }
            case FOE_OP_DATA:
            {
               DPRINT("FOE_OP_DATA\n");
               FOE_data ();
 8004f5c:	f7ff ff3c 	bl	8004dd8 <FOE_data>
               break;
 8004f60:	e007      	b.n	8004f72 <ESC_foeprocess+0x8e>
            }
#endif
            case FOE_OP_ERR:
            {
               DPRINT("FOE_OP_ERR\n");
               FOE_error ();
 8004f62:	f7ff ffb7 	bl	8004ed4 <FOE_error>
               break;
 8004f66:	e004      	b.n	8004f72 <ESC_foeprocess+0x8e>
            }
            default:
            {
               DPRINT("FOE_ERR_NOTDEFINED\n");
               FOE_abort (FOE_ERR_NOTDEFINED);
 8004f68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f6c:	f7ff fe7a 	bl	8004c64 <FOE_abort>
               break;
 8004f70:	bf00      	nop
            }
         }
      }
      MBXcontrol[0].state = MBXstate_idle;
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <ESC_foeprocess+0xac>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <ESC_foeprocess+0xa8>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8004f80:	e000      	b.n	8004f84 <ESC_foeprocess+0xa0>
      return;
 8004f82:	bf00      	nop
   }
}
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000350 	.word	0x20000350
 8004f90:	200002a4 	.word	0x200002a4
 8004f94:	20000124 	.word	0x20000124

08004f98 <ESC_read_hw>:
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

/* ESC read CSR function. */
static void ESC_read_hw (uint16_t address, void *buf, uint16_t len)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	6039      	str	r1, [r7, #0]
 8004fa2:	80fb      	strh	r3, [r7, #6]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	80bb      	strh	r3, [r7, #4]
   /* Read data from address on tmc slave. */
   tmc8462_esc_read_data (&tmc8462, buf, address, len);
 8004fa8:	88bb      	ldrh	r3, [r7, #4]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	4803      	ldr	r0, [pc, #12]	; (8004fbc <ESC_read_hw+0x24>)
 8004fb0:	f000 fa9e 	bl	80054f0 <tmc8462_esc_read_data>
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000a80 	.word	0x20000a80

08004fc0 <ESC_write_hw>:

/* ESC read CSR function. */
static void ESC_write_hw (uint16_t address, void *buf, uint16_t len)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	6039      	str	r1, [r7, #0]
 8004fca:	80fb      	strh	r3, [r7, #6]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80bb      	strh	r3, [r7, #4]
   /* Write data from address on tmc slave. */
   tmc8462_esc_write_data (&tmc8462, buf, address, len);
 8004fd0:	88bb      	ldrh	r3, [r7, #4]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	4803      	ldr	r0, [pc, #12]	; (8004fe4 <ESC_write_hw+0x24>)
 8004fd8:	f000 faea 	bl	80055b0 <tmc8462_esc_write_data>
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000a80 	.word	0x20000a80

08004fe8 <ESC_read_param>:

/* ESC read process data ram. */
static void ESC_read_param (uint16_t address, void *buf, uint16_t len)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	80fb      	strh	r3, [r7, #6]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80bb      	strh	r3, [r7, #4]
   /* FIXME: Update the contains of this function. */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <ESC_write_param>:

/* ESC write process data ram. */
static void ESC_write_param (uint16_t address, void *buf, uint16_t len)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	80fb      	strh	r3, [r7, #6]
 8005010:	4613      	mov	r3, r2
 8005012:	80bb      	strh	r3, [r7, #4]
   /* FIXME: Update the contains of this function. */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <ESC_read>:
 * @param[in]   address     - address of ESC register to read
 * @param[out]  buf         - pointer to buffer to read in
 * @param[in]   len         - number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	80fb      	strh	r3, [r7, #6]
 800502c:	4613      	mov	r3, r2
 800502e:	80bb      	strh	r3, [r7, #4]
   uint16_t size = 0u;
 8005030:	2300      	movs	r3, #0
 8005032:	81fb      	strh	r3, [r7, #14]
   uint8_t *temp_buf = (uint8_t *)buf;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	60bb      	str	r3, [r7, #8]

   /* Select Read function depending on address, process data ram or not. */
   if (address >= (uint16_t)TMC8462_ESC_PROCESS_DATA_RAM)
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	d339      	bcc.n	80050b4 <ESC_read+0x94>
   {
      /* Process read pram. */
      ESC_read_param (address, buf, len);
 8005040:	88ba      	ldrh	r2, [r7, #4]
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff ffce 	bl	8004fe8 <ESC_read_param>
 800504c:	e035      	b.n	80050ba <ESC_read+0x9a>
   else
   {
      while (0u < len)
      {
         /* We write maximum 4 bytes at the time. */
         size = (len > 4U) ? 4U : len;
 800504e:	88bb      	ldrh	r3, [r7, #4]
 8005050:	2b04      	cmp	r3, #4
 8005052:	bf28      	it	cs
 8005054:	2304      	movcs	r3, #4
 8005056:	81fb      	strh	r3, [r7, #14]

         /* If we got an odd address size is 1, 01b 11b is captured. */
         if (BIT0 == (address & BIT0))
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <ESC_read+0x48>
         {
            size = 1u;
 8005062:	2301      	movs	r3, #1
 8005064:	81fb      	strh	r3, [r7, #14]
 8005066:	e013      	b.n	8005090 <ESC_read+0x70>
         }
         /* If add 1xb and size != 1 and 3, allow size 2. */
         else if (BIT1 == (address & BIT1))
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <ESC_read+0x66>
         {
            size = (BIT0 == (size & BIT0)) ? 1u : 2u;
 8005072:	89fb      	ldrh	r3, [r7, #14]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <ESC_read+0x60>
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <ESC_read+0x62>
 8005080:	2302      	movs	r3, #2
 8005082:	81fb      	strh	r3, [r7, #14]
 8005084:	e004      	b.n	8005090 <ESC_read+0x70>
         }
         /* size 3 not valid. */
         else if (3u == size)
 8005086:	89fb      	ldrh	r3, [r7, #14]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d101      	bne.n	8005090 <ESC_read+0x70>
         {
            size = 1;
 800508c:	2301      	movs	r3, #1
 800508e:	81fb      	strh	r3, [r7, #14]
         }

         /* Read data from slave. */
         ESC_read_hw (address, temp_buf, size);
 8005090:	89fa      	ldrh	r2, [r7, #14]
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff ff7e 	bl	8004f98 <ESC_read_hw>

         /* Next address. */
         len -= size;
 800509c:	88ba      	ldrh	r2, [r7, #4]
 800509e:	89fb      	ldrh	r3, [r7, #14]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 80050a4:	89fb      	ldrh	r3, [r7, #14]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4413      	add	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]
         address += size;
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	89fb      	ldrh	r3, [r7, #14]
 80050b0:	4413      	add	r3, r2
 80050b2:	80fb      	strh	r3, [r7, #6]
      while (0u < len)
 80050b4:	88bb      	ldrh	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1c9      	bne.n	800504e <ESC_read+0x2e>
      }
   }

   /* Always providing AlEvent on every read or write. */
   ESC_read_hw (ESCREG_ALEVENT, (void* )&ESCvar.ALevent, sizeof(ESCvar.ALevent));
 80050ba:	2204      	movs	r2, #4
 80050bc:	4908      	ldr	r1, [pc, #32]	; (80050e0 <ESC_read+0xc0>)
 80050be:	f44f 7008 	mov.w	r0, #544	; 0x220
 80050c2:	f7ff ff69 	bl	8004f98 <ESC_read_hw>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <ESC_read+0xc4>)
 80050c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <ESC_read+0xc4>)
 80050d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000434 	.word	0x20000434
 80050e4:	20000350 	.word	0x20000350

080050e8 <ESC_write>:
 * @param[in]   address     - address of ESC register to write
 * @param[out]  buf         - pointer to buffer to read in
 * @param[in]   len         - number of bytes to read
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	80fb      	strh	r3, [r7, #6]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80bb      	strh	r3, [r7, #4]
   uint16_t size = 0u;
 80050f8:	2300      	movs	r3, #0
 80050fa:	81fb      	strh	r3, [r7, #14]
   uint8_t *temp_buf = (uint8_t *)buf;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	60bb      	str	r3, [r7, #8]

   /* Select Write function depending on address, process data ram or not */
   if (address >= (uint16_t)TMC8462_ESC_PROCESS_DATA_RAM)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d339      	bcc.n	800517c <ESC_write+0x94>
   {
      /* Process read pram. */
      ESC_write_param (address, buf, len);
 8005108:	88ba      	ldrh	r2, [r7, #4]
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ff78 	bl	8005004 <ESC_write_param>
 8005114:	e035      	b.n	8005182 <ESC_write+0x9a>
   else 
   {
      while (0u < len)
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4u) ? 4u : len;
 8005116:	88bb      	ldrh	r3, [r7, #4]
 8005118:	2b04      	cmp	r3, #4
 800511a:	bf28      	it	cs
 800511c:	2304      	movcs	r3, #4
 800511e:	81fb      	strh	r3, [r7, #14]

         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT0)
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <ESC_write+0x48>
         {
            size = 1;
 800512a:	2301      	movs	r3, #1
 800512c:	81fb      	strh	r3, [r7, #14]
 800512e:	e013      	b.n	8005158 <ESC_write+0x70>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT1)
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <ESC_write+0x66>
         {
            size = (size & BIT0) ? 1u : 2u;
 800513a:	89fb      	ldrh	r3, [r7, #14]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <ESC_write+0x60>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <ESC_write+0x62>
 8005148:	2302      	movs	r3, #2
 800514a:	81fb      	strh	r3, [r7, #14]
 800514c:	e004      	b.n	8005158 <ESC_write+0x70>
         }
         /* size 3 not valid */
         else if (3u == size)
 800514e:	89fb      	ldrh	r3, [r7, #14]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d101      	bne.n	8005158 <ESC_write+0x70>
         {
            size = 1u;
 8005154:	2301      	movs	r3, #1
 8005156:	81fb      	strh	r3, [r7, #14]
         }

         /* Write data to slave. */
         ESC_write_hw (address, temp_buf, size);
 8005158:	89fa      	ldrh	r2, [r7, #14]
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff ff2e 	bl	8004fc0 <ESC_write_hw>

         /* next address */
         len -= size;
 8005164:	88ba      	ldrh	r2, [r7, #4]
 8005166:	89fb      	ldrh	r3, [r7, #14]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 800516c:	89fb      	ldrh	r3, [r7, #14]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4413      	add	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
         address += size;
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	4413      	add	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
      while (0u < len)
 800517c:	88bb      	ldrh	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1c9      	bne.n	8005116 <ESC_write+0x2e>
      }
   }

   /* Always providing AlEvent on every read or write. */
   ESC_write_hw (ESCREG_ALEVENT, (void* )&ESCvar.ALevent, sizeof(ESCvar.ALevent));
 8005182:	2204      	movs	r2, #4
 8005184:	4908      	ldr	r1, [pc, #32]	; (80051a8 <ESC_write+0xc0>)
 8005186:	f44f 7008 	mov.w	r0, #544	; 0x220
 800518a:	f7ff ff19 	bl	8004fc0 <ESC_write_hw>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <ESC_write+0xc4>)
 8005190:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005194:	b29b      	uxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <ESC_write+0xc4>)
 800519a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20000434 	.word	0x20000434
 80051ac:	20000350 	.word	0x20000350

080051b0 <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
   /* Initialize the hw driver corresponding ic etherCat used in this project. */
   tmc8462_initConfig (&tmc8462, &tmc8462_config_esc, &tmc8462_config_mfc);
 80051b8:	4a04      	ldr	r2, [pc, #16]	; (80051cc <ESC_init+0x1c>)
 80051ba:	4905      	ldr	r1, [pc, #20]	; (80051d0 <ESC_init+0x20>)
 80051bc:	4805      	ldr	r0, [pc, #20]	; (80051d4 <ESC_init+0x24>)
 80051be:	f000 fa37 	bl	8005630 <tmc8462_initConfig>

   /* TODO: Add function to reset data link layer of slave. */
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	2000086c 	.word	0x2000086c
 80051d0:	20000658 	.word	0x20000658
 80051d4:	20000a80 	.word	0x20000a80

080051d8 <SpiDma_Init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

bool SpiDma_Init (tSpiDmaModule * const me)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
   bool ret = true;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]

   /* Create the spiDma event group. */
   spiDma_event = xEventGroupCreate();
 80051e4:	f004 fda5 	bl	8009d32 <xEventGroupCreate>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4a06      	ldr	r2, [pc, #24]	; (8005204 <SpiDma_Init+0x2c>)
 80051ec:	6013      	str	r3, [r2, #0]

   /* Was the event group created successfully? */
   if (NULL == spiDma_event) {
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <SpiDma_Init+0x2c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <SpiDma_Init+0x22>
      ret = false;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
   }

   return ret;
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000a88 	.word	0x20000a88

08005208 <SpiDma_CsPinChangeState>:
{
   return ((me->states != SPIDMA_IDLE) ? true : false);
}

void SpiDma_CsPinChangeState (tSpiDmaModule * const me, bool state)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
   GPIO_PinState pinSt = GPIO_PIN_RESET;
 8005214:	2300      	movs	r3, #0
 8005216:	73fb      	strb	r3, [r7, #15]

   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <SpiDma_CsPinChangeState+0x1c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	e006      	b.n	8005232 <SpiDma_CsPinChangeState+0x2a>
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 8005232:	73fb      	strb	r3, [r7, #15]
   
   HAL_GPIO_WritePin (me->config.csPort, me->config.csPin, pinSt);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6858      	ldr	r0, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	891b      	ldrh	r3, [r3, #8]
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	4619      	mov	r1, r3
 8005240:	f002 f8c6 	bl	80073d0 <HAL_GPIO_WritePin>
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <SpiDma_write>:

bool SpiDma_write (tSpiDmaModule * const me, uint8_t * data_ptr, uint16_t len)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
   bool ret = true;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
   EventBits_t bits = (EventBits_t)0U; 
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]

   /* Verify the parameters input. */
   if (NULL == me)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <SpiDma_write+0x22>
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
 8005268:	2300      	movs	r3, #0
 800526a:	75fb      	strb	r3, [r7, #23]
 800526c:	e00a      	b.n	8005284 <SpiDma_write+0x38>
   }
   else if (NULL == data_ptr)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <SpiDma_write+0x2e>
   {
      /* Pointer to data array is NULL. */
      ret = false;
 8005274:	2300      	movs	r3, #0
 8005276:	75fb      	strb	r3, [r7, #23]
 8005278:	e004      	b.n	8005284 <SpiDma_write+0x38>
   }
   else if (0 >= len)
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <SpiDma_write+0x38>
   {
      /* The length of data input is equal 0. */
      ret = false;
 8005280:	2300      	movs	r3, #0
 8005282:	75fb      	strb	r3, [r7, #23]
   }

   /* If the params input are valid, send data to DMA to transfer this to slave.*/
   if (ret)
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d023      	beq.n	80052d2 <SpiDma_write+0x86>
   {
      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_ptr, len);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	4618      	mov	r0, r3
 8005294:	f007 ffd9 	bl	800d24a <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_Transmit_DMA (me->spiModule, me->ptrTxArr, len);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6958      	ldr	r0, [r3, #20]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	4619      	mov	r1, r3
 80052a4:	f003 f884 	bl	80083b0 <HAL_SPI_Transmit_DMA>

      /* Change state into TX when the Spi  */
      me->states = SPIDMA_TX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	741a      	strb	r2, [r3, #16]

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_TX_DONE, pdTRUE, pdFALSE, (me->timeOut/portTICK_PERIOD_MS));
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <SpiDma_write+0x90>)
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8c1b      	ldrh	r3, [r3, #32]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	2201      	movs	r2, #1
 80052bc:	2101      	movs	r1, #1
 80052be:	f004 fd53 	bl	8009d68 <xEventGroupWaitBits>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Update new state. */
      if (SPIDMA_TX_DONE != (bits & SPIDMA_TX_DONE))
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <SpiDma_write+0x86>
      {
         ret = false;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
      }
   }

   /* Return state. */
   return ret;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000a88 	.word	0x20000a88

080052e0 <SpiDma_read>:

bool SpiDma_read (tSpiDmaModule * const me, uint8_t * data_rx_ptr, uint8_t * data_tx_dummy, uint16_t len)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	807b      	strh	r3, [r7, #2]
   bool ret = true;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
   EventBits_t bits = (EventBits_t)0U; 
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]

   /* Verify the parameters input. */
   if (NULL == me)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <SpiDma_read+0x22>
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]
 8005300:	e00d      	b.n	800531e <SpiDma_read+0x3e>
   }
   else if ((NULL == data_rx_ptr) || (NULL == data_tx_dummy))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <SpiDma_read+0x2e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <SpiDma_read+0x34>
   {
      /* Pointer to data array is NULL. */
      ret = false;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]
 8005312:	e004      	b.n	800531e <SpiDma_read+0x3e>
   }
   else if (0 >= len)
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <SpiDma_read+0x3e>
   {
      /* The length of data input is equal 0. */
      ret = false;
 800531a:	2300      	movs	r3, #0
 800531c:	75fb      	strb	r3, [r7, #23]
   }
   
   /* If the params input are valid, send data to DMA to transfer dummy to read data from slave.*/
   if (ret)
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02b      	beq.n	800537c <SpiDma_read+0x9c>
   {
      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_tx_dummy, len);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	887a      	ldrh	r2, [r7, #2]
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4618      	mov	r0, r3
 800532e:	f007 ff8c 	bl	800d24a <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_TransmitReceive_DMA (me->spiModule, me->ptrTxArr, me->ptrRxArr, len);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6958      	ldr	r0, [r3, #20]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6999      	ldr	r1, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	69da      	ldr	r2, [r3, #28]
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	f003 f906 	bl	8008550 <HAL_SPI_TransmitReceive_DMA>

      /* Change state into TX. */
      me->states = SPIDMA_RX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2202      	movs	r2, #2
 8005348:	741a      	strb	r2, [r3, #16]

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_RX_DONE, pdTRUE, pdFALSE, (me->timeOut/portTICK_PERIOD_MS));
 800534a:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <SpiDma_read+0xa8>)
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8c1b      	ldrh	r3, [r3, #32]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	2201      	movs	r2, #1
 8005358:	2102      	movs	r1, #2
 800535a:	f004 fd05 	bl	8009d68 <xEventGroupWaitBits>
 800535e:	6138      	str	r0, [r7, #16]

      /* Update new state. */
      if (SPIDMA_RX_DONE != (bits & SPIDMA_RX_DONE))
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <SpiDma_read+0x8e>
      {
         ret = false;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
      }

      /* Copy data to data array return. */
      memcpy (data_rx_ptr, me->ptrRxArr, len);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	4619      	mov	r1, r3
 8005376:	68b8      	ldr	r0, [r7, #8]
 8005378:	f007 ff67 	bl	800d24a <memcpy>
   }

   /* Return state. */
   return ret;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000a88 	.word	0x20000a88

0800538c <SpiDma_WriteCompleteIrq>:


void SpiDma_WriteCompleteIrq (tSpiDmaModule * const me)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]

   /* Write data complete, change the state of this module to TxEnd. */
   me->states = SPIDMA_IDLE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	741a      	strb	r2, [r3, #16]

   /* Set bit to inform the TX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_TX_DONE, &xHigherPriorityTaskWoken);
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <SpiDma_WriteCompleteIrq+0x2c>)
 80053a0:	6819      	ldr	r1, [r3, #0]
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	2201      	movs	r2, #1
 80053a8:	4804      	ldr	r0, [pc, #16]	; (80053bc <SpiDma_WriteCompleteIrq+0x30>)
 80053aa:	f007 f8c1 	bl	800c530 <xTimerPendFunctionCallFromISR>
}  
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000a88 	.word	0x20000a88
 80053bc:	0800a01b 	.word	0x0800a01b

080053c0 <SpiDma_ReadCompleteIrq>:

void SpiDma_ReadCompleteIrq (tSpiDmaModule * const me)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]

   /* Read data complete, change the state of this module to RxEnd. */
   me->states = SPIDMA_IDLE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	741a      	strb	r2, [r3, #16]

   /* Set bit to inform the RX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_RX_DONE, &xHigherPriorityTaskWoken);
 80053d2:	4b06      	ldr	r3, [pc, #24]	; (80053ec <SpiDma_ReadCompleteIrq+0x2c>)
 80053d4:	6819      	ldr	r1, [r3, #0]
 80053d6:	f107 030c 	add.w	r3, r7, #12
 80053da:	2202      	movs	r2, #2
 80053dc:	4804      	ldr	r0, [pc, #16]	; (80053f0 <SpiDma_ReadCompleteIrq+0x30>)
 80053de:	f007 f8a7 	bl	800c530 <xTimerPendFunctionCallFromISR>
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000a88 	.word	0x20000a88
 80053f0:	0800a01b 	.word	0x0800a01b

080053f4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
   SpiDma_WriteCompleteIrq (&spiDmaModule);
 80053fc:	4803      	ldr	r0, [pc, #12]	; (800540c <HAL_SPI_TxCpltCallback+0x18>)
 80053fe:	f7ff ffc5 	bl	800538c <SpiDma_WriteCompleteIrq>
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000020 	.word	0x20000020

08005410 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
   SpiDma_ReadCompleteIrq (&spiDmaModule);
 8005418:	4803      	ldr	r0, [pc, #12]	; (8005428 <HAL_SPI_RxCpltCallback+0x18>)
 800541a:	f7ff ffd1 	bl	80053c0 <SpiDma_ReadCompleteIrq>
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000020 	.word	0x20000020

0800542c <tmc8462_esc_read>:

#include "TMC8462.h"
#include "spiDma.h"

void tmc8462_esc_read (TMC8462TypeDef *tmc8462, uint16_t address)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	807b      	strh	r3, [r7, #2]
   uint8_t command[4] = {0u};
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)(address >> 5U);
 800543c:	887b      	ldrh	r3, [r7, #2]
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	b29b      	uxth	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	733b      	strb	r3, [r7, #12]
   command[1] = (uint8_t)((address << 3U) | TMC8462_CMD_ADDR_EXT);
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	b25b      	sxtb	r3, r3
 800544c:	f043 0306 	orr.w	r3, r3, #6
 8005450:	b25b      	sxtb	r3, r3
 8005452:	b2db      	uxtb	r3, r3
 8005454:	737b      	strb	r3, [r7, #13]
   command[2] = (uint8_t)(((address >> 8U) & 0xE0U) | (TMC8462_CMD_READ_WAIT << 2U));
 8005456:	887b      	ldrh	r3, [r7, #2]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	b29b      	uxth	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f023 031f 	bic.w	r3, r3, #31
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f043 030c 	orr.w	r3, r3, #12
 8005468:	b2db      	uxtb	r3, r3
 800546a:	73bb      	strb	r3, [r7, #14]
   command[3] = (uint8_t)(0xFFU);
 800546c:	23ff      	movs	r3, #255	; 0xff
 800546e:	73fb      	strb	r3, [r7, #15]
   
   /* Send the command to tmc slave. */
   SpiDma_write (&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	2204      	movs	r2, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4803      	ldr	r0, [pc, #12]	; (8005488 <tmc8462_esc_read+0x5c>)
 800547a:	f7ff fee7 	bl	800524c <SpiDma_write>
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000020 	.word	0x20000020

0800548c <tmc8462_esc_write>:

void tmc8462_esc_write(TMC8462TypeDef *tmc8462, uint16_t address)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	807b      	strh	r3, [r7, #2]
   uint8_t command[3] = {0u};
 8005498:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <tmc8462_esc_write+0x5c>)
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	81bb      	strh	r3, [r7, #12]
 800549e:	2300      	movs	r3, #0
 80054a0:	73bb      	strb	r3, [r7, #14]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)(address >> 5U);
 80054a2:	887b      	ldrh	r3, [r7, #2]
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	733b      	strb	r3, [r7, #12]
   command[1] = (uint8_t)((address << 3U) | TMC8462_CMD_ADDR_EXT);
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	b25b      	sxtb	r3, r3
 80054b2:	f043 0306 	orr.w	r3, r3, #6
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	737b      	strb	r3, [r7, #13]
   command[2] = (uint8_t)(((address >> 8U) & 0xE0U) | (TMC8462_CMD_WRITE << 2U));
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	f023 031f 	bic.w	r3, r3, #31
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f043 0310 	orr.w	r3, r3, #16
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	73bb      	strb	r3, [r7, #14]

   /* Send the command to tmc slave. */
   SpiDma_write (&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 80054d2:	f107 030c 	add.w	r3, r7, #12
 80054d6:	2203      	movs	r2, #3
 80054d8:	4619      	mov	r1, r3
 80054da:	4804      	ldr	r0, [pc, #16]	; (80054ec <tmc8462_esc_write+0x60>)
 80054dc:	f7ff feb6 	bl	800524c <SpiDma_write>
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	0800e16c 	.word	0x0800e16c
 80054ec:	20000020 	.word	0x20000020

080054f0 <tmc8462_esc_read_data>:
	/* Send the command to tmc slave. */
	SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
}

void tmc8462_esc_read_data (TMC8462TypeDef *tmc8462, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4611      	mov	r1, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	460b      	mov	r3, r1
 8005500:	80fb      	strh	r3, [r7, #6]
 8005502:	4613      	mov	r3, r2
 8005504:	80bb      	strh	r3, [r7, #4]
   uint16_t iter = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	82fb      	strh	r3, [r7, #22]
   uint8_t * tx_dummy_arr = pvPortMalloc(len);
 800550a:	88bb      	ldrh	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	f007 fb5f 	bl	800cbd0 <pvPortMalloc>
 8005512:	6138      	str	r0, [r7, #16]

   /* Prepare the tx data dummy. */
   for (iter = 0U; iter < len; iter++)
 8005514:	2300      	movs	r3, #0
 8005516:	82fb      	strh	r3, [r7, #22]
 8005518:	e00f      	b.n	800553a <tmc8462_esc_read_data+0x4a>
   {
      tx_dummy_arr[iter] = (iter < (len - 1)) ? 0x00 : 0xFF;
 800551a:	8afa      	ldrh	r2, [r7, #22]
 800551c:	88bb      	ldrh	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	429a      	cmp	r2, r3
 8005522:	da01      	bge.n	8005528 <tmc8462_esc_read_data+0x38>
 8005524:	2100      	movs	r1, #0
 8005526:	e000      	b.n	800552a <tmc8462_esc_read_data+0x3a>
 8005528:	21ff      	movs	r1, #255	; 0xff
 800552a:	8afb      	ldrh	r3, [r7, #22]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	460a      	mov	r2, r1
 8005532:	701a      	strb	r2, [r3, #0]
   for (iter = 0U; iter < len; iter++)
 8005534:	8afb      	ldrh	r3, [r7, #22]
 8005536:	3301      	adds	r3, #1
 8005538:	82fb      	strh	r3, [r7, #22]
 800553a:	8afa      	ldrh	r2, [r7, #22]
 800553c:	88bb      	ldrh	r3, [r7, #4]
 800553e:	429a      	cmp	r2, r3
 8005540:	d3eb      	bcc.n	800551a <tmc8462_esc_read_data+0x2a>
   }
   
   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState (&spiDmaModule, true);
 8005542:	2101      	movs	r1, #1
 8005544:	480c      	ldr	r0, [pc, #48]	; (8005578 <tmc8462_esc_read_data+0x88>)
 8005546:	f7ff fe5f 	bl	8005208 <SpiDma_CsPinChangeState>

   /* Send Read command to address. */
   tmc8462_esc_read (tmc8462, address);
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	4619      	mov	r1, r3
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff ff6c 	bl	800542c <tmc8462_esc_read>

   /* Read data. */
   SpiDma_read (&spiDmaModule, data_ptr, tx_dummy_arr, len);
 8005554:	88bb      	ldrh	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4807      	ldr	r0, [pc, #28]	; (8005578 <tmc8462_esc_read_data+0x88>)
 800555c:	f7ff fec0 	bl	80052e0 <SpiDma_read>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState (&spiDmaModule, false);
 8005560:	2100      	movs	r1, #0
 8005562:	4805      	ldr	r0, [pc, #20]	; (8005578 <tmc8462_esc_read_data+0x88>)
 8005564:	f7ff fe50 	bl	8005208 <SpiDma_CsPinChangeState>

   /* Free the data. */
   vPortFree (tx_dummy_arr);
 8005568:	6938      	ldr	r0, [r7, #16]
 800556a:	f007 fbfd 	bl	800cd68 <vPortFree>
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000020 	.word	0x20000020

0800557c <tmc8462_esc_read_16>:

	return buffer;
}

uint16_t tmc8462_esc_read_16(TMC8462TypeDef *tmc8462, uint16_t address)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];

	tmc8462_esc_read_data(tmc8462, data, address, 2);
 8005588:	887a      	ldrh	r2, [r7, #2]
 800558a:	f107 010c 	add.w	r1, r7, #12
 800558e:	2302      	movs	r3, #2
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ffad 	bl	80054f0 <tmc8462_esc_read_data>

	return _8_16(data[1], data[0]);
 8005596:	7b7b      	ldrb	r3, [r7, #13]
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	b21a      	sxth	r2, r3
 800559c:	7b3b      	ldrb	r3, [r7, #12]
 800559e:	b21b      	sxth	r3, r3
 80055a0:	4313      	orrs	r3, r2
 80055a2:	b21b      	sxth	r3, r3
 80055a4:	b29b      	uxth	r3, r3
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <tmc8462_esc_write_data>:

	return _8_32(data[3], data[2], data[1], data[0]);
}

void tmc8462_esc_write_data (TMC8462TypeDef *tmc8462, uint8_t *data_ptr, uint16_t address, uint16_t len)
{   
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4611      	mov	r1, r2
 80055bc:	461a      	mov	r2, r3
 80055be:	460b      	mov	r3, r1
 80055c0:	80fb      	strh	r3, [r7, #6]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80bb      	strh	r3, [r7, #4]
   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState (&spiDmaModule, true);
 80055c6:	2101      	movs	r1, #1
 80055c8:	480a      	ldr	r0, [pc, #40]	; (80055f4 <tmc8462_esc_write_data+0x44>)
 80055ca:	f7ff fe1d 	bl	8005208 <SpiDma_CsPinChangeState>

	/* Send request write. */
	tmc8462_esc_write (tmc8462, address);
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	4619      	mov	r1, r3
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff ff5a 	bl	800548c <tmc8462_esc_write>

	/* Send data to slave. */
	SpiDma_write (&spiDmaModule, data_ptr, len);
 80055d8:	88bb      	ldrh	r3, [r7, #4]
 80055da:	461a      	mov	r2, r3
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	4805      	ldr	r0, [pc, #20]	; (80055f4 <tmc8462_esc_write_data+0x44>)
 80055e0:	f7ff fe34 	bl	800524c <SpiDma_write>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState (&spiDmaModule, false);
 80055e4:	2100      	movs	r1, #0
 80055e6:	4803      	ldr	r0, [pc, #12]	; (80055f4 <tmc8462_esc_write_data+0x44>)
 80055e8:	f7ff fe0e 	bl	8005208 <SpiDma_CsPinChangeState>
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000020 	.word	0x20000020

080055f8 <tmc8462_esc_write_16>:
{
	tmc8462_esc_write_data (tmc8462, &value, address, 1);
}

void tmc8462_esc_write_16 (TMC8462TypeDef *tmc8462, uint16_t address, uint16_t value)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	807b      	strh	r3, [r7, #2]
 8005604:	4613      	mov	r3, r2
 8005606:	803b      	strh	r3, [r7, #0]
	uint8_t data[2];

	data[0] = BYTE(value, 0);
 8005608:	883b      	ldrh	r3, [r7, #0]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	733b      	strb	r3, [r7, #12]
	data[1] = BYTE(value, 1);
 800560e:	883b      	ldrh	r3, [r7, #0]
 8005610:	0a1b      	lsrs	r3, r3, #8
 8005612:	b29b      	uxth	r3, r3
 8005614:	b2db      	uxtb	r3, r3
 8005616:	737b      	strb	r3, [r7, #13]
	tmc8462_esc_write_data (tmc8462, data, address, 2);
 8005618:	887a      	ldrh	r2, [r7, #2]
 800561a:	f107 010c 	add.w	r1, r7, #12
 800561e:	2302      	movs	r3, #2
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ffc5 	bl	80055b0 <tmc8462_esc_write_data>
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <tmc8462_initConfig>:
		tmc8462_mfc_write_data(tmc8462, value, address, 4);
	}
}

void tmc8462_initConfig(TMC8462TypeDef *tmc8462, ConfigurationTypeDef *tmc8462_config_esc, ConfigurationTypeDef *tmc8462_config_mfc)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
	tmc8462->config_esc = tmc8462_config_esc;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	601a      	str	r2, [r3, #0]
	tmc8462->config_mfc = tmc8462_config_mfc;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]

	/* Initialize the SPI_DMA module. */
	SpiDma_Init (&spiDmaModule);
 8005648:	4811      	ldr	r0, [pc, #68]	; (8005690 <tmc8462_initConfig+0x60>)
 800564a:	f7ff fdc5 	bl	80051d8 <SpiDma_Init>

	/* Verify the connection with tmc. */
	while (TMC8462_FIELD_READ(tmc8462, tmc8462_esc_read_16, TMC8462_ESC_PDI_CTRL, TMC8462_ESC_PDI_MODE_MASK, TMC8462_ESC_PDI_MODE_SHIFT) != TMC8462_PDI_SPI_SLAVE);
 800564e:	bf00      	nop
 8005650:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff ff91 	bl	800557c <tmc8462_esc_read_16>
 800565a:	4603      	mov	r3, r0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b05      	cmp	r3, #5
 8005660:	d1f6      	bne.n	8005650 <tmc8462_initConfig+0x20>

	/* Reset all register status of slave. */
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_STATUS, FIELD_SET(TMC8462_EC_STATE_INIT, TMC8462_ESC_AL_ERROR_MASK, TMC8462_ESC_AL_ERROR_SHIFT, true));
 8005662:	2211      	movs	r2, #17
 8005664:	f44f 7198 	mov.w	r1, #304	; 0x130
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff ffc5 	bl	80055f8 <tmc8462_esc_write_16>
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_CODE, 0x0000);
 800566e:	2200      	movs	r2, #0
 8005670:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff ffbf 	bl	80055f8 <tmc8462_esc_write_16>
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_EVENT_MASK_LO, 0xFF0E);
 800567a:	f64f 720e 	movw	r2, #65294	; 0xff0e
 800567e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff ffb8 	bl	80055f8 <tmc8462_esc_write_16>
 8005688:	bf00      	nop
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000020 	.word	0x20000020

08005694 <cb_get_inputs>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

void cb_get_inputs (void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0

}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <cb_set_outputs>:

void cb_set_outputs (void)
{
 80056a2:	b480      	push	{r7}
 80056a4:	af00      	add	r7, sp, #0

}
 80056a6:	bf00      	nop
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <ethCat_check_dc_handler>:

uint16_t ethCat_check_dc_handler (void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0

}
 80056b4:	bf00      	nop
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <ethCat_hw_eep_handler>:

void ethCat_hw_eep_handler (void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0

}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <ethCat_Init>:

void ethCat_Init (void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
      .esc_hw_interrupt_disable = NULL,
      .esc_hw_eep_handler = ethCat_hw_eep_handler,
      .esc_check_dc_handler = ethCat_check_dc_handler,
   };

   ecat_slv_init (&ethCat_cfg);
 80056d4:	4802      	ldr	r0, [pc, #8]	; (80056e0 <ethCat_Init+0x10>)
 80056d6:	f7fb f937 	bl	8000948 <ecat_slv_init>
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000044 	.word	0x20000044

080056e4 <ethCat_Task>:

void ethCat_Task (void const * argument)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
   /* Initialize the modules which used by this application. */
   ethCat_Init();
 80056ec:	f7ff fff0 	bl	80056d0 <ethCat_Init>

   /* Sit in main loop of this task. */
   while (true)
   {
      ecat_slv();
 80056f0:	f7fb f920 	bl	8000934 <ecat_slv>
 80056f4:	e7fc      	b.n	80056f0 <ethCat_Task+0xc>
	...

080056f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <MX_DMA_Init+0x4c>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <MX_DMA_Init+0x4c>)
 8005708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800570c:	6313      	str	r3, [r2, #48]	; 0x30
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <MX_DMA_Init+0x4c>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800571a:	2200      	movs	r2, #0
 800571c:	2105      	movs	r1, #5
 800571e:	2038      	movs	r0, #56	; 0x38
 8005720:	f000 fe6c 	bl	80063fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005724:	2038      	movs	r0, #56	; 0x38
 8005726:	f000 fe95 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800572a:	2200      	movs	r2, #0
 800572c:	2105      	movs	r1, #5
 800572e:	203a      	movs	r0, #58	; 0x3a
 8005730:	f000 fe64 	bl	80063fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005734:	203a      	movs	r0, #58	; 0x3a
 8005736:	f000 fe8d 	bl	8006454 <HAL_NVIC_EnableIRQ>

}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800

08005748 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0

}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
return 0;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8005766:	b480      	push	{r7}
 8005768:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <PreSleepProcessing>:
/* USER CODE END 4 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80057c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4a06      	ldr	r2, [pc, #24]	; (80057e4 <vApplicationGetIdleTaskMemory+0x30>)
 80057ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2280      	movs	r2, #128	; 0x80
 80057d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000aa8 	.word	0x20000aa8
 80057e4:	20000b60 	.word	0x20000b60

080057e8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a07      	ldr	r2, [pc, #28]	; (8005814 <vApplicationGetTimerTaskMemory+0x2c>)
 80057f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4a06      	ldr	r2, [pc, #24]	; (8005818 <vApplicationGetTimerTaskMemory+0x30>)
 80057fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005806:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	20000d60 	.word	0x20000d60
 8005818:	20000e18 	.word	0x20000e18

0800581c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800581c:	b5b0      	push	{r4, r5, r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of appTestTask */
  osThreadDef(appTestTask, testTask, osPriorityNormal, 0, 256);
 8005822:	4b16      	ldr	r3, [pc, #88]	; (800587c <MX_FREERTOS_Init+0x60>)
 8005824:	f107 041c 	add.w	r4, r7, #28
 8005828:	461d      	mov	r5, r3
 800582a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800582c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800582e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  appTestTaskHandle = osThreadCreate(osThread(appTestTask), NULL);
 8005836:	f107 031c 	add.w	r3, r7, #28
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f004 fa0c 	bl	8009c5a <osThreadCreate>
 8005842:	4603      	mov	r3, r0
 8005844:	4a0e      	ldr	r2, [pc, #56]	; (8005880 <MX_FREERTOS_Init+0x64>)
 8005846:	6013      	str	r3, [r2, #0]

  /* definition and creation of ethCatSlvTask */
  osThreadDef(ethCatSlvTask, ethCat_Task, osPriorityHigh, 0, 1024);
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <MX_FREERTOS_Init+0x68>)
 800584a:	463c      	mov	r4, r7
 800584c:	461d      	mov	r5, r3
 800584e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005852:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethCatSlvTaskHandle = osThreadCreate(osThread(ethCatSlvTask), NULL);
 800585a:	463b      	mov	r3, r7
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f004 f9fb 	bl	8009c5a <osThreadCreate>
 8005864:	4603      	mov	r3, r0
 8005866:	4a08      	ldr	r2, [pc, #32]	; (8005888 <MX_FREERTOS_Init+0x6c>)
 8005868:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
#if IS_APPTEST_RUN == 0
  osThreadTerminate (appTestTaskHandle);
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <MX_FREERTOS_Init+0x64>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f004 fa3f 	bl	8009cf2 <osThreadTerminate>
#elif IS_APPTEST_RUN == 1
  osThreadTerminate (ethCatSlvTaskHandle);
#endif
  /* USER CODE END RTOS_THREADS */

}
 8005874:	bf00      	nop
 8005876:	3738      	adds	r7, #56	; 0x38
 8005878:	46bd      	mov	sp, r7
 800587a:	bdb0      	pop	{r4, r5, r7, pc}
 800587c:	0800e1bc 	.word	0x0800e1bc
 8005880:	20000aa0 	.word	0x20000aa0
 8005884:	0800e1d8 	.word	0x0800e1d8
 8005888:	20000aa4 	.word	0x20000aa4

0800588c <testTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_testTask */
__weak void testTask(void const * argument)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN testTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005894:	2001      	movs	r0, #1
 8005896:	f004 fa38 	bl	8009d0a <osDelay>
 800589a:	e7fb      	b.n	8005894 <testTask+0x8>

0800589c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a2:	f107 0314 	add.w	r3, r7, #20
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	4b4e      	ldr	r3, [pc, #312]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	4a4d      	ldr	r2, [pc, #308]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058bc:	f043 0304 	orr.w	r3, r3, #4
 80058c0:	6313      	str	r3, [r2, #48]	; 0x30
 80058c2:	4b4b      	ldr	r3, [pc, #300]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	4b47      	ldr	r3, [pc, #284]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	4a46      	ldr	r2, [pc, #280]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	6313      	str	r3, [r2, #48]	; 0x30
 80058de:	4b44      	ldr	r3, [pc, #272]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	4b40      	ldr	r3, [pc, #256]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	4a3f      	ldr	r2, [pc, #252]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6313      	str	r3, [r2, #48]	; 0x30
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <MX_GPIO_Init+0x154>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <MX_GPIO_Init+0x154>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	4a38      	ldr	r2, [pc, #224]	; (80059f0 <MX_GPIO_Init+0x154>)
 8005910:	f043 0302 	orr.w	r3, r3, #2
 8005914:	6313      	str	r3, [r2, #48]	; 0x30
 8005916:	4b36      	ldr	r3, [pc, #216]	; (80059f0 <MX_GPIO_Init+0x154>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005922:	2300      	movs	r3, #0
 8005924:	603b      	str	r3, [r7, #0]
 8005926:	4b32      	ldr	r3, [pc, #200]	; (80059f0 <MX_GPIO_Init+0x154>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	4a31      	ldr	r2, [pc, #196]	; (80059f0 <MX_GPIO_Init+0x154>)
 800592c:	f043 0308 	orr.w	r3, r3, #8
 8005930:	6313      	str	r3, [r2, #48]	; 0x30
 8005932:	4b2f      	ldr	r3, [pc, #188]	; (80059f0 <MX_GPIO_Init+0x154>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800593e:	2200      	movs	r2, #0
 8005940:	2140      	movs	r1, #64	; 0x40
 8005942:	482c      	ldr	r0, [pc, #176]	; (80059f4 <MX_GPIO_Init+0x158>)
 8005944:	f001 fd44 	bl	80073d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800594c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800594e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005958:	f107 0314 	add.w	r3, r7, #20
 800595c:	4619      	mov	r1, r3
 800595e:	4826      	ldr	r0, [pc, #152]	; (80059f8 <MX_GPIO_Init+0x15c>)
 8005960:	f001 fa9c 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005964:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005968:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800596a:	2303      	movs	r3, #3
 800596c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005972:	f107 0314 	add.w	r3, r7, #20
 8005976:	4619      	mov	r1, r3
 8005978:	481f      	ldr	r0, [pc, #124]	; (80059f8 <MX_GPIO_Init+0x15c>)
 800597a:	f001 fa8f 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 800597e:	f649 7313 	movw	r3, #40723	; 0x9f13
 8005982:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005984:	2303      	movs	r3, #3
 8005986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800598c:	f107 0314 	add.w	r3, r7, #20
 8005990:	4619      	mov	r1, r3
 8005992:	481a      	ldr	r0, [pc, #104]	; (80059fc <MX_GPIO_Init+0x160>)
 8005994:	f001 fa82 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8005998:	f24f 73bf 	movw	r3, #63423	; 0xf7bf
 800599c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800599e:	2303      	movs	r3, #3
 80059a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059a6:	f107 0314 	add.w	r3, r7, #20
 80059aa:	4619      	mov	r1, r3
 80059ac:	4811      	ldr	r0, [pc, #68]	; (80059f4 <MX_GPIO_Init+0x158>)
 80059ae:	f001 fa75 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059b2:	2304      	movs	r3, #4
 80059b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059b6:	2303      	movs	r3, #3
 80059b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059be:	f107 0314 	add.w	r3, r7, #20
 80059c2:	4619      	mov	r1, r3
 80059c4:	480e      	ldr	r0, [pc, #56]	; (8005a00 <MX_GPIO_Init+0x164>)
 80059c6:	f001 fa69 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80059ca:	2340      	movs	r3, #64	; 0x40
 80059cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ce:	2301      	movs	r3, #1
 80059d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059d2:	2301      	movs	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059d6:	2300      	movs	r3, #0
 80059d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80059da:	f107 0314 	add.w	r3, r7, #20
 80059de:	4619      	mov	r1, r3
 80059e0:	4804      	ldr	r0, [pc, #16]	; (80059f4 <MX_GPIO_Init+0x158>)
 80059e2:	f001 fa5b 	bl	8006e9c <HAL_GPIO_Init>

}
 80059e6:	bf00      	nop
 80059e8:	3728      	adds	r7, #40	; 0x28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800
 80059f4:	40020400 	.word	0x40020400
 80059f8:	40020800 	.word	0x40020800
 80059fc:	40020000 	.word	0x40020000
 8005a00:	40020c00 	.word	0x40020c00

08005a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a08:	f000 fbe8 	bl	80061dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a0c:	f000 f80e 	bl	8005a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a10:	f7ff ff44 	bl	800589c <MX_GPIO_Init>
  MX_DMA_Init();
 8005a14:	f7ff fe70 	bl	80056f8 <MX_DMA_Init>
  MX_SPI1_Init();
 8005a18:	f000 f892 	bl	8005b40 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8005a1c:	f000 fb42 	bl	80060a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005a20:	f7ff fefc 	bl	800581c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005a24:	f004 f912 	bl	8009c4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005a28:	e7fe      	b.n	8005a28 <main+0x24>
	...

08005a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b094      	sub	sp, #80	; 0x50
 8005a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a32:	f107 0320 	add.w	r3, r7, #32
 8005a36:	2230      	movs	r2, #48	; 0x30
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f007 fc13 	bl	800d266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a40:	f107 030c 	add.w	r3, r7, #12
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	605a      	str	r2, [r3, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a50:	2300      	movs	r3, #0
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <SystemClock_Config+0xc8>)
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	4a26      	ldr	r2, [pc, #152]	; (8005af4 <SystemClock_Config+0xc8>)
 8005a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a60:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <SystemClock_Config+0xc8>)
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <SystemClock_Config+0xcc>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <SystemClock_Config+0xcc>)
 8005a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <SystemClock_Config+0xcc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a84:	607b      	str	r3, [r7, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a90:	2310      	movs	r3, #16
 8005a92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a94:	2302      	movs	r3, #2
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005aa0:	2364      	movs	r3, #100	; 0x64
 8005aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005aac:	f107 0320 	add.w	r3, r7, #32
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 fcbf 	bl	8007434 <HAL_RCC_OscConfig>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005abc:	f000 f830 	bl	8005b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ac0:	230f      	movs	r3, #15
 8005ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005ad6:	f107 030c 	add.w	r3, r7, #12
 8005ada:	2103      	movs	r1, #3
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 ffd1 	bl	8007a84 <HAL_RCC_ClockConfig>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005ae8:	f000 f81a 	bl	8005b20 <Error_Handler>
  }
}
 8005aec:	bf00      	nop
 8005aee:	3750      	adds	r7, #80	; 0x50
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40007000 	.word	0x40007000

08005afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005b0e:	f000 fb87 	bl	8006220 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000

08005b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b24:	b672      	cpsid	i
}
 8005b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b28:	e7fe      	b.n	8005b28 <Error_Handler+0x8>

08005b2a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005b44:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b46:	4a18      	ldr	r2, [pc, #96]	; (8005ba8 <MX_SPI1_Init+0x68>)
 8005b48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005b4a:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005b52:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b58:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005b5e:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b60:	2202      	movs	r2, #2
 8005b62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005b6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b74:	2208      	movs	r2, #8
 8005b76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b8c:	220a      	movs	r2, #10
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005b90:	4804      	ldr	r0, [pc, #16]	; (8005ba4 <MX_SPI1_Init+0x64>)
 8005b92:	f002 fa71 	bl	8008078 <HAL_SPI_Init>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005b9c:	f7ff ffc0 	bl	8005b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ba0:	bf00      	nop
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20001218 	.word	0x20001218
 8005ba8:	40013000 	.word	0x40013000

08005bac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb4:	f107 0314 	add.w	r3, r7, #20
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	609a      	str	r2, [r3, #8]
 8005bc0:	60da      	str	r2, [r3, #12]
 8005bc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a55      	ldr	r2, [pc, #340]	; (8005d20 <HAL_SPI_MspInit+0x174>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	f040 80a4 	bne.w	8005d18 <HAL_SPI_MspInit+0x16c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	4b53      	ldr	r3, [pc, #332]	; (8005d24 <HAL_SPI_MspInit+0x178>)
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd8:	4a52      	ldr	r2, [pc, #328]	; (8005d24 <HAL_SPI_MspInit+0x178>)
 8005bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bde:	6453      	str	r3, [r2, #68]	; 0x44
 8005be0:	4b50      	ldr	r3, [pc, #320]	; (8005d24 <HAL_SPI_MspInit+0x178>)
 8005be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <HAL_SPI_MspInit+0x178>)
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	4a4b      	ldr	r2, [pc, #300]	; (8005d24 <HAL_SPI_MspInit+0x178>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8005bfc:	4b49      	ldr	r3, [pc, #292]	; (8005d24 <HAL_SPI_MspInit+0x178>)
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005c08:	23e0      	movs	r3, #224	; 0xe0
 8005c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c14:	2303      	movs	r3, #3
 8005c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005c18:	2305      	movs	r3, #5
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c1c:	f107 0314 	add.w	r3, r7, #20
 8005c20:	4619      	mov	r1, r3
 8005c22:	4841      	ldr	r0, [pc, #260]	; (8005d28 <HAL_SPI_MspInit+0x17c>)
 8005c24:	f001 f93a 	bl	8006e9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005c28:	4b40      	ldr	r3, [pc, #256]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c2a:	4a41      	ldr	r2, [pc, #260]	; (8005d30 <HAL_SPI_MspInit+0x184>)
 8005c2c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8005c2e:	4b3f      	ldr	r3, [pc, #252]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c30:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005c34:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c36:	4b3d      	ldr	r3, [pc, #244]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c42:	4b3a      	ldr	r3, [pc, #232]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c48:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c4a:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c50:	4b36      	ldr	r3, [pc, #216]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8005c56:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c5c:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c62:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005c64:	4b31      	ldr	r3, [pc, #196]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c66:	2204      	movs	r2, #4
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005c6a:	4b30      	ldr	r3, [pc, #192]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005c70:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005c76:	4b2d      	ldr	r3, [pc, #180]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005c7c:	482b      	ldr	r0, [pc, #172]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c7e:	f000 fc01 	bl	8006484 <HAL_DMA_Init>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 8005c88:	f7ff ff4a 	bl	8005b20 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a27      	ldr	r2, [pc, #156]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c90:	64da      	str	r2, [r3, #76]	; 0x4c
 8005c92:	4a26      	ldr	r2, [pc, #152]	; (8005d2c <HAL_SPI_MspInit+0x180>)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8005c98:	4b26      	ldr	r3, [pc, #152]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005c9a:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <HAL_SPI_MspInit+0x18c>)
 8005c9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8005c9e:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005ca0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ca4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ca6:	4b23      	ldr	r3, [pc, #140]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005ca8:	2240      	movs	r2, #64	; 0x40
 8005caa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cac:	4b21      	ldr	r3, [pc, #132]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cb8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cba:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005cc6:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005ccc:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cd2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005cd4:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005cda:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cdc:	2203      	movs	r2, #3
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005ce0:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005ce6:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005cec:	4811      	ldr	r0, [pc, #68]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005cee:	f000 fbc9 	bl	8006484 <HAL_DMA_Init>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_SPI_MspInit+0x150>
    {
      Error_Handler();
 8005cf8:	f7ff ff12 	bl	8005b20 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005d00:	649a      	str	r2, [r3, #72]	; 0x48
 8005d02:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <HAL_SPI_MspInit+0x188>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2105      	movs	r1, #5
 8005d0c:	2023      	movs	r0, #35	; 0x23
 8005d0e:	f000 fb75 	bl	80063fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005d12:	2023      	movs	r0, #35	; 0x23
 8005d14:	f000 fb9e 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005d18:	bf00      	nop
 8005d1a:	3728      	adds	r7, #40	; 0x28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40013000 	.word	0x40013000
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40020000 	.word	0x40020000
 8005d2c:	20001270 	.word	0x20001270
 8005d30:	40026410 	.word	0x40026410
 8005d34:	200012d0 	.word	0x200012d0
 8005d38:	40026440 	.word	0x40026440

08005d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <HAL_MspInit+0x54>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	4a11      	ldr	r2, [pc, #68]	; (8005d90 <HAL_MspInit+0x54>)
 8005d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d50:	6453      	str	r3, [r2, #68]	; 0x44
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <HAL_MspInit+0x54>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d5a:	607b      	str	r3, [r7, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d5e:	2300      	movs	r3, #0
 8005d60:	603b      	str	r3, [r7, #0]
 8005d62:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <HAL_MspInit+0x54>)
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <HAL_MspInit+0x54>)
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d6e:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <HAL_MspInit+0x54>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	210f      	movs	r1, #15
 8005d7e:	f06f 0001 	mvn.w	r0, #1
 8005d82:	f000 fb3b 	bl	80063fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40023800 	.word	0x40023800

08005d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	; 0x30
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005da4:	2300      	movs	r3, #0
 8005da6:	60bb      	str	r3, [r7, #8]
 8005da8:	4b2e      	ldr	r3, [pc, #184]	; (8005e64 <HAL_InitTick+0xd0>)
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	4a2d      	ldr	r2, [pc, #180]	; (8005e64 <HAL_InitTick+0xd0>)
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	6453      	str	r3, [r2, #68]	; 0x44
 8005db4:	4b2b      	ldr	r3, [pc, #172]	; (8005e64 <HAL_InitTick+0xd0>)
 8005db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005dc0:	f107 020c 	add.w	r2, r7, #12
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f002 f922 	bl	8008014 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005dd0:	f002 f90c 	bl	8007fec <HAL_RCC_GetPCLK2Freq>
 8005dd4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <HAL_InitTick+0xd4>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0c9b      	lsrs	r3, r3, #18
 8005de0:	3b01      	subs	r3, #1
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005de4:	4b21      	ldr	r3, [pc, #132]	; (8005e6c <HAL_InitTick+0xd8>)
 8005de6:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <HAL_InitTick+0xdc>)
 8005de8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005dea:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <HAL_InitTick+0xd8>)
 8005dec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005df0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005df2:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <HAL_InitTick+0xd8>)
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005df8:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <HAL_InitTick+0xd8>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dfe:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <HAL_InitTick+0xd8>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <HAL_InitTick+0xd8>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005e0a:	4818      	ldr	r0, [pc, #96]	; (8005e6c <HAL_InitTick+0xd8>)
 8005e0c:	f003 f870 	bl	8008ef0 <HAL_TIM_Base_Init>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d11b      	bne.n	8005e56 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005e1e:	4813      	ldr	r0, [pc, #76]	; (8005e6c <HAL_InitTick+0xd8>)
 8005e20:	f003 f936 	bl	8009090 <HAL_TIM_Base_Start_IT>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d111      	bne.n	8005e56 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005e32:	2019      	movs	r0, #25
 8005e34:	f000 fb0e 	bl	8006454 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b0f      	cmp	r3, #15
 8005e3c:	d808      	bhi.n	8005e50 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005e3e:	2200      	movs	r2, #0
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	2019      	movs	r0, #25
 8005e44:	f000 fada 	bl	80063fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e48:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <HAL_InitTick+0xe0>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e002      	b.n	8005e56 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3730      	adds	r7, #48	; 0x30
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023800 	.word	0x40023800
 8005e68:	431bde83 	.word	0x431bde83
 8005e6c:	20001330 	.word	0x20001330
 8005e70:	40010000 	.word	0x40010000
 8005e74:	20000098 	.word	0x20000098

08005e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e7c:	e7fe      	b.n	8005e7c <NMI_Handler+0x4>

08005e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e82:	e7fe      	b.n	8005e82 <HardFault_Handler+0x4>

08005e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e88:	e7fe      	b.n	8005e88 <MemManage_Handler+0x4>

08005e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e8e:	e7fe      	b.n	8005e8e <BusFault_Handler+0x4>

08005e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e94:	e7fe      	b.n	8005e94 <UsageFault_Handler+0x4>

08005e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e96:	b480      	push	{r7}
 8005e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e9a:	bf00      	nop
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005ea8:	4802      	ldr	r0, [pc, #8]	; (8005eb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005eaa:	f003 f983 	bl	80091b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005eae:	bf00      	nop
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20001330 	.word	0x20001330

08005eb8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005ebc:	4802      	ldr	r0, [pc, #8]	; (8005ec8 <SPI1_IRQHandler+0x10>)
 8005ebe:	f002 fc67 	bl	8008790 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20001218 	.word	0x20001218

08005ecc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005ed0:	4802      	ldr	r0, [pc, #8]	; (8005edc <DMA2_Stream0_IRQHandler+0x10>)
 8005ed2:	f000 fd79 	bl	80069c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20001270 	.word	0x20001270

08005ee0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005ee4:	4802      	ldr	r0, [pc, #8]	; (8005ef0 <DMA2_Stream2_IRQHandler+0x10>)
 8005ee6:	f000 fd6f 	bl	80069c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200012d0 	.word	0x200012d0

08005ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return 1;
 8005ef8:	2301      	movs	r3, #1
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <_kill>:

int _kill(int pid, int sig)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005f0e:	f007 f867 	bl	800cfe0 <__errno>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2216      	movs	r2, #22
 8005f16:	601a      	str	r2, [r3, #0]
  return -1;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <_exit>:

void _exit (int status)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ffe7 	bl	8005f04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005f36:	e7fe      	b.n	8005f36 <_exit+0x12>

08005f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e00a      	b.n	8005f60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f4a:	f3af 8000 	nop.w
 8005f4e:	4601      	mov	r1, r0
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	60ba      	str	r2, [r7, #8]
 8005f56:	b2ca      	uxtb	r2, r1
 8005f58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	dbf0      	blt.n	8005f4a <_read+0x12>
  }

  return len;
 8005f68:	687b      	ldr	r3, [r7, #4]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b086      	sub	sp, #24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e009      	b.n	8005f98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	60ba      	str	r2, [r7, #8]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	3301      	adds	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	dbf1      	blt.n	8005f84 <_write+0x12>
  }
  return len;
 8005fa0:	687b      	ldr	r3, [r7, #4]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <_close>:

int _close(int file)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fd2:	605a      	str	r2, [r3, #4]
  return 0;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <_isatty>:

int _isatty(int file)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005fea:	2301      	movs	r3, #1
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800601c:	4a14      	ldr	r2, [pc, #80]	; (8006070 <_sbrk+0x5c>)
 800601e:	4b15      	ldr	r3, [pc, #84]	; (8006074 <_sbrk+0x60>)
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006028:	4b13      	ldr	r3, [pc, #76]	; (8006078 <_sbrk+0x64>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006030:	4b11      	ldr	r3, [pc, #68]	; (8006078 <_sbrk+0x64>)
 8006032:	4a12      	ldr	r2, [pc, #72]	; (800607c <_sbrk+0x68>)
 8006034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006036:	4b10      	ldr	r3, [pc, #64]	; (8006078 <_sbrk+0x64>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	429a      	cmp	r2, r3
 8006042:	d207      	bcs.n	8006054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006044:	f006 ffcc 	bl	800cfe0 <__errno>
 8006048:	4603      	mov	r3, r0
 800604a:	220c      	movs	r2, #12
 800604c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800604e:	f04f 33ff 	mov.w	r3, #4294967295
 8006052:	e009      	b.n	8006068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006054:	4b08      	ldr	r3, [pc, #32]	; (8006078 <_sbrk+0x64>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <_sbrk+0x64>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	4a05      	ldr	r2, [pc, #20]	; (8006078 <_sbrk+0x64>)
 8006064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006066:	68fb      	ldr	r3, [r7, #12]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20020000 	.word	0x20020000
 8006074:	00000400 	.word	0x00000400
 8006078:	20001378 	.word	0x20001378
 800607c:	200052a0 	.word	0x200052a0

08006080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <SystemInit+0x20>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <SystemInit+0x20>)
 800608c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	e000ed00 	.word	0xe000ed00

080060a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060aa:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <MX_USART2_UART_Init+0x50>)
 80060ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80060b6:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060be:	2200      	movs	r2, #0
 80060c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060ca:	220c      	movs	r2, #12
 80060cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060ce:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060da:	4805      	ldr	r0, [pc, #20]	; (80060f0 <MX_USART2_UART_Init+0x4c>)
 80060dc:	f003 fa2e 	bl	800953c <HAL_UART_Init>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80060e6:	f7ff fd1b 	bl	8005b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060ea:	bf00      	nop
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	2000137c 	.word	0x2000137c
 80060f4:	40004400 	.word	0x40004400

080060f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	; 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006100:	f107 0314 	add.w	r3, r7, #20
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a19      	ldr	r2, [pc, #100]	; (800617c <HAL_UART_MspInit+0x84>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d12b      	bne.n	8006172 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	4b18      	ldr	r3, [pc, #96]	; (8006180 <HAL_UART_MspInit+0x88>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	4a17      	ldr	r2, [pc, #92]	; (8006180 <HAL_UART_MspInit+0x88>)
 8006124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006128:	6413      	str	r3, [r2, #64]	; 0x40
 800612a:	4b15      	ldr	r3, [pc, #84]	; (8006180 <HAL_UART_MspInit+0x88>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <HAL_UART_MspInit+0x88>)
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	4a10      	ldr	r2, [pc, #64]	; (8006180 <HAL_UART_MspInit+0x88>)
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	6313      	str	r3, [r2, #48]	; 0x30
 8006146:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <HAL_UART_MspInit+0x88>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006152:	230c      	movs	r3, #12
 8006154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006156:	2302      	movs	r3, #2
 8006158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800615e:	2303      	movs	r3, #3
 8006160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006162:	2307      	movs	r3, #7
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006166:	f107 0314 	add.w	r3, r7, #20
 800616a:	4619      	mov	r1, r3
 800616c:	4805      	ldr	r0, [pc, #20]	; (8006184 <HAL_UART_MspInit+0x8c>)
 800616e:	f000 fe95 	bl	8006e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006172:	bf00      	nop
 8006174:	3728      	adds	r7, #40	; 0x28
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40004400 	.word	0x40004400
 8006180:	40023800 	.word	0x40023800
 8006184:	40020000 	.word	0x40020000

08006188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800618c:	480d      	ldr	r0, [pc, #52]	; (80061c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800618e:	490e      	ldr	r1, [pc, #56]	; (80061c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006190:	4a0e      	ldr	r2, [pc, #56]	; (80061cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006194:	e002      	b.n	800619c <LoopCopyDataInit>

08006196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800619a:	3304      	adds	r3, #4

0800619c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800619c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800619e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061a0:	d3f9      	bcc.n	8006196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061a2:	4a0b      	ldr	r2, [pc, #44]	; (80061d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80061a4:	4c0b      	ldr	r4, [pc, #44]	; (80061d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80061a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061a8:	e001      	b.n	80061ae <LoopFillZerobss>

080061aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061ac:	3204      	adds	r2, #4

080061ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061b0:	d3fb      	bcc.n	80061aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80061b2:	f7ff ff65 	bl	8006080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061b6:	f007 f821 	bl	800d1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061ba:	f7ff fc23 	bl	8005a04 <main>
  bx  lr    
 80061be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80061c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80061c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061c8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80061cc:	0800ec9c 	.word	0x0800ec9c
  ldr r2, =_sbss
 80061d0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80061d4:	200052a0 	.word	0x200052a0

080061d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061d8:	e7fe      	b.n	80061d8 <ADC_IRQHandler>
	...

080061dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061e0:	4b0e      	ldr	r3, [pc, #56]	; (800621c <HAL_Init+0x40>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <HAL_Init+0x40>)
 80061e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_Init+0x40>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <HAL_Init+0x40>)
 80061f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <HAL_Init+0x40>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a07      	ldr	r2, [pc, #28]	; (800621c <HAL_Init+0x40>)
 80061fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006204:	2003      	movs	r0, #3
 8006206:	f000 f8d9 	bl	80063bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800620a:	200f      	movs	r0, #15
 800620c:	f7ff fdc2 	bl	8005d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006210:	f7ff fd94 	bl	8005d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40023c00 	.word	0x40023c00

08006220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006224:	4b06      	ldr	r3, [pc, #24]	; (8006240 <HAL_IncTick+0x20>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_IncTick+0x24>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4413      	add	r3, r2
 8006230:	4a04      	ldr	r2, [pc, #16]	; (8006244 <HAL_IncTick+0x24>)
 8006232:	6013      	str	r3, [r2, #0]
}
 8006234:	bf00      	nop
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	2000009c 	.word	0x2000009c
 8006244:	200013c0 	.word	0x200013c0

08006248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  return uwTick;
 800624c:	4b03      	ldr	r3, [pc, #12]	; (800625c <HAL_GetTick+0x14>)
 800624e:	681b      	ldr	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	200013c0 	.word	0x200013c0

08006260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800627c:	4013      	ands	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800628c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006292:	4a04      	ldr	r2, [pc, #16]	; (80062a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	60d3      	str	r3, [r2, #12]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	e000ed00 	.word	0xe000ed00

080062a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <__NVIC_GetPriorityGrouping+0x18>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	f003 0307 	and.w	r3, r3, #7
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	db0b      	blt.n	80062ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	f003 021f 	and.w	r2, r3, #31
 80062dc:	4907      	ldr	r1, [pc, #28]	; (80062fc <__NVIC_EnableIRQ+0x38>)
 80062de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2001      	movs	r0, #1
 80062e6:	fa00 f202 	lsl.w	r2, r0, r2
 80062ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000e100 	.word	0xe000e100

08006300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	6039      	str	r1, [r7, #0]
 800630a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800630c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db0a      	blt.n	800632a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	490c      	ldr	r1, [pc, #48]	; (800634c <__NVIC_SetPriority+0x4c>)
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	0112      	lsls	r2, r2, #4
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	440b      	add	r3, r1
 8006324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006328:	e00a      	b.n	8006340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4908      	ldr	r1, [pc, #32]	; (8006350 <__NVIC_SetPriority+0x50>)
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	3b04      	subs	r3, #4
 8006338:	0112      	lsls	r2, r2, #4
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	440b      	add	r3, r1
 800633e:	761a      	strb	r2, [r3, #24]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000e100 	.word	0xe000e100
 8006350:	e000ed00 	.word	0xe000ed00

08006354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006354:	b480      	push	{r7}
 8006356:	b089      	sub	sp, #36	; 0x24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f1c3 0307 	rsb	r3, r3, #7
 800636e:	2b04      	cmp	r3, #4
 8006370:	bf28      	it	cs
 8006372:	2304      	movcs	r3, #4
 8006374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3304      	adds	r3, #4
 800637a:	2b06      	cmp	r3, #6
 800637c:	d902      	bls.n	8006384 <NVIC_EncodePriority+0x30>
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3b03      	subs	r3, #3
 8006382:	e000      	b.n	8006386 <NVIC_EncodePriority+0x32>
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006388:	f04f 32ff 	mov.w	r2, #4294967295
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43da      	mvns	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	401a      	ands	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800639c:	f04f 31ff 	mov.w	r1, #4294967295
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	43d9      	mvns	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ac:	4313      	orrs	r3, r2
         );
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3724      	adds	r7, #36	; 0x24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b07      	cmp	r3, #7
 80063c8:	d00f      	beq.n	80063ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b06      	cmp	r3, #6
 80063ce:	d00c      	beq.n	80063ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d009      	beq.n	80063ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d006      	beq.n	80063ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d003      	beq.n	80063ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80063e2:	2190      	movs	r1, #144	; 0x90
 80063e4:	4804      	ldr	r0, [pc, #16]	; (80063f8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80063e6:	f7ff fba0 	bl	8005b2a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff ff38 	bl	8006260 <__NVIC_SetPriorityGrouping>
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	0800e1f4 	.word	0x0800e1f4

080063fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b0f      	cmp	r3, #15
 8006412:	d903      	bls.n	800641c <HAL_NVIC_SetPriority+0x20>
 8006414:	21a8      	movs	r1, #168	; 0xa8
 8006416:	480e      	ldr	r0, [pc, #56]	; (8006450 <HAL_NVIC_SetPriority+0x54>)
 8006418:	f7ff fb87 	bl	8005b2a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b0f      	cmp	r3, #15
 8006420:	d903      	bls.n	800642a <HAL_NVIC_SetPriority+0x2e>
 8006422:	21a9      	movs	r1, #169	; 0xa9
 8006424:	480a      	ldr	r0, [pc, #40]	; (8006450 <HAL_NVIC_SetPriority+0x54>)
 8006426:	f7ff fb80 	bl	8005b2a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800642a:	f7ff ff3d 	bl	80062a8 <__NVIC_GetPriorityGrouping>
 800642e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	6978      	ldr	r0, [r7, #20]
 8006436:	f7ff ff8d 	bl	8006354 <NVIC_EncodePriority>
 800643a:	4602      	mov	r2, r0
 800643c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006440:	4611      	mov	r1, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff ff5c 	bl	8006300 <__NVIC_SetPriority>
}
 8006448:	bf00      	nop
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	0800e1f4 	.word	0x0800e1f4

08006454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800645e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006462:	2b00      	cmp	r3, #0
 8006464:	da03      	bge.n	800646e <HAL_NVIC_EnableIRQ+0x1a>
 8006466:	21bc      	movs	r1, #188	; 0xbc
 8006468:	4805      	ldr	r0, [pc, #20]	; (8006480 <HAL_NVIC_EnableIRQ+0x2c>)
 800646a:	f7ff fb5e 	bl	8005b2a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800646e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff ff26 	bl	80062c4 <__NVIC_EnableIRQ>
}
 8006478:	bf00      	nop
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	0800e1f4 	.word	0x0800e1f4

08006484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006490:	f7ff feda 	bl	8006248 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e203      	b.n	80068a8 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a8b      	ldr	r2, [pc, #556]	; (80066d4 <HAL_DMA_Init+0x250>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d04e      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a8a      	ldr	r2, [pc, #552]	; (80066d8 <HAL_DMA_Init+0x254>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d049      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a88      	ldr	r2, [pc, #544]	; (80066dc <HAL_DMA_Init+0x258>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d044      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a87      	ldr	r2, [pc, #540]	; (80066e0 <HAL_DMA_Init+0x25c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d03f      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a85      	ldr	r2, [pc, #532]	; (80066e4 <HAL_DMA_Init+0x260>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d03a      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a84      	ldr	r2, [pc, #528]	; (80066e8 <HAL_DMA_Init+0x264>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d035      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a82      	ldr	r2, [pc, #520]	; (80066ec <HAL_DMA_Init+0x268>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d030      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a81      	ldr	r2, [pc, #516]	; (80066f0 <HAL_DMA_Init+0x26c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02b      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a7f      	ldr	r2, [pc, #508]	; (80066f4 <HAL_DMA_Init+0x270>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d026      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7e      	ldr	r2, [pc, #504]	; (80066f8 <HAL_DMA_Init+0x274>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d021      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a7c      	ldr	r2, [pc, #496]	; (80066fc <HAL_DMA_Init+0x278>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01c      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a7b      	ldr	r2, [pc, #492]	; (8006700 <HAL_DMA_Init+0x27c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d017      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a79      	ldr	r2, [pc, #484]	; (8006704 <HAL_DMA_Init+0x280>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d012      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a78      	ldr	r2, [pc, #480]	; (8006708 <HAL_DMA_Init+0x284>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00d      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a76      	ldr	r2, [pc, #472]	; (800670c <HAL_DMA_Init+0x288>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d008      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a75      	ldr	r2, [pc, #468]	; (8006710 <HAL_DMA_Init+0x28c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <HAL_DMA_Init+0xc4>
 8006540:	21b7      	movs	r1, #183	; 0xb7
 8006542:	4874      	ldr	r0, [pc, #464]	; (8006714 <HAL_DMA_Init+0x290>)
 8006544:	f7ff faf1 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d026      	beq.n	800659e <HAL_DMA_Init+0x11a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006558:	d021      	beq.n	800659e <HAL_DMA_Init+0x11a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006562:	d01c      	beq.n	800659e <HAL_DMA_Init+0x11a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800656c:	d017      	beq.n	800659e <HAL_DMA_Init+0x11a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006576:	d012      	beq.n	800659e <HAL_DMA_Init+0x11a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8006580:	d00d      	beq.n	800659e <HAL_DMA_Init+0x11a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800658a:	d008      	beq.n	800659e <HAL_DMA_Init+0x11a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8006594:	d003      	beq.n	800659e <HAL_DMA_Init+0x11a>
 8006596:	21b8      	movs	r1, #184	; 0xb8
 8006598:	485e      	ldr	r0, [pc, #376]	; (8006714 <HAL_DMA_Init+0x290>)
 800659a:	f7ff fac6 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <HAL_DMA_Init+0x13a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b40      	cmp	r3, #64	; 0x40
 80065ac:	d007      	beq.n	80065be <HAL_DMA_Init+0x13a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d003      	beq.n	80065be <HAL_DMA_Init+0x13a>
 80065b6:	21b9      	movs	r1, #185	; 0xb9
 80065b8:	4856      	ldr	r0, [pc, #344]	; (8006714 <HAL_DMA_Init+0x290>)
 80065ba:	f7ff fab6 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c6:	d007      	beq.n	80065d8 <HAL_DMA_Init+0x154>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_DMA_Init+0x154>
 80065d0:	21ba      	movs	r1, #186	; 0xba
 80065d2:	4850      	ldr	r0, [pc, #320]	; (8006714 <HAL_DMA_Init+0x290>)
 80065d4:	f7ff faa9 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e0:	d007      	beq.n	80065f2 <HAL_DMA_Init+0x16e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_DMA_Init+0x16e>
 80065ea:	21bb      	movs	r1, #187	; 0xbb
 80065ec:	4849      	ldr	r0, [pc, #292]	; (8006714 <HAL_DMA_Init+0x290>)
 80065ee:	f7ff fa9c 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <HAL_DMA_Init+0x192>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006602:	d008      	beq.n	8006616 <HAL_DMA_Init+0x192>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660c:	d003      	beq.n	8006616 <HAL_DMA_Init+0x192>
 800660e:	21bc      	movs	r1, #188	; 0xbc
 8006610:	4840      	ldr	r0, [pc, #256]	; (8006714 <HAL_DMA_Init+0x290>)
 8006612:	f7ff fa8a 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00d      	beq.n	800663a <HAL_DMA_Init+0x1b6>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006626:	d008      	beq.n	800663a <HAL_DMA_Init+0x1b6>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006630:	d003      	beq.n	800663a <HAL_DMA_Init+0x1b6>
 8006632:	21bd      	movs	r1, #189	; 0xbd
 8006634:	4837      	ldr	r0, [pc, #220]	; (8006714 <HAL_DMA_Init+0x290>)
 8006636:	f7ff fa78 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <HAL_DMA_Init+0x1d8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664a:	d007      	beq.n	800665c <HAL_DMA_Init+0x1d8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	2b20      	cmp	r3, #32
 8006652:	d003      	beq.n	800665c <HAL_DMA_Init+0x1d8>
 8006654:	21be      	movs	r1, #190	; 0xbe
 8006656:	482f      	ldr	r0, [pc, #188]	; (8006714 <HAL_DMA_Init+0x290>)
 8006658:	f7ff fa67 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d012      	beq.n	800668a <HAL_DMA_Init+0x206>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666c:	d00d      	beq.n	800668a <HAL_DMA_Init+0x206>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006676:	d008      	beq.n	800668a <HAL_DMA_Init+0x206>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006680:	d003      	beq.n	800668a <HAL_DMA_Init+0x206>
 8006682:	21bf      	movs	r1, #191	; 0xbf
 8006684:	4823      	ldr	r0, [pc, #140]	; (8006714 <HAL_DMA_Init+0x290>)
 8006686:	f7ff fa50 	bl	8005b2a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <HAL_DMA_Init+0x21e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b04      	cmp	r3, #4
 8006698:	d003      	beq.n	80066a2 <HAL_DMA_Init+0x21e>
 800669a:	21c0      	movs	r1, #192	; 0xc0
 800669c:	481d      	ldr	r0, [pc, #116]	; (8006714 <HAL_DMA_Init+0x290>)
 800669e:	f7ff fa44 	bl	8005b2a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d064      	beq.n	8006774 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d032      	beq.n	8006718 <HAL_DMA_Init+0x294>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d02e      	beq.n	8006718 <HAL_DMA_Init+0x294>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d02a      	beq.n	8006718 <HAL_DMA_Init+0x294>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d026      	beq.n	8006718 <HAL_DMA_Init+0x294>
 80066ca:	21c5      	movs	r1, #197	; 0xc5
 80066cc:	4811      	ldr	r0, [pc, #68]	; (8006714 <HAL_DMA_Init+0x290>)
 80066ce:	f7ff fa2c 	bl	8005b2a <assert_failed>
 80066d2:	e021      	b.n	8006718 <HAL_DMA_Init+0x294>
 80066d4:	40026010 	.word	0x40026010
 80066d8:	40026028 	.word	0x40026028
 80066dc:	40026040 	.word	0x40026040
 80066e0:	40026058 	.word	0x40026058
 80066e4:	40026070 	.word	0x40026070
 80066e8:	40026088 	.word	0x40026088
 80066ec:	400260a0 	.word	0x400260a0
 80066f0:	400260b8 	.word	0x400260b8
 80066f4:	40026410 	.word	0x40026410
 80066f8:	40026428 	.word	0x40026428
 80066fc:	40026440 	.word	0x40026440
 8006700:	40026458 	.word	0x40026458
 8006704:	40026470 	.word	0x40026470
 8006708:	40026488 	.word	0x40026488
 800670c:	400264a0 	.word	0x400264a0
 8006710:	400264b8 	.word	0x400264b8
 8006714:	0800e230 	.word	0x0800e230
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <HAL_DMA_Init+0x2c2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006728:	d00d      	beq.n	8006746 <HAL_DMA_Init+0x2c2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006732:	d008      	beq.n	8006746 <HAL_DMA_Init+0x2c2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800673c:	d003      	beq.n	8006746 <HAL_DMA_Init+0x2c2>
 800673e:	21c6      	movs	r1, #198	; 0xc6
 8006740:	485b      	ldr	r0, [pc, #364]	; (80068b0 <HAL_DMA_Init+0x42c>)
 8006742:	f7ff f9f2 	bl	8005b2a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	2b00      	cmp	r3, #0
 800674c:	d012      	beq.n	8006774 <HAL_DMA_Init+0x2f0>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006756:	d00d      	beq.n	8006774 <HAL_DMA_Init+0x2f0>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006760:	d008      	beq.n	8006774 <HAL_DMA_Init+0x2f0>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800676a:	d003      	beq.n	8006774 <HAL_DMA_Init+0x2f0>
 800676c:	21c7      	movs	r1, #199	; 0xc7
 800676e:	4850      	ldr	r0, [pc, #320]	; (80068b0 <HAL_DMA_Init+0x42c>)
 8006770:	f7ff f9db 	bl	8005b2a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006794:	e00f      	b.n	80067b6 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006796:	f7ff fd57 	bl	8006248 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b05      	cmp	r3, #5
 80067a2:	d908      	bls.n	80067b6 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2203      	movs	r2, #3
 80067ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e078      	b.n	80068a8 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e8      	bne.n	8006796 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <HAL_DMA_Init+0x430>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b04      	cmp	r3, #4
 800680e:	d107      	bne.n	8006820 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	4313      	orrs	r3, r2
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f023 0307 	bic.w	r3, r3, #7
 8006836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	2b04      	cmp	r3, #4
 8006848:	d117      	bne.n	800687a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00e      	beq.n	800687a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 faa1 	bl	8006da4 <DMA_CheckFifoParam>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d008      	beq.n	800687a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2240      	movs	r2, #64	; 0x40
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006876:	2301      	movs	r3, #1
 8006878:	e016      	b.n	80068a8 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa58 	bl	8006d38 <DMA_CalcBaseAndBitshift>
 8006888:	4603      	mov	r3, r0
 800688a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006890:	223f      	movs	r2, #63	; 0x3f
 8006892:	409a      	lsls	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	0800e230 	.word	0x0800e230
 80068b4:	f010803f 	.word	0xf010803f

080068b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_DMA_Start_IT+0x26>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068dc:	d304      	bcc.n	80068e8 <HAL_DMA_Start_IT+0x30>
 80068de:	f240 11cb 	movw	r1, #459	; 0x1cb
 80068e2:	4827      	ldr	r0, [pc, #156]	; (8006980 <HAL_DMA_Start_IT+0xc8>)
 80068e4:	f7ff f921 	bl	8005b2a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_DMA_Start_IT+0x3e>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e040      	b.n	8006978 <HAL_DMA_Start_IT+0xc0>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d12f      	bne.n	800696a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2202      	movs	r2, #2
 800690e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f9dc 	bl	8006cdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006928:	223f      	movs	r2, #63	; 0x3f
 800692a:	409a      	lsls	r2, r3
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0216 	orr.w	r2, r2, #22
 800693e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0208 	orr.w	r2, r2, #8
 8006956:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e005      	b.n	8006976 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006972:	2302      	movs	r3, #2
 8006974:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	0800e230 	.word	0x0800e230

08006984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d004      	beq.n	80069a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2280      	movs	r2, #128	; 0x80
 800699c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e00c      	b.n	80069bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2205      	movs	r2, #5
 80069a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0201 	bic.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069d4:	4b8e      	ldr	r3, [pc, #568]	; (8006c10 <HAL_DMA_IRQHandler+0x248>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a8e      	ldr	r2, [pc, #568]	; (8006c14 <HAL_DMA_IRQHandler+0x24c>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	0a9b      	lsrs	r3, r3, #10
 80069e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f2:	2208      	movs	r2, #8
 80069f4:	409a      	lsls	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01a      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d013      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0204 	bic.w	r2, r2, #4
 8006a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a20:	2208      	movs	r2, #8
 8006a22:	409a      	lsls	r2, r3
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	f043 0201 	orr.w	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a38:	2201      	movs	r2, #1
 8006a3a:	409a      	lsls	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d012      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a56:	2201      	movs	r2, #1
 8006a58:	409a      	lsls	r2, r3
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f043 0202 	orr.w	r2, r3, #2
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6e:	2204      	movs	r2, #4
 8006a70:	409a      	lsls	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d012      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a98:	f043 0204 	orr.w	r2, r3, #4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa4:	2210      	movs	r2, #16
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d043      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d03c      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d018      	beq.n	8006b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d108      	bne.n	8006af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d024      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
 8006af6:	e01f      	b.n	8006b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01b      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
 8006b08:	e016      	b.n	8006b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d107      	bne.n	8006b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0208 	bic.w	r2, r2, #8
 8006b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 808f 	beq.w	8006c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8087 	beq.w	8006c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5e:	2220      	movs	r2, #32
 8006b60:	409a      	lsls	r2, r3
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d136      	bne.n	8006be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0216 	bic.w	r2, r2, #22
 8006b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695a      	ldr	r2, [r3, #20]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <HAL_DMA_IRQHandler+0x1da>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0208 	bic.w	r2, r2, #8
 8006bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb6:	223f      	movs	r2, #63	; 0x3f
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d07e      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
        }
        return;
 8006bde:	e079      	b.n	8006cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01d      	beq.n	8006c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10d      	bne.n	8006c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d031      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
 8006c0c:	e02c      	b.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
 8006c0e:	bf00      	nop
 8006c10:	20000094 	.word	0x20000094
 8006c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d023      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
 8006c28:	e01e      	b.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10f      	bne.n	8006c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0210 	bic.w	r2, r2, #16
 8006c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d032      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d022      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2205      	movs	r2, #5
 8006c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60bb      	str	r3, [r7, #8]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d307      	bcc.n	8006cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f2      	bne.n	8006c94 <HAL_DMA_IRQHandler+0x2cc>
 8006cae:	e000      	b.n	8006cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
 8006cd2:	e000      	b.n	8006cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cd4:	bf00      	nop
    }
  }
}
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	d108      	bne.n	8006d1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d1a:	e007      	b.n	8006d2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	3b10      	subs	r3, #16
 8006d48:	4a14      	ldr	r2, [pc, #80]	; (8006d9c <DMA_CalcBaseAndBitshift+0x64>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	091b      	lsrs	r3, r3, #4
 8006d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d52:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <DMA_CalcBaseAndBitshift+0x68>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d909      	bls.n	8006d7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d6e:	f023 0303 	bic.w	r3, r3, #3
 8006d72:	1d1a      	adds	r2, r3, #4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	659a      	str	r2, [r3, #88]	; 0x58
 8006d78:	e007      	b.n	8006d8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	aaaaaaab 	.word	0xaaaaaaab
 8006da0:	0800ebb0 	.word	0x0800ebb0

08006da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11f      	bne.n	8006dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d856      	bhi.n	8006e72 <DMA_CheckFifoParam+0xce>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <DMA_CheckFifoParam+0x28>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006ddd 	.word	0x08006ddd
 8006dd0:	08006def 	.word	0x08006def
 8006dd4:	08006ddd 	.word	0x08006ddd
 8006dd8:	08006e73 	.word	0x08006e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d046      	beq.n	8006e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dec:	e043      	b.n	8006e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006df6:	d140      	bne.n	8006e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dfc:	e03d      	b.n	8006e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e06:	d121      	bne.n	8006e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d837      	bhi.n	8006e7e <DMA_CheckFifoParam+0xda>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <DMA_CheckFifoParam+0x70>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006e2b 	.word	0x08006e2b
 8006e1c:	08006e25 	.word	0x08006e25
 8006e20:	08006e3d 	.word	0x08006e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	73fb      	strb	r3, [r7, #15]
      break;
 8006e28:	e030      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d025      	beq.n	8006e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e3a:	e022      	b.n	8006e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e44:	d11f      	bne.n	8006e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e4a:	e01c      	b.n	8006e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d903      	bls.n	8006e5a <DMA_CheckFifoParam+0xb6>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d003      	beq.n	8006e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e58:	e018      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5e:	e015      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00e      	beq.n	8006e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e70:	e00b      	b.n	8006e8a <DMA_CheckFifoParam+0xe6>
      break;
 8006e72:	bf00      	nop
 8006e74:	e00a      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e76:	bf00      	nop
 8006e78:	e008      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e7a:	bf00      	nop
 8006e7c:	e006      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e7e:	bf00      	nop
 8006e80:	e004      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e82:	bf00      	nop
 8006e84:	e002      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8006e86:	bf00      	nop
 8006e88:	e000      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop

08006e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a33      	ldr	r2, [pc, #204]	; (8006f84 <HAL_GPIO_Init+0xe8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d017      	beq.n	8006eea <HAL_GPIO_Init+0x4e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a32      	ldr	r2, [pc, #200]	; (8006f88 <HAL_GPIO_Init+0xec>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_GPIO_Init+0x4e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a31      	ldr	r2, [pc, #196]	; (8006f8c <HAL_GPIO_Init+0xf0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <HAL_GPIO_Init+0x4e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <HAL_GPIO_Init+0xf4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <HAL_GPIO_Init+0x4e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2f      	ldr	r2, [pc, #188]	; (8006f94 <HAL_GPIO_Init+0xf8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <HAL_GPIO_Init+0x4e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2e      	ldr	r2, [pc, #184]	; (8006f98 <HAL_GPIO_Init+0xfc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <HAL_GPIO_Init+0x4e>
 8006ee2:	21ac      	movs	r1, #172	; 0xac
 8006ee4:	482d      	ldr	r0, [pc, #180]	; (8006f9c <HAL_GPIO_Init+0x100>)
 8006ee6:	f7fe fe20 	bl	8005b2a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_GPIO_Init+0x64>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	0c1b      	lsrs	r3, r3, #16
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_GPIO_Init+0x6c>
 8006f00:	21ad      	movs	r1, #173	; 0xad
 8006f02:	4826      	ldr	r0, [pc, #152]	; (8006f9c <HAL_GPIO_Init+0x100>)
 8006f04:	f7fe fe11 	bl	8005b2a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d035      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d031      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b11      	cmp	r3, #17
 8006f1e:	d02d      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d029      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2b12      	cmp	r3, #18
 8006f2e:	d025      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8006f38:	d020      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006f42:	d01b      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8006f4c:	d016      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8006f56:	d011      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8006f60:	d00c      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8006f6a:	d007      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d003      	beq.n	8006f7c <HAL_GPIO_Init+0xe0>
 8006f74:	21ae      	movs	r1, #174	; 0xae
 8006f76:	4809      	ldr	r0, [pc, #36]	; (8006f9c <HAL_GPIO_Init+0x100>)
 8006f78:	f7fe fdd7 	bl	8005b2a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	e20c      	b.n	800739c <HAL_GPIO_Init+0x500>
 8006f82:	bf00      	nop
 8006f84:	40020000 	.word	0x40020000
 8006f88:	40020400 	.word	0x40020400
 8006f8c:	40020800 	.word	0x40020800
 8006f90:	40020c00 	.word	0x40020c00
 8006f94:	40021000 	.word	0x40021000
 8006f98:	40021c00 	.word	0x40021c00
 8006f9c:	0800e268 	.word	0x0800e268
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	f040 81ec 	bne.w	8007396 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d005      	beq.n	8006fd6 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d144      	bne.n	8007060 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00f      	beq.n	8006ffe <HAL_GPIO_Init+0x162>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d00b      	beq.n	8006ffe <HAL_GPIO_Init+0x162>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d007      	beq.n	8006ffe <HAL_GPIO_Init+0x162>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d003      	beq.n	8006ffe <HAL_GPIO_Init+0x162>
 8006ff6:	21c0      	movs	r1, #192	; 0xc0
 8006ff8:	4884      	ldr	r0, [pc, #528]	; (800720c <HAL_GPIO_Init+0x370>)
 8006ffa:	f7fe fd96 	bl	8005b2a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	2203      	movs	r2, #3
 800700a:	fa02 f303 	lsl.w	r3, r2, r3
 800700e:	43db      	mvns	r3, r3
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	4013      	ands	r3, r2
 8007014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	fa02 f303 	lsl.w	r3, r2, r3
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	4313      	orrs	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007034:	2201      	movs	r2, #1
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	43db      	mvns	r3, r3
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	4013      	ands	r3, r2
 8007042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	f003 0201 	and.w	r2, r3, #1
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	fa02 f303 	lsl.w	r3, r2, r3
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	4313      	orrs	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	2b03      	cmp	r3, #3
 800706a:	d027      	beq.n	80070bc <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <HAL_GPIO_Init+0x1f0>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d007      	beq.n	800708c <HAL_GPIO_Init+0x1f0>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d003      	beq.n	800708c <HAL_GPIO_Init+0x1f0>
 8007084:	21d1      	movs	r1, #209	; 0xd1
 8007086:	4861      	ldr	r0, [pc, #388]	; (800720c <HAL_GPIO_Init+0x370>)
 8007088:	f7fe fd4f 	bl	8005b2a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	2203      	movs	r2, #3
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	43db      	mvns	r3, r3
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	4013      	ands	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	f040 80a3 	bne.w	8007210 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d077      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	2b09      	cmp	r3, #9
 80070d8:	d073      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d06f      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d06b      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d067      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d063      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d05f      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d05b      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d057      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d053      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d04f      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b04      	cmp	r3, #4
 8007128:	d04b      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b04      	cmp	r3, #4
 8007130:	d047      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b04      	cmp	r3, #4
 8007138:	d043      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b05      	cmp	r3, #5
 8007140:	d03f      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b05      	cmp	r3, #5
 8007148:	d03b      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b05      	cmp	r3, #5
 8007150:	d037      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b06      	cmp	r3, #6
 8007158:	d033      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b06      	cmp	r3, #6
 8007160:	d02f      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b05      	cmp	r3, #5
 8007168:	d02b      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b06      	cmp	r3, #6
 8007170:	d027      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b07      	cmp	r3, #7
 8007178:	d023      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b07      	cmp	r3, #7
 8007180:	d01f      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b07      	cmp	r3, #7
 8007188:	d01b      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b08      	cmp	r3, #8
 8007190:	d017      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b0a      	cmp	r3, #10
 8007198:	d013      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d00f      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b09      	cmp	r3, #9
 80071a8:	d00b      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b0c      	cmp	r3, #12
 80071b0:	d007      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d003      	beq.n	80071c2 <HAL_GPIO_Init+0x326>
 80071ba:	21de      	movs	r1, #222	; 0xde
 80071bc:	4813      	ldr	r0, [pc, #76]	; (800720c <HAL_GPIO_Init+0x370>)
 80071be:	f7fe fcb4 	bl	8005b2a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	08da      	lsrs	r2, r3, #3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3208      	adds	r2, #8
 80071ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	220f      	movs	r2, #15
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	43db      	mvns	r3, r3
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	4013      	ands	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	08da      	lsrs	r2, r3, #3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3208      	adds	r2, #8
 8007204:	69b9      	ldr	r1, [r7, #24]
 8007206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800720a:	e001      	b.n	8007210 <HAL_GPIO_Init+0x374>
 800720c:	0800e268 	.word	0x0800e268
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	2203      	movs	r2, #3
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	43db      	mvns	r3, r3
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	4013      	ands	r3, r2
 8007226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f003 0203 	and.w	r2, r3, #3
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	fa02 f303 	lsl.w	r3, r2, r3
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	4313      	orrs	r3, r2
 800723c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 80a2 	beq.w	8007396 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	4b56      	ldr	r3, [pc, #344]	; (80073b0 <HAL_GPIO_Init+0x514>)
 8007258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725a:	4a55      	ldr	r2, [pc, #340]	; (80073b0 <HAL_GPIO_Init+0x514>)
 800725c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007260:	6453      	str	r3, [r2, #68]	; 0x44
 8007262:	4b53      	ldr	r3, [pc, #332]	; (80073b0 <HAL_GPIO_Init+0x514>)
 8007264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800726e:	4a51      	ldr	r2, [pc, #324]	; (80073b4 <HAL_GPIO_Init+0x518>)
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	089b      	lsrs	r3, r3, #2
 8007274:	3302      	adds	r3, #2
 8007276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	220f      	movs	r2, #15
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	43db      	mvns	r3, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4013      	ands	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a48      	ldr	r2, [pc, #288]	; (80073b8 <HAL_GPIO_Init+0x51c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d019      	beq.n	80072ce <HAL_GPIO_Init+0x432>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a47      	ldr	r2, [pc, #284]	; (80073bc <HAL_GPIO_Init+0x520>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d013      	beq.n	80072ca <HAL_GPIO_Init+0x42e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a46      	ldr	r2, [pc, #280]	; (80073c0 <HAL_GPIO_Init+0x524>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00d      	beq.n	80072c6 <HAL_GPIO_Init+0x42a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a45      	ldr	r2, [pc, #276]	; (80073c4 <HAL_GPIO_Init+0x528>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d007      	beq.n	80072c2 <HAL_GPIO_Init+0x426>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a44      	ldr	r2, [pc, #272]	; (80073c8 <HAL_GPIO_Init+0x52c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <HAL_GPIO_Init+0x422>
 80072ba:	2304      	movs	r3, #4
 80072bc:	e008      	b.n	80072d0 <HAL_GPIO_Init+0x434>
 80072be:	2307      	movs	r3, #7
 80072c0:	e006      	b.n	80072d0 <HAL_GPIO_Init+0x434>
 80072c2:	2303      	movs	r3, #3
 80072c4:	e004      	b.n	80072d0 <HAL_GPIO_Init+0x434>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e002      	b.n	80072d0 <HAL_GPIO_Init+0x434>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <HAL_GPIO_Init+0x434>
 80072ce:	2300      	movs	r3, #0
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	f002 0203 	and.w	r2, r2, #3
 80072d6:	0092      	lsls	r2, r2, #2
 80072d8:	4093      	lsls	r3, r2
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	4313      	orrs	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072e0:	4934      	ldr	r1, [pc, #208]	; (80073b4 <HAL_GPIO_Init+0x518>)
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	089b      	lsrs	r3, r3, #2
 80072e6:	3302      	adds	r3, #2
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072ee:	4b37      	ldr	r3, [pc, #220]	; (80073cc <HAL_GPIO_Init+0x530>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	43db      	mvns	r3, r3
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	4013      	ands	r3, r2
 80072fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007312:	4a2e      	ldr	r2, [pc, #184]	; (80073cc <HAL_GPIO_Init+0x530>)
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007318:	4b2c      	ldr	r3, [pc, #176]	; (80073cc <HAL_GPIO_Init+0x530>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	43db      	mvns	r3, r3
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	4013      	ands	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800733c:	4a23      	ldr	r2, [pc, #140]	; (80073cc <HAL_GPIO_Init+0x530>)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007342:	4b22      	ldr	r3, [pc, #136]	; (80073cc <HAL_GPIO_Init+0x530>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	43db      	mvns	r3, r3
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	4013      	ands	r3, r2
 8007350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007366:	4a19      	ldr	r2, [pc, #100]	; (80073cc <HAL_GPIO_Init+0x530>)
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800736c:	4b17      	ldr	r3, [pc, #92]	; (80073cc <HAL_GPIO_Init+0x530>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	43db      	mvns	r3, r3
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	4013      	ands	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007390:	4a0e      	ldr	r2, [pc, #56]	; (80073cc <HAL_GPIO_Init+0x530>)
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	3301      	adds	r3, #1
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	f67f adfe 	bls.w	8006fa0 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	3720      	adds	r7, #32
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	40023800 	.word	0x40023800
 80073b4:	40013800 	.word	0x40013800
 80073b8:	40020000 	.word	0x40020000
 80073bc:	40020400 	.word	0x40020400
 80073c0:	40020800 	.word	0x40020800
 80073c4:	40020c00 	.word	0x40020c00
 80073c8:	40021000 	.word	0x40021000
 80073cc:	40013c00 	.word	0x40013c00

080073d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	807b      	strh	r3, [r7, #2]
 80073dc:	4613      	mov	r3, r2
 80073de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80073e0:	887b      	ldrh	r3, [r7, #2]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <HAL_GPIO_WritePin+0x20>
 80073e6:	887b      	ldrh	r3, [r7, #2]
 80073e8:	0c1b      	lsrs	r3, r3, #16
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <HAL_GPIO_WritePin+0x2a>
 80073f0:	f240 119d 	movw	r1, #413	; 0x19d
 80073f4:	480e      	ldr	r0, [pc, #56]	; (8007430 <HAL_GPIO_WritePin+0x60>)
 80073f6:	f7fe fb98 	bl	8005b2a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80073fa:	787b      	ldrb	r3, [r7, #1]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d007      	beq.n	8007410 <HAL_GPIO_WritePin+0x40>
 8007400:	787b      	ldrb	r3, [r7, #1]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d004      	beq.n	8007410 <HAL_GPIO_WritePin+0x40>
 8007406:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800740a:	4809      	ldr	r0, [pc, #36]	; (8007430 <HAL_GPIO_WritePin+0x60>)
 800740c:	f7fe fb8d 	bl	8005b2a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8007410:	787b      	ldrb	r3, [r7, #1]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007416:	887a      	ldrh	r2, [r7, #2]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800741c:	e003      	b.n	8007426 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800741e:	887b      	ldrh	r3, [r7, #2]
 8007420:	041a      	lsls	r2, r3, #16
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	619a      	str	r2, [r3, #24]
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	0800e268 	.word	0x0800e268

08007434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e314      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b0f      	cmp	r3, #15
 800744c:	d903      	bls.n	8007456 <HAL_RCC_OscConfig+0x22>
 800744e:	21e6      	movs	r1, #230	; 0xe6
 8007450:	4897      	ldr	r0, [pc, #604]	; (80076b0 <HAL_RCC_OscConfig+0x27c>)
 8007452:	f7fe fb6a 	bl	8005b2a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8088 	beq.w	8007574 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <HAL_RCC_OscConfig+0x54>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007474:	d008      	beq.n	8007488 <HAL_RCC_OscConfig+0x54>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800747e:	d003      	beq.n	8007488 <HAL_RCC_OscConfig+0x54>
 8007480:	21eb      	movs	r1, #235	; 0xeb
 8007482:	488b      	ldr	r0, [pc, #556]	; (80076b0 <HAL_RCC_OscConfig+0x27c>)
 8007484:	f7fe fb51 	bl	8005b2a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007488:	4b8a      	ldr	r3, [pc, #552]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 030c 	and.w	r3, r3, #12
 8007490:	2b04      	cmp	r3, #4
 8007492:	d00c      	beq.n	80074ae <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007494:	4b87      	ldr	r3, [pc, #540]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800749c:	2b08      	cmp	r3, #8
 800749e:	d112      	bne.n	80074c6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074a0:	4b84      	ldr	r3, [pc, #528]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ac:	d10b      	bne.n	80074c6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ae:	4b81      	ldr	r3, [pc, #516]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d05b      	beq.n	8007572 <HAL_RCC_OscConfig+0x13e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d157      	bne.n	8007572 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e2d4      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ce:	d106      	bne.n	80074de <HAL_RCC_OscConfig+0xaa>
 80074d0:	4b78      	ldr	r3, [pc, #480]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a77      	ldr	r2, [pc, #476]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80074d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	e01d      	b.n	800751a <HAL_RCC_OscConfig+0xe6>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074e6:	d10c      	bne.n	8007502 <HAL_RCC_OscConfig+0xce>
 80074e8:	4b72      	ldr	r3, [pc, #456]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a71      	ldr	r2, [pc, #452]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80074ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	4b6f      	ldr	r3, [pc, #444]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a6e      	ldr	r2, [pc, #440]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80074fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	e00b      	b.n	800751a <HAL_RCC_OscConfig+0xe6>
 8007502:	4b6c      	ldr	r3, [pc, #432]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a6b      	ldr	r2, [pc, #428]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	4b69      	ldr	r3, [pc, #420]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a68      	ldr	r2, [pc, #416]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007518:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d013      	beq.n	800754a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007522:	f7fe fe91 	bl	8006248 <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007528:	e008      	b.n	800753c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800752a:	f7fe fe8d 	bl	8006248 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b64      	cmp	r3, #100	; 0x64
 8007536:	d901      	bls.n	800753c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e299      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753c:	4b5d      	ldr	r3, [pc, #372]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <HAL_RCC_OscConfig+0xf6>
 8007548:	e014      	b.n	8007574 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754a:	f7fe fe7d 	bl	8006248 <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007550:	e008      	b.n	8007564 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007552:	f7fe fe79 	bl	8006248 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b64      	cmp	r3, #100	; 0x64
 800755e:	d901      	bls.n	8007564 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e285      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007564:	4b53      	ldr	r3, [pc, #332]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f0      	bne.n	8007552 <HAL_RCC_OscConfig+0x11e>
 8007570:	e000      	b.n	8007574 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007572:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d079      	beq.n	8007674 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d008      	beq.n	800759a <HAL_RCC_OscConfig+0x166>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d004      	beq.n	800759a <HAL_RCC_OscConfig+0x166>
 8007590:	f240 111d 	movw	r1, #285	; 0x11d
 8007594:	4846      	ldr	r0, [pc, #280]	; (80076b0 <HAL_RCC_OscConfig+0x27c>)
 8007596:	f7fe fac8 	bl	8005b2a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b1f      	cmp	r3, #31
 80075a0:	d904      	bls.n	80075ac <HAL_RCC_OscConfig+0x178>
 80075a2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80075a6:	4842      	ldr	r0, [pc, #264]	; (80076b0 <HAL_RCC_OscConfig+0x27c>)
 80075a8:	f7fe fabf 	bl	8005b2a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075ac:	4b41      	ldr	r3, [pc, #260]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 030c 	and.w	r3, r3, #12
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075b8:	4b3e      	ldr	r3, [pc, #248]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	d11c      	bne.n	80075fe <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075c4:	4b3b      	ldr	r3, [pc, #236]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d116      	bne.n	80075fe <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075d0:	4b38      	ldr	r3, [pc, #224]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_OscConfig+0x1b4>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e243      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e8:	4b32      	ldr	r3, [pc, #200]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	492f      	ldr	r1, [pc, #188]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075fc:	e03a      	b.n	8007674 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d020      	beq.n	8007648 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007606:	4b2c      	ldr	r3, [pc, #176]	; (80076b8 <HAL_RCC_OscConfig+0x284>)
 8007608:	2201      	movs	r2, #1
 800760a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fe fe1c 	bl	8006248 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007614:	f7fe fe18 	bl	8006248 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e224      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007626:	4b23      	ldr	r3, [pc, #140]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007632:	4b20      	ldr	r3, [pc, #128]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	491c      	ldr	r1, [pc, #112]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]
 8007646:	e015      	b.n	8007674 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007648:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <HAL_RCC_OscConfig+0x284>)
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764e:	f7fe fdfb 	bl	8006248 <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007656:	f7fe fdf7 	bl	8006248 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e203      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007668:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <HAL_RCC_OscConfig+0x280>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1f0      	bne.n	8007656 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d045      	beq.n	800770c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <HAL_RCC_OscConfig+0x266>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d004      	beq.n	800769a <HAL_RCC_OscConfig+0x266>
 8007690:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007694:	4806      	ldr	r0, [pc, #24]	; (80076b0 <HAL_RCC_OscConfig+0x27c>)
 8007696:	f7fe fa48 	bl	8005b2a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01e      	beq.n	80076e0 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076a2:	4b06      	ldr	r3, [pc, #24]	; (80076bc <HAL_RCC_OscConfig+0x288>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a8:	f7fe fdce 	bl	8006248 <HAL_GetTick>
 80076ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ae:	e010      	b.n	80076d2 <HAL_RCC_OscConfig+0x29e>
 80076b0:	0800e2a4 	.word	0x0800e2a4
 80076b4:	40023800 	.word	0x40023800
 80076b8:	42470000 	.word	0x42470000
 80076bc:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076c0:	f7fe fdc2 	bl	8006248 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e1ce      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076d2:	4b5e      	ldr	r3, [pc, #376]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80076d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCC_OscConfig+0x28c>
 80076de:	e015      	b.n	800770c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076e0:	4b5b      	ldr	r3, [pc, #364]	; (8007850 <HAL_RCC_OscConfig+0x41c>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076e6:	f7fe fdaf 	bl	8006248 <HAL_GetTick>
 80076ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ec:	e008      	b.n	8007700 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ee:	f7fe fdab 	bl	8006248 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e1b7      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007700:	4b52      	ldr	r3, [pc, #328]	; (800784c <HAL_RCC_OscConfig+0x418>)
 8007702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1f0      	bne.n	80076ee <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80b0 	beq.w	800787a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800771a:	2300      	movs	r3, #0
 800771c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00c      	beq.n	8007740 <HAL_RCC_OscConfig+0x30c>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d008      	beq.n	8007740 <HAL_RCC_OscConfig+0x30c>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	2b05      	cmp	r3, #5
 8007734:	d004      	beq.n	8007740 <HAL_RCC_OscConfig+0x30c>
 8007736:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800773a:	4846      	ldr	r0, [pc, #280]	; (8007854 <HAL_RCC_OscConfig+0x420>)
 800773c:	f7fe f9f5 	bl	8005b2a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007740:	4b42      	ldr	r3, [pc, #264]	; (800784c <HAL_RCC_OscConfig+0x418>)
 8007742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10f      	bne.n	800776c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800774c:	2300      	movs	r3, #0
 800774e:	60bb      	str	r3, [r7, #8]
 8007750:	4b3e      	ldr	r3, [pc, #248]	; (800784c <HAL_RCC_OscConfig+0x418>)
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	4a3d      	ldr	r2, [pc, #244]	; (800784c <HAL_RCC_OscConfig+0x418>)
 8007756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775a:	6413      	str	r3, [r2, #64]	; 0x40
 800775c:	4b3b      	ldr	r3, [pc, #236]	; (800784c <HAL_RCC_OscConfig+0x418>)
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007764:	60bb      	str	r3, [r7, #8]
 8007766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007768:	2301      	movs	r3, #1
 800776a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800776c:	4b3a      	ldr	r3, [pc, #232]	; (8007858 <HAL_RCC_OscConfig+0x424>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007774:	2b00      	cmp	r3, #0
 8007776:	d118      	bne.n	80077aa <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007778:	4b37      	ldr	r3, [pc, #220]	; (8007858 <HAL_RCC_OscConfig+0x424>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a36      	ldr	r2, [pc, #216]	; (8007858 <HAL_RCC_OscConfig+0x424>)
 800777e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007784:	f7fe fd60 	bl	8006248 <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800778c:	f7fe fd5c 	bl	8006248 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e168      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800779e:	4b2e      	ldr	r3, [pc, #184]	; (8007858 <HAL_RCC_OscConfig+0x424>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0f0      	beq.n	800778c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d106      	bne.n	80077c0 <HAL_RCC_OscConfig+0x38c>
 80077b2:	4b26      	ldr	r3, [pc, #152]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	4a25      	ldr	r2, [pc, #148]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	6713      	str	r3, [r2, #112]	; 0x70
 80077be:	e01c      	b.n	80077fa <HAL_RCC_OscConfig+0x3c6>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b05      	cmp	r3, #5
 80077c6:	d10c      	bne.n	80077e2 <HAL_RCC_OscConfig+0x3ae>
 80077c8:	4b20      	ldr	r3, [pc, #128]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077cc:	4a1f      	ldr	r2, [pc, #124]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077ce:	f043 0304 	orr.w	r3, r3, #4
 80077d2:	6713      	str	r3, [r2, #112]	; 0x70
 80077d4:	4b1d      	ldr	r3, [pc, #116]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d8:	4a1c      	ldr	r2, [pc, #112]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	6713      	str	r3, [r2, #112]	; 0x70
 80077e0:	e00b      	b.n	80077fa <HAL_RCC_OscConfig+0x3c6>
 80077e2:	4b1a      	ldr	r3, [pc, #104]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e6:	4a19      	ldr	r2, [pc, #100]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077e8:	f023 0301 	bic.w	r3, r3, #1
 80077ec:	6713      	str	r3, [r2, #112]	; 0x70
 80077ee:	4b17      	ldr	r3, [pc, #92]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	4a16      	ldr	r2, [pc, #88]	; (800784c <HAL_RCC_OscConfig+0x418>)
 80077f4:	f023 0304 	bic.w	r3, r3, #4
 80077f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d015      	beq.n	800782e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007802:	f7fe fd21 	bl	8006248 <HAL_GetTick>
 8007806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007808:	e00a      	b.n	8007820 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800780a:	f7fe fd1d 	bl	8006248 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	f241 3288 	movw	r2, #5000	; 0x1388
 8007818:	4293      	cmp	r3, r2
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e127      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <HAL_RCC_OscConfig+0x418>)
 8007822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0ee      	beq.n	800780a <HAL_RCC_OscConfig+0x3d6>
 800782c:	e01c      	b.n	8007868 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800782e:	f7fe fd0b 	bl	8006248 <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007834:	e012      	b.n	800785c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007836:	f7fe fd07 	bl	8006248 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	f241 3288 	movw	r2, #5000	; 0x1388
 8007844:	4293      	cmp	r3, r2
 8007846:	d909      	bls.n	800785c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e111      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
 800784c:	40023800 	.word	0x40023800
 8007850:	42470e80 	.word	0x42470e80
 8007854:	0800e2a4 	.word	0x0800e2a4
 8007858:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800785c:	4b86      	ldr	r3, [pc, #536]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e6      	bne.n	8007836 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d105      	bne.n	800787a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800786e:	4b82      	ldr	r3, [pc, #520]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	4a81      	ldr	r2, [pc, #516]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 8007874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007878:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00c      	beq.n	800789c <HAL_RCC_OscConfig+0x468>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d008      	beq.n	800789c <HAL_RCC_OscConfig+0x468>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d004      	beq.n	800789c <HAL_RCC_OscConfig+0x468>
 8007892:	f240 11cd 	movw	r1, #461	; 0x1cd
 8007896:	4879      	ldr	r0, [pc, #484]	; (8007a7c <HAL_RCC_OscConfig+0x648>)
 8007898:	f7fe f947 	bl	8005b2a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 80e4 	beq.w	8007a6e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078a6:	4b74      	ldr	r3, [pc, #464]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 030c 	and.w	r3, r3, #12
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	f000 80a5 	beq.w	80079fe <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	f040 8089 	bne.w	80079d0 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <HAL_RCC_OscConfig+0x4a6>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ce:	d004      	beq.n	80078da <HAL_RCC_OscConfig+0x4a6>
 80078d0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80078d4:	4869      	ldr	r0, [pc, #420]	; (8007a7c <HAL_RCC_OscConfig+0x648>)
 80078d6:	f7fe f928 	bl	8005b2a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	2b3f      	cmp	r3, #63	; 0x3f
 80078e0:	d904      	bls.n	80078ec <HAL_RCC_OscConfig+0x4b8>
 80078e2:	f240 11d7 	movw	r1, #471	; 0x1d7
 80078e6:	4865      	ldr	r0, [pc, #404]	; (8007a7c <HAL_RCC_OscConfig+0x648>)
 80078e8:	f7fe f91f 	bl	8005b2a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b31      	cmp	r3, #49	; 0x31
 80078f2:	d904      	bls.n	80078fe <HAL_RCC_OscConfig+0x4ca>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80078fc:	d904      	bls.n	8007908 <HAL_RCC_OscConfig+0x4d4>
 80078fe:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007902:	485e      	ldr	r0, [pc, #376]	; (8007a7c <HAL_RCC_OscConfig+0x648>)
 8007904:	f7fe f911 	bl	8005b2a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	2b02      	cmp	r3, #2
 800790e:	d010      	beq.n	8007932 <HAL_RCC_OscConfig+0x4fe>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	2b04      	cmp	r3, #4
 8007916:	d00c      	beq.n	8007932 <HAL_RCC_OscConfig+0x4fe>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	2b06      	cmp	r3, #6
 800791e:	d008      	beq.n	8007932 <HAL_RCC_OscConfig+0x4fe>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	2b08      	cmp	r3, #8
 8007926:	d004      	beq.n	8007932 <HAL_RCC_OscConfig+0x4fe>
 8007928:	f240 11d9 	movw	r1, #473	; 0x1d9
 800792c:	4853      	ldr	r0, [pc, #332]	; (8007a7c <HAL_RCC_OscConfig+0x648>)
 800792e:	f7fe f8fc 	bl	8005b2a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	2b01      	cmp	r3, #1
 8007938:	d903      	bls.n	8007942 <HAL_RCC_OscConfig+0x50e>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	2b0f      	cmp	r3, #15
 8007940:	d904      	bls.n	800794c <HAL_RCC_OscConfig+0x518>
 8007942:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007946:	484d      	ldr	r0, [pc, #308]	; (8007a7c <HAL_RCC_OscConfig+0x648>)
 8007948:	f7fe f8ef 	bl	8005b2a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800794c:	4b4c      	ldr	r3, [pc, #304]	; (8007a80 <HAL_RCC_OscConfig+0x64c>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007952:	f7fe fc79 	bl	8006248 <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007958:	e008      	b.n	800796c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800795a:	f7fe fc75 	bl	8006248 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e081      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796c:	4b42      	ldr	r3, [pc, #264]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1f0      	bne.n	800795a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69da      	ldr	r2, [r3, #28]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	431a      	orrs	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	019b      	lsls	r3, r3, #6
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	3b01      	subs	r3, #1
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	061b      	lsls	r3, r3, #24
 800799c:	4936      	ldr	r1, [pc, #216]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079a2:	4b37      	ldr	r3, [pc, #220]	; (8007a80 <HAL_RCC_OscConfig+0x64c>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a8:	f7fe fc4e 	bl	8006248 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b0:	f7fe fc4a 	bl	8006248 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e056      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079c2:	4b2d      	ldr	r3, [pc, #180]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0x57c>
 80079ce:	e04e      	b.n	8007a6e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d0:	4b2b      	ldr	r3, [pc, #172]	; (8007a80 <HAL_RCC_OscConfig+0x64c>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d6:	f7fe fc37 	bl	8006248 <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079de:	f7fe fc33 	bl	8006248 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e03f      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f0:	4b21      	ldr	r3, [pc, #132]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f0      	bne.n	80079de <HAL_RCC_OscConfig+0x5aa>
 80079fc:	e037      	b.n	8007a6e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d101      	bne.n	8007a0a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e032      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a0a:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <HAL_RCC_OscConfig+0x644>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d028      	beq.n	8007a6a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d121      	bne.n	8007a6a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d11a      	bne.n	8007a6a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d111      	bne.n	8007a6a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	3b01      	subs	r3, #1
 8007a54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d107      	bne.n	8007a6a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d001      	beq.n	8007a6e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	0800e2a4 	.word	0x0800e2a4
 8007a80:	42470060 	.word	0x42470060

08007a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e174      	b.n	8007d82 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x24>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b0f      	cmp	r3, #15
 8007aa6:	d904      	bls.n	8007ab2 <HAL_RCC_ClockConfig+0x2e>
 8007aa8:	f240 215a 	movw	r1, #602	; 0x25a
 8007aac:	487b      	ldr	r0, [pc, #492]	; (8007c9c <HAL_RCC_ClockConfig+0x218>)
 8007aae:	f7fe f83c 	bl	8005b2a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d019      	beq.n	8007aec <HAL_RCC_ClockConfig+0x68>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d016      	beq.n	8007aec <HAL_RCC_ClockConfig+0x68>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d013      	beq.n	8007aec <HAL_RCC_ClockConfig+0x68>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d010      	beq.n	8007aec <HAL_RCC_ClockConfig+0x68>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d00d      	beq.n	8007aec <HAL_RCC_ClockConfig+0x68>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b05      	cmp	r3, #5
 8007ad4:	d00a      	beq.n	8007aec <HAL_RCC_ClockConfig+0x68>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b06      	cmp	r3, #6
 8007ada:	d007      	beq.n	8007aec <HAL_RCC_ClockConfig+0x68>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b07      	cmp	r3, #7
 8007ae0:	d004      	beq.n	8007aec <HAL_RCC_ClockConfig+0x68>
 8007ae2:	f240 215b 	movw	r1, #603	; 0x25b
 8007ae6:	486d      	ldr	r0, [pc, #436]	; (8007c9c <HAL_RCC_ClockConfig+0x218>)
 8007ae8:	f7fe f81f 	bl	8005b2a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007aec:	4b6c      	ldr	r3, [pc, #432]	; (8007ca0 <HAL_RCC_ClockConfig+0x21c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d90c      	bls.n	8007b14 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007afa:	4b69      	ldr	r3, [pc, #420]	; (8007ca0 <HAL_RCC_ClockConfig+0x21c>)
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b02:	4b67      	ldr	r3, [pc, #412]	; (8007ca0 <HAL_RCC_ClockConfig+0x21c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d001      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e136      	b.n	8007d82 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d049      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b2c:	4b5d      	ldr	r3, [pc, #372]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4a5c      	ldr	r2, [pc, #368]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b44:	4b57      	ldr	r3, [pc, #348]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	4a56      	ldr	r2, [pc, #344]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d024      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2b80      	cmp	r3, #128	; 0x80
 8007b5e:	d020      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b90      	cmp	r3, #144	; 0x90
 8007b66:	d01c      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	2ba0      	cmp	r3, #160	; 0xa0
 8007b6e:	d018      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2bb0      	cmp	r3, #176	; 0xb0
 8007b76:	d014      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2bc0      	cmp	r3, #192	; 0xc0
 8007b7e:	d010      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	2bd0      	cmp	r3, #208	; 0xd0
 8007b86:	d00c      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2be0      	cmp	r3, #224	; 0xe0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	2bf0      	cmp	r3, #240	; 0xf0
 8007b96:	d004      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x11e>
 8007b98:	f240 217e 	movw	r1, #638	; 0x27e
 8007b9c:	483f      	ldr	r0, [pc, #252]	; (8007c9c <HAL_RCC_ClockConfig+0x218>)
 8007b9e:	f7fd ffc4 	bl	8005b2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ba2:	4b40      	ldr	r3, [pc, #256]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	493d      	ldr	r1, [pc, #244]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d059      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d010      	beq.n	8007bea <HAL_RCC_ClockConfig+0x166>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d00c      	beq.n	8007bea <HAL_RCC_ClockConfig+0x166>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d008      	beq.n	8007bea <HAL_RCC_ClockConfig+0x166>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d004      	beq.n	8007bea <HAL_RCC_ClockConfig+0x166>
 8007be0:	f240 2185 	movw	r1, #645	; 0x285
 8007be4:	482d      	ldr	r0, [pc, #180]	; (8007c9c <HAL_RCC_ClockConfig+0x218>)
 8007be6:	f7fd ffa0 	bl	8005b2a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d107      	bne.n	8007c02 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bf2:	4b2c      	ldr	r3, [pc, #176]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d119      	bne.n	8007c32 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e0bf      	b.n	8007d82 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d003      	beq.n	8007c12 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d107      	bne.n	8007c22 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c12:	4b24      	ldr	r3, [pc, #144]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e0af      	b.n	8007d82 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c22:	4b20      	ldr	r3, [pc, #128]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e0a7      	b.n	8007d82 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c32:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f023 0203 	bic.w	r2, r3, #3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	4919      	ldr	r1, [pc, #100]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c44:	f7fe fb00 	bl	8006248 <HAL_GetTick>
 8007c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c4a:	e00a      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c4c:	f7fe fafc 	bl	8006248 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e08f      	b.n	8007d82 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c62:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <HAL_RCC_ClockConfig+0x220>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f003 020c 	and.w	r2, r3, #12
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d1eb      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <HAL_RCC_ClockConfig+0x21c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d212      	bcs.n	8007ca8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <HAL_RCC_ClockConfig+0x21c>)
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8a:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <HAL_RCC_ClockConfig+0x21c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d007      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e072      	b.n	8007d82 <HAL_RCC_ClockConfig+0x2fe>
 8007c9c:	0800e2a4 	.word	0x0800e2a4
 8007ca0:	40023c00 	.word	0x40023c00
 8007ca4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d025      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d018      	beq.n	8007cee <HAL_RCC_ClockConfig+0x26a>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc4:	d013      	beq.n	8007cee <HAL_RCC_ClockConfig+0x26a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007cce:	d00e      	beq.n	8007cee <HAL_RCC_ClockConfig+0x26a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007cd8:	d009      	beq.n	8007cee <HAL_RCC_ClockConfig+0x26a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007ce2:	d004      	beq.n	8007cee <HAL_RCC_ClockConfig+0x26a>
 8007ce4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007ce8:	4828      	ldr	r0, [pc, #160]	; (8007d8c <HAL_RCC_ClockConfig+0x308>)
 8007cea:	f7fd ff1e 	bl	8005b2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cee:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <HAL_RCC_ClockConfig+0x30c>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	4925      	ldr	r1, [pc, #148]	; (8007d90 <HAL_RCC_ClockConfig+0x30c>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d026      	beq.n	8007d5a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d018      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x2c2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1c:	d013      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x2c2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d26:	d00e      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x2c2>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007d30:	d009      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x2c2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007d3a:	d004      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x2c2>
 8007d3c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007d40:	4812      	ldr	r0, [pc, #72]	; (8007d8c <HAL_RCC_ClockConfig+0x308>)
 8007d42:	f7fd fef2 	bl	8005b2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d46:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <HAL_RCC_ClockConfig+0x30c>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	490e      	ldr	r1, [pc, #56]	; (8007d90 <HAL_RCC_ClockConfig+0x30c>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d5a:	f000 f821 	bl	8007da0 <HAL_RCC_GetSysClockFreq>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <HAL_RCC_ClockConfig+0x30c>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	490a      	ldr	r1, [pc, #40]	; (8007d94 <HAL_RCC_ClockConfig+0x310>)
 8007d6c:	5ccb      	ldrb	r3, [r1, r3]
 8007d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d72:	4a09      	ldr	r2, [pc, #36]	; (8007d98 <HAL_RCC_ClockConfig+0x314>)
 8007d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d76:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <HAL_RCC_ClockConfig+0x318>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe f80a 	bl	8005d94 <HAL_InitTick>

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	0800e2a4 	.word	0x0800e2a4
 8007d90:	40023800 	.word	0x40023800
 8007d94:	0800eb98 	.word	0x0800eb98
 8007d98:	20000094 	.word	0x20000094
 8007d9c:	20000098 	.word	0x20000098

08007da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da4:	b094      	sub	sp, #80	; 0x50
 8007da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	647b      	str	r3, [r7, #68]	; 0x44
 8007dac:	2300      	movs	r3, #0
 8007dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db0:	2300      	movs	r3, #0
 8007db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007db8:	4b79      	ldr	r3, [pc, #484]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 030c 	and.w	r3, r3, #12
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d00d      	beq.n	8007de0 <HAL_RCC_GetSysClockFreq+0x40>
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	f200 80e1 	bhi.w	8007f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d003      	beq.n	8007dda <HAL_RCC_GetSysClockFreq+0x3a>
 8007dd2:	e0db      	b.n	8007f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007dd4:	4b73      	ldr	r3, [pc, #460]	; (8007fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007dd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007dd8:	e0db      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dda:	4b73      	ldr	r3, [pc, #460]	; (8007fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dde:	e0d8      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007de0:	4b6f      	ldr	r3, [pc, #444]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007de8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dea:	4b6d      	ldr	r3, [pc, #436]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d063      	beq.n	8007ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007df6:	4b6a      	ldr	r3, [pc, #424]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	099b      	lsrs	r3, r3, #6
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e08:	633b      	str	r3, [r7, #48]	; 0x30
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	f04f 0000 	mov.w	r0, #0
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	0159      	lsls	r1, r3, #5
 8007e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e24:	0150      	lsls	r0, r2, #5
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	1a51      	subs	r1, r2, r1
 8007e2e:	6139      	str	r1, [r7, #16]
 8007e30:	4629      	mov	r1, r5
 8007e32:	eb63 0301 	sbc.w	r3, r3, r1
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	f04f 0300 	mov.w	r3, #0
 8007e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e44:	4659      	mov	r1, fp
 8007e46:	018b      	lsls	r3, r1, #6
 8007e48:	4651      	mov	r1, sl
 8007e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e4e:	4651      	mov	r1, sl
 8007e50:	018a      	lsls	r2, r1, #6
 8007e52:	4651      	mov	r1, sl
 8007e54:	ebb2 0801 	subs.w	r8, r2, r1
 8007e58:	4659      	mov	r1, fp
 8007e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e72:	4690      	mov	r8, r2
 8007e74:	4699      	mov	r9, r3
 8007e76:	4623      	mov	r3, r4
 8007e78:	eb18 0303 	adds.w	r3, r8, r3
 8007e7c:	60bb      	str	r3, [r7, #8]
 8007e7e:	462b      	mov	r3, r5
 8007e80:	eb49 0303 	adc.w	r3, r9, r3
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e92:	4629      	mov	r1, r5
 8007e94:	024b      	lsls	r3, r1, #9
 8007e96:	4621      	mov	r1, r4
 8007e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	024a      	lsls	r2, r1, #9
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eb0:	f7f8 f9e6 	bl	8000280 <__aeabi_uldivmod>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4613      	mov	r3, r2
 8007eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ebc:	e058      	b.n	8007f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ebe:	4b38      	ldr	r3, [pc, #224]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	099b      	lsrs	r3, r3, #6
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	4611      	mov	r1, r2
 8007eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ece:	623b      	str	r3, [r7, #32]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ed8:	4642      	mov	r2, r8
 8007eda:	464b      	mov	r3, r9
 8007edc:	f04f 0000 	mov.w	r0, #0
 8007ee0:	f04f 0100 	mov.w	r1, #0
 8007ee4:	0159      	lsls	r1, r3, #5
 8007ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eea:	0150      	lsls	r0, r2, #5
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f10:	ebb2 040a 	subs.w	r4, r2, sl
 8007f14:	eb63 050b 	sbc.w	r5, r3, fp
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	00eb      	lsls	r3, r5, #3
 8007f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f26:	00e2      	lsls	r2, r4, #3
 8007f28:	4614      	mov	r4, r2
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	18e3      	adds	r3, r4, r3
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	464b      	mov	r3, r9
 8007f34:	eb45 0303 	adc.w	r3, r5, r3
 8007f38:	607b      	str	r3, [r7, #4]
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	f04f 0300 	mov.w	r3, #0
 8007f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f46:	4629      	mov	r1, r5
 8007f48:	028b      	lsls	r3, r1, #10
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f50:	4621      	mov	r1, r4
 8007f52:	028a      	lsls	r2, r1, #10
 8007f54:	4610      	mov	r0, r2
 8007f56:	4619      	mov	r1, r3
 8007f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	61bb      	str	r3, [r7, #24]
 8007f5e:	61fa      	str	r2, [r7, #28]
 8007f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f64:	f7f8 f98c 	bl	8000280 <__aeabi_uldivmod>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f8a:	e002      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3750      	adds	r7, #80	; 0x50
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	00f42400 	.word	0x00f42400
 8007fa8:	007a1200 	.word	0x007a1200

08007fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fb0:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	20000094 	.word	0x20000094

08007fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fc8:	f7ff fff0 	bl	8007fac <HAL_RCC_GetHCLKFreq>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	0a9b      	lsrs	r3, r3, #10
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	4903      	ldr	r1, [pc, #12]	; (8007fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fda:	5ccb      	ldrb	r3, [r1, r3]
 8007fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	0800eba8 	.word	0x0800eba8

08007fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ff0:	f7ff ffdc 	bl	8007fac <HAL_RCC_GetHCLKFreq>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	0b5b      	lsrs	r3, r3, #13
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	4903      	ldr	r1, [pc, #12]	; (8008010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008002:	5ccb      	ldrb	r3, [r1, r3]
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008008:	4618      	mov	r0, r3
 800800a:	bd80      	pop	{r7, pc}
 800800c:	40023800 	.word	0x40023800
 8008010:	0800eba8 	.word	0x0800eba8

08008014 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	220f      	movs	r2, #15
 8008022:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008024:	4b12      	ldr	r3, [pc, #72]	; (8008070 <HAL_RCC_GetClockConfig+0x5c>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 0203 	and.w	r2, r3, #3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <HAL_RCC_GetClockConfig+0x5c>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <HAL_RCC_GetClockConfig+0x5c>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <HAL_RCC_GetClockConfig+0x5c>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	08db      	lsrs	r3, r3, #3
 800804e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008056:	4b07      	ldr	r3, [pc, #28]	; (8008074 <HAL_RCC_GetClockConfig+0x60>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0207 	and.w	r2, r3, #7
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	601a      	str	r2, [r3, #0]
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40023800 	.word	0x40023800
 8008074:	40023c00 	.word	0x40023c00

08008078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e18c      	b.n	80083a4 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a75      	ldr	r2, [pc, #468]	; (8008264 <HAL_SPI_Init+0x1ec>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d018      	beq.n	80080c6 <HAL_SPI_Init+0x4e>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a73      	ldr	r2, [pc, #460]	; (8008268 <HAL_SPI_Init+0x1f0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d013      	beq.n	80080c6 <HAL_SPI_Init+0x4e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a72      	ldr	r2, [pc, #456]	; (800826c <HAL_SPI_Init+0x1f4>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00e      	beq.n	80080c6 <HAL_SPI_Init+0x4e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a70      	ldr	r2, [pc, #448]	; (8008270 <HAL_SPI_Init+0x1f8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d009      	beq.n	80080c6 <HAL_SPI_Init+0x4e>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a6f      	ldr	r2, [pc, #444]	; (8008274 <HAL_SPI_Init+0x1fc>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d004      	beq.n	80080c6 <HAL_SPI_Init+0x4e>
 80080bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080c0:	486d      	ldr	r0, [pc, #436]	; (8008278 <HAL_SPI_Init+0x200>)
 80080c2:	f7fd fd32 	bl	8005b2a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d009      	beq.n	80080e2 <HAL_SPI_Init+0x6a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080d6:	d004      	beq.n	80080e2 <HAL_SPI_Init+0x6a>
 80080d8:	f240 1141 	movw	r1, #321	; 0x141
 80080dc:	4866      	ldr	r0, [pc, #408]	; (8008278 <HAL_SPI_Init+0x200>)
 80080de:	f7fd fd24 	bl	8005b2a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00e      	beq.n	8008108 <HAL_SPI_Init+0x90>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f2:	d009      	beq.n	8008108 <HAL_SPI_Init+0x90>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080fc:	d004      	beq.n	8008108 <HAL_SPI_Init+0x90>
 80080fe:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008102:	485d      	ldr	r0, [pc, #372]	; (8008278 <HAL_SPI_Init+0x200>)
 8008104:	f7fd fd11 	bl	8005b2a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008110:	d008      	beq.n	8008124 <HAL_SPI_Init+0xac>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <HAL_SPI_Init+0xac>
 800811a:	f240 1143 	movw	r1, #323	; 0x143
 800811e:	4856      	ldr	r0, [pc, #344]	; (8008278 <HAL_SPI_Init+0x200>)
 8008120:	f7fd fd03 	bl	8005b2a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800812c:	d00d      	beq.n	800814a <HAL_SPI_Init+0xd2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <HAL_SPI_Init+0xd2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800813e:	d004      	beq.n	800814a <HAL_SPI_Init+0xd2>
 8008140:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008144:	484c      	ldr	r0, [pc, #304]	; (8008278 <HAL_SPI_Init+0x200>)
 8008146:	f7fd fcf0 	bl	8005b2a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d020      	beq.n	8008194 <HAL_SPI_Init+0x11c>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	2b08      	cmp	r3, #8
 8008158:	d01c      	beq.n	8008194 <HAL_SPI_Init+0x11c>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	2b10      	cmp	r3, #16
 8008160:	d018      	beq.n	8008194 <HAL_SPI_Init+0x11c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	2b18      	cmp	r3, #24
 8008168:	d014      	beq.n	8008194 <HAL_SPI_Init+0x11c>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	2b20      	cmp	r3, #32
 8008170:	d010      	beq.n	8008194 <HAL_SPI_Init+0x11c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	2b28      	cmp	r3, #40	; 0x28
 8008178:	d00c      	beq.n	8008194 <HAL_SPI_Init+0x11c>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	2b30      	cmp	r3, #48	; 0x30
 8008180:	d008      	beq.n	8008194 <HAL_SPI_Init+0x11c>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	2b38      	cmp	r3, #56	; 0x38
 8008188:	d004      	beq.n	8008194 <HAL_SPI_Init+0x11c>
 800818a:	f240 1145 	movw	r1, #325	; 0x145
 800818e:	483a      	ldr	r0, [pc, #232]	; (8008278 <HAL_SPI_Init+0x200>)
 8008190:	f7fd fccb 	bl	8005b2a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <HAL_SPI_Init+0x136>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	2b80      	cmp	r3, #128	; 0x80
 80081a2:	d004      	beq.n	80081ae <HAL_SPI_Init+0x136>
 80081a4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80081a8:	4833      	ldr	r0, [pc, #204]	; (8008278 <HAL_SPI_Init+0x200>)
 80081aa:	f7fd fcbe 	bl	8005b2a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d008      	beq.n	80081c8 <HAL_SPI_Init+0x150>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	d004      	beq.n	80081c8 <HAL_SPI_Init+0x150>
 80081be:	f240 1147 	movw	r1, #327	; 0x147
 80081c2:	482d      	ldr	r0, [pc, #180]	; (8008278 <HAL_SPI_Init+0x200>)
 80081c4:	f7fd fcb1 	bl	8005b2a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d155      	bne.n	800827c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d008      	beq.n	80081ea <HAL_SPI_Init+0x172>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d004      	beq.n	80081ea <HAL_SPI_Init+0x172>
 80081e0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80081e4:	4824      	ldr	r0, [pc, #144]	; (8008278 <HAL_SPI_Init+0x200>)
 80081e6:	f7fd fca0 	bl	8005b2a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d008      	beq.n	8008204 <HAL_SPI_Init+0x18c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d004      	beq.n	8008204 <HAL_SPI_Init+0x18c>
 80081fa:	f240 114b 	movw	r1, #331	; 0x14b
 80081fe:	481e      	ldr	r0, [pc, #120]	; (8008278 <HAL_SPI_Init+0x200>)
 8008200:	f7fd fc93 	bl	8005b2a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800820c:	d125      	bne.n	800825a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d05d      	beq.n	80082d2 <HAL_SPI_Init+0x25a>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	2b08      	cmp	r3, #8
 800821c:	d059      	beq.n	80082d2 <HAL_SPI_Init+0x25a>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	2b10      	cmp	r3, #16
 8008224:	d055      	beq.n	80082d2 <HAL_SPI_Init+0x25a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	2b18      	cmp	r3, #24
 800822c:	d051      	beq.n	80082d2 <HAL_SPI_Init+0x25a>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	2b20      	cmp	r3, #32
 8008234:	d04d      	beq.n	80082d2 <HAL_SPI_Init+0x25a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	2b28      	cmp	r3, #40	; 0x28
 800823c:	d049      	beq.n	80082d2 <HAL_SPI_Init+0x25a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	2b30      	cmp	r3, #48	; 0x30
 8008244:	d045      	beq.n	80082d2 <HAL_SPI_Init+0x25a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	2b38      	cmp	r3, #56	; 0x38
 800824c:	d041      	beq.n	80082d2 <HAL_SPI_Init+0x25a>
 800824e:	f240 114f 	movw	r1, #335	; 0x14f
 8008252:	4809      	ldr	r0, [pc, #36]	; (8008278 <HAL_SPI_Init+0x200>)
 8008254:	f7fd fc69 	bl	8005b2a <assert_failed>
 8008258:	e03b      	b.n	80082d2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	61da      	str	r2, [r3, #28]
 8008260:	e037      	b.n	80082d2 <HAL_SPI_Init+0x25a>
 8008262:	bf00      	nop
 8008264:	40013000 	.word	0x40013000
 8008268:	40003800 	.word	0x40003800
 800826c:	40003c00 	.word	0x40003c00
 8008270:	40013400 	.word	0x40013400
 8008274:	40015000 	.word	0x40015000
 8008278:	0800e2dc 	.word	0x0800e2dc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d020      	beq.n	80082c6 <HAL_SPI_Init+0x24e>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	2b08      	cmp	r3, #8
 800828a:	d01c      	beq.n	80082c6 <HAL_SPI_Init+0x24e>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	2b10      	cmp	r3, #16
 8008292:	d018      	beq.n	80082c6 <HAL_SPI_Init+0x24e>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	2b18      	cmp	r3, #24
 800829a:	d014      	beq.n	80082c6 <HAL_SPI_Init+0x24e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d010      	beq.n	80082c6 <HAL_SPI_Init+0x24e>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	2b28      	cmp	r3, #40	; 0x28
 80082aa:	d00c      	beq.n	80082c6 <HAL_SPI_Init+0x24e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	2b30      	cmp	r3, #48	; 0x30
 80082b2:	d008      	beq.n	80082c6 <HAL_SPI_Init+0x24e>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	2b38      	cmp	r3, #56	; 0x38
 80082ba:	d004      	beq.n	80082c6 <HAL_SPI_Init+0x24e>
 80082bc:	f240 1159 	movw	r1, #345	; 0x159
 80082c0:	483a      	ldr	r0, [pc, #232]	; (80083ac <HAL_SPI_Init+0x334>)
 80082c2:	f7fd fc32 	bl	8005b2a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fd fc5d 	bl	8005bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008308:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008356:	ea42 0103 	orr.w	r1, r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	f003 0104 	and.w	r1, r3, #4
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	f003 0210 	and.w	r2, r3, #16
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	69da      	ldr	r2, [r3, #28]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008392:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	0800e2dc 	.word	0x0800e2dc

080083b0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	75fb      	strb	r3, [r7, #23]

  /* Check tx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <HAL_SPI_Transmit_DMA+0x24>
 80083ca:	f240 615c 	movw	r1, #1628	; 0x65c
 80083ce:	485c      	ldr	r0, [pc, #368]	; (8008540 <HAL_SPI_Transmit_DMA+0x190>)
 80083d0:	f7fd fbab 	bl	8005b2a <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d009      	beq.n	80083f0 <HAL_SPI_Transmit_DMA+0x40>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083e4:	d004      	beq.n	80083f0 <HAL_SPI_Transmit_DMA+0x40>
 80083e6:	f240 615f 	movw	r1, #1631	; 0x65f
 80083ea:	4855      	ldr	r0, [pc, #340]	; (8008540 <HAL_SPI_Transmit_DMA+0x190>)
 80083ec:	f7fd fb9d 	bl	8005b2a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <HAL_SPI_Transmit_DMA+0x4e>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e09b      	b.n	8008536 <HAL_SPI_Transmit_DMA+0x186>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b01      	cmp	r3, #1
 8008410:	d002      	beq.n	8008418 <HAL_SPI_Transmit_DMA+0x68>
  {
    errorcode = HAL_BUSY;
 8008412:	2302      	movs	r3, #2
 8008414:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008416:	e089      	b.n	800852c <HAL_SPI_Transmit_DMA+0x17c>
  }

  if ((pData == NULL) || (Size == 0U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <HAL_SPI_Transmit_DMA+0x74>
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <HAL_SPI_Transmit_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008428:	e080      	b.n	800852c <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2203      	movs	r2, #3
 800842e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	88fa      	ldrh	r2, [r7, #6]
 8008442:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	88fa      	ldrh	r2, [r7, #6]
 8008448:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008470:	d10f      	bne.n	8008492 <HAL_SPI_Transmit_DMA+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008490:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008496:	4a2b      	ldr	r2, [pc, #172]	; (8008544 <HAL_SPI_Transmit_DMA+0x194>)
 8008498:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849e:	4a2a      	ldr	r2, [pc, #168]	; (8008548 <HAL_SPI_Transmit_DMA+0x198>)
 80084a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a6:	4a29      	ldr	r2, [pc, #164]	; (800854c <HAL_SPI_Transmit_DMA+0x19c>)
 80084a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ae:	2200      	movs	r2, #0
 80084b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	4619      	mov	r1, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	330c      	adds	r3, #12
 80084c2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80084ca:	f7fe f9f5 	bl	80068b8 <HAL_DMA_Start_IT>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00c      	beq.n	80084ee <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d8:	f043 0210 	orr.w	r2, r3, #16
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80084ec:	e01e      	b.n	800852c <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	d007      	beq.n	800850c <HAL_SPI_Transmit_DMA+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800850a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0220 	orr.w	r2, r2, #32
 800851a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0202 	orr.w	r2, r2, #2
 800852a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	0800e2dc 	.word	0x0800e2dc
 8008544:	08008bd5 	.word	0x08008bd5
 8008548:	080089f5 	.word	0x080089f5
 800854c:	08008c29 	.word	0x08008c29

08008550 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	75fb      	strb	r3, [r7, #23]

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <HAL_SPI_TransmitReceive_DMA+0x24>
 800856a:	f240 713e 	movw	r1, #1854	; 0x73e
 800856e:	4882      	ldr	r0, [pc, #520]	; (8008778 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8008570:	f7fd fadb 	bl	8005b2a <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <HAL_SPI_TransmitReceive_DMA+0x36>
 800857c:	f240 713f 	movw	r1, #1855	; 0x73f
 8008580:	487d      	ldr	r0, [pc, #500]	; (8008778 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8008582:	f7fd fad2 	bl	8005b2a <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d004      	beq.n	8008598 <HAL_SPI_TransmitReceive_DMA+0x48>
 800858e:	f240 7142 	movw	r1, #1858	; 0x742
 8008592:	4879      	ldr	r0, [pc, #484]	; (8008778 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8008594:	f7fd fac9 	bl	8005b2a <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_SPI_TransmitReceive_DMA+0x56>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e0e3      	b.n	800876e <HAL_SPI_TransmitReceive_DMA+0x21e>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085b4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80085bc:	7dbb      	ldrb	r3, [r7, #22]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d00d      	beq.n	80085de <HAL_SPI_TransmitReceive_DMA+0x8e>
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085c8:	d106      	bne.n	80085d8 <HAL_SPI_TransmitReceive_DMA+0x88>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <HAL_SPI_TransmitReceive_DMA+0x88>
 80085d2:	7dbb      	ldrb	r3, [r7, #22]
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d002      	beq.n	80085de <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_BUSY;
 80085d8:	2302      	movs	r3, #2
 80085da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085dc:	e0c2      	b.n	8008764 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_SPI_TransmitReceive_DMA+0xa0>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <HAL_SPI_TransmitReceive_DMA+0xa0>
 80085ea:	887b      	ldrh	r3, [r7, #2]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <HAL_SPI_TransmitReceive_DMA+0xa6>
  {
    errorcode = HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085f4:	e0b6      	b.n	8008764 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d003      	beq.n	800860a <HAL_SPI_TransmitReceive_DMA+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2205      	movs	r2, #5
 8008606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	887a      	ldrh	r2, [r7, #2]
 800861a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	887a      	ldrh	r2, [r7, #2]
 8008620:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	887a      	ldrh	r2, [r7, #2]
 800862c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	887a      	ldrh	r2, [r7, #2]
 8008632:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b04      	cmp	r3, #4
 800864a:	d108      	bne.n	800865e <HAL_SPI_TransmitReceive_DMA+0x10e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008650:	4a4a      	ldr	r2, [pc, #296]	; (800877c <HAL_SPI_TransmitReceive_DMA+0x22c>)
 8008652:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008658:	4a49      	ldr	r2, [pc, #292]	; (8008780 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800865a:	63da      	str	r2, [r3, #60]	; 0x3c
 800865c:	e007      	b.n	800866e <HAL_SPI_TransmitReceive_DMA+0x11e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008662:	4a48      	ldr	r2, [pc, #288]	; (8008784 <HAL_SPI_TransmitReceive_DMA+0x234>)
 8008664:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866a:	4a47      	ldr	r2, [pc, #284]	; (8008788 <HAL_SPI_TransmitReceive_DMA+0x238>)
 800866c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008672:	4a46      	ldr	r2, [pc, #280]	; (800878c <HAL_SPI_TransmitReceive_DMA+0x23c>)
 8008674:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867a:	2200      	movs	r2, #0
 800867c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	4619      	mov	r1, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008694:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008696:	f7fe f90f 	bl	80068b8 <HAL_DMA_Start_IT>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <HAL_SPI_TransmitReceive_DMA+0x16a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a4:	f043 0210 	orr.w	r2, r3, #16
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80086b8:	e054      	b.n	8008764 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0201 	orr.w	r2, r2, #1
 80086c8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ce:	2200      	movs	r2, #0
 80086d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086d6:	2200      	movs	r2, #0
 80086d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086de:	2200      	movs	r2, #0
 80086e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e6:	2200      	movs	r2, #0
 80086e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	4619      	mov	r1, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	330c      	adds	r3, #12
 80086fa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008700:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008702:	f7fe f8d9 	bl	80068b8 <HAL_DMA_Start_IT>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00c      	beq.n	8008726 <HAL_SPI_TransmitReceive_DMA+0x1d6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008710:	f043 0210 	orr.w	r2, r3, #16
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8008724:	e01e      	b.n	8008764 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b40      	cmp	r3, #64	; 0x40
 8008732:	d007      	beq.n	8008744 <HAL_SPI_TransmitReceive_DMA+0x1f4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008742:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f042 0220 	orr.w	r2, r2, #32
 8008752:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0202 	orr.w	r2, r2, #2
 8008762:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	0800e2dc 	.word	0x0800e2dc
 800877c:	08008bf1 	.word	0x08008bf1
 8008780:	08008a9d 	.word	0x08008a9d
 8008784:	08008c0d 	.word	0x08008c0d
 8008788:	08008b45 	.word	0x08008b45
 800878c:	08008c29 	.word	0x08008c29

08008790 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	099b      	lsrs	r3, r3, #6
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10f      	bne.n	80087d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	099b      	lsrs	r3, r3, #6
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
    return;
 80087d2:	e0d7      	b.n	8008984 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00a      	beq.n	80087f6 <HAL_SPI_IRQHandler+0x66>
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	09db      	lsrs	r3, r3, #7
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d004      	beq.n	80087f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
    return;
 80087f4:	e0c6      	b.n	8008984 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	095b      	lsrs	r3, r3, #5
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10c      	bne.n	800881c <HAL_SPI_IRQHandler+0x8c>
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	099b      	lsrs	r3, r3, #6
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	0a1b      	lsrs	r3, r3, #8
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80b4 	beq.w	8008984 <HAL_SPI_IRQHandler+0x1f4>
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	095b      	lsrs	r3, r3, #5
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 80ad 	beq.w	8008984 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	099b      	lsrs	r3, r3, #6
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d023      	beq.n	800887e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b03      	cmp	r3, #3
 8008840:	d011      	beq.n	8008866 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008846:	f043 0204 	orr.w	r2, r3, #4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	617b      	str	r3, [r7, #20]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	e00b      	b.n	800887e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	613b      	str	r3, [r7, #16]
 800887a:	693b      	ldr	r3, [r7, #16]
        return;
 800887c:	e082      	b.n	8008984 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d014      	beq.n	80088b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	f043 0201 	orr.w	r2, r3, #1
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00c      	beq.n	80088da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c4:	f043 0208 	orr.w	r2, r3, #8
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80088cc:	2300      	movs	r3, #0
 80088ce:	60bb      	str	r3, [r7, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	60bb      	str	r3, [r7, #8]
 80088d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d04f      	beq.n	8008982 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <HAL_SPI_IRQHandler+0x17e>
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d034      	beq.n	8008978 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0203 	bic.w	r2, r2, #3
 800891c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d011      	beq.n	800894a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892a:	4a18      	ldr	r2, [pc, #96]	; (800898c <HAL_SPI_IRQHandler+0x1fc>)
 800892c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe f826 	bl	8006984 <HAL_DMA_Abort_IT>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d005      	beq.n	800894a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800894e:	2b00      	cmp	r3, #0
 8008950:	d016      	beq.n	8008980 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008956:	4a0d      	ldr	r2, [pc, #52]	; (800898c <HAL_SPI_IRQHandler+0x1fc>)
 8008958:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe f810 	bl	8006984 <HAL_DMA_Abort_IT>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008976:	e003      	b.n	8008980 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f831 	bl	80089e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800897e:	e000      	b.n	8008982 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008980:	bf00      	nop
    return;
 8008982:	bf00      	nop
  }
}
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	08008c69 	.word	0x08008c69

08008990 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a02:	f7fd fc21 	bl	8006248 <HAL_GetTick>
 8008a06:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a16:	d03b      	beq.n	8008a90 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0220 	bic.w	r2, r2, #32
 8008a26:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0202 	bic.w	r2, r2, #2
 8008a36:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	2164      	movs	r1, #100	; 0x64
 8008a3c:	6978      	ldr	r0, [r7, #20]
 8008a3e:	f000 fa15 	bl	8008e6c <SPI_EndRxTxTransaction>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	f043 0220 	orr.w	r2, r3, #32
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2200      	movs	r2, #0
 8008a76:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d003      	beq.n	8008a90 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008a88:	6978      	ldr	r0, [r7, #20]
 8008a8a:	f7ff ffa9 	bl	80089e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008a8e:	e002      	b.n	8008a96 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008a90:	6978      	ldr	r0, [r7, #20]
 8008a92:	f7fc fcaf 	bl	80053f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aaa:	f7fd fbcd 	bl	8006248 <HAL_GetTick>
 8008aae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008abe:	d03b      	beq.n	8008b38 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 0220 	bic.w	r2, r2, #32
 8008ace:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10d      	bne.n	8008af4 <SPI_DMAReceiveCplt+0x58>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ae0:	d108      	bne.n	8008af4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0203 	bic.w	r2, r2, #3
 8008af0:	605a      	str	r2, [r3, #4]
 8008af2:	e007      	b.n	8008b04 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0201 	bic.w	r2, r2, #1
 8008b02:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	2164      	movs	r1, #100	; 0x64
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f949 	bl	8008da0 <SPI_EndRxTransaction>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff ff55 	bl	80089e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008b36:	e002      	b.n	8008b3e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7fc fc69 	bl	8005410 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b52:	f7fd fb79 	bl	8006248 <HAL_GetTick>
 8008b56:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b66:	d02f      	beq.n	8008bc8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0220 	bic.w	r2, r2, #32
 8008b76:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	2164      	movs	r1, #100	; 0x64
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f975 	bl	8008e6c <SPI_EndRxTxTransaction>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8c:	f043 0220 	orr.w	r2, r3, #32
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0203 	bic.w	r2, r2, #3
 8008ba2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7ff ff0d 	bl	80089e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008bc6:	e002      	b.n	8008bce <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff fee1 	bl	8008990 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff fede 	bl	80089a4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008be8:	bf00      	nop
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff feda 	bl	80089b8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7ff fed6 	bl	80089cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c20:	bf00      	nop
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 0203 	bic.w	r2, r2, #3
 8008c44:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4a:	f043 0210 	orr.w	r2, r3, #16
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff fec0 	bl	80089e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c60:	bf00      	nop
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7ff feac 	bl	80089e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ca0:	f7fd fad2 	bl	8006248 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4413      	add	r3, r2
 8008cae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008cb0:	f7fd faca 	bl	8006248 <HAL_GetTick>
 8008cb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cb6:	4b39      	ldr	r3, [pc, #228]	; (8008d9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	015b      	lsls	r3, r3, #5
 8008cbc:	0d1b      	lsrs	r3, r3, #20
 8008cbe:	69fa      	ldr	r2, [r7, #28]
 8008cc0:	fb02 f303 	mul.w	r3, r2, r3
 8008cc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cc6:	e054      	b.n	8008d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cce:	d050      	beq.n	8008d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cd0:	f7fd faba 	bl	8006248 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d902      	bls.n	8008ce6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d13d      	bne.n	8008d62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cfe:	d111      	bne.n	8008d24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d08:	d004      	beq.n	8008d14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d12:	d107      	bne.n	8008d24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d2c:	d10f      	bne.n	8008d4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e017      	b.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d19b      	bne.n	8008cc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3720      	adds	r7, #32
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000094 	.word	0x20000094

08008da0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008db4:	d111      	bne.n	8008dda <SPI_EndRxTransaction+0x3a>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dbe:	d004      	beq.n	8008dca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc8:	d107      	bne.n	8008dda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008de2:	d12a      	bne.n	8008e3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dec:	d012      	beq.n	8008e14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2200      	movs	r2, #0
 8008df6:	2180      	movs	r1, #128	; 0x80
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff ff49 	bl	8008c90 <SPI_WaitFlagStateUntilTimeout>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d02d      	beq.n	8008e60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e08:	f043 0220 	orr.w	r2, r3, #32
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e026      	b.n	8008e62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7ff ff36 	bl	8008c90 <SPI_WaitFlagStateUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d01a      	beq.n	8008e60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	f043 0220 	orr.w	r2, r3, #32
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e013      	b.n	8008e62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2200      	movs	r2, #0
 8008e42:	2101      	movs	r1, #1
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f7ff ff23 	bl	8008c90 <SPI_WaitFlagStateUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d007      	beq.n	8008e60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e54:	f043 0220 	orr.w	r2, r3, #32
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e000      	b.n	8008e62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e78:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <SPI_EndRxTxTransaction+0x7c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1b      	ldr	r2, [pc, #108]	; (8008eec <SPI_EndRxTxTransaction+0x80>)
 8008e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e82:	0d5b      	lsrs	r3, r3, #21
 8008e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e88:	fb02 f303 	mul.w	r3, r2, r3
 8008e8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e96:	d112      	bne.n	8008ebe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff fef4 	bl	8008c90 <SPI_WaitFlagStateUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d016      	beq.n	8008edc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb2:	f043 0220 	orr.w	r2, r3, #32
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e00f      	b.n	8008ede <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed4:	2b80      	cmp	r3, #128	; 0x80
 8008ed6:	d0f2      	beq.n	8008ebe <SPI_EndRxTxTransaction+0x52>
 8008ed8:	e000      	b.n	8008edc <SPI_EndRxTxTransaction+0x70>
        break;
 8008eda:	bf00      	nop
  }

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000094 	.word	0x20000094
 8008eec:	165e9f81 	.word	0x165e9f81

08008ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e0a7      	b.n	8009052 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a55      	ldr	r2, [pc, #340]	; (800905c <HAL_TIM_Base_Init+0x16c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d027      	beq.n	8008f5c <HAL_TIM_Base_Init+0x6c>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f14:	d022      	beq.n	8008f5c <HAL_TIM_Base_Init+0x6c>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a51      	ldr	r2, [pc, #324]	; (8009060 <HAL_TIM_Base_Init+0x170>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d01d      	beq.n	8008f5c <HAL_TIM_Base_Init+0x6c>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a4f      	ldr	r2, [pc, #316]	; (8009064 <HAL_TIM_Base_Init+0x174>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d018      	beq.n	8008f5c <HAL_TIM_Base_Init+0x6c>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a4e      	ldr	r2, [pc, #312]	; (8009068 <HAL_TIM_Base_Init+0x178>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d013      	beq.n	8008f5c <HAL_TIM_Base_Init+0x6c>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a4c      	ldr	r2, [pc, #304]	; (800906c <HAL_TIM_Base_Init+0x17c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d00e      	beq.n	8008f5c <HAL_TIM_Base_Init+0x6c>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a4b      	ldr	r2, [pc, #300]	; (8009070 <HAL_TIM_Base_Init+0x180>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d009      	beq.n	8008f5c <HAL_TIM_Base_Init+0x6c>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a49      	ldr	r2, [pc, #292]	; (8009074 <HAL_TIM_Base_Init+0x184>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d004      	beq.n	8008f5c <HAL_TIM_Base_Init+0x6c>
 8008f52:	f240 1113 	movw	r1, #275	; 0x113
 8008f56:	4848      	ldr	r0, [pc, #288]	; (8009078 <HAL_TIM_Base_Init+0x188>)
 8008f58:	f7fc fde7 	bl	8005b2a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d014      	beq.n	8008f8e <HAL_TIM_Base_Init+0x9e>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	2b10      	cmp	r3, #16
 8008f6a:	d010      	beq.n	8008f8e <HAL_TIM_Base_Init+0x9e>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	2b20      	cmp	r3, #32
 8008f72:	d00c      	beq.n	8008f8e <HAL_TIM_Base_Init+0x9e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	2b40      	cmp	r3, #64	; 0x40
 8008f7a:	d008      	beq.n	8008f8e <HAL_TIM_Base_Init+0x9e>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	2b60      	cmp	r3, #96	; 0x60
 8008f82:	d004      	beq.n	8008f8e <HAL_TIM_Base_Init+0x9e>
 8008f84:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008f88:	483b      	ldr	r0, [pc, #236]	; (8009078 <HAL_TIM_Base_Init+0x188>)
 8008f8a:	f7fc fdce 	bl	8005b2a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00e      	beq.n	8008fb4 <HAL_TIM_Base_Init+0xc4>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9e:	d009      	beq.n	8008fb4 <HAL_TIM_Base_Init+0xc4>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa8:	d004      	beq.n	8008fb4 <HAL_TIM_Base_Init+0xc4>
 8008faa:	f240 1115 	movw	r1, #277	; 0x115
 8008fae:	4832      	ldr	r0, [pc, #200]	; (8009078 <HAL_TIM_Base_Init+0x188>)
 8008fb0:	f7fc fdbb 	bl	8005b2a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d008      	beq.n	8008fce <HAL_TIM_Base_Init+0xde>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b80      	cmp	r3, #128	; 0x80
 8008fc2:	d004      	beq.n	8008fce <HAL_TIM_Base_Init+0xde>
 8008fc4:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008fc8:	482b      	ldr	r0, [pc, #172]	; (8009078 <HAL_TIM_Base_Init+0x188>)
 8008fca:	f7fc fdae 	bl	8005b2a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f84a 	bl	800907c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f000 fa0a 	bl	8009414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40010000 	.word	0x40010000
 8009060:	40000400 	.word	0x40000400
 8009064:	40000800 	.word	0x40000800
 8009068:	40000c00 	.word	0x40000c00
 800906c:	40014000 	.word	0x40014000
 8009070:	40014400 	.word	0x40014400
 8009074:	40014800 	.word	0x40014800
 8009078:	0800e314 	.word	0x0800e314

0800907c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a3d      	ldr	r2, [pc, #244]	; (8009194 <HAL_TIM_Base_Start_IT+0x104>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d027      	beq.n	80090f2 <HAL_TIM_Base_Start_IT+0x62>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090aa:	d022      	beq.n	80090f2 <HAL_TIM_Base_Start_IT+0x62>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a39      	ldr	r2, [pc, #228]	; (8009198 <HAL_TIM_Base_Start_IT+0x108>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d01d      	beq.n	80090f2 <HAL_TIM_Base_Start_IT+0x62>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a38      	ldr	r2, [pc, #224]	; (800919c <HAL_TIM_Base_Start_IT+0x10c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d018      	beq.n	80090f2 <HAL_TIM_Base_Start_IT+0x62>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a36      	ldr	r2, [pc, #216]	; (80091a0 <HAL_TIM_Base_Start_IT+0x110>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d013      	beq.n	80090f2 <HAL_TIM_Base_Start_IT+0x62>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a35      	ldr	r2, [pc, #212]	; (80091a4 <HAL_TIM_Base_Start_IT+0x114>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d00e      	beq.n	80090f2 <HAL_TIM_Base_Start_IT+0x62>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a33      	ldr	r2, [pc, #204]	; (80091a8 <HAL_TIM_Base_Start_IT+0x118>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d009      	beq.n	80090f2 <HAL_TIM_Base_Start_IT+0x62>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a32      	ldr	r2, [pc, #200]	; (80091ac <HAL_TIM_Base_Start_IT+0x11c>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d004      	beq.n	80090f2 <HAL_TIM_Base_Start_IT+0x62>
 80090e8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80090ec:	4830      	ldr	r0, [pc, #192]	; (80091b0 <HAL_TIM_Base_Start_IT+0x120>)
 80090ee:	f7fc fd1c 	bl	8005b2a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d001      	beq.n	8009102 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e044      	b.n	800918c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68da      	ldr	r2, [r3, #12]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0201 	orr.w	r2, r2, #1
 8009118:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a1d      	ldr	r2, [pc, #116]	; (8009194 <HAL_TIM_Base_Start_IT+0x104>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d018      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xc6>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912c:	d013      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xc6>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a19      	ldr	r2, [pc, #100]	; (8009198 <HAL_TIM_Base_Start_IT+0x108>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d00e      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xc6>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a17      	ldr	r2, [pc, #92]	; (800919c <HAL_TIM_Base_Start_IT+0x10c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d009      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xc6>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a16      	ldr	r2, [pc, #88]	; (80091a0 <HAL_TIM_Base_Start_IT+0x110>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d004      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xc6>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a14      	ldr	r2, [pc, #80]	; (80091a4 <HAL_TIM_Base_Start_IT+0x114>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d111      	bne.n	800917a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b06      	cmp	r3, #6
 8009166:	d010      	beq.n	800918a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0201 	orr.w	r2, r2, #1
 8009176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009178:	e007      	b.n	800918a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0201 	orr.w	r2, r2, #1
 8009188:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	40010000 	.word	0x40010000
 8009198:	40000400 	.word	0x40000400
 800919c:	40000800 	.word	0x40000800
 80091a0:	40000c00 	.word	0x40000c00
 80091a4:	40014000 	.word	0x40014000
 80091a8:	40014400 	.word	0x40014400
 80091ac:	40014800 	.word	0x40014800
 80091b0:	0800e314 	.word	0x0800e314

080091b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d122      	bne.n	8009210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d11b      	bne.n	8009210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f06f 0202 	mvn.w	r2, #2
 80091e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f8ee 	bl	80093d8 <HAL_TIM_IC_CaptureCallback>
 80091fc:	e005      	b.n	800920a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f8e0 	bl	80093c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f8f1 	bl	80093ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0304 	and.w	r3, r3, #4
 800921a:	2b04      	cmp	r3, #4
 800921c:	d122      	bne.n	8009264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b04      	cmp	r3, #4
 800922a:	d11b      	bne.n	8009264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f06f 0204 	mvn.w	r2, #4
 8009234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2202      	movs	r2, #2
 800923a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f8c4 	bl	80093d8 <HAL_TIM_IC_CaptureCallback>
 8009250:	e005      	b.n	800925e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f8b6 	bl	80093c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f8c7 	bl	80093ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b08      	cmp	r3, #8
 8009270:	d122      	bne.n	80092b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b08      	cmp	r3, #8
 800927e:	d11b      	bne.n	80092b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f06f 0208 	mvn.w	r2, #8
 8009288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2204      	movs	r2, #4
 800928e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	f003 0303 	and.w	r3, r3, #3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f89a 	bl	80093d8 <HAL_TIM_IC_CaptureCallback>
 80092a4:	e005      	b.n	80092b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f88c 	bl	80093c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f89d 	bl	80093ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 0310 	and.w	r3, r3, #16
 80092c2:	2b10      	cmp	r3, #16
 80092c4:	d122      	bne.n	800930c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b10      	cmp	r3, #16
 80092d2:	d11b      	bne.n	800930c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f06f 0210 	mvn.w	r2, #16
 80092dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2208      	movs	r2, #8
 80092e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f870 	bl	80093d8 <HAL_TIM_IC_CaptureCallback>
 80092f8:	e005      	b.n	8009306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f862 	bl	80093c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f873 	bl	80093ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b01      	cmp	r3, #1
 8009318:	d10e      	bne.n	8009338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b01      	cmp	r3, #1
 8009326:	d107      	bne.n	8009338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f06f 0201 	mvn.w	r2, #1
 8009330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7fc fbe2 	bl	8005afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d10e      	bne.n	8009364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009350:	2b80      	cmp	r3, #128	; 0x80
 8009352:	d107      	bne.n	8009364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800935c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f8e2 	bl	8009528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d10e      	bne.n	8009390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937c:	2b40      	cmp	r3, #64	; 0x40
 800937e:	d107      	bne.n	8009390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f838 	bl	8009400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b20      	cmp	r3, #32
 800939c:	d10e      	bne.n	80093bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b20      	cmp	r3, #32
 80093aa:	d107      	bne.n	80093bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f06f 0220 	mvn.w	r2, #32
 80093b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f8ac 	bl	8009514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a34      	ldr	r2, [pc, #208]	; (80094f8 <TIM_Base_SetConfig+0xe4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d00f      	beq.n	800944c <TIM_Base_SetConfig+0x38>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009432:	d00b      	beq.n	800944c <TIM_Base_SetConfig+0x38>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a31      	ldr	r2, [pc, #196]	; (80094fc <TIM_Base_SetConfig+0xe8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d007      	beq.n	800944c <TIM_Base_SetConfig+0x38>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a30      	ldr	r2, [pc, #192]	; (8009500 <TIM_Base_SetConfig+0xec>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_Base_SetConfig+0x38>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a2f      	ldr	r2, [pc, #188]	; (8009504 <TIM_Base_SetConfig+0xf0>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d108      	bne.n	800945e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	4313      	orrs	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a25      	ldr	r2, [pc, #148]	; (80094f8 <TIM_Base_SetConfig+0xe4>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d01b      	beq.n	800949e <TIM_Base_SetConfig+0x8a>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946c:	d017      	beq.n	800949e <TIM_Base_SetConfig+0x8a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a22      	ldr	r2, [pc, #136]	; (80094fc <TIM_Base_SetConfig+0xe8>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d013      	beq.n	800949e <TIM_Base_SetConfig+0x8a>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a21      	ldr	r2, [pc, #132]	; (8009500 <TIM_Base_SetConfig+0xec>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00f      	beq.n	800949e <TIM_Base_SetConfig+0x8a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a20      	ldr	r2, [pc, #128]	; (8009504 <TIM_Base_SetConfig+0xf0>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d00b      	beq.n	800949e <TIM_Base_SetConfig+0x8a>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a1f      	ldr	r2, [pc, #124]	; (8009508 <TIM_Base_SetConfig+0xf4>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d007      	beq.n	800949e <TIM_Base_SetConfig+0x8a>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a1e      	ldr	r2, [pc, #120]	; (800950c <TIM_Base_SetConfig+0xf8>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d003      	beq.n	800949e <TIM_Base_SetConfig+0x8a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a1d      	ldr	r2, [pc, #116]	; (8009510 <TIM_Base_SetConfig+0xfc>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d108      	bne.n	80094b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a08      	ldr	r2, [pc, #32]	; (80094f8 <TIM_Base_SetConfig+0xe4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d103      	bne.n	80094e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	615a      	str	r2, [r3, #20]
}
 80094ea:	bf00      	nop
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	40010000 	.word	0x40010000
 80094fc:	40000400 	.word	0x40000400
 8009500:	40000800 	.word	0x40000800
 8009504:	40000c00 	.word	0x40000c00
 8009508:	40014000 	.word	0x40014000
 800950c:	40014400 	.word	0x40014400
 8009510:	40014800 	.word	0x40014800

08009514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e0a0      	b.n	8009690 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d02c      	beq.n	80095b0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a4f      	ldr	r2, [pc, #316]	; (8009698 <HAL_UART_Init+0x15c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00e      	beq.n	800957e <HAL_UART_Init+0x42>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a4d      	ldr	r2, [pc, #308]	; (800969c <HAL_UART_Init+0x160>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d009      	beq.n	800957e <HAL_UART_Init+0x42>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a4c      	ldr	r2, [pc, #304]	; (80096a0 <HAL_UART_Init+0x164>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d004      	beq.n	800957e <HAL_UART_Init+0x42>
 8009574:	f240 1173 	movw	r1, #371	; 0x173
 8009578:	484a      	ldr	r0, [pc, #296]	; (80096a4 <HAL_UART_Init+0x168>)
 800957a:	f7fc fad6 	bl	8005b2a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d028      	beq.n	80095d8 <HAL_UART_Init+0x9c>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800958e:	d023      	beq.n	80095d8 <HAL_UART_Init+0x9c>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009598:	d01e      	beq.n	80095d8 <HAL_UART_Init+0x9c>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a2:	d019      	beq.n	80095d8 <HAL_UART_Init+0x9c>
 80095a4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80095a8:	483e      	ldr	r0, [pc, #248]	; (80096a4 <HAL_UART_Init+0x168>)
 80095aa:	f7fc fabe 	bl	8005b2a <assert_failed>
 80095ae:	e013      	b.n	80095d8 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a38      	ldr	r2, [pc, #224]	; (8009698 <HAL_UART_Init+0x15c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00e      	beq.n	80095d8 <HAL_UART_Init+0x9c>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a37      	ldr	r2, [pc, #220]	; (800969c <HAL_UART_Init+0x160>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d009      	beq.n	80095d8 <HAL_UART_Init+0x9c>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a35      	ldr	r2, [pc, #212]	; (80096a0 <HAL_UART_Init+0x164>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d004      	beq.n	80095d8 <HAL_UART_Init+0x9c>
 80095ce:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80095d2:	4834      	ldr	r0, [pc, #208]	; (80096a4 <HAL_UART_Init+0x168>)
 80095d4:	f7fc faa9 	bl	8005b2a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d009      	beq.n	80095f4 <HAL_UART_Init+0xb8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e8:	d004      	beq.n	80095f4 <HAL_UART_Init+0xb8>
 80095ea:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80095ee:	482d      	ldr	r0, [pc, #180]	; (80096a4 <HAL_UART_Init+0x168>)
 80095f0:	f7fc fa9b 	bl	8005b2a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d009      	beq.n	8009610 <HAL_UART_Init+0xd4>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009604:	d004      	beq.n	8009610 <HAL_UART_Init+0xd4>
 8009606:	f240 117b 	movw	r1, #379	; 0x17b
 800960a:	4826      	ldr	r0, [pc, #152]	; (80096a4 <HAL_UART_Init+0x168>)
 800960c:	f7fc fa8d 	bl	8005b2a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d106      	bne.n	800962a <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7fc fd67 	bl	80060f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2224      	movs	r2, #36	; 0x24
 800962e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009640:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f830 	bl	80096a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691a      	ldr	r2, [r3, #16]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009656:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	695a      	ldr	r2, [r3, #20]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009666:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009676:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2220      	movs	r2, #32
 8009682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	40011000 	.word	0x40011000
 800969c:	40004400 	.word	0x40004400
 80096a0:	40011400 	.word	0x40011400
 80096a4:	0800e34c 	.word	0x0800e34c

080096a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096ac:	b0c0      	sub	sp, #256	; 0x100
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80096b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	4bcf      	ldr	r3, [pc, #828]	; (80099f8 <UART_SetConfig+0x350>)
 80096bc:	429a      	cmp	r2, r3
 80096be:	d904      	bls.n	80096ca <UART_SetConfig+0x22>
 80096c0:	f640 6161 	movw	r1, #3681	; 0xe61
 80096c4:	48cd      	ldr	r0, [pc, #820]	; (80099fc <UART_SetConfig+0x354>)
 80096c6:	f7fc fa30 	bl	8005b2a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80096ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00a      	beq.n	80096ea <UART_SetConfig+0x42>
 80096d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096de:	d004      	beq.n	80096ea <UART_SetConfig+0x42>
 80096e0:	f640 6162 	movw	r1, #3682	; 0xe62
 80096e4:	48c5      	ldr	r0, [pc, #788]	; (80099fc <UART_SetConfig+0x354>)
 80096e6:	f7fc fa20 	bl	8005b2a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80096ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d010      	beq.n	8009716 <UART_SetConfig+0x6e>
 80096f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096fe:	d00a      	beq.n	8009716 <UART_SetConfig+0x6e>
 8009700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800970a:	d004      	beq.n	8009716 <UART_SetConfig+0x6e>
 800970c:	f640 6163 	movw	r1, #3683	; 0xe63
 8009710:	48ba      	ldr	r0, [pc, #744]	; (80099fc <UART_SetConfig+0x354>)
 8009712:	f7fc fa0a 	bl	8005b2a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800971a:	695a      	ldr	r2, [r3, #20]
 800971c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8009720:	4013      	ands	r3, r2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d104      	bne.n	8009730 <UART_SetConfig+0x88>
 8009726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d104      	bne.n	800973a <UART_SetConfig+0x92>
 8009730:	f640 6164 	movw	r1, #3684	; 0xe64
 8009734:	48b1      	ldr	r0, [pc, #708]	; (80099fc <UART_SetConfig+0x354>)
 8009736:	f7fc f9f8 	bl	8005b2a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800973a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800974a:	68d9      	ldr	r1, [r3, #12]
 800974c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	ea40 0301 	orr.w	r3, r0, r1
 8009756:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	431a      	orrs	r2, r3
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	431a      	orrs	r2, r3
 800976e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	4313      	orrs	r3, r2
 8009776:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800977a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009786:	f021 010c 	bic.w	r1, r1, #12
 800978a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009794:	430b      	orrs	r3, r1
 8009796:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a8:	6999      	ldr	r1, [r3, #24]
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	ea40 0301 	orr.w	r3, r0, r1
 80097b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	4b90      	ldr	r3, [pc, #576]	; (8009a00 <UART_SetConfig+0x358>)
 80097be:	429a      	cmp	r2, r3
 80097c0:	d005      	beq.n	80097ce <UART_SetConfig+0x126>
 80097c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	4b8e      	ldr	r3, [pc, #568]	; (8009a04 <UART_SetConfig+0x35c>)
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d104      	bne.n	80097d8 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097ce:	f7fe fc0d 	bl	8007fec <HAL_RCC_GetPCLK2Freq>
 80097d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80097d6:	e003      	b.n	80097e0 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097d8:	f7fe fbf4 	bl	8007fc4 <HAL_RCC_GetPCLK1Freq>
 80097dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ea:	f040 810f 	bne.w	8009a0c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097f8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80097fc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009800:	4622      	mov	r2, r4
 8009802:	462b      	mov	r3, r5
 8009804:	1891      	adds	r1, r2, r2
 8009806:	65b9      	str	r1, [r7, #88]	; 0x58
 8009808:	415b      	adcs	r3, r3
 800980a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800980c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009810:	4621      	mov	r1, r4
 8009812:	eb12 0801 	adds.w	r8, r2, r1
 8009816:	4629      	mov	r1, r5
 8009818:	eb43 0901 	adc.w	r9, r3, r1
 800981c:	f04f 0200 	mov.w	r2, #0
 8009820:	f04f 0300 	mov.w	r3, #0
 8009824:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009828:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800982c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009830:	4690      	mov	r8, r2
 8009832:	4699      	mov	r9, r3
 8009834:	4623      	mov	r3, r4
 8009836:	eb18 0303 	adds.w	r3, r8, r3
 800983a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800983e:	462b      	mov	r3, r5
 8009840:	eb49 0303 	adc.w	r3, r9, r3
 8009844:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009854:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009858:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800985c:	460b      	mov	r3, r1
 800985e:	18db      	adds	r3, r3, r3
 8009860:	653b      	str	r3, [r7, #80]	; 0x50
 8009862:	4613      	mov	r3, r2
 8009864:	eb42 0303 	adc.w	r3, r2, r3
 8009868:	657b      	str	r3, [r7, #84]	; 0x54
 800986a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800986e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009872:	f7f6 fd05 	bl	8000280 <__aeabi_uldivmod>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4b63      	ldr	r3, [pc, #396]	; (8009a08 <UART_SetConfig+0x360>)
 800987c:	fba3 2302 	umull	r2, r3, r3, r2
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	011c      	lsls	r4, r3, #4
 8009884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009888:	2200      	movs	r2, #0
 800988a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800988e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009892:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009896:	4642      	mov	r2, r8
 8009898:	464b      	mov	r3, r9
 800989a:	1891      	adds	r1, r2, r2
 800989c:	64b9      	str	r1, [r7, #72]	; 0x48
 800989e:	415b      	adcs	r3, r3
 80098a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80098a6:	4641      	mov	r1, r8
 80098a8:	eb12 0a01 	adds.w	sl, r2, r1
 80098ac:	4649      	mov	r1, r9
 80098ae:	eb43 0b01 	adc.w	fp, r3, r1
 80098b2:	f04f 0200 	mov.w	r2, #0
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098c6:	4692      	mov	sl, r2
 80098c8:	469b      	mov	fp, r3
 80098ca:	4643      	mov	r3, r8
 80098cc:	eb1a 0303 	adds.w	r3, sl, r3
 80098d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098d4:	464b      	mov	r3, r9
 80098d6:	eb4b 0303 	adc.w	r3, fp, r3
 80098da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098ea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80098ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098f2:	460b      	mov	r3, r1
 80098f4:	18db      	adds	r3, r3, r3
 80098f6:	643b      	str	r3, [r7, #64]	; 0x40
 80098f8:	4613      	mov	r3, r2
 80098fa:	eb42 0303 	adc.w	r3, r2, r3
 80098fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009900:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009904:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009908:	f7f6 fcba 	bl	8000280 <__aeabi_uldivmod>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4611      	mov	r1, r2
 8009912:	4b3d      	ldr	r3, [pc, #244]	; (8009a08 <UART_SetConfig+0x360>)
 8009914:	fba3 2301 	umull	r2, r3, r3, r1
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	2264      	movs	r2, #100	; 0x64
 800991c:	fb02 f303 	mul.w	r3, r2, r3
 8009920:	1acb      	subs	r3, r1, r3
 8009922:	00db      	lsls	r3, r3, #3
 8009924:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009928:	4b37      	ldr	r3, [pc, #220]	; (8009a08 <UART_SetConfig+0x360>)
 800992a:	fba3 2302 	umull	r2, r3, r3, r2
 800992e:	095b      	lsrs	r3, r3, #5
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009936:	441c      	add	r4, r3
 8009938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800993c:	2200      	movs	r2, #0
 800993e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009942:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009946:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800994a:	4642      	mov	r2, r8
 800994c:	464b      	mov	r3, r9
 800994e:	1891      	adds	r1, r2, r2
 8009950:	63b9      	str	r1, [r7, #56]	; 0x38
 8009952:	415b      	adcs	r3, r3
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009956:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800995a:	4641      	mov	r1, r8
 800995c:	1851      	adds	r1, r2, r1
 800995e:	6339      	str	r1, [r7, #48]	; 0x30
 8009960:	4649      	mov	r1, r9
 8009962:	414b      	adcs	r3, r1
 8009964:	637b      	str	r3, [r7, #52]	; 0x34
 8009966:	f04f 0200 	mov.w	r2, #0
 800996a:	f04f 0300 	mov.w	r3, #0
 800996e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009972:	4659      	mov	r1, fp
 8009974:	00cb      	lsls	r3, r1, #3
 8009976:	4651      	mov	r1, sl
 8009978:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800997c:	4651      	mov	r1, sl
 800997e:	00ca      	lsls	r2, r1, #3
 8009980:	4610      	mov	r0, r2
 8009982:	4619      	mov	r1, r3
 8009984:	4603      	mov	r3, r0
 8009986:	4642      	mov	r2, r8
 8009988:	189b      	adds	r3, r3, r2
 800998a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800998e:	464b      	mov	r3, r9
 8009990:	460a      	mov	r2, r1
 8009992:	eb42 0303 	adc.w	r3, r2, r3
 8009996:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800999a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099a6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099ae:	460b      	mov	r3, r1
 80099b0:	18db      	adds	r3, r3, r3
 80099b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099b4:	4613      	mov	r3, r2
 80099b6:	eb42 0303 	adc.w	r3, r2, r3
 80099ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099c0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80099c4:	f7f6 fc5c 	bl	8000280 <__aeabi_uldivmod>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <UART_SetConfig+0x360>)
 80099ce:	fba3 1302 	umull	r1, r3, r3, r2
 80099d2:	095b      	lsrs	r3, r3, #5
 80099d4:	2164      	movs	r1, #100	; 0x64
 80099d6:	fb01 f303 	mul.w	r3, r1, r3
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	3332      	adds	r3, #50	; 0x32
 80099e0:	4a09      	ldr	r2, [pc, #36]	; (8009a08 <UART_SetConfig+0x360>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	095b      	lsrs	r3, r3, #5
 80099e8:	f003 0207 	and.w	r2, r3, #7
 80099ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4422      	add	r2, r4
 80099f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099f6:	e108      	b.n	8009c0a <UART_SetConfig+0x562>
 80099f8:	00a037a0 	.word	0x00a037a0
 80099fc:	0800e34c 	.word	0x0800e34c
 8009a00:	40011000 	.word	0x40011000
 8009a04:	40011400 	.word	0x40011400
 8009a08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009a1e:	4642      	mov	r2, r8
 8009a20:	464b      	mov	r3, r9
 8009a22:	1891      	adds	r1, r2, r2
 8009a24:	6239      	str	r1, [r7, #32]
 8009a26:	415b      	adcs	r3, r3
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a2e:	4641      	mov	r1, r8
 8009a30:	1854      	adds	r4, r2, r1
 8009a32:	4649      	mov	r1, r9
 8009a34:	eb43 0501 	adc.w	r5, r3, r1
 8009a38:	f04f 0200 	mov.w	r2, #0
 8009a3c:	f04f 0300 	mov.w	r3, #0
 8009a40:	00eb      	lsls	r3, r5, #3
 8009a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a46:	00e2      	lsls	r2, r4, #3
 8009a48:	4614      	mov	r4, r2
 8009a4a:	461d      	mov	r5, r3
 8009a4c:	4643      	mov	r3, r8
 8009a4e:	18e3      	adds	r3, r4, r3
 8009a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a54:	464b      	mov	r3, r9
 8009a56:	eb45 0303 	adc.w	r3, r5, r3
 8009a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a6e:	f04f 0200 	mov.w	r2, #0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	008b      	lsls	r3, r1, #2
 8009a7e:	4621      	mov	r1, r4
 8009a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a84:	4621      	mov	r1, r4
 8009a86:	008a      	lsls	r2, r1, #2
 8009a88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a8c:	f7f6 fbf8 	bl	8000280 <__aeabi_uldivmod>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4b60      	ldr	r3, [pc, #384]	; (8009c18 <UART_SetConfig+0x570>)
 8009a96:	fba3 2302 	umull	r2, r3, r3, r2
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	011c      	lsls	r4, r3, #4
 8009a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009aa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009aac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	1891      	adds	r1, r2, r2
 8009ab6:	61b9      	str	r1, [r7, #24]
 8009ab8:	415b      	adcs	r3, r3
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	1851      	adds	r1, r2, r1
 8009ac4:	6139      	str	r1, [r7, #16]
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	414b      	adcs	r3, r1
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ad8:	4659      	mov	r1, fp
 8009ada:	00cb      	lsls	r3, r1, #3
 8009adc:	4651      	mov	r1, sl
 8009ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ae2:	4651      	mov	r1, sl
 8009ae4:	00ca      	lsls	r2, r1, #3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	4642      	mov	r2, r8
 8009aee:	189b      	adds	r3, r3, r2
 8009af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009af4:	464b      	mov	r3, r9
 8009af6:	460a      	mov	r2, r1
 8009af8:	eb42 0303 	adc.w	r3, r2, r3
 8009afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b0c:	f04f 0200 	mov.w	r2, #0
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009b18:	4649      	mov	r1, r9
 8009b1a:	008b      	lsls	r3, r1, #2
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b22:	4641      	mov	r1, r8
 8009b24:	008a      	lsls	r2, r1, #2
 8009b26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b2a:	f7f6 fba9 	bl	8000280 <__aeabi_uldivmod>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4b39      	ldr	r3, [pc, #228]	; (8009c18 <UART_SetConfig+0x570>)
 8009b34:	fba3 1302 	umull	r1, r3, r3, r2
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	2164      	movs	r1, #100	; 0x64
 8009b3c:	fb01 f303 	mul.w	r3, r1, r3
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	3332      	adds	r3, #50	; 0x32
 8009b46:	4a34      	ldr	r2, [pc, #208]	; (8009c18 <UART_SetConfig+0x570>)
 8009b48:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4c:	095b      	lsrs	r3, r3, #5
 8009b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b52:	441c      	add	r4, r3
 8009b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b58:	2200      	movs	r2, #0
 8009b5a:	673b      	str	r3, [r7, #112]	; 0x70
 8009b5c:	677a      	str	r2, [r7, #116]	; 0x74
 8009b5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b62:	4642      	mov	r2, r8
 8009b64:	464b      	mov	r3, r9
 8009b66:	1891      	adds	r1, r2, r2
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	415b      	adcs	r3, r3
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b72:	4641      	mov	r1, r8
 8009b74:	1851      	adds	r1, r2, r1
 8009b76:	6039      	str	r1, [r7, #0]
 8009b78:	4649      	mov	r1, r9
 8009b7a:	414b      	adcs	r3, r1
 8009b7c:	607b      	str	r3, [r7, #4]
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	f04f 0300 	mov.w	r3, #0
 8009b86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b8a:	4659      	mov	r1, fp
 8009b8c:	00cb      	lsls	r3, r1, #3
 8009b8e:	4651      	mov	r1, sl
 8009b90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b94:	4651      	mov	r1, sl
 8009b96:	00ca      	lsls	r2, r1, #3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	189b      	adds	r3, r3, r2
 8009ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	460a      	mov	r2, r1
 8009ba8:	eb42 0303 	adc.w	r3, r2, r3
 8009bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8009bb8:	667a      	str	r2, [r7, #100]	; 0x64
 8009bba:	f04f 0200 	mov.w	r2, #0
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	008b      	lsls	r3, r1, #2
 8009bca:	4641      	mov	r1, r8
 8009bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	008a      	lsls	r2, r1, #2
 8009bd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bd8:	f7f6 fb52 	bl	8000280 <__aeabi_uldivmod>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <UART_SetConfig+0x570>)
 8009be2:	fba3 1302 	umull	r1, r3, r3, r2
 8009be6:	095b      	lsrs	r3, r3, #5
 8009be8:	2164      	movs	r1, #100	; 0x64
 8009bea:	fb01 f303 	mul.w	r3, r1, r3
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	3332      	adds	r3, #50	; 0x32
 8009bf4:	4a08      	ldr	r2, [pc, #32]	; (8009c18 <UART_SetConfig+0x570>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4422      	add	r2, r4
 8009c08:	609a      	str	r2, [r3, #8]
}
 8009c0a:	bf00      	nop
 8009c0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009c10:	46bd      	mov	sp, r7
 8009c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c16:	bf00      	nop
 8009c18:	51eb851f 	.word	0x51eb851f

08009c1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c2e:	2b84      	cmp	r3, #132	; 0x84
 8009c30:	d005      	beq.n	8009c3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4413      	add	r3, r2
 8009c3a:	3303      	adds	r3, #3
 8009c3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c50:	f001 fa20 	bl	800b094 <vTaskStartScheduler>
  
  return osOK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5c:	b089      	sub	sp, #36	; 0x24
 8009c5e:	af04      	add	r7, sp, #16
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d020      	beq.n	8009cae <osThreadCreate+0x54>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01c      	beq.n	8009cae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685c      	ldr	r4, [r3, #4]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681d      	ldr	r5, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691e      	ldr	r6, [r3, #16]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff ffc8 	bl	8009c1c <makeFreeRtosPriority>
 8009c8c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c96:	9202      	str	r2, [sp, #8]
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	9100      	str	r1, [sp, #0]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	4632      	mov	r2, r6
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f000 ff84 	bl	800abb0 <xTaskCreateStatic>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	e01c      	b.n	8009ce8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685c      	ldr	r4, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cba:	b29e      	uxth	r6, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7ff ffaa 	bl	8009c1c <makeFreeRtosPriority>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	f107 030c 	add.w	r3, r7, #12
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	9200      	str	r2, [sp, #0]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 ffc6 	bl	800ac6a <xTaskCreate>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d001      	beq.n	8009ce8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	e000      	b.n	8009cea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cf2 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f001 f906 	bl	800af0c <vTaskDelete>
  return osOK;
 8009d00:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <osDelay+0x16>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	e000      	b.n	8009d22 <osDelay+0x18>
 8009d20:	2301      	movs	r3, #1
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 f982 	bl	800b02c <vTaskDelay>
  
  return osOK;
 8009d28:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009d38:	201c      	movs	r0, #28
 8009d3a:	f002 ff49 	bl	800cbd0 <pvPortMalloc>
 8009d3e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 f991 	bl	800a078 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009d5c:	687b      	ldr	r3, [r7, #4]
	}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b090      	sub	sp, #64	; 0x40
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10a      	bne.n	8009d9e <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00a      	beq.n	8009dbe <xEventGroupWaitBits+0x56>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	61fb      	str	r3, [r7, #28]
}
 8009dba:	bf00      	nop
 8009dbc:	e7fe      	b.n	8009dbc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <xEventGroupWaitBits+0x72>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	61bb      	str	r3, [r7, #24]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dda:	f001 ff39 	bl	800bc50 <xTaskGetSchedulerState>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d102      	bne.n	8009dea <xEventGroupWaitBits+0x82>
 8009de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <xEventGroupWaitBits+0x86>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <xEventGroupWaitBits+0x88>
 8009dee:	2300      	movs	r3, #0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	617b      	str	r3, [r7, #20]
}
 8009e06:	bf00      	nop
 8009e08:	e7fe      	b.n	8009e08 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8009e0a:	f001 f9b5 	bl	800b178 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e1a:	f000 f90b 	bl	800a034 <prvTestWaitCondition>
 8009e1e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00e      	beq.n	8009e44 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e28:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d028      	beq.n	8009e86 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	43db      	mvns	r3, r3
 8009e3c:	401a      	ands	r2, r3
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	e020      	b.n	8009e86 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d104      	bne.n	8009e54 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	633b      	str	r3, [r7, #48]	; 0x30
 8009e52:	e018      	b.n	8009e86 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e60:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e6e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e72:	1d18      	adds	r0, r3, #4
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	f001 fc01 	bl	800b684 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009e86:	f001 f9bf 	bl	800b208 <xTaskResumeAll>
 8009e8a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d031      	beq.n	8009ef6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d107      	bne.n	8009ea8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009e98:	4b19      	ldr	r3, [pc, #100]	; (8009f00 <xEventGroupWaitBits+0x198>)
 8009e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009ea8:	f001 ff76 	bl	800bd98 <uxTaskResetEventItemValue>
 8009eac:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d11a      	bne.n	8009eee <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009eb8:	f002 fc84 	bl	800c7c4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	68b9      	ldr	r1, [r7, #8]
 8009ec6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009ec8:	f000 f8b4 	bl	800a034 <prvTestWaitCondition>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d009      	beq.n	8009ee6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d006      	beq.n	8009ee6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	43db      	mvns	r3, r3
 8009ee0:	401a      	ands	r2, r3
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8009eea:	f002 fc9b 	bl	800c824 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3740      	adds	r7, #64	; 0x40
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	e000ed04 	.word	0xe000ed04

08009f04 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08e      	sub	sp, #56	; 0x38
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8009f16:	2300      	movs	r3, #0
 8009f18:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10a      	bne.n	8009f36 <xEventGroupSetBits+0x32>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	613b      	str	r3, [r7, #16]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <xEventGroupSetBits+0x52>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60fb      	str	r3, [r7, #12]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	3304      	adds	r3, #4
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	3308      	adds	r3, #8
 8009f60:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009f62:	f001 f909 	bl	800b178 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	431a      	orrs	r2, r3
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8009f78:	e03c      	b.n	8009ff4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8009f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009f90:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009f98:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d108      	bne.n	8009fb6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	4013      	ands	r3, r2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00b      	beq.n	8009fc8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fb4:	e008      	b.n	8009fc8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d101      	bne.n	8009fc8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d010      	beq.n	8009ff0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009fec:	f001 fc16 	bl	800b81c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d1be      	bne.n	8009f7a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	43db      	mvns	r3, r3
 800a004:	401a      	ands	r2, r3
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a00a:	f001 f8fd 	bl	800b208 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	681b      	ldr	r3, [r3, #0]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3738      	adds	r7, #56	; 0x38
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff ff6c 	bl	8009f04 <xEventGroupSetBits>
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d107      	bne.n	800a05a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	4013      	ands	r3, r2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00a      	beq.n	800a06a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	e007      	b.n	800a06a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	4013      	ands	r3, r2
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	429a      	cmp	r2, r3
 800a064:	d101      	bne.n	800a06a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a066:	2301      	movs	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a06a:	697b      	ldr	r3, [r7, #20]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	371c      	adds	r7, #28
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 0208 	add.w	r2, r3, #8
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f04f 32ff 	mov.w	r2, #4294967295
 800a090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f103 0208 	add.w	r2, r3, #8
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f103 0208 	add.w	r2, r3, #8
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b085      	sub	sp, #20
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	689a      	ldr	r2, [r3, #8]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	601a      	str	r2, [r3, #0]
}
 800a10e:	bf00      	nop
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a11a:	b480      	push	{r7}
 800a11c:	b085      	sub	sp, #20
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a130:	d103      	bne.n	800a13a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	e00c      	b.n	800a154 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3308      	adds	r3, #8
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	e002      	b.n	800a148 <vListInsert+0x2e>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	429a      	cmp	r2, r3
 800a152:	d2f6      	bcs.n	800a142 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	601a      	str	r2, [r3, #0]
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6892      	ldr	r2, [r2, #8]
 800a1a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	6852      	ldr	r2, [r2, #4]
 800a1ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d103      	bne.n	800a1c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	1e5a      	subs	r2, r3, #1
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <xQueueGenericReset+0x2a>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	60bb      	str	r3, [r7, #8]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a20a:	f002 fadb 	bl	800c7c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a21a:	fb01 f303 	mul.w	r3, r1, r3
 800a21e:	441a      	add	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a23a:	3b01      	subs	r3, #1
 800a23c:	68f9      	ldr	r1, [r7, #12]
 800a23e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a240:	fb01 f303 	mul.w	r3, r1, r3
 800a244:	441a      	add	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	22ff      	movs	r2, #255	; 0xff
 800a24e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	22ff      	movs	r2, #255	; 0xff
 800a256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d114      	bne.n	800a28a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d01a      	beq.n	800a29e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	3310      	adds	r3, #16
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 fa71 	bl	800b754 <xTaskRemoveFromEventList>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d012      	beq.n	800a29e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a278:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <xQueueGenericReset+0xcc>)
 800a27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	e009      	b.n	800a29e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3310      	adds	r3, #16
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff fef2 	bl	800a078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3324      	adds	r3, #36	; 0x24
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff feed 	bl	800a078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a29e:	f002 fac1 	bl	800c824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2a2:	2301      	movs	r3, #1
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	e000ed04 	.word	0xe000ed04

0800a2b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08e      	sub	sp, #56	; 0x38
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <xQueueGenericCreateStatic+0x52>
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <xQueueGenericCreateStatic+0x56>
 800a302:	2301      	movs	r3, #1
 800a304:	e000      	b.n	800a308 <xQueueGenericCreateStatic+0x58>
 800a306:	2300      	movs	r3, #0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	623b      	str	r3, [r7, #32]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d102      	bne.n	800a32e <xQueueGenericCreateStatic+0x7e>
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <xQueueGenericCreateStatic+0x82>
 800a32e:	2301      	movs	r3, #1
 800a330:	e000      	b.n	800a334 <xQueueGenericCreateStatic+0x84>
 800a332:	2300      	movs	r3, #0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	61fb      	str	r3, [r7, #28]
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a34e:	2348      	movs	r3, #72	; 0x48
 800a350:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b48      	cmp	r3, #72	; 0x48
 800a356:	d00a      	beq.n	800a36e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	61bb      	str	r3, [r7, #24]
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a36e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00d      	beq.n	800a396 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a382:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	4613      	mov	r3, r2
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 f805 	bl	800a3a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a398:	4618      	mov	r0, r3
 800a39a:	3730      	adds	r7, #48	; 0x30
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d103      	bne.n	800a3bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	e002      	b.n	800a3c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	69b8      	ldr	r0, [r7, #24]
 800a3d2:	f7ff ff05 	bl	800a1e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08e      	sub	sp, #56	; 0x38
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10a      	bne.n	800a412 <xQueueGenericSend+0x32>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a40e:	bf00      	nop
 800a410:	e7fe      	b.n	800a410 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d103      	bne.n	800a420 <xQueueGenericSend+0x40>
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <xQueueGenericSend+0x44>
 800a420:	2301      	movs	r3, #1
 800a422:	e000      	b.n	800a426 <xQueueGenericSend+0x46>
 800a424:	2300      	movs	r3, #0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10a      	bne.n	800a440 <xQueueGenericSend+0x60>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a43c:	bf00      	nop
 800a43e:	e7fe      	b.n	800a43e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d103      	bne.n	800a44e <xQueueGenericSend+0x6e>
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d101      	bne.n	800a452 <xQueueGenericSend+0x72>
 800a44e:	2301      	movs	r3, #1
 800a450:	e000      	b.n	800a454 <xQueueGenericSend+0x74>
 800a452:	2300      	movs	r3, #0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <xQueueGenericSend+0x8e>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	623b      	str	r3, [r7, #32]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a46e:	f001 fbef 	bl	800bc50 <xTaskGetSchedulerState>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <xQueueGenericSend+0x9e>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <xQueueGenericSend+0xa2>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <xQueueGenericSend+0xa4>
 800a482:	2300      	movs	r3, #0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10a      	bne.n	800a49e <xQueueGenericSend+0xbe>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	61fb      	str	r3, [r7, #28]
}
 800a49a:	bf00      	nop
 800a49c:	e7fe      	b.n	800a49c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a49e:	f002 f991 	bl	800c7c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d302      	bcc.n	800a4b4 <xQueueGenericSend+0xd4>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d129      	bne.n	800a508 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	68b9      	ldr	r1, [r7, #8]
 800a4b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4ba:	f000 fa0b 	bl	800a8d4 <prvCopyDataToQueue>
 800a4be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d010      	beq.n	800a4ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	3324      	adds	r3, #36	; 0x24
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f001 f941 	bl	800b754 <xTaskRemoveFromEventList>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d013      	beq.n	800a500 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a4d8:	4b3f      	ldr	r3, [pc, #252]	; (800a5d8 <xQueueGenericSend+0x1f8>)
 800a4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	e00a      	b.n	800a500 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d007      	beq.n	800a500 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a4f0:	4b39      	ldr	r3, [pc, #228]	; (800a5d8 <xQueueGenericSend+0x1f8>)
 800a4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a500:	f002 f990 	bl	800c824 <vPortExitCritical>
				return pdPASS;
 800a504:	2301      	movs	r3, #1
 800a506:	e063      	b.n	800a5d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d103      	bne.n	800a516 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a50e:	f002 f989 	bl	800c824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a512:	2300      	movs	r3, #0
 800a514:	e05c      	b.n	800a5d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d106      	bne.n	800a52a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a51c:	f107 0314 	add.w	r3, r7, #20
 800a520:	4618      	mov	r0, r3
 800a522:	f001 f9df 	bl	800b8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a526:	2301      	movs	r3, #1
 800a528:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a52a:	f002 f97b 	bl	800c824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a52e:	f000 fe23 	bl	800b178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a532:	f002 f947 	bl	800c7c4 <vPortEnterCritical>
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a53c:	b25b      	sxtb	r3, r3
 800a53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a542:	d103      	bne.n	800a54c <xQueueGenericSend+0x16c>
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a552:	b25b      	sxtb	r3, r3
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d103      	bne.n	800a562 <xQueueGenericSend+0x182>
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a562:	f002 f95f 	bl	800c824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a566:	1d3a      	adds	r2, r7, #4
 800a568:	f107 0314 	add.w	r3, r7, #20
 800a56c:	4611      	mov	r1, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 f9ce 	bl	800b910 <xTaskCheckForTimeOut>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d124      	bne.n	800a5c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a57a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a57c:	f000 faa2 	bl	800aac4 <prvIsQueueFull>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d018      	beq.n	800a5b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	3310      	adds	r3, #16
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f001 f854 	bl	800b63c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a596:	f000 fa2d 	bl	800a9f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a59a:	f000 fe35 	bl	800b208 <xTaskResumeAll>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f47f af7c 	bne.w	800a49e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <xQueueGenericSend+0x1f8>)
 800a5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	e772      	b.n	800a49e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5ba:	f000 fa1b 	bl	800a9f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5be:	f000 fe23 	bl	800b208 <xTaskResumeAll>
 800a5c2:	e76c      	b.n	800a49e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5c6:	f000 fa15 	bl	800a9f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5ca:	f000 fe1d 	bl	800b208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3738      	adds	r7, #56	; 0x38
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	e000ed04 	.word	0xe000ed04

0800a5dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b090      	sub	sp, #64	; 0x40
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10a      	bne.n	800a60a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d103      	bne.n	800a618 <xQueueGenericSendFromISR+0x3c>
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <xQueueGenericSendFromISR+0x40>
 800a618:	2301      	movs	r3, #1
 800a61a:	e000      	b.n	800a61e <xQueueGenericSendFromISR+0x42>
 800a61c:	2300      	movs	r3, #0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10a      	bne.n	800a638 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d103      	bne.n	800a646 <xQueueGenericSendFromISR+0x6a>
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a642:	2b01      	cmp	r3, #1
 800a644:	d101      	bne.n	800a64a <xQueueGenericSendFromISR+0x6e>
 800a646:	2301      	movs	r3, #1
 800a648:	e000      	b.n	800a64c <xQueueGenericSendFromISR+0x70>
 800a64a:	2300      	movs	r3, #0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10a      	bne.n	800a666 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	623b      	str	r3, [r7, #32]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a666:	f002 fa73 	bl	800cb50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a66a:	f3ef 8211 	mrs	r2, BASEPRI
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	61fa      	str	r2, [r7, #28]
 800a680:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a682:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68e:	429a      	cmp	r2, r3
 800a690:	d302      	bcc.n	800a698 <xQueueGenericSendFromISR+0xbc>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	2b02      	cmp	r3, #2
 800a696:	d12f      	bne.n	800a6f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	68b9      	ldr	r1, [r7, #8]
 800a6ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6ae:	f000 f911 	bl	800a8d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ba:	d112      	bne.n	800a6e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d016      	beq.n	800a6f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	3324      	adds	r3, #36	; 0x24
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 f843 	bl	800b754 <xTaskRemoveFromEventList>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00e      	beq.n	800a6f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00b      	beq.n	800a6f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	e007      	b.n	800a6f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	b25a      	sxtb	r2, r3
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a6f6:	e001      	b.n	800a6fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a706:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3740      	adds	r7, #64	; 0x40
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08c      	sub	sp, #48	; 0x30
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a720:	2300      	movs	r3, #0
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <xQueueReceive+0x30>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	623b      	str	r3, [r7, #32]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d103      	bne.n	800a752 <xQueueReceive+0x3e>
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <xQueueReceive+0x42>
 800a752:	2301      	movs	r3, #1
 800a754:	e000      	b.n	800a758 <xQueueReceive+0x44>
 800a756:	2300      	movs	r3, #0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10a      	bne.n	800a772 <xQueueReceive+0x5e>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	61fb      	str	r3, [r7, #28]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a772:	f001 fa6d 	bl	800bc50 <xTaskGetSchedulerState>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d102      	bne.n	800a782 <xQueueReceive+0x6e>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <xQueueReceive+0x72>
 800a782:	2301      	movs	r3, #1
 800a784:	e000      	b.n	800a788 <xQueueReceive+0x74>
 800a786:	2300      	movs	r3, #0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10a      	bne.n	800a7a2 <xQueueReceive+0x8e>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	61bb      	str	r3, [r7, #24]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7a2:	f002 f80f 	bl	800c7c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d01f      	beq.n	800a7f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7b2:	68b9      	ldr	r1, [r7, #8]
 800a7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b6:	f000 f8f7 	bl	800a9a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	1e5a      	subs	r2, r3, #1
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00f      	beq.n	800a7ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7cc:	3310      	adds	r3, #16
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 ffc0 	bl	800b754 <xTaskRemoveFromEventList>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d007      	beq.n	800a7ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7da:	4b3d      	ldr	r3, [pc, #244]	; (800a8d0 <xQueueReceive+0x1bc>)
 800a7dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7ea:	f002 f81b 	bl	800c824 <vPortExitCritical>
				return pdPASS;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e069      	b.n	800a8c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d103      	bne.n	800a800 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7f8:	f002 f814 	bl	800c824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	e062      	b.n	800a8c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d106      	bne.n	800a814 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a806:	f107 0310 	add.w	r3, r7, #16
 800a80a:	4618      	mov	r0, r3
 800a80c:	f001 f86a 	bl	800b8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a810:	2301      	movs	r3, #1
 800a812:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a814:	f002 f806 	bl	800c824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a818:	f000 fcae 	bl	800b178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a81c:	f001 ffd2 	bl	800c7c4 <vPortEnterCritical>
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a826:	b25b      	sxtb	r3, r3
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d103      	bne.n	800a836 <xQueueReceive+0x122>
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a83c:	b25b      	sxtb	r3, r3
 800a83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a842:	d103      	bne.n	800a84c <xQueueReceive+0x138>
 800a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a84c:	f001 ffea 	bl	800c824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a850:	1d3a      	adds	r2, r7, #4
 800a852:	f107 0310 	add.w	r3, r7, #16
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 f859 	bl	800b910 <xTaskCheckForTimeOut>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d123      	bne.n	800a8ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a866:	f000 f917 	bl	800aa98 <prvIsQueueEmpty>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d017      	beq.n	800a8a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	3324      	adds	r3, #36	; 0x24
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	4611      	mov	r1, r2
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fedf 	bl	800b63c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a87e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a880:	f000 f8b8 	bl	800a9f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a884:	f000 fcc0 	bl	800b208 <xTaskResumeAll>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d189      	bne.n	800a7a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a88e:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <xQueueReceive+0x1bc>)
 800a890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	e780      	b.n	800a7a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8a2:	f000 f8a7 	bl	800a9f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8a6:	f000 fcaf 	bl	800b208 <xTaskResumeAll>
 800a8aa:	e77a      	b.n	800a7a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ae:	f000 f8a1 	bl	800a9f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8b2:	f000 fca9 	bl	800b208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b8:	f000 f8ee 	bl	800aa98 <prvIsQueueEmpty>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f43f af6f 	beq.w	800a7a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3730      	adds	r7, #48	; 0x30
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10d      	bne.n	800a90e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d14d      	bne.n	800a996 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f001 f9c4 	bl	800bc8c <xTaskPriorityDisinherit>
 800a904:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	609a      	str	r2, [r3, #8]
 800a90c:	e043      	b.n	800a996 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d119      	bne.n	800a948 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6858      	ldr	r0, [r3, #4]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91c:	461a      	mov	r2, r3
 800a91e:	68b9      	ldr	r1, [r7, #8]
 800a920:	f002 fc93 	bl	800d24a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92c:	441a      	add	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d32b      	bcc.n	800a996 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	e026      	b.n	800a996 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	68d8      	ldr	r0, [r3, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a950:	461a      	mov	r2, r3
 800a952:	68b9      	ldr	r1, [r7, #8]
 800a954:	f002 fc79 	bl	800d24a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a960:	425b      	negs	r3, r3
 800a962:	441a      	add	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	68da      	ldr	r2, [r3, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d207      	bcs.n	800a984 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	689a      	ldr	r2, [r3, #8]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97c:	425b      	negs	r3, r3
 800a97e:	441a      	add	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d105      	bne.n	800a996 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	3b01      	subs	r3, #1
 800a994:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a99e:	697b      	ldr	r3, [r7, #20]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3718      	adds	r7, #24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d018      	beq.n	800a9ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	68da      	ldr	r2, [r3, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c2:	441a      	add	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d303      	bcc.n	800a9dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68d9      	ldr	r1, [r3, #12]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	6838      	ldr	r0, [r7, #0]
 800a9e8:	f002 fc2f 	bl	800d24a <memcpy>
	}
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9fc:	f001 fee2 	bl	800c7c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa08:	e011      	b.n	800aa2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d012      	beq.n	800aa38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3324      	adds	r3, #36	; 0x24
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fe9c 	bl	800b754 <xTaskRemoveFromEventList>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa22:	f000 ffd7 	bl	800b9d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	dce9      	bgt.n	800aa0a <prvUnlockQueue+0x16>
 800aa36:	e000      	b.n	800aa3a <prvUnlockQueue+0x46>
					break;
 800aa38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	22ff      	movs	r2, #255	; 0xff
 800aa3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa42:	f001 feef 	bl	800c824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa46:	f001 febd 	bl	800c7c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa52:	e011      	b.n	800aa78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d012      	beq.n	800aa82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3310      	adds	r3, #16
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 fe77 	bl	800b754 <xTaskRemoveFromEventList>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa6c:	f000 ffb2 	bl	800b9d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dce9      	bgt.n	800aa54 <prvUnlockQueue+0x60>
 800aa80:	e000      	b.n	800aa84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	22ff      	movs	r2, #255	; 0xff
 800aa88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa8c:	f001 feca 	bl	800c824 <vPortExitCritical>
}
 800aa90:	bf00      	nop
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaa0:	f001 fe90 	bl	800c7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d102      	bne.n	800aab2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aaac:	2301      	movs	r3, #1
 800aaae:	60fb      	str	r3, [r7, #12]
 800aab0:	e001      	b.n	800aab6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aab6:	f001 feb5 	bl	800c824 <vPortExitCritical>

	return xReturn;
 800aaba:	68fb      	ldr	r3, [r7, #12]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aacc:	f001 fe7a 	bl	800c7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad8:	429a      	cmp	r2, r3
 800aada:	d102      	bne.n	800aae2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aadc:	2301      	movs	r3, #1
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e001      	b.n	800aae6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aae6:	f001 fe9d 	bl	800c824 <vPortExitCritical>

	return xReturn;
 800aaea:	68fb      	ldr	r3, [r7, #12]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aafe:	2300      	movs	r3, #0
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	e014      	b.n	800ab2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab04:	4a0f      	ldr	r2, [pc, #60]	; (800ab44 <vQueueAddToRegistry+0x50>)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10b      	bne.n	800ab28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab10:	490c      	ldr	r1, [pc, #48]	; (800ab44 <vQueueAddToRegistry+0x50>)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab1a:	4a0a      	ldr	r2, [pc, #40]	; (800ab44 <vQueueAddToRegistry+0x50>)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	4413      	add	r3, r2
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab26:	e006      	b.n	800ab36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b07      	cmp	r3, #7
 800ab32:	d9e7      	bls.n	800ab04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	200013c4 	.word	0x200013c4

0800ab48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab58:	f001 fe34 	bl	800c7c4 <vPortEnterCritical>
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab62:	b25b      	sxtb	r3, r3
 800ab64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab68:	d103      	bne.n	800ab72 <vQueueWaitForMessageRestricted+0x2a>
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab78:	b25b      	sxtb	r3, r3
 800ab7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7e:	d103      	bne.n	800ab88 <vQueueWaitForMessageRestricted+0x40>
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab88:	f001 fe4c 	bl	800c824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d106      	bne.n	800aba2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	3324      	adds	r3, #36	; 0x24
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	68b9      	ldr	r1, [r7, #8]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fdad 	bl	800b6fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aba2:	6978      	ldr	r0, [r7, #20]
 800aba4:	f7ff ff26 	bl	800a9f4 <prvUnlockQueue>
	}
 800aba8:	bf00      	nop
 800abaa:	3718      	adds	r7, #24
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08e      	sub	sp, #56	; 0x38
 800abb4:	af04      	add	r7, sp, #16
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
 800abbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <xTaskCreateStatic+0x2a>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	623b      	str	r3, [r7, #32]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10a      	bne.n	800abf6 <xTaskCreateStatic+0x46>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	61fb      	str	r3, [r7, #28]
}
 800abf2:	bf00      	nop
 800abf4:	e7fe      	b.n	800abf4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abf6:	23b8      	movs	r3, #184	; 0xb8
 800abf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2bb8      	cmp	r3, #184	; 0xb8
 800abfe:	d00a      	beq.n	800ac16 <xTaskCreateStatic+0x66>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	61bb      	str	r3, [r7, #24]
}
 800ac12:	bf00      	nop
 800ac14:	e7fe      	b.n	800ac14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d01e      	beq.n	800ac5c <xTaskCreateStatic+0xac>
 800ac1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01b      	beq.n	800ac5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	2202      	movs	r2, #2
 800ac32:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac36:	2300      	movs	r3, #0
 800ac38:	9303      	str	r3, [sp, #12]
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	9302      	str	r3, [sp, #8]
 800ac3e:	f107 0314 	add.w	r3, r7, #20
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	68b9      	ldr	r1, [r7, #8]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f000 f850 	bl	800acf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac56:	f000 f8ef 	bl	800ae38 <prvAddNewTaskToReadyList>
 800ac5a:	e001      	b.n	800ac60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac60:	697b      	ldr	r3, [r7, #20]
	}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3728      	adds	r7, #40	; 0x28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b08c      	sub	sp, #48	; 0x30
 800ac6e:	af04      	add	r7, sp, #16
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	603b      	str	r3, [r7, #0]
 800ac76:	4613      	mov	r3, r2
 800ac78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac7a:	88fb      	ldrh	r3, [r7, #6]
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f001 ffa6 	bl	800cbd0 <pvPortMalloc>
 800ac84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00e      	beq.n	800acaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac8c:	20b8      	movs	r0, #184	; 0xb8
 800ac8e:	f001 ff9f 	bl	800cbd0 <pvPortMalloc>
 800ac92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	631a      	str	r2, [r3, #48]	; 0x30
 800aca0:	e005      	b.n	800acae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aca2:	6978      	ldr	r0, [r7, #20]
 800aca4:	f002 f860 	bl	800cd68 <vPortFree>
 800aca8:	e001      	b.n	800acae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d017      	beq.n	800ace4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acbc:	88fa      	ldrh	r2, [r7, #6]
 800acbe:	2300      	movs	r3, #0
 800acc0:	9303      	str	r3, [sp, #12]
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	9302      	str	r3, [sp, #8]
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	68b9      	ldr	r1, [r7, #8]
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f000 f80e 	bl	800acf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acd8:	69f8      	ldr	r0, [r7, #28]
 800acda:	f000 f8ad 	bl	800ae38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acde:	2301      	movs	r3, #1
 800ace0:	61bb      	str	r3, [r7, #24]
 800ace2:	e002      	b.n	800acea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ace4:	f04f 33ff 	mov.w	r3, #4294967295
 800ace8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acea:	69bb      	ldr	r3, [r7, #24]
	}
 800acec:	4618      	mov	r0, r3
 800acee:	3720      	adds	r7, #32
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	f023 0307 	bic.w	r3, r3, #7
 800ad1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	f003 0307 	and.w	r3, r3, #7
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <prvInitialiseNewTask+0x48>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	617b      	str	r3, [r7, #20]
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d01f      	beq.n	800ad82 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad42:	2300      	movs	r3, #0
 800ad44:	61fb      	str	r3, [r7, #28]
 800ad46:	e012      	b.n	800ad6e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	7819      	ldrb	r1, [r3, #0]
 800ad50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	4413      	add	r3, r2
 800ad56:	3334      	adds	r3, #52	; 0x34
 800ad58:	460a      	mov	r2, r1
 800ad5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	4413      	add	r3, r2
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d006      	beq.n	800ad76 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	61fb      	str	r3, [r7, #28]
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	2b0f      	cmp	r3, #15
 800ad72:	d9e9      	bls.n	800ad48 <prvInitialiseNewTask+0x54>
 800ad74:	e000      	b.n	800ad78 <prvInitialiseNewTask+0x84>
			{
				break;
 800ad76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad80:	e003      	b.n	800ad8a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	2b06      	cmp	r3, #6
 800ad8e:	d901      	bls.n	800ad94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad90:	2306      	movs	r3, #6
 800ad92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada2:	2200      	movs	r2, #0
 800ada4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	3304      	adds	r3, #4
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff f984 	bl	800a0b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	3318      	adds	r3, #24
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff f97f 	bl	800a0b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc2:	f1c3 0207 	rsb	r2, r3, #7
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	2200      	movs	r2, #0
 800add4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	2200      	movs	r2, #0
 800adda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	3350      	adds	r3, #80	; 0x50
 800adea:	2260      	movs	r2, #96	; 0x60
 800adec:	2100      	movs	r1, #0
 800adee:	4618      	mov	r0, r3
 800adf0:	f002 fa39 	bl	800d266 <memset>
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	4a0d      	ldr	r2, [pc, #52]	; (800ae2c <prvInitialiseNewTask+0x138>)
 800adf8:	655a      	str	r2, [r3, #84]	; 0x54
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	4a0c      	ldr	r2, [pc, #48]	; (800ae30 <prvInitialiseNewTask+0x13c>)
 800adfe:	659a      	str	r2, [r3, #88]	; 0x58
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	4a0c      	ldr	r2, [pc, #48]	; (800ae34 <prvInitialiseNewTask+0x140>)
 800ae04:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	68f9      	ldr	r1, [r7, #12]
 800ae0a:	69b8      	ldr	r0, [r7, #24]
 800ae0c:	f001 fbb0 	bl	800c570 <pxPortInitialiseStack>
 800ae10:	4602      	mov	r2, r0
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae22:	bf00      	nop
 800ae24:	3720      	adds	r7, #32
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	0800ec14 	.word	0x0800ec14
 800ae30:	0800ec34 	.word	0x0800ec34
 800ae34:	0800ebf4 	.word	0x0800ebf4

0800ae38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae40:	f001 fcc0 	bl	800c7c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae44:	4b2a      	ldr	r3, [pc, #168]	; (800aef0 <prvAddNewTaskToReadyList+0xb8>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	4a29      	ldr	r2, [pc, #164]	; (800aef0 <prvAddNewTaskToReadyList+0xb8>)
 800ae4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae4e:	4b29      	ldr	r3, [pc, #164]	; (800aef4 <prvAddNewTaskToReadyList+0xbc>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d109      	bne.n	800ae6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae56:	4a27      	ldr	r2, [pc, #156]	; (800aef4 <prvAddNewTaskToReadyList+0xbc>)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae5c:	4b24      	ldr	r3, [pc, #144]	; (800aef0 <prvAddNewTaskToReadyList+0xb8>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d110      	bne.n	800ae86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae64:	f000 fe32 	bl	800bacc <prvInitialiseTaskLists>
 800ae68:	e00d      	b.n	800ae86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae6a:	4b23      	ldr	r3, [pc, #140]	; (800aef8 <prvAddNewTaskToReadyList+0xc0>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d109      	bne.n	800ae86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae72:	4b20      	ldr	r3, [pc, #128]	; (800aef4 <prvAddNewTaskToReadyList+0xbc>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d802      	bhi.n	800ae86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae80:	4a1c      	ldr	r2, [pc, #112]	; (800aef4 <prvAddNewTaskToReadyList+0xbc>)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae86:	4b1d      	ldr	r3, [pc, #116]	; (800aefc <prvAddNewTaskToReadyList+0xc4>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	4a1b      	ldr	r2, [pc, #108]	; (800aefc <prvAddNewTaskToReadyList+0xc4>)
 800ae8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	2201      	movs	r2, #1
 800ae96:	409a      	lsls	r2, r3
 800ae98:	4b19      	ldr	r3, [pc, #100]	; (800af00 <prvAddNewTaskToReadyList+0xc8>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	4a18      	ldr	r2, [pc, #96]	; (800af00 <prvAddNewTaskToReadyList+0xc8>)
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4a15      	ldr	r2, [pc, #84]	; (800af04 <prvAddNewTaskToReadyList+0xcc>)
 800aeb0:	441a      	add	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	4610      	mov	r0, r2
 800aeba:	f7ff f90a 	bl	800a0d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aebe:	f001 fcb1 	bl	800c824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aec2:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <prvAddNewTaskToReadyList+0xc0>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00e      	beq.n	800aee8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aeca:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <prvAddNewTaskToReadyList+0xbc>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d207      	bcs.n	800aee8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aed8:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <prvAddNewTaskToReadyList+0xd0>)
 800aeda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20001504 	.word	0x20001504
 800aef4:	20001404 	.word	0x20001404
 800aef8:	20001510 	.word	0x20001510
 800aefc:	20001520 	.word	0x20001520
 800af00:	2000150c 	.word	0x2000150c
 800af04:	20001408 	.word	0x20001408
 800af08:	e000ed04 	.word	0xe000ed04

0800af0c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800af14:	f001 fc56 	bl	800c7c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d102      	bne.n	800af24 <vTaskDelete+0x18>
 800af1e:	4b39      	ldr	r3, [pc, #228]	; (800b004 <vTaskDelete+0xf8>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	e000      	b.n	800af26 <vTaskDelete+0x1a>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3304      	adds	r3, #4
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff f92d 	bl	800a18c <uxListRemove>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d115      	bne.n	800af64 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3c:	4932      	ldr	r1, [pc, #200]	; (800b008 <vTaskDelete+0xfc>)
 800af3e:	4613      	mov	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	440b      	add	r3, r1
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <vTaskDelete+0x58>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af52:	2201      	movs	r2, #1
 800af54:	fa02 f303 	lsl.w	r3, r2, r3
 800af58:	43da      	mvns	r2, r3
 800af5a:	4b2c      	ldr	r3, [pc, #176]	; (800b00c <vTaskDelete+0x100>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4013      	ands	r3, r2
 800af60:	4a2a      	ldr	r2, [pc, #168]	; (800b00c <vTaskDelete+0x100>)
 800af62:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d004      	beq.n	800af76 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	3318      	adds	r3, #24
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff f90b 	bl	800a18c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800af76:	4b26      	ldr	r3, [pc, #152]	; (800b010 <vTaskDelete+0x104>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	3301      	adds	r3, #1
 800af7c:	4a24      	ldr	r2, [pc, #144]	; (800b010 <vTaskDelete+0x104>)
 800af7e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800af80:	4b20      	ldr	r3, [pc, #128]	; (800b004 <vTaskDelete+0xf8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	429a      	cmp	r2, r3
 800af88:	d10b      	bne.n	800afa2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3304      	adds	r3, #4
 800af8e:	4619      	mov	r1, r3
 800af90:	4820      	ldr	r0, [pc, #128]	; (800b014 <vTaskDelete+0x108>)
 800af92:	f7ff f89e 	bl	800a0d2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800af96:	4b20      	ldr	r3, [pc, #128]	; (800b018 <vTaskDelete+0x10c>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3301      	adds	r3, #1
 800af9c:	4a1e      	ldr	r2, [pc, #120]	; (800b018 <vTaskDelete+0x10c>)
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	e009      	b.n	800afb6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800afa2:	4b1e      	ldr	r3, [pc, #120]	; (800b01c <vTaskDelete+0x110>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	4a1c      	ldr	r2, [pc, #112]	; (800b01c <vTaskDelete+0x110>)
 800afaa:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 fdfb 	bl	800bba8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800afb2:	f000 fe2d 	bl	800bc10 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800afb6:	f001 fc35 	bl	800c824 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800afba:	4b19      	ldr	r3, [pc, #100]	; (800b020 <vTaskDelete+0x114>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d01b      	beq.n	800affa <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800afc2:	4b10      	ldr	r3, [pc, #64]	; (800b004 <vTaskDelete+0xf8>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d116      	bne.n	800affa <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800afcc:	4b15      	ldr	r3, [pc, #84]	; (800b024 <vTaskDelete+0x118>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <vTaskDelete+0xde>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	60bb      	str	r3, [r7, #8]
}
 800afe6:	bf00      	nop
 800afe8:	e7fe      	b.n	800afe8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800afea:	4b0f      	ldr	r3, [pc, #60]	; (800b028 <vTaskDelete+0x11c>)
 800afec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aff0:	601a      	str	r2, [r3, #0]
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800affa:	bf00      	nop
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	20001404 	.word	0x20001404
 800b008:	20001408 	.word	0x20001408
 800b00c:	2000150c 	.word	0x2000150c
 800b010:	20001520 	.word	0x20001520
 800b014:	200014d8 	.word	0x200014d8
 800b018:	200014ec 	.word	0x200014ec
 800b01c:	20001504 	.word	0x20001504
 800b020:	20001510 	.word	0x20001510
 800b024:	2000152c 	.word	0x2000152c
 800b028:	e000ed04 	.word	0xe000ed04

0800b02c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b034:	2300      	movs	r3, #0
 800b036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d017      	beq.n	800b06e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b03e:	4b13      	ldr	r3, [pc, #76]	; (800b08c <vTaskDelay+0x60>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <vTaskDelay+0x30>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	60bb      	str	r3, [r7, #8]
}
 800b058:	bf00      	nop
 800b05a:	e7fe      	b.n	800b05a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b05c:	f000 f88c 	bl	800b178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b060:	2100      	movs	r1, #0
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 feb0 	bl	800bdc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b068:	f000 f8ce 	bl	800b208 <xTaskResumeAll>
 800b06c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d107      	bne.n	800b084 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b074:	4b06      	ldr	r3, [pc, #24]	; (800b090 <vTaskDelay+0x64>)
 800b076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b084:	bf00      	nop
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	2000152c 	.word	0x2000152c
 800b090:	e000ed04 	.word	0xe000ed04

0800b094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08a      	sub	sp, #40	; 0x28
 800b098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0a2:	463a      	mov	r2, r7
 800b0a4:	1d39      	adds	r1, r7, #4
 800b0a6:	f107 0308 	add.w	r3, r7, #8
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fa fb82 	bl	80057b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	9202      	str	r2, [sp, #8]
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	460a      	mov	r2, r1
 800b0c2:	4925      	ldr	r1, [pc, #148]	; (800b158 <vTaskStartScheduler+0xc4>)
 800b0c4:	4825      	ldr	r0, [pc, #148]	; (800b15c <vTaskStartScheduler+0xc8>)
 800b0c6:	f7ff fd73 	bl	800abb0 <xTaskCreateStatic>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	4a24      	ldr	r2, [pc, #144]	; (800b160 <vTaskStartScheduler+0xcc>)
 800b0ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0d0:	4b23      	ldr	r3, [pc, #140]	; (800b160 <vTaskStartScheduler+0xcc>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	617b      	str	r3, [r7, #20]
 800b0dc:	e001      	b.n	800b0e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d102      	bne.n	800b0ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0e8:	f000 fed4 	bl	800be94 <xTimerCreateTimerTask>
 800b0ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d11d      	bne.n	800b130 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	613b      	str	r3, [r7, #16]
}
 800b106:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b108:	4b16      	ldr	r3, [pc, #88]	; (800b164 <vTaskStartScheduler+0xd0>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3350      	adds	r3, #80	; 0x50
 800b10e:	4a16      	ldr	r2, [pc, #88]	; (800b168 <vTaskStartScheduler+0xd4>)
 800b110:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b112:	4b16      	ldr	r3, [pc, #88]	; (800b16c <vTaskStartScheduler+0xd8>)
 800b114:	f04f 32ff 	mov.w	r2, #4294967295
 800b118:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b11a:	4b15      	ldr	r3, [pc, #84]	; (800b170 <vTaskStartScheduler+0xdc>)
 800b11c:	2201      	movs	r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b120:	4b14      	ldr	r3, [pc, #80]	; (800b174 <vTaskStartScheduler+0xe0>)
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b126:	f7fa fb0f 	bl	8005748 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b12a:	f001 faa9 	bl	800c680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b12e:	e00e      	b.n	800b14e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b136:	d10a      	bne.n	800b14e <vTaskStartScheduler+0xba>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	60fb      	str	r3, [r7, #12]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <vTaskStartScheduler+0xb8>
}
 800b14e:	bf00      	nop
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	0800e388 	.word	0x0800e388
 800b15c:	0800b9ed 	.word	0x0800b9ed
 800b160:	20001528 	.word	0x20001528
 800b164:	20001404 	.word	0x20001404
 800b168:	200000a4 	.word	0x200000a4
 800b16c:	20001524 	.word	0x20001524
 800b170:	20001510 	.word	0x20001510
 800b174:	20001508 	.word	0x20001508

0800b178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b178:	b480      	push	{r7}
 800b17a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b17c:	4b04      	ldr	r3, [pc, #16]	; (800b190 <vTaskSuspendAll+0x18>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	4a03      	ldr	r2, [pc, #12]	; (800b190 <vTaskSuspendAll+0x18>)
 800b184:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b186:	bf00      	nop
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	2000152c 	.word	0x2000152c

0800b194 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800b1a2:	4b14      	ldr	r3, [pc, #80]	; (800b1f4 <prvGetExpectedIdleTime+0x60>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d201      	bcs.n	800b1b0 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b1b0:	4b11      	ldr	r3, [pc, #68]	; (800b1f8 <prvGetExpectedIdleTime+0x64>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	e012      	b.n	800b1e6 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b1c0:	4b0e      	ldr	r3, [pc, #56]	; (800b1fc <prvGetExpectedIdleTime+0x68>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d902      	bls.n	800b1ce <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e00b      	b.n	800b1e6 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	e005      	b.n	800b1e6 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800b1da:	4b09      	ldr	r3, [pc, #36]	; (800b200 <prvGetExpectedIdleTime+0x6c>)
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4b09      	ldr	r3, [pc, #36]	; (800b204 <prvGetExpectedIdleTime+0x70>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
	}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	2000150c 	.word	0x2000150c
 800b1f8:	20001404 	.word	0x20001404
 800b1fc:	20001408 	.word	0x20001408
 800b200:	20001524 	.word	0x20001524
 800b204:	20001508 	.word	0x20001508

0800b208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b212:	2300      	movs	r3, #0
 800b214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b216:	4b41      	ldr	r3, [pc, #260]	; (800b31c <xTaskResumeAll+0x114>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10a      	bne.n	800b234 <xTaskResumeAll+0x2c>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	603b      	str	r3, [r7, #0]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b234:	f001 fac6 	bl	800c7c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b238:	4b38      	ldr	r3, [pc, #224]	; (800b31c <xTaskResumeAll+0x114>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	4a37      	ldr	r2, [pc, #220]	; (800b31c <xTaskResumeAll+0x114>)
 800b240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b242:	4b36      	ldr	r3, [pc, #216]	; (800b31c <xTaskResumeAll+0x114>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d161      	bne.n	800b30e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b24a:	4b35      	ldr	r3, [pc, #212]	; (800b320 <xTaskResumeAll+0x118>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d05d      	beq.n	800b30e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b252:	e02e      	b.n	800b2b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b254:	4b33      	ldr	r3, [pc, #204]	; (800b324 <xTaskResumeAll+0x11c>)
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	3318      	adds	r3, #24
 800b260:	4618      	mov	r0, r3
 800b262:	f7fe ff93 	bl	800a18c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3304      	adds	r3, #4
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe ff8e 	bl	800a18c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b274:	2201      	movs	r2, #1
 800b276:	409a      	lsls	r2, r3
 800b278:	4b2b      	ldr	r3, [pc, #172]	; (800b328 <xTaskResumeAll+0x120>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	4a2a      	ldr	r2, [pc, #168]	; (800b328 <xTaskResumeAll+0x120>)
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4a27      	ldr	r2, [pc, #156]	; (800b32c <xTaskResumeAll+0x124>)
 800b290:	441a      	add	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3304      	adds	r3, #4
 800b296:	4619      	mov	r1, r3
 800b298:	4610      	mov	r0, r2
 800b29a:	f7fe ff1a 	bl	800a0d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a2:	4b23      	ldr	r3, [pc, #140]	; (800b330 <xTaskResumeAll+0x128>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d302      	bcc.n	800b2b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b2ac:	4b21      	ldr	r3, [pc, #132]	; (800b334 <xTaskResumeAll+0x12c>)
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2b2:	4b1c      	ldr	r3, [pc, #112]	; (800b324 <xTaskResumeAll+0x11c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1cc      	bne.n	800b254 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2c0:	f000 fca6 	bl	800bc10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2c4:	4b1c      	ldr	r3, [pc, #112]	; (800b338 <xTaskResumeAll+0x130>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d010      	beq.n	800b2f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2d0:	f000 f86e 	bl	800b3b0 <xTaskIncrementTick>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b2da:	4b16      	ldr	r3, [pc, #88]	; (800b334 <xTaskResumeAll+0x12c>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1f1      	bne.n	800b2d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b2ec:	4b12      	ldr	r3, [pc, #72]	; (800b338 <xTaskResumeAll+0x130>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2f2:	4b10      	ldr	r3, [pc, #64]	; (800b334 <xTaskResumeAll+0x12c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d009      	beq.n	800b30e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2fe:	4b0f      	ldr	r3, [pc, #60]	; (800b33c <xTaskResumeAll+0x134>)
 800b300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b30e:	f001 fa89 	bl	800c824 <vPortExitCritical>

	return xAlreadyYielded;
 800b312:	68bb      	ldr	r3, [r7, #8]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	2000152c 	.word	0x2000152c
 800b320:	20001504 	.word	0x20001504
 800b324:	200014c4 	.word	0x200014c4
 800b328:	2000150c 	.word	0x2000150c
 800b32c:	20001408 	.word	0x20001408
 800b330:	20001404 	.word	0x20001404
 800b334:	20001518 	.word	0x20001518
 800b338:	20001514 	.word	0x20001514
 800b33c:	e000ed04 	.word	0xe000ed04

0800b340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b346:	4b05      	ldr	r3, [pc, #20]	; (800b35c <xTaskGetTickCount+0x1c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b34c:	687b      	ldr	r3, [r7, #4]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	20001508 	.word	0x20001508

0800b360 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800b368:	4b0f      	ldr	r3, [pc, #60]	; (800b3a8 <vTaskStepTick+0x48>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	441a      	add	r2, r3
 800b370:	4b0e      	ldr	r3, [pc, #56]	; (800b3ac <vTaskStepTick+0x4c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	429a      	cmp	r2, r3
 800b376:	d90a      	bls.n	800b38e <vTaskStepTick+0x2e>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	60fb      	str	r3, [r7, #12]
}
 800b38a:	bf00      	nop
 800b38c:	e7fe      	b.n	800b38c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800b38e:	4b06      	ldr	r3, [pc, #24]	; (800b3a8 <vTaskStepTick+0x48>)
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4413      	add	r3, r2
 800b396:	4a04      	ldr	r2, [pc, #16]	; (800b3a8 <vTaskStepTick+0x48>)
 800b398:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800b39a:	bf00      	nop
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	20001508 	.word	0x20001508
 800b3ac:	20001524 	.word	0x20001524

0800b3b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ba:	4b4e      	ldr	r3, [pc, #312]	; (800b4f4 <xTaskIncrementTick+0x144>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f040 808e 	bne.w	800b4e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3c4:	4b4c      	ldr	r3, [pc, #304]	; (800b4f8 <xTaskIncrementTick+0x148>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3cc:	4a4a      	ldr	r2, [pc, #296]	; (800b4f8 <xTaskIncrementTick+0x148>)
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d120      	bne.n	800b41a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3d8:	4b48      	ldr	r3, [pc, #288]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	603b      	str	r3, [r7, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <xTaskIncrementTick+0x46>
 800b3f8:	4b40      	ldr	r3, [pc, #256]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	4b40      	ldr	r3, [pc, #256]	; (800b500 <xTaskIncrementTick+0x150>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a3e      	ldr	r2, [pc, #248]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	4a3e      	ldr	r2, [pc, #248]	; (800b500 <xTaskIncrementTick+0x150>)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6013      	str	r3, [r2, #0]
 800b40c:	4b3d      	ldr	r3, [pc, #244]	; (800b504 <xTaskIncrementTick+0x154>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3301      	adds	r3, #1
 800b412:	4a3c      	ldr	r2, [pc, #240]	; (800b504 <xTaskIncrementTick+0x154>)
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	f000 fbfb 	bl	800bc10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b41a:	4b3b      	ldr	r3, [pc, #236]	; (800b508 <xTaskIncrementTick+0x158>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	429a      	cmp	r2, r3
 800b422:	d348      	bcc.n	800b4b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b424:	4b35      	ldr	r3, [pc, #212]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d104      	bne.n	800b438 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b42e:	4b36      	ldr	r3, [pc, #216]	; (800b508 <xTaskIncrementTick+0x158>)
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	601a      	str	r2, [r3, #0]
					break;
 800b436:	e03e      	b.n	800b4b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b438:	4b30      	ldr	r3, [pc, #192]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d203      	bcs.n	800b458 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b450:	4a2d      	ldr	r2, [pc, #180]	; (800b508 <xTaskIncrementTick+0x158>)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b456:	e02e      	b.n	800b4b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3304      	adds	r3, #4
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe fe95 	bl	800a18c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3318      	adds	r3, #24
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe fe8c 	bl	800a18c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	2201      	movs	r2, #1
 800b47a:	409a      	lsls	r2, r3
 800b47c:	4b23      	ldr	r3, [pc, #140]	; (800b50c <xTaskIncrementTick+0x15c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4313      	orrs	r3, r2
 800b482:	4a22      	ldr	r2, [pc, #136]	; (800b50c <xTaskIncrementTick+0x15c>)
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48a:	4613      	mov	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4a1f      	ldr	r2, [pc, #124]	; (800b510 <xTaskIncrementTick+0x160>)
 800b494:	441a      	add	r2, r3
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	3304      	adds	r3, #4
 800b49a:	4619      	mov	r1, r3
 800b49c:	4610      	mov	r0, r2
 800b49e:	f7fe fe18 	bl	800a0d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a6:	4b1b      	ldr	r3, [pc, #108]	; (800b514 <xTaskIncrementTick+0x164>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d3b9      	bcc.n	800b424 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4b4:	e7b6      	b.n	800b424 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4b6:	4b17      	ldr	r3, [pc, #92]	; (800b514 <xTaskIncrementTick+0x164>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4bc:	4914      	ldr	r1, [pc, #80]	; (800b510 <xTaskIncrementTick+0x160>)
 800b4be:	4613      	mov	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d901      	bls.n	800b4d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4d2:	4b11      	ldr	r3, [pc, #68]	; (800b518 <xTaskIncrementTick+0x168>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d007      	beq.n	800b4ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	617b      	str	r3, [r7, #20]
 800b4de:	e004      	b.n	800b4ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4e0:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <xTaskIncrementTick+0x16c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	4a0d      	ldr	r2, [pc, #52]	; (800b51c <xTaskIncrementTick+0x16c>)
 800b4e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4ea:	697b      	ldr	r3, [r7, #20]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	2000152c 	.word	0x2000152c
 800b4f8:	20001508 	.word	0x20001508
 800b4fc:	200014bc 	.word	0x200014bc
 800b500:	200014c0 	.word	0x200014c0
 800b504:	2000151c 	.word	0x2000151c
 800b508:	20001524 	.word	0x20001524
 800b50c:	2000150c 	.word	0x2000150c
 800b510:	20001408 	.word	0x20001408
 800b514:	20001404 	.word	0x20001404
 800b518:	20001518 	.word	0x20001518
 800b51c:	20001514 	.word	0x20001514

0800b520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b526:	4b3d      	ldr	r3, [pc, #244]	; (800b61c <vTaskSwitchContext+0xfc>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b52e:	4b3c      	ldr	r3, [pc, #240]	; (800b620 <vTaskSwitchContext+0x100>)
 800b530:	2201      	movs	r2, #1
 800b532:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b534:	e06e      	b.n	800b614 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800b536:	4b3a      	ldr	r3, [pc, #232]	; (800b620 <vTaskSwitchContext+0x100>)
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b53c:	f7fa f90b 	bl	8005756 <getRunTimeCounterValue>
 800b540:	4603      	mov	r3, r0
 800b542:	4a38      	ldr	r2, [pc, #224]	; (800b624 <vTaskSwitchContext+0x104>)
 800b544:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b546:	4b37      	ldr	r3, [pc, #220]	; (800b624 <vTaskSwitchContext+0x104>)
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	4b37      	ldr	r3, [pc, #220]	; (800b628 <vTaskSwitchContext+0x108>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d909      	bls.n	800b566 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b552:	4b36      	ldr	r3, [pc, #216]	; (800b62c <vTaskSwitchContext+0x10c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b558:	4a32      	ldr	r2, [pc, #200]	; (800b624 <vTaskSwitchContext+0x104>)
 800b55a:	6810      	ldr	r0, [r2, #0]
 800b55c:	4a32      	ldr	r2, [pc, #200]	; (800b628 <vTaskSwitchContext+0x108>)
 800b55e:	6812      	ldr	r2, [r2, #0]
 800b560:	1a82      	subs	r2, r0, r2
 800b562:	440a      	add	r2, r1
 800b564:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b566:	4b2f      	ldr	r3, [pc, #188]	; (800b624 <vTaskSwitchContext+0x104>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a2f      	ldr	r2, [pc, #188]	; (800b628 <vTaskSwitchContext+0x108>)
 800b56c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b56e:	4b2f      	ldr	r3, [pc, #188]	; (800b62c <vTaskSwitchContext+0x10c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	4b2d      	ldr	r3, [pc, #180]	; (800b62c <vTaskSwitchContext+0x10c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d808      	bhi.n	800b590 <vTaskSwitchContext+0x70>
 800b57e:	4b2b      	ldr	r3, [pc, #172]	; (800b62c <vTaskSwitchContext+0x10c>)
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	4b2a      	ldr	r3, [pc, #168]	; (800b62c <vTaskSwitchContext+0x10c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3334      	adds	r3, #52	; 0x34
 800b588:	4619      	mov	r1, r3
 800b58a:	4610      	mov	r0, r2
 800b58c:	f7fa f8f2 	bl	8005774 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b590:	4b27      	ldr	r3, [pc, #156]	; (800b630 <vTaskSwitchContext+0x110>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	fab3 f383 	clz	r3, r3
 800b59c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b59e:	7afb      	ldrb	r3, [r7, #11]
 800b5a0:	f1c3 031f 	rsb	r3, r3, #31
 800b5a4:	617b      	str	r3, [r7, #20]
 800b5a6:	4923      	ldr	r1, [pc, #140]	; (800b634 <vTaskSwitchContext+0x114>)
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10a      	bne.n	800b5d0 <vTaskSwitchContext+0xb0>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	607b      	str	r3, [r7, #4]
}
 800b5cc:	bf00      	nop
 800b5ce:	e7fe      	b.n	800b5ce <vTaskSwitchContext+0xae>
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4a16      	ldr	r2, [pc, #88]	; (800b634 <vTaskSwitchContext+0x114>)
 800b5dc:	4413      	add	r3, r2
 800b5de:	613b      	str	r3, [r7, #16]
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	605a      	str	r2, [r3, #4]
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d104      	bne.n	800b600 <vTaskSwitchContext+0xe0>
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	605a      	str	r2, [r3, #4]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	4a09      	ldr	r2, [pc, #36]	; (800b62c <vTaskSwitchContext+0x10c>)
 800b608:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b60a:	4b08      	ldr	r3, [pc, #32]	; (800b62c <vTaskSwitchContext+0x10c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3350      	adds	r3, #80	; 0x50
 800b610:	4a09      	ldr	r2, [pc, #36]	; (800b638 <vTaskSwitchContext+0x118>)
 800b612:	6013      	str	r3, [r2, #0]
}
 800b614:	bf00      	nop
 800b616:	3718      	adds	r7, #24
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	2000152c 	.word	0x2000152c
 800b620:	20001518 	.word	0x20001518
 800b624:	20001534 	.word	0x20001534
 800b628:	20001530 	.word	0x20001530
 800b62c:	20001404 	.word	0x20001404
 800b630:	2000150c 	.word	0x2000150c
 800b634:	20001408 	.word	0x20001408
 800b638:	200000a4 	.word	0x200000a4

0800b63c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	60fb      	str	r3, [r7, #12]
}
 800b65e:	bf00      	nop
 800b660:	e7fe      	b.n	800b660 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b662:	4b07      	ldr	r3, [pc, #28]	; (800b680 <vTaskPlaceOnEventList+0x44>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3318      	adds	r3, #24
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7fe fd55 	bl	800a11a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b670:	2101      	movs	r1, #1
 800b672:	6838      	ldr	r0, [r7, #0]
 800b674:	f000 fba8 	bl	800bdc8 <prvAddCurrentTaskToDelayedList>
}
 800b678:	bf00      	nop
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	20001404 	.word	0x20001404

0800b684 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10a      	bne.n	800b6ac <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	617b      	str	r3, [r7, #20]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b6ac:	4b11      	ldr	r3, [pc, #68]	; (800b6f4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10a      	bne.n	800b6ca <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	613b      	str	r3, [r7, #16]
}
 800b6c6:	bf00      	nop
 800b6c8:	e7fe      	b.n	800b6c8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b6ca:	4b0b      	ldr	r3, [pc, #44]	; (800b6f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b6d4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6d6:	4b08      	ldr	r3, [pc, #32]	; (800b6f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3318      	adds	r3, #24
 800b6dc:	4619      	mov	r1, r3
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f7fe fcf7 	bl	800a0d2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fb6e 	bl	800bdc8 <prvAddCurrentTaskToDelayedList>
}
 800b6ec:	bf00      	nop
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	2000152c 	.word	0x2000152c
 800b6f8:	20001404 	.word	0x20001404

0800b6fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10a      	bne.n	800b724 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	617b      	str	r3, [r7, #20]
}
 800b720:	bf00      	nop
 800b722:	e7fe      	b.n	800b722 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b724:	4b0a      	ldr	r3, [pc, #40]	; (800b750 <vTaskPlaceOnEventListRestricted+0x54>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3318      	adds	r3, #24
 800b72a:	4619      	mov	r1, r3
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7fe fcd0 	bl	800a0d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b738:	f04f 33ff 	mov.w	r3, #4294967295
 800b73c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b73e:	6879      	ldr	r1, [r7, #4]
 800b740:	68b8      	ldr	r0, [r7, #8]
 800b742:	f000 fb41 	bl	800bdc8 <prvAddCurrentTaskToDelayedList>
	}
 800b746:	bf00      	nop
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	20001404 	.word	0x20001404

0800b754 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b086      	sub	sp, #24
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10a      	bne.n	800b780 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	60fb      	str	r3, [r7, #12]
}
 800b77c:	bf00      	nop
 800b77e:	e7fe      	b.n	800b77e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	3318      	adds	r3, #24
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe fd01 	bl	800a18c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b78a:	4b1e      	ldr	r3, [pc, #120]	; (800b804 <xTaskRemoveFromEventList+0xb0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d11e      	bne.n	800b7d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	3304      	adds	r3, #4
 800b796:	4618      	mov	r0, r3
 800b798:	f7fe fcf8 	bl	800a18c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	409a      	lsls	r2, r3
 800b7a4:	4b18      	ldr	r3, [pc, #96]	; (800b808 <xTaskRemoveFromEventList+0xb4>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	4a17      	ldr	r2, [pc, #92]	; (800b808 <xTaskRemoveFromEventList+0xb4>)
 800b7ac:	6013      	str	r3, [r2, #0]
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4a14      	ldr	r2, [pc, #80]	; (800b80c <xTaskRemoveFromEventList+0xb8>)
 800b7bc:	441a      	add	r2, r3
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	f7fe fc84 	bl	800a0d2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800b7ca:	f000 fa21 	bl	800bc10 <prvResetNextTaskUnblockTime>
 800b7ce:	e005      	b.n	800b7dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	3318      	adds	r3, #24
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	480e      	ldr	r0, [pc, #56]	; (800b810 <xTaskRemoveFromEventList+0xbc>)
 800b7d8:	f7fe fc7b 	bl	800a0d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	4b0c      	ldr	r3, [pc, #48]	; (800b814 <xTaskRemoveFromEventList+0xc0>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d905      	bls.n	800b7f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b7ee:	4b0a      	ldr	r3, [pc, #40]	; (800b818 <xTaskRemoveFromEventList+0xc4>)
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]
 800b7f4:	e001      	b.n	800b7fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7fa:	697b      	ldr	r3, [r7, #20]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3718      	adds	r7, #24
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	2000152c 	.word	0x2000152c
 800b808:	2000150c 	.word	0x2000150c
 800b80c:	20001408 	.word	0x20001408
 800b810:	200014c4 	.word	0x200014c4
 800b814:	20001404 	.word	0x20001404
 800b818:	20001518 	.word	0x20001518

0800b81c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b826:	4b2a      	ldr	r3, [pc, #168]	; (800b8d0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10a      	bne.n	800b844 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	613b      	str	r3, [r7, #16]
}
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10a      	bne.n	800b870 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	60fb      	str	r3, [r7, #12]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f7fe fc8b 	bl	800a18c <uxListRemove>
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 800b876:	f000 f9cb 	bl	800bc10 <prvResetNextTaskUnblockTime>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	3304      	adds	r3, #4
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fc84 	bl	800a18c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	2201      	movs	r2, #1
 800b88a:	409a      	lsls	r2, r3
 800b88c:	4b11      	ldr	r3, [pc, #68]	; (800b8d4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4313      	orrs	r3, r2
 800b892:	4a10      	ldr	r2, [pc, #64]	; (800b8d4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b894:	6013      	str	r3, [r2, #0]
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89a:	4613      	mov	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4a0d      	ldr	r2, [pc, #52]	; (800b8d8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b8a4:	441a      	add	r2, r3
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	f7fe fc10 	bl	800a0d2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b6:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d902      	bls.n	800b8c6 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b8c0:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]
	}
}
 800b8c6:	bf00      	nop
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	2000152c 	.word	0x2000152c
 800b8d4:	2000150c 	.word	0x2000150c
 800b8d8:	20001408 	.word	0x20001408
 800b8dc:	20001404 	.word	0x20001404
 800b8e0:	20001518 	.word	0x20001518

0800b8e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8ec:	4b06      	ldr	r3, [pc, #24]	; (800b908 <vTaskInternalSetTimeOutState+0x24>)
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8f4:	4b05      	ldr	r3, [pc, #20]	; (800b90c <vTaskInternalSetTimeOutState+0x28>)
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	605a      	str	r2, [r3, #4]
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	2000151c 	.word	0x2000151c
 800b90c:	20001508 	.word	0x20001508

0800b910 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10a      	bne.n	800b936 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	613b      	str	r3, [r7, #16]
}
 800b932:	bf00      	nop
 800b934:	e7fe      	b.n	800b934 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60fb      	str	r3, [r7, #12]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b952:	f000 ff37 	bl	800c7c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b956:	4b1d      	ldr	r3, [pc, #116]	; (800b9cc <xTaskCheckForTimeOut+0xbc>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96e:	d102      	bne.n	800b976 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b970:	2300      	movs	r3, #0
 800b972:	61fb      	str	r3, [r7, #28]
 800b974:	e023      	b.n	800b9be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <xTaskCheckForTimeOut+0xc0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d007      	beq.n	800b992 <xTaskCheckForTimeOut+0x82>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d302      	bcc.n	800b992 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b98c:	2301      	movs	r3, #1
 800b98e:	61fb      	str	r3, [r7, #28]
 800b990:	e015      	b.n	800b9be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d20b      	bcs.n	800b9b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	1ad2      	subs	r2, r2, r3
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff ff9b 	bl	800b8e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61fb      	str	r3, [r7, #28]
 800b9b2:	e004      	b.n	800b9be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9be:	f000 ff31 	bl	800c824 <vPortExitCritical>

	return xReturn;
 800b9c2:	69fb      	ldr	r3, [r7, #28]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3720      	adds	r7, #32
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	20001508 	.word	0x20001508
 800b9d0:	2000151c 	.word	0x2000151c

0800b9d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9d8:	4b03      	ldr	r3, [pc, #12]	; (800b9e8 <vTaskMissedYield+0x14>)
 800b9da:	2201      	movs	r2, #1
 800b9dc:	601a      	str	r2, [r3, #0]
}
 800b9de:	bf00      	nop
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	20001518 	.word	0x20001518

0800b9ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9f4:	f000 f8aa 	bl	800bb4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9f8:	4b19      	ldr	r3, [pc, #100]	; (800ba60 <prvIdleTask+0x74>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d907      	bls.n	800ba10 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ba00:	4b18      	ldr	r3, [pc, #96]	; (800ba64 <prvIdleTask+0x78>)
 800ba02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ba10:	f7f9 fea9 	bl	8005766 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800ba14:	f7ff fbbe 	bl	800b194 <prvGetExpectedIdleTime>
 800ba18:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d9e9      	bls.n	800b9f4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800ba20:	f7ff fbaa 	bl	800b178 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800ba24:	4b10      	ldr	r3, [pc, #64]	; (800ba68 <prvIdleTask+0x7c>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	4b10      	ldr	r3, [pc, #64]	; (800ba6c <prvIdleTask+0x80>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d20a      	bcs.n	800ba46 <prvIdleTask+0x5a>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	60bb      	str	r3, [r7, #8]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800ba46:	f7ff fba5 	bl	800b194 <prvGetExpectedIdleTime>
 800ba4a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d902      	bls.n	800ba58 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 ff6a 	bl	800c92c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800ba58:	f7ff fbd6 	bl	800b208 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800ba5c:	e7ca      	b.n	800b9f4 <prvIdleTask+0x8>
 800ba5e:	bf00      	nop
 800ba60:	20001408 	.word	0x20001408
 800ba64:	e000ed04 	.word	0xe000ed04
 800ba68:	20001524 	.word	0x20001524
 800ba6c:	20001508 	.word	0x20001508

0800ba70 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800ba76:	2301      	movs	r3, #1
 800ba78:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800ba7e:	4b0f      	ldr	r3, [pc, #60]	; (800babc <eTaskConfirmSleepModeStatus+0x4c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800ba86:	2300      	movs	r3, #0
 800ba88:	71fb      	strb	r3, [r7, #7]
 800ba8a:	e010      	b.n	800baae <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800ba8c:	4b0c      	ldr	r3, [pc, #48]	; (800bac0 <eTaskConfirmSleepModeStatus+0x50>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800ba94:	2300      	movs	r3, #0
 800ba96:	71fb      	strb	r3, [r7, #7]
 800ba98:	e009      	b.n	800baae <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <eTaskConfirmSleepModeStatus+0x54>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	4b0a      	ldr	r3, [pc, #40]	; (800bac8 <eTaskConfirmSleepModeStatus+0x58>)
 800baa0:	6819      	ldr	r1, [r3, #0]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	1acb      	subs	r3, r1, r3
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d101      	bne.n	800baae <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800baaa:	2302      	movs	r3, #2
 800baac:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800baae:	79fb      	ldrb	r3, [r7, #7]
	}
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	200014c4 	.word	0x200014c4
 800bac0:	20001518 	.word	0x20001518
 800bac4:	200014f0 	.word	0x200014f0
 800bac8:	20001504 	.word	0x20001504

0800bacc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bad2:	2300      	movs	r3, #0
 800bad4:	607b      	str	r3, [r7, #4]
 800bad6:	e00c      	b.n	800baf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4a12      	ldr	r2, [pc, #72]	; (800bb2c <prvInitialiseTaskLists+0x60>)
 800bae4:	4413      	add	r3, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe fac6 	bl	800a078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	3301      	adds	r3, #1
 800baf0:	607b      	str	r3, [r7, #4]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b06      	cmp	r3, #6
 800baf6:	d9ef      	bls.n	800bad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800baf8:	480d      	ldr	r0, [pc, #52]	; (800bb30 <prvInitialiseTaskLists+0x64>)
 800bafa:	f7fe fabd 	bl	800a078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bafe:	480d      	ldr	r0, [pc, #52]	; (800bb34 <prvInitialiseTaskLists+0x68>)
 800bb00:	f7fe faba 	bl	800a078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb04:	480c      	ldr	r0, [pc, #48]	; (800bb38 <prvInitialiseTaskLists+0x6c>)
 800bb06:	f7fe fab7 	bl	800a078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb0a:	480c      	ldr	r0, [pc, #48]	; (800bb3c <prvInitialiseTaskLists+0x70>)
 800bb0c:	f7fe fab4 	bl	800a078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb10:	480b      	ldr	r0, [pc, #44]	; (800bb40 <prvInitialiseTaskLists+0x74>)
 800bb12:	f7fe fab1 	bl	800a078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb16:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <prvInitialiseTaskLists+0x78>)
 800bb18:	4a05      	ldr	r2, [pc, #20]	; (800bb30 <prvInitialiseTaskLists+0x64>)
 800bb1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <prvInitialiseTaskLists+0x7c>)
 800bb1e:	4a05      	ldr	r2, [pc, #20]	; (800bb34 <prvInitialiseTaskLists+0x68>)
 800bb20:	601a      	str	r2, [r3, #0]
}
 800bb22:	bf00      	nop
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20001408 	.word	0x20001408
 800bb30:	20001494 	.word	0x20001494
 800bb34:	200014a8 	.word	0x200014a8
 800bb38:	200014c4 	.word	0x200014c4
 800bb3c:	200014d8 	.word	0x200014d8
 800bb40:	200014f0 	.word	0x200014f0
 800bb44:	200014bc 	.word	0x200014bc
 800bb48:	200014c0 	.word	0x200014c0

0800bb4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb52:	e019      	b.n	800bb88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb54:	f000 fe36 	bl	800c7c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb58:	4b10      	ldr	r3, [pc, #64]	; (800bb9c <prvCheckTasksWaitingTermination+0x50>)
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3304      	adds	r3, #4
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe fb11 	bl	800a18c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb6a:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <prvCheckTasksWaitingTermination+0x54>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	4a0b      	ldr	r2, [pc, #44]	; (800bba0 <prvCheckTasksWaitingTermination+0x54>)
 800bb72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb74:	4b0b      	ldr	r3, [pc, #44]	; (800bba4 <prvCheckTasksWaitingTermination+0x58>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	4a0a      	ldr	r2, [pc, #40]	; (800bba4 <prvCheckTasksWaitingTermination+0x58>)
 800bb7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb7e:	f000 fe51 	bl	800c824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f810 	bl	800bba8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb88:	4b06      	ldr	r3, [pc, #24]	; (800bba4 <prvCheckTasksWaitingTermination+0x58>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e1      	bne.n	800bb54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb90:	bf00      	nop
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	200014d8 	.word	0x200014d8
 800bba0:	20001504 	.word	0x20001504
 800bba4:	200014ec 	.word	0x200014ec

0800bba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3350      	adds	r3, #80	; 0x50
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f001 feef 	bl	800d998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d108      	bne.n	800bbd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f001 f8cd 	bl	800cd68 <vPortFree>
				vPortFree( pxTCB );
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f001 f8ca 	bl	800cd68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbd4:	e018      	b.n	800bc08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d103      	bne.n	800bbe8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f001 f8c1 	bl	800cd68 <vPortFree>
	}
 800bbe6:	e00f      	b.n	800bc08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	d00a      	beq.n	800bc08 <prvDeleteTCB+0x60>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	60fb      	str	r3, [r7, #12]
}
 800bc04:	bf00      	nop
 800bc06:	e7fe      	b.n	800bc06 <prvDeleteTCB+0x5e>
	}
 800bc08:	bf00      	nop
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc16:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <prvResetNextTaskUnblockTime+0x38>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d104      	bne.n	800bc2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc20:	4b0a      	ldr	r3, [pc, #40]	; (800bc4c <prvResetNextTaskUnblockTime+0x3c>)
 800bc22:	f04f 32ff 	mov.w	r2, #4294967295
 800bc26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc28:	e008      	b.n	800bc3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2a:	4b07      	ldr	r3, [pc, #28]	; (800bc48 <prvResetNextTaskUnblockTime+0x38>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	4a04      	ldr	r2, [pc, #16]	; (800bc4c <prvResetNextTaskUnblockTime+0x3c>)
 800bc3a:	6013      	str	r3, [r2, #0]
}
 800bc3c:	bf00      	nop
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	200014bc 	.word	0x200014bc
 800bc4c:	20001524 	.word	0x20001524

0800bc50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc56:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <xTaskGetSchedulerState+0x34>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d102      	bne.n	800bc64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	607b      	str	r3, [r7, #4]
 800bc62:	e008      	b.n	800bc76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc64:	4b08      	ldr	r3, [pc, #32]	; (800bc88 <xTaskGetSchedulerState+0x38>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d102      	bne.n	800bc72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	607b      	str	r3, [r7, #4]
 800bc70:	e001      	b.n	800bc76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc72:	2300      	movs	r3, #0
 800bc74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc76:	687b      	ldr	r3, [r7, #4]
	}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	20001510 	.word	0x20001510
 800bc88:	2000152c 	.word	0x2000152c

0800bc8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d06e      	beq.n	800bd80 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bca2:	4b3a      	ldr	r3, [pc, #232]	; (800bd8c <xTaskPriorityDisinherit+0x100>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	693a      	ldr	r2, [r7, #16]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d00a      	beq.n	800bcc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	60fb      	str	r3, [r7, #12]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10a      	bne.n	800bce0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	60bb      	str	r3, [r7, #8]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce4:	1e5a      	subs	r2, r3, #1
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d044      	beq.n	800bd80 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d140      	bne.n	800bd80 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	3304      	adds	r3, #4
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe fa42 	bl	800a18c <uxListRemove>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d115      	bne.n	800bd3a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd12:	491f      	ldr	r1, [pc, #124]	; (800bd90 <xTaskPriorityDisinherit+0x104>)
 800bd14:	4613      	mov	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	440b      	add	r3, r1
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10a      	bne.n	800bd3a <xTaskPriorityDisinherit+0xae>
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd28:	2201      	movs	r2, #1
 800bd2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2e:	43da      	mvns	r2, r3
 800bd30:	4b18      	ldr	r3, [pc, #96]	; (800bd94 <xTaskPriorityDisinherit+0x108>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4013      	ands	r3, r2
 800bd36:	4a17      	ldr	r2, [pc, #92]	; (800bd94 <xTaskPriorityDisinherit+0x108>)
 800bd38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd46:	f1c3 0207 	rsb	r2, r3, #7
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd52:	2201      	movs	r2, #1
 800bd54:	409a      	lsls	r2, r3
 800bd56:	4b0f      	ldr	r3, [pc, #60]	; (800bd94 <xTaskPriorityDisinherit+0x108>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	4a0d      	ldr	r2, [pc, #52]	; (800bd94 <xTaskPriorityDisinherit+0x108>)
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4a08      	ldr	r2, [pc, #32]	; (800bd90 <xTaskPriorityDisinherit+0x104>)
 800bd6e:	441a      	add	r2, r3
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	3304      	adds	r3, #4
 800bd74:	4619      	mov	r1, r3
 800bd76:	4610      	mov	r0, r2
 800bd78:	f7fe f9ab 	bl	800a0d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd80:	697b      	ldr	r3, [r7, #20]
	}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20001404 	.word	0x20001404
 800bd90:	20001408 	.word	0x20001408
 800bd94:	2000150c 	.word	0x2000150c

0800bd98 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bd9e:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <uxTaskResetEventItemValue+0x2c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bda6:	4b07      	ldr	r3, [pc, #28]	; (800bdc4 <uxTaskResetEventItemValue+0x2c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdac:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <uxTaskResetEventItemValue+0x2c>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f1c2 0207 	rsb	r2, r2, #7
 800bdb4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bdb6:	687b      	ldr	r3, [r7, #4]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	20001404 	.word	0x20001404

0800bdc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdd2:	4b29      	ldr	r3, [pc, #164]	; (800be78 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdd8:	4b28      	ldr	r3, [pc, #160]	; (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe f9d4 	bl	800a18c <uxListRemove>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10b      	bne.n	800be02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bdea:	4b24      	ldr	r3, [pc, #144]	; (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf6:	43da      	mvns	r2, r3
 800bdf8:	4b21      	ldr	r3, [pc, #132]	; (800be80 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	4a20      	ldr	r2, [pc, #128]	; (800be80 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be08:	d10a      	bne.n	800be20 <prvAddCurrentTaskToDelayedList+0x58>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d007      	beq.n	800be20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be10:	4b1a      	ldr	r3, [pc, #104]	; (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3304      	adds	r3, #4
 800be16:	4619      	mov	r1, r3
 800be18:	481a      	ldr	r0, [pc, #104]	; (800be84 <prvAddCurrentTaskToDelayedList+0xbc>)
 800be1a:	f7fe f95a 	bl	800a0d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be1e:	e026      	b.n	800be6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4413      	add	r3, r2
 800be26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be28:	4b14      	ldr	r3, [pc, #80]	; (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	429a      	cmp	r2, r3
 800be36:	d209      	bcs.n	800be4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be38:	4b13      	ldr	r3, [pc, #76]	; (800be88 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3304      	adds	r3, #4
 800be42:	4619      	mov	r1, r3
 800be44:	4610      	mov	r0, r2
 800be46:	f7fe f968 	bl	800a11a <vListInsert>
}
 800be4a:	e010      	b.n	800be6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be4c:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <prvAddCurrentTaskToDelayedList+0xc4>)
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	4b0a      	ldr	r3, [pc, #40]	; (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3304      	adds	r3, #4
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7fe f95e 	bl	800a11a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be5e:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	429a      	cmp	r2, r3
 800be66:	d202      	bcs.n	800be6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be68:	4a09      	ldr	r2, [pc, #36]	; (800be90 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	6013      	str	r3, [r2, #0]
}
 800be6e:	bf00      	nop
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20001508 	.word	0x20001508
 800be7c:	20001404 	.word	0x20001404
 800be80:	2000150c 	.word	0x2000150c
 800be84:	200014f0 	.word	0x200014f0
 800be88:	200014c0 	.word	0x200014c0
 800be8c:	200014bc 	.word	0x200014bc
 800be90:	20001524 	.word	0x20001524

0800be94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	; 0x28
 800be98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be9e:	f000 fb07 	bl	800c4b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bea2:	4b1c      	ldr	r3, [pc, #112]	; (800bf14 <xTimerCreateTimerTask+0x80>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d021      	beq.n	800beee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800beae:	2300      	movs	r3, #0
 800beb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800beb2:	1d3a      	adds	r2, r7, #4
 800beb4:	f107 0108 	add.w	r1, r7, #8
 800beb8:	f107 030c 	add.w	r3, r7, #12
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7f9 fc93 	bl	80057e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	9202      	str	r2, [sp, #8]
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	2302      	movs	r3, #2
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	2300      	movs	r3, #0
 800bed2:	460a      	mov	r2, r1
 800bed4:	4910      	ldr	r1, [pc, #64]	; (800bf18 <xTimerCreateTimerTask+0x84>)
 800bed6:	4811      	ldr	r0, [pc, #68]	; (800bf1c <xTimerCreateTimerTask+0x88>)
 800bed8:	f7fe fe6a 	bl	800abb0 <xTaskCreateStatic>
 800bedc:	4603      	mov	r3, r0
 800bede:	4a10      	ldr	r2, [pc, #64]	; (800bf20 <xTimerCreateTimerTask+0x8c>)
 800bee0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bee2:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <xTimerCreateTimerTask+0x8c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800beea:	2301      	movs	r3, #1
 800beec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	613b      	str	r3, [r7, #16]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf0a:	697b      	ldr	r3, [r7, #20]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	20001568 	.word	0x20001568
 800bf18:	0800e390 	.word	0x0800e390
 800bf1c:	0800c059 	.word	0x0800c059
 800bf20:	2000156c 	.word	0x2000156c

0800bf24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08a      	sub	sp, #40	; 0x28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf32:	2300      	movs	r3, #0
 800bf34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	623b      	str	r3, [r7, #32]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf52:	4b1a      	ldr	r3, [pc, #104]	; (800bfbc <xTimerGenericCommand+0x98>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d02a      	beq.n	800bfb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b05      	cmp	r3, #5
 800bf6a:	dc18      	bgt.n	800bf9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf6c:	f7ff fe70 	bl	800bc50 <xTaskGetSchedulerState>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d109      	bne.n	800bf8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf76:	4b11      	ldr	r3, [pc, #68]	; (800bfbc <xTimerGenericCommand+0x98>)
 800bf78:	6818      	ldr	r0, [r3, #0]
 800bf7a:	f107 0110 	add.w	r1, r7, #16
 800bf7e:	2300      	movs	r3, #0
 800bf80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf82:	f7fe fa2d 	bl	800a3e0 <xQueueGenericSend>
 800bf86:	6278      	str	r0, [r7, #36]	; 0x24
 800bf88:	e012      	b.n	800bfb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf8a:	4b0c      	ldr	r3, [pc, #48]	; (800bfbc <xTimerGenericCommand+0x98>)
 800bf8c:	6818      	ldr	r0, [r3, #0]
 800bf8e:	f107 0110 	add.w	r1, r7, #16
 800bf92:	2300      	movs	r3, #0
 800bf94:	2200      	movs	r2, #0
 800bf96:	f7fe fa23 	bl	800a3e0 <xQueueGenericSend>
 800bf9a:	6278      	str	r0, [r7, #36]	; 0x24
 800bf9c:	e008      	b.n	800bfb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf9e:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <xTimerGenericCommand+0x98>)
 800bfa0:	6818      	ldr	r0, [r3, #0]
 800bfa2:	f107 0110 	add.w	r1, r7, #16
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	f7fe fb17 	bl	800a5dc <xQueueGenericSendFromISR>
 800bfae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3728      	adds	r7, #40	; 0x28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20001568 	.word	0x20001568

0800bfc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfca:	4b22      	ldr	r3, [pc, #136]	; (800c054 <prvProcessExpiredTimer+0x94>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe f8d7 	bl	800a18c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bfe4:	f003 0304 	and.w	r3, r3, #4
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d022      	beq.n	800c032 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	699a      	ldr	r2, [r3, #24]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	18d1      	adds	r1, r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	6978      	ldr	r0, [r7, #20]
 800bffa:	f000 f8d1 	bl	800c1a0 <prvInsertTimerInActiveList>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d01f      	beq.n	800c044 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c004:	2300      	movs	r3, #0
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	2300      	movs	r3, #0
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	2100      	movs	r1, #0
 800c00e:	6978      	ldr	r0, [r7, #20]
 800c010:	f7ff ff88 	bl	800bf24 <xTimerGenericCommand>
 800c014:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d113      	bne.n	800c044 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60fb      	str	r3, [r7, #12]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c038:	f023 0301 	bic.w	r3, r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	6978      	ldr	r0, [r7, #20]
 800c04a:	4798      	blx	r3
}
 800c04c:	bf00      	nop
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	20001560 	.word	0x20001560

0800c058 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c060:	f107 0308 	add.w	r3, r7, #8
 800c064:	4618      	mov	r0, r3
 800c066:	f000 f857 	bl	800c118 <prvGetNextExpireTime>
 800c06a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4619      	mov	r1, r3
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 f803 	bl	800c07c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c076:	f000 f8d5 	bl	800c224 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c07a:	e7f1      	b.n	800c060 <prvTimerTask+0x8>

0800c07c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c086:	f7ff f877 	bl	800b178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c08a:	f107 0308 	add.w	r3, r7, #8
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 f866 	bl	800c160 <prvSampleTimeNow>
 800c094:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d130      	bne.n	800c0fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10a      	bne.n	800c0b8 <prvProcessTimerOrBlockTask+0x3c>
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d806      	bhi.n	800c0b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c0aa:	f7ff f8ad 	bl	800b208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0ae:	68f9      	ldr	r1, [r7, #12]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7ff ff85 	bl	800bfc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0b6:	e024      	b.n	800c102 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d008      	beq.n	800c0d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0be:	4b13      	ldr	r3, [pc, #76]	; (800c10c <prvProcessTimerOrBlockTask+0x90>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <prvProcessTimerOrBlockTask+0x50>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e000      	b.n	800c0ce <prvProcessTimerOrBlockTask+0x52>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0d0:	4b0f      	ldr	r3, [pc, #60]	; (800c110 <prvProcessTimerOrBlockTask+0x94>)
 800c0d2:	6818      	ldr	r0, [r3, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	f7fe fd33 	bl	800ab48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c0e2:	f7ff f891 	bl	800b208 <xTaskResumeAll>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10a      	bne.n	800c102 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c0ec:	4b09      	ldr	r3, [pc, #36]	; (800c114 <prvProcessTimerOrBlockTask+0x98>)
 800c0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	f3bf 8f6f 	isb	sy
}
 800c0fc:	e001      	b.n	800c102 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0fe:	f7ff f883 	bl	800b208 <xTaskResumeAll>
}
 800c102:	bf00      	nop
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20001564 	.word	0x20001564
 800c110:	20001568 	.word	0x20001568
 800c114:	e000ed04 	.word	0xe000ed04

0800c118 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c120:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <prvGetNextExpireTime+0x44>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <prvGetNextExpireTime+0x16>
 800c12a:	2201      	movs	r2, #1
 800c12c:	e000      	b.n	800c130 <prvGetNextExpireTime+0x18>
 800c12e:	2200      	movs	r2, #0
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d105      	bne.n	800c148 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c13c:	4b07      	ldr	r3, [pc, #28]	; (800c15c <prvGetNextExpireTime+0x44>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	60fb      	str	r3, [r7, #12]
 800c146:	e001      	b.n	800c14c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c14c:	68fb      	ldr	r3, [r7, #12]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	20001560 	.word	0x20001560

0800c160 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c168:	f7ff f8ea 	bl	800b340 <xTaskGetTickCount>
 800c16c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c16e:	4b0b      	ldr	r3, [pc, #44]	; (800c19c <prvSampleTimeNow+0x3c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	429a      	cmp	r2, r3
 800c176:	d205      	bcs.n	800c184 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c178:	f000 f936 	bl	800c3e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	e002      	b.n	800c18a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c18a:	4a04      	ldr	r2, [pc, #16]	; (800c19c <prvSampleTimeNow+0x3c>)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c190:	68fb      	ldr	r3, [r7, #12]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20001570 	.word	0x20001570

0800c1a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d812      	bhi.n	800c1ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	1ad2      	subs	r2, r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d302      	bcc.n	800c1da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	617b      	str	r3, [r7, #20]
 800c1d8:	e01b      	b.n	800c212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1da:	4b10      	ldr	r3, [pc, #64]	; (800c21c <prvInsertTimerInActiveList+0x7c>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	f7fd ff98 	bl	800a11a <vListInsert>
 800c1ea:	e012      	b.n	800c212 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d206      	bcs.n	800c202 <prvInsertTimerInActiveList+0x62>
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d302      	bcc.n	800c202 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
 800c200:	e007      	b.n	800c212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c202:	4b07      	ldr	r3, [pc, #28]	; (800c220 <prvInsertTimerInActiveList+0x80>)
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3304      	adds	r3, #4
 800c20a:	4619      	mov	r1, r3
 800c20c:	4610      	mov	r0, r2
 800c20e:	f7fd ff84 	bl	800a11a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c212:	697b      	ldr	r3, [r7, #20]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	20001564 	.word	0x20001564
 800c220:	20001560 	.word	0x20001560

0800c224 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08e      	sub	sp, #56	; 0x38
 800c228:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c22a:	e0ca      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da18      	bge.n	800c264 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c232:	1d3b      	adds	r3, r7, #4
 800c234:	3304      	adds	r3, #4
 800c236:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10a      	bne.n	800c254 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	61fb      	str	r3, [r7, #28]
}
 800c250:	bf00      	nop
 800c252:	e7fe      	b.n	800c252 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c25a:	6850      	ldr	r0, [r2, #4]
 800c25c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c25e:	6892      	ldr	r2, [r2, #8]
 800c260:	4611      	mov	r1, r2
 800c262:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f2c0 80aa 	blt.w	800c3c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	695b      	ldr	r3, [r3, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	3304      	adds	r3, #4
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7fd ff85 	bl	800a18c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c282:	463b      	mov	r3, r7
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff ff6b 	bl	800c160 <prvSampleTimeNow>
 800c28a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b09      	cmp	r3, #9
 800c290:	f200 8097 	bhi.w	800c3c2 <prvProcessReceivedCommands+0x19e>
 800c294:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <prvProcessReceivedCommands+0x78>)
 800c296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29a:	bf00      	nop
 800c29c:	0800c2c5 	.word	0x0800c2c5
 800c2a0:	0800c2c5 	.word	0x0800c2c5
 800c2a4:	0800c2c5 	.word	0x0800c2c5
 800c2a8:	0800c339 	.word	0x0800c339
 800c2ac:	0800c34d 	.word	0x0800c34d
 800c2b0:	0800c397 	.word	0x0800c397
 800c2b4:	0800c2c5 	.word	0x0800c2c5
 800c2b8:	0800c2c5 	.word	0x0800c2c5
 800c2bc:	0800c339 	.word	0x0800c339
 800c2c0:	0800c34d 	.word	0x0800c34d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c2ca:	f043 0301 	orr.w	r3, r3, #1
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	18d1      	adds	r1, r2, r3
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2e4:	f7ff ff5c 	bl	800c1a0 <prvInsertTimerInActiveList>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d069      	beq.n	800c3c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c2fc:	f003 0304 	and.w	r3, r3, #4
 800c300:	2b00      	cmp	r3, #0
 800c302:	d05e      	beq.n	800c3c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	441a      	add	r2, r3
 800c30c:	2300      	movs	r3, #0
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	2300      	movs	r3, #0
 800c312:	2100      	movs	r1, #0
 800c314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c316:	f7ff fe05 	bl	800bf24 <xTimerGenericCommand>
 800c31a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c31c:	6a3b      	ldr	r3, [r7, #32]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d14f      	bne.n	800c3c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	61bb      	str	r3, [r7, #24]
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c33e:	f023 0301 	bic.w	r3, r3, #1
 800c342:	b2da      	uxtb	r2, r3
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800c34a:	e03a      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c352:	f043 0301 	orr.w	r3, r3, #1
 800c356:	b2da      	uxtb	r2, r3
 800c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	617b      	str	r3, [r7, #20]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	699a      	ldr	r2, [r3, #24]
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	18d1      	adds	r1, r2, r3
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c390:	f7ff ff06 	bl	800c1a0 <prvInsertTimerInActiveList>
					break;
 800c394:	e015      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c39c:	f003 0302 	and.w	r3, r3, #2
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d103      	bne.n	800c3ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c3a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3a6:	f000 fcdf 	bl	800cd68 <vPortFree>
 800c3aa:	e00a      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c3b2:	f023 0301 	bic.w	r3, r3, #1
 800c3b6:	b2da      	uxtb	r2, r3
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3be:	e000      	b.n	800c3c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c3c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3c2:	4b08      	ldr	r3, [pc, #32]	; (800c3e4 <prvProcessReceivedCommands+0x1c0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	1d39      	adds	r1, r7, #4
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fe f9a2 	bl	800a714 <xQueueReceive>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f47f af2a 	bne.w	800c22c <prvProcessReceivedCommands+0x8>
	}
}
 800c3d8:	bf00      	nop
 800c3da:	bf00      	nop
 800c3dc:	3730      	adds	r7, #48	; 0x30
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20001568 	.word	0x20001568

0800c3e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b088      	sub	sp, #32
 800c3ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3ee:	e048      	b.n	800c482 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3f0:	4b2d      	ldr	r3, [pc, #180]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3fa:	4b2b      	ldr	r3, [pc, #172]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3304      	adds	r3, #4
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fd febf 	bl	800a18c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6a1b      	ldr	r3, [r3, #32]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	2b00      	cmp	r3, #0
 800c422:	d02e      	beq.n	800c482 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	4413      	add	r3, r2
 800c42c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	429a      	cmp	r2, r3
 800c434:	d90e      	bls.n	800c454 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c442:	4b19      	ldr	r3, [pc, #100]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3304      	adds	r3, #4
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f7fd fe64 	bl	800a11a <vListInsert>
 800c452:	e016      	b.n	800c482 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c454:	2300      	movs	r3, #0
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	2300      	movs	r3, #0
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	2100      	movs	r1, #0
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f7ff fd60 	bl	800bf24 <xTimerGenericCommand>
 800c464:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10a      	bne.n	800c482 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	603b      	str	r3, [r7, #0]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c482:	4b09      	ldr	r3, [pc, #36]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1b1      	bne.n	800c3f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c48c:	4b06      	ldr	r3, [pc, #24]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c492:	4b06      	ldr	r3, [pc, #24]	; (800c4ac <prvSwitchTimerLists+0xc4>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a04      	ldr	r2, [pc, #16]	; (800c4a8 <prvSwitchTimerLists+0xc0>)
 800c498:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c49a:	4a04      	ldr	r2, [pc, #16]	; (800c4ac <prvSwitchTimerLists+0xc4>)
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	6013      	str	r3, [r2, #0]
}
 800c4a0:	bf00      	nop
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	20001560 	.word	0x20001560
 800c4ac:	20001564 	.word	0x20001564

0800c4b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c4b6:	f000 f985 	bl	800c7c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c4ba:	4b15      	ldr	r3, [pc, #84]	; (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d120      	bne.n	800c504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4c2:	4814      	ldr	r0, [pc, #80]	; (800c514 <prvCheckForValidListAndQueue+0x64>)
 800c4c4:	f7fd fdd8 	bl	800a078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4c8:	4813      	ldr	r0, [pc, #76]	; (800c518 <prvCheckForValidListAndQueue+0x68>)
 800c4ca:	f7fd fdd5 	bl	800a078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4ce:	4b13      	ldr	r3, [pc, #76]	; (800c51c <prvCheckForValidListAndQueue+0x6c>)
 800c4d0:	4a10      	ldr	r2, [pc, #64]	; (800c514 <prvCheckForValidListAndQueue+0x64>)
 800c4d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c4d4:	4b12      	ldr	r3, [pc, #72]	; (800c520 <prvCheckForValidListAndQueue+0x70>)
 800c4d6:	4a10      	ldr	r2, [pc, #64]	; (800c518 <prvCheckForValidListAndQueue+0x68>)
 800c4d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c4da:	2300      	movs	r3, #0
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	4b11      	ldr	r3, [pc, #68]	; (800c524 <prvCheckForValidListAndQueue+0x74>)
 800c4e0:	4a11      	ldr	r2, [pc, #68]	; (800c528 <prvCheckForValidListAndQueue+0x78>)
 800c4e2:	2110      	movs	r1, #16
 800c4e4:	200a      	movs	r0, #10
 800c4e6:	f7fd fee3 	bl	800a2b0 <xQueueGenericCreateStatic>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	4a08      	ldr	r2, [pc, #32]	; (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c4f0:	4b07      	ldr	r3, [pc, #28]	; (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d005      	beq.n	800c504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4f8:	4b05      	ldr	r3, [pc, #20]	; (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	490b      	ldr	r1, [pc, #44]	; (800c52c <prvCheckForValidListAndQueue+0x7c>)
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe faf8 	bl	800aaf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c504:	f000 f98e 	bl	800c824 <vPortExitCritical>
}
 800c508:	bf00      	nop
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20001568 	.word	0x20001568
 800c514:	20001538 	.word	0x20001538
 800c518:	2000154c 	.word	0x2000154c
 800c51c:	20001560 	.word	0x20001560
 800c520:	20001564 	.word	0x20001564
 800c524:	20001614 	.word	0x20001614
 800c528:	20001574 	.word	0x20001574
 800c52c:	0800e398 	.word	0x0800e398

0800c530 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c530:	b580      	push	{r7, lr}
 800c532:	b08a      	sub	sp, #40	; 0x28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c53e:	f06f 0301 	mvn.w	r3, #1
 800c542:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c550:	4b06      	ldr	r3, [pc, #24]	; (800c56c <xTimerPendFunctionCallFromISR+0x3c>)
 800c552:	6818      	ldr	r0, [r3, #0]
 800c554:	f107 0114 	add.w	r1, r7, #20
 800c558:	2300      	movs	r3, #0
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	f7fe f83e 	bl	800a5dc <xQueueGenericSendFromISR>
 800c560:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c564:	4618      	mov	r0, r3
 800c566:	3728      	adds	r7, #40	; 0x28
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	20001568 	.word	0x20001568

0800c570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3b04      	subs	r3, #4
 800c580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	3b04      	subs	r3, #4
 800c58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f023 0201 	bic.w	r2, r3, #1
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3b04      	subs	r3, #4
 800c59e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5a0:	4a0c      	ldr	r2, [pc, #48]	; (800c5d4 <pxPortInitialiseStack+0x64>)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3b14      	subs	r3, #20
 800c5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3b04      	subs	r3, #4
 800c5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f06f 0202 	mvn.w	r2, #2
 800c5be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	3b20      	subs	r3, #32
 800c5c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr
 800c5d4:	0800c5d9 	.word	0x0800c5d9

0800c5d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5e2:	4b12      	ldr	r3, [pc, #72]	; (800c62c <prvTaskExitError+0x54>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ea:	d00a      	beq.n	800c602 <prvTaskExitError+0x2a>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	60fb      	str	r3, [r7, #12]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <prvTaskExitError+0x28>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	60bb      	str	r3, [r7, #8]
}
 800c614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c616:	bf00      	nop
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0fc      	beq.n	800c618 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c61e:	bf00      	nop
 800c620:	bf00      	nop
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	200000a0 	.word	0x200000a0

0800c630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c630:	4b07      	ldr	r3, [pc, #28]	; (800c650 <pxCurrentTCBConst2>)
 800c632:	6819      	ldr	r1, [r3, #0]
 800c634:	6808      	ldr	r0, [r1, #0]
 800c636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63a:	f380 8809 	msr	PSP, r0
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f04f 0000 	mov.w	r0, #0
 800c646:	f380 8811 	msr	BASEPRI, r0
 800c64a:	4770      	bx	lr
 800c64c:	f3af 8000 	nop.w

0800c650 <pxCurrentTCBConst2>:
 800c650:	20001404 	.word	0x20001404
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c654:	bf00      	nop
 800c656:	bf00      	nop

0800c658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c658:	4808      	ldr	r0, [pc, #32]	; (800c67c <prvPortStartFirstTask+0x24>)
 800c65a:	6800      	ldr	r0, [r0, #0]
 800c65c:	6800      	ldr	r0, [r0, #0]
 800c65e:	f380 8808 	msr	MSP, r0
 800c662:	f04f 0000 	mov.w	r0, #0
 800c666:	f380 8814 	msr	CONTROL, r0
 800c66a:	b662      	cpsie	i
 800c66c:	b661      	cpsie	f
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	df00      	svc	0
 800c678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c67a:	bf00      	nop
 800c67c:	e000ed08 	.word	0xe000ed08

0800c680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c686:	4b46      	ldr	r3, [pc, #280]	; (800c7a0 <xPortStartScheduler+0x120>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a46      	ldr	r2, [pc, #280]	; (800c7a4 <xPortStartScheduler+0x124>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d10a      	bne.n	800c6a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	613b      	str	r3, [r7, #16]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6a6:	4b3e      	ldr	r3, [pc, #248]	; (800c7a0 <xPortStartScheduler+0x120>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a3f      	ldr	r2, [pc, #252]	; (800c7a8 <xPortStartScheduler+0x128>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d10a      	bne.n	800c6c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	60fb      	str	r3, [r7, #12]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6c6:	4b39      	ldr	r3, [pc, #228]	; (800c7ac <xPortStartScheduler+0x12c>)
 800c6c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	22ff      	movs	r2, #255	; 0xff
 800c6d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6e0:	78fb      	ldrb	r3, [r7, #3]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	4b31      	ldr	r3, [pc, #196]	; (800c7b0 <xPortStartScheduler+0x130>)
 800c6ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6ee:	4b31      	ldr	r3, [pc, #196]	; (800c7b4 <xPortStartScheduler+0x134>)
 800c6f0:	2207      	movs	r2, #7
 800c6f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6f4:	e009      	b.n	800c70a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c6f6:	4b2f      	ldr	r3, [pc, #188]	; (800c7b4 <xPortStartScheduler+0x134>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	4a2d      	ldr	r2, [pc, #180]	; (800c7b4 <xPortStartScheduler+0x134>)
 800c6fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c700:	78fb      	ldrb	r3, [r7, #3]
 800c702:	b2db      	uxtb	r3, r3
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	b2db      	uxtb	r3, r3
 800c708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c70a:	78fb      	ldrb	r3, [r7, #3]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c712:	2b80      	cmp	r3, #128	; 0x80
 800c714:	d0ef      	beq.n	800c6f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c716:	4b27      	ldr	r3, [pc, #156]	; (800c7b4 <xPortStartScheduler+0x134>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f1c3 0307 	rsb	r3, r3, #7
 800c71e:	2b04      	cmp	r3, #4
 800c720:	d00a      	beq.n	800c738 <xPortStartScheduler+0xb8>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	60bb      	str	r3, [r7, #8]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c738:	4b1e      	ldr	r3, [pc, #120]	; (800c7b4 <xPortStartScheduler+0x134>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	021b      	lsls	r3, r3, #8
 800c73e:	4a1d      	ldr	r2, [pc, #116]	; (800c7b4 <xPortStartScheduler+0x134>)
 800c740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c742:	4b1c      	ldr	r3, [pc, #112]	; (800c7b4 <xPortStartScheduler+0x134>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c74a:	4a1a      	ldr	r2, [pc, #104]	; (800c7b4 <xPortStartScheduler+0x134>)
 800c74c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	b2da      	uxtb	r2, r3
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c756:	4b18      	ldr	r3, [pc, #96]	; (800c7b8 <xPortStartScheduler+0x138>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a17      	ldr	r2, [pc, #92]	; (800c7b8 <xPortStartScheduler+0x138>)
 800c75c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c762:	4b15      	ldr	r3, [pc, #84]	; (800c7b8 <xPortStartScheduler+0x138>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a14      	ldr	r2, [pc, #80]	; (800c7b8 <xPortStartScheduler+0x138>)
 800c768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c76c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c76e:	f000 f9a9 	bl	800cac4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c772:	4b12      	ldr	r3, [pc, #72]	; (800c7bc <xPortStartScheduler+0x13c>)
 800c774:	2200      	movs	r2, #0
 800c776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c778:	f000 f9e0 	bl	800cb3c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c77c:	4b10      	ldr	r3, [pc, #64]	; (800c7c0 <xPortStartScheduler+0x140>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a0f      	ldr	r2, [pc, #60]	; (800c7c0 <xPortStartScheduler+0x140>)
 800c782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c788:	f7ff ff66 	bl	800c658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c78c:	f7fe fec8 	bl	800b520 <vTaskSwitchContext>
	prvTaskExitError();
 800c790:	f7ff ff22 	bl	800c5d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	e000ed00 	.word	0xe000ed00
 800c7a4:	410fc271 	.word	0x410fc271
 800c7a8:	410fc270 	.word	0x410fc270
 800c7ac:	e000e400 	.word	0xe000e400
 800c7b0:	20001668 	.word	0x20001668
 800c7b4:	2000166c 	.word	0x2000166c
 800c7b8:	e000ed20 	.word	0xe000ed20
 800c7bc:	200000a0 	.word	0x200000a0
 800c7c0:	e000ef34 	.word	0xe000ef34

0800c7c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	607b      	str	r3, [r7, #4]
}
 800c7dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7de:	4b0f      	ldr	r3, [pc, #60]	; (800c81c <vPortEnterCritical+0x58>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	4a0d      	ldr	r2, [pc, #52]	; (800c81c <vPortEnterCritical+0x58>)
 800c7e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7e8:	4b0c      	ldr	r3, [pc, #48]	; (800c81c <vPortEnterCritical+0x58>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d10f      	bne.n	800c810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7f0:	4b0b      	ldr	r3, [pc, #44]	; (800c820 <vPortEnterCritical+0x5c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00a      	beq.n	800c810 <vPortEnterCritical+0x4c>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	603b      	str	r3, [r7, #0]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <vPortEnterCritical+0x4a>
	}
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr
 800c81c:	200000a0 	.word	0x200000a0
 800c820:	e000ed04 	.word	0xe000ed04

0800c824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c82a:	4b12      	ldr	r3, [pc, #72]	; (800c874 <vPortExitCritical+0x50>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10a      	bne.n	800c848 <vPortExitCritical+0x24>
	__asm volatile
 800c832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c836:	f383 8811 	msr	BASEPRI, r3
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	607b      	str	r3, [r7, #4]
}
 800c844:	bf00      	nop
 800c846:	e7fe      	b.n	800c846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c848:	4b0a      	ldr	r3, [pc, #40]	; (800c874 <vPortExitCritical+0x50>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	4a09      	ldr	r2, [pc, #36]	; (800c874 <vPortExitCritical+0x50>)
 800c850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c852:	4b08      	ldr	r3, [pc, #32]	; (800c874 <vPortExitCritical+0x50>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d105      	bne.n	800c866 <vPortExitCritical+0x42>
 800c85a:	2300      	movs	r3, #0
 800c85c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	f383 8811 	msr	BASEPRI, r3
}
 800c864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c866:	bf00      	nop
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	200000a0 	.word	0x200000a0
	...

0800c880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c880:	f3ef 8009 	mrs	r0, PSP
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <pxCurrentTCBConst>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	f01e 0f10 	tst.w	lr, #16
 800c890:	bf08      	it	eq
 800c892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89a:	6010      	str	r0, [r2, #0]
 800c89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c8a4:	f380 8811 	msr	BASEPRI, r0
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f7fe fe36 	bl	800b520 <vTaskSwitchContext>
 800c8b4:	f04f 0000 	mov.w	r0, #0
 800c8b8:	f380 8811 	msr	BASEPRI, r0
 800c8bc:	bc09      	pop	{r0, r3}
 800c8be:	6819      	ldr	r1, [r3, #0]
 800c8c0:	6808      	ldr	r0, [r1, #0]
 800c8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c6:	f01e 0f10 	tst.w	lr, #16
 800c8ca:	bf08      	it	eq
 800c8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8d0:	f380 8809 	msr	PSP, r0
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	f3af 8000 	nop.w

0800c8e0 <pxCurrentTCBConst>:
 800c8e0:	20001404 	.word	0x20001404
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop

0800c8e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	607b      	str	r3, [r7, #4]
}
 800c900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c902:	f7fe fd55 	bl	800b3b0 <xTaskIncrementTick>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d003      	beq.n	800c914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c90c:	4b06      	ldr	r3, [pc, #24]	; (800c928 <SysTick_Handler+0x40>)
 800c90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	2300      	movs	r3, #0
 800c916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	f383 8811 	msr	BASEPRI, r3
}
 800c91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	e000ed04 	.word	0xe000ed04

0800c92c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800c934:	4b5d      	ldr	r3, [pc, #372]	; (800caac <vPortSuppressTicksAndSleep+0x180>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d902      	bls.n	800c944 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800c93e:	4b5b      	ldr	r3, [pc, #364]	; (800caac <vPortSuppressTicksAndSleep+0x180>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800c944:	4b5a      	ldr	r3, [pc, #360]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a59      	ldr	r2, [pc, #356]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800c94a:	f023 0301 	bic.w	r3, r3, #1
 800c94e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800c950:	4b58      	ldr	r3, [pc, #352]	; (800cab4 <vPortSuppressTicksAndSleep+0x188>)
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3b01      	subs	r3, #1
 800c958:	4957      	ldr	r1, [pc, #348]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800c95a:	6809      	ldr	r1, [r1, #0]
 800c95c:	fb01 f303 	mul.w	r3, r1, r3
 800c960:	4413      	add	r3, r2
 800c962:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800c964:	4b55      	ldr	r3, [pc, #340]	; (800cabc <vPortSuppressTicksAndSleep+0x190>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	69fa      	ldr	r2, [r7, #28]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d904      	bls.n	800c978 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800c96e:	4b53      	ldr	r3, [pc, #332]	; (800cabc <vPortSuppressTicksAndSleep+0x190>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69fa      	ldr	r2, [r7, #28]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800c978:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800c97a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800c97e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800c982:	f7ff f875 	bl	800ba70 <eTaskConfirmSleepModeStatus>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d110      	bne.n	800c9ae <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c98c:	4b49      	ldr	r3, [pc, #292]	; (800cab4 <vPortSuppressTicksAndSleep+0x188>)
 800c98e:	4a4c      	ldr	r2, [pc, #304]	; (800cac0 <vPortSuppressTicksAndSleep+0x194>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c994:	4b46      	ldr	r3, [pc, #280]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a45      	ldr	r2, [pc, #276]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800c99a:	f043 0301 	orr.w	r3, r3, #1
 800c99e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c9a0:	4b45      	ldr	r3, [pc, #276]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a46      	ldr	r2, [pc, #280]	; (800cac0 <vPortSuppressTicksAndSleep+0x194>)
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800c9aa:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800c9ac:	e079      	b.n	800caa2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800c9ae:	4a44      	ldr	r2, [pc, #272]	; (800cac0 <vPortSuppressTicksAndSleep+0x194>)
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9b4:	4b3f      	ldr	r3, [pc, #252]	; (800cab4 <vPortSuppressTicksAndSleep+0x188>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c9ba:	4b3d      	ldr	r3, [pc, #244]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a3c      	ldr	r2, [pc, #240]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800c9c0:	f043 0301 	orr.w	r3, r3, #1
 800c9c4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	613b      	str	r3, [r7, #16]
 800c9ce:	6938      	ldr	r0, [r7, #16]
 800c9d0:	f7f8 fedb 	bl	800578a <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d004      	beq.n	800c9e4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800c9da:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800c9de:	bf30      	wfi
				__asm volatile( "isb" );
 800c9e0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7f8 feda 	bl	800579e <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800c9ea:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800c9ec:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c9f0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800c9f4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800c9f6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c9fa:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800c9fe:	4b2c      	ldr	r3, [pc, #176]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800ca00:	2206      	movs	r2, #6
 800ca02:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800ca04:	4b2a      	ldr	r3, [pc, #168]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01d      	beq.n	800ca4c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800ca10:	4b29      	ldr	r3, [pc, #164]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	4b27      	ldr	r3, [pc, #156]	; (800cab4 <vPortSuppressTicksAndSleep+0x188>)
 800ca16:	6819      	ldr	r1, [r3, #0]
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	1acb      	subs	r3, r1, r3
 800ca1c:	4413      	add	r3, r2
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800ca22:	4b26      	ldr	r3, [pc, #152]	; (800cabc <vPortSuppressTicksAndSleep+0x190>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d304      	bcc.n	800ca36 <vPortSuppressTicksAndSleep+0x10a>
 800ca2c:	4b22      	ldr	r3, [pc, #136]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d903      	bls.n	800ca3e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800ca36:	4b20      	ldr	r3, [pc, #128]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800ca3e:	4a20      	ldr	r2, [pc, #128]	; (800cac0 <vPortSuppressTicksAndSleep+0x194>)
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	61bb      	str	r3, [r7, #24]
 800ca4a:	e018      	b.n	800ca7e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ca4c:	4b1a      	ldr	r3, [pc, #104]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	fb03 f202 	mul.w	r2, r3, r2
 800ca56:	4b17      	ldr	r3, [pc, #92]	; (800cab4 <vPortSuppressTicksAndSleep+0x188>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800ca5e:	4b16      	ldr	r3, [pc, #88]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca68:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	4a12      	ldr	r2, [pc, #72]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800ca70:	6812      	ldr	r2, [r2, #0]
 800ca72:	fb03 f202 	mul.w	r2, r3, r2
 800ca76:	4912      	ldr	r1, [pc, #72]	; (800cac0 <vPortSuppressTicksAndSleep+0x194>)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca7e:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <vPortSuppressTicksAndSleep+0x188>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ca84:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a09      	ldr	r2, [pc, #36]	; (800cab0 <vPortSuppressTicksAndSleep+0x184>)
 800ca8a:	f043 0301 	orr.w	r3, r3, #1
 800ca8e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800ca90:	69b8      	ldr	r0, [r7, #24]
 800ca92:	f7fe fc65 	bl	800b360 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ca96:	4b08      	ldr	r3, [pc, #32]	; (800cab8 <vPortSuppressTicksAndSleep+0x18c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a09      	ldr	r2, [pc, #36]	; (800cac0 <vPortSuppressTicksAndSleep+0x194>)
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800caa0:	b662      	cpsie	i
	}
 800caa2:	bf00      	nop
 800caa4:	3720      	adds	r7, #32
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20001660 	.word	0x20001660
 800cab0:	e000e010 	.word	0xe000e010
 800cab4:	e000e018 	.word	0xe000e018
 800cab8:	2000165c 	.word	0x2000165c
 800cabc:	20001664 	.word	0x20001664
 800cac0:	e000e014 	.word	0xe000e014

0800cac4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cac4:	b480      	push	{r7}
 800cac6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800cac8:	4b14      	ldr	r3, [pc, #80]	; (800cb1c <vPortSetupTimerInterrupt+0x58>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a14      	ldr	r2, [pc, #80]	; (800cb20 <vPortSetupTimerInterrupt+0x5c>)
 800cace:	fba2 2303 	umull	r2, r3, r2, r3
 800cad2:	099b      	lsrs	r3, r3, #6
 800cad4:	4a13      	ldr	r2, [pc, #76]	; (800cb24 <vPortSetupTimerInterrupt+0x60>)
 800cad6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800cad8:	4b12      	ldr	r3, [pc, #72]	; (800cb24 <vPortSetupTimerInterrupt+0x60>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cae0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cae4:	4a10      	ldr	r2, [pc, #64]	; (800cb28 <vPortSetupTimerInterrupt+0x64>)
 800cae6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800cae8:	4b10      	ldr	r3, [pc, #64]	; (800cb2c <vPortSetupTimerInterrupt+0x68>)
 800caea:	222d      	movs	r2, #45	; 0x2d
 800caec:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800caee:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <vPortSetupTimerInterrupt+0x6c>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800caf4:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <vPortSetupTimerInterrupt+0x70>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cafa:	4b08      	ldr	r3, [pc, #32]	; (800cb1c <vPortSetupTimerInterrupt+0x58>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a08      	ldr	r2, [pc, #32]	; (800cb20 <vPortSetupTimerInterrupt+0x5c>)
 800cb00:	fba2 2303 	umull	r2, r3, r2, r3
 800cb04:	099b      	lsrs	r3, r3, #6
 800cb06:	4a0c      	ldr	r2, [pc, #48]	; (800cb38 <vPortSetupTimerInterrupt+0x74>)
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb0c:	4b08      	ldr	r3, [pc, #32]	; (800cb30 <vPortSetupTimerInterrupt+0x6c>)
 800cb0e:	2207      	movs	r2, #7
 800cb10:	601a      	str	r2, [r3, #0]
}
 800cb12:	bf00      	nop
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	20000094 	.word	0x20000094
 800cb20:	10624dd3 	.word	0x10624dd3
 800cb24:	2000165c 	.word	0x2000165c
 800cb28:	20001660 	.word	0x20001660
 800cb2c:	20001664 	.word	0x20001664
 800cb30:	e000e010 	.word	0xe000e010
 800cb34:	e000e018 	.word	0xe000e018
 800cb38:	e000e014 	.word	0xe000e014

0800cb3c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb3c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb4c <vPortEnableVFP+0x10>
 800cb40:	6801      	ldr	r1, [r0, #0]
 800cb42:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb46:	6001      	str	r1, [r0, #0]
 800cb48:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb4a:	bf00      	nop
 800cb4c:	e000ed88 	.word	0xe000ed88

0800cb50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb56:	f3ef 8305 	mrs	r3, IPSR
 800cb5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b0f      	cmp	r3, #15
 800cb60:	d914      	bls.n	800cb8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb62:	4a17      	ldr	r2, [pc, #92]	; (800cbc0 <vPortValidateInterruptPriority+0x70>)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4413      	add	r3, r2
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb6c:	4b15      	ldr	r3, [pc, #84]	; (800cbc4 <vPortValidateInterruptPriority+0x74>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	7afa      	ldrb	r2, [r7, #11]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d20a      	bcs.n	800cb8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	607b      	str	r3, [r7, #4]
}
 800cb88:	bf00      	nop
 800cb8a:	e7fe      	b.n	800cb8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb8c:	4b0e      	ldr	r3, [pc, #56]	; (800cbc8 <vPortValidateInterruptPriority+0x78>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb94:	4b0d      	ldr	r3, [pc, #52]	; (800cbcc <vPortValidateInterruptPriority+0x7c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d90a      	bls.n	800cbb2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	603b      	str	r3, [r7, #0]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <vPortValidateInterruptPriority+0x60>
	}
 800cbb2:	bf00      	nop
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	e000e3f0 	.word	0xe000e3f0
 800cbc4:	20001668 	.word	0x20001668
 800cbc8:	e000ed0c 	.word	0xe000ed0c
 800cbcc:	2000166c 	.word	0x2000166c

0800cbd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08a      	sub	sp, #40	; 0x28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbdc:	f7fe facc 	bl	800b178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbe0:	4b5b      	ldr	r3, [pc, #364]	; (800cd50 <pvPortMalloc+0x180>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbe8:	f000 f920 	bl	800ce2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbec:	4b59      	ldr	r3, [pc, #356]	; (800cd54 <pvPortMalloc+0x184>)
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f040 8093 	bne.w	800cd20 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d01d      	beq.n	800cc3c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc00:	2208      	movs	r2, #8
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f003 0307 	and.w	r3, r3, #7
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d014      	beq.n	800cc3c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f023 0307 	bic.w	r3, r3, #7
 800cc18:	3308      	adds	r3, #8
 800cc1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f003 0307 	and.w	r3, r3, #7
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00a      	beq.n	800cc3c <pvPortMalloc+0x6c>
	__asm volatile
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	617b      	str	r3, [r7, #20]
}
 800cc38:	bf00      	nop
 800cc3a:	e7fe      	b.n	800cc3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d06e      	beq.n	800cd20 <pvPortMalloc+0x150>
 800cc42:	4b45      	ldr	r3, [pc, #276]	; (800cd58 <pvPortMalloc+0x188>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d869      	bhi.n	800cd20 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc4c:	4b43      	ldr	r3, [pc, #268]	; (800cd5c <pvPortMalloc+0x18c>)
 800cc4e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc50:	4b42      	ldr	r3, [pc, #264]	; (800cd5c <pvPortMalloc+0x18c>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc56:	e004      	b.n	800cc62 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d903      	bls.n	800cc74 <pvPortMalloc+0xa4>
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1f1      	bne.n	800cc58 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc74:	4b36      	ldr	r3, [pc, #216]	; (800cd50 <pvPortMalloc+0x180>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d050      	beq.n	800cd20 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc7e:	6a3b      	ldr	r3, [r7, #32]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2208      	movs	r2, #8
 800cc84:	4413      	add	r3, r2
 800cc86:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
 800cc8e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	685a      	ldr	r2, [r3, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	1ad2      	subs	r2, r2, r3
 800cc98:	2308      	movs	r3, #8
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d91f      	bls.n	800cce0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4413      	add	r3, r2
 800cca6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	f003 0307 	and.w	r3, r3, #7
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00a      	beq.n	800ccc8 <pvPortMalloc+0xf8>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	613b      	str	r3, [r7, #16]
}
 800ccc4:	bf00      	nop
 800ccc6:	e7fe      	b.n	800ccc6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ccda:	69b8      	ldr	r0, [r7, #24]
 800ccdc:	f000 f908 	bl	800cef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cce0:	4b1d      	ldr	r3, [pc, #116]	; (800cd58 <pvPortMalloc+0x188>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	4a1b      	ldr	r2, [pc, #108]	; (800cd58 <pvPortMalloc+0x188>)
 800ccec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ccee:	4b1a      	ldr	r3, [pc, #104]	; (800cd58 <pvPortMalloc+0x188>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	4b1b      	ldr	r3, [pc, #108]	; (800cd60 <pvPortMalloc+0x190>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d203      	bcs.n	800cd02 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccfa:	4b17      	ldr	r3, [pc, #92]	; (800cd58 <pvPortMalloc+0x188>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a18      	ldr	r2, [pc, #96]	; (800cd60 <pvPortMalloc+0x190>)
 800cd00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	4b13      	ldr	r3, [pc, #76]	; (800cd54 <pvPortMalloc+0x184>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd16:	4b13      	ldr	r3, [pc, #76]	; (800cd64 <pvPortMalloc+0x194>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	4a11      	ldr	r2, [pc, #68]	; (800cd64 <pvPortMalloc+0x194>)
 800cd1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd20:	f7fe fa72 	bl	800b208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	f003 0307 	and.w	r3, r3, #7
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00a      	beq.n	800cd44 <pvPortMalloc+0x174>
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	60fb      	str	r3, [r7, #12]
}
 800cd40:	bf00      	nop
 800cd42:	e7fe      	b.n	800cd42 <pvPortMalloc+0x172>
	return pvReturn;
 800cd44:	69fb      	ldr	r3, [r7, #28]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3728      	adds	r7, #40	; 0x28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20005278 	.word	0x20005278
 800cd54:	2000528c 	.word	0x2000528c
 800cd58:	2000527c 	.word	0x2000527c
 800cd5c:	20005270 	.word	0x20005270
 800cd60:	20005280 	.word	0x20005280
 800cd64:	20005284 	.word	0x20005284

0800cd68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d04d      	beq.n	800ce16 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd7a:	2308      	movs	r3, #8
 800cd7c:	425b      	negs	r3, r3
 800cd7e:	697a      	ldr	r2, [r7, #20]
 800cd80:	4413      	add	r3, r2
 800cd82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	4b24      	ldr	r3, [pc, #144]	; (800ce20 <vPortFree+0xb8>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4013      	ands	r3, r2
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10a      	bne.n	800cdac <vPortFree+0x44>
	__asm volatile
 800cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	60fb      	str	r3, [r7, #12]
}
 800cda8:	bf00      	nop
 800cdaa:	e7fe      	b.n	800cdaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00a      	beq.n	800cdca <vPortFree+0x62>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	60bb      	str	r3, [r7, #8]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	685a      	ldr	r2, [r3, #4]
 800cdce:	4b14      	ldr	r3, [pc, #80]	; (800ce20 <vPortFree+0xb8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d01e      	beq.n	800ce16 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d11a      	bne.n	800ce16 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	4b0e      	ldr	r3, [pc, #56]	; (800ce20 <vPortFree+0xb8>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	43db      	mvns	r3, r3
 800cdea:	401a      	ands	r2, r3
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cdf0:	f7fe f9c2 	bl	800b178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	4b0a      	ldr	r3, [pc, #40]	; (800ce24 <vPortFree+0xbc>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	4a09      	ldr	r2, [pc, #36]	; (800ce24 <vPortFree+0xbc>)
 800ce00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce02:	6938      	ldr	r0, [r7, #16]
 800ce04:	f000 f874 	bl	800cef0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce08:	4b07      	ldr	r3, [pc, #28]	; (800ce28 <vPortFree+0xc0>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	4a06      	ldr	r2, [pc, #24]	; (800ce28 <vPortFree+0xc0>)
 800ce10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce12:	f7fe f9f9 	bl	800b208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce16:	bf00      	nop
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	2000528c 	.word	0x2000528c
 800ce24:	2000527c 	.word	0x2000527c
 800ce28:	20005288 	.word	0x20005288

0800ce2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ce36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce38:	4b27      	ldr	r3, [pc, #156]	; (800ced8 <prvHeapInit+0xac>)
 800ce3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00c      	beq.n	800ce60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3307      	adds	r3, #7
 800ce4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f023 0307 	bic.w	r3, r3, #7
 800ce52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	4a1f      	ldr	r2, [pc, #124]	; (800ced8 <prvHeapInit+0xac>)
 800ce5c:	4413      	add	r3, r2
 800ce5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce64:	4a1d      	ldr	r2, [pc, #116]	; (800cedc <prvHeapInit+0xb0>)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce6a:	4b1c      	ldr	r3, [pc, #112]	; (800cedc <prvHeapInit+0xb0>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	4413      	add	r3, r2
 800ce76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce78:	2208      	movs	r2, #8
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	1a9b      	subs	r3, r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f023 0307 	bic.w	r3, r3, #7
 800ce86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	4a15      	ldr	r2, [pc, #84]	; (800cee0 <prvHeapInit+0xb4>)
 800ce8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce8e:	4b14      	ldr	r3, [pc, #80]	; (800cee0 <prvHeapInit+0xb4>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2200      	movs	r2, #0
 800ce94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce96:	4b12      	ldr	r3, [pc, #72]	; (800cee0 <prvHeapInit+0xb4>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	1ad2      	subs	r2, r2, r3
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ceac:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <prvHeapInit+0xb4>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	4a0a      	ldr	r2, [pc, #40]	; (800cee4 <prvHeapInit+0xb8>)
 800ceba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	4a09      	ldr	r2, [pc, #36]	; (800cee8 <prvHeapInit+0xbc>)
 800cec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cec4:	4b09      	ldr	r3, [pc, #36]	; (800ceec <prvHeapInit+0xc0>)
 800cec6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ceca:	601a      	str	r2, [r3, #0]
}
 800cecc:	bf00      	nop
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr
 800ced8:	20001670 	.word	0x20001670
 800cedc:	20005270 	.word	0x20005270
 800cee0:	20005278 	.word	0x20005278
 800cee4:	20005280 	.word	0x20005280
 800cee8:	2000527c 	.word	0x2000527c
 800ceec:	2000528c 	.word	0x2000528c

0800cef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cef8:	4b28      	ldr	r3, [pc, #160]	; (800cf9c <prvInsertBlockIntoFreeList+0xac>)
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	e002      	b.n	800cf04 <prvInsertBlockIntoFreeList+0x14>
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	60fb      	str	r3, [r7, #12]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d8f7      	bhi.n	800cefe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	4413      	add	r3, r2
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d108      	bne.n	800cf32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	441a      	add	r2, r3
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	68ba      	ldr	r2, [r7, #8]
 800cf3c:	441a      	add	r2, r3
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d118      	bne.n	800cf78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	4b15      	ldr	r3, [pc, #84]	; (800cfa0 <prvInsertBlockIntoFreeList+0xb0>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d00d      	beq.n	800cf6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	685a      	ldr	r2, [r3, #4]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	441a      	add	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	601a      	str	r2, [r3, #0]
 800cf6c:	e008      	b.n	800cf80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf6e:	4b0c      	ldr	r3, [pc, #48]	; (800cfa0 <prvInsertBlockIntoFreeList+0xb0>)
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	e003      	b.n	800cf80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d002      	beq.n	800cf8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf8e:	bf00      	nop
 800cf90:	3714      	adds	r7, #20
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	20005270 	.word	0x20005270
 800cfa0:	20005278 	.word	0x20005278

0800cfa4 <__assert_func>:
 800cfa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfa6:	4614      	mov	r4, r2
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <__assert_func+0x2c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4605      	mov	r5, r0
 800cfb0:	68d8      	ldr	r0, [r3, #12]
 800cfb2:	b14c      	cbz	r4, 800cfc8 <__assert_func+0x24>
 800cfb4:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <__assert_func+0x30>)
 800cfb6:	9100      	str	r1, [sp, #0]
 800cfb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfbc:	4906      	ldr	r1, [pc, #24]	; (800cfd8 <__assert_func+0x34>)
 800cfbe:	462b      	mov	r3, r5
 800cfc0:	f000 f8ea 	bl	800d198 <fiprintf>
 800cfc4:	f000 fe7e 	bl	800dcc4 <abort>
 800cfc8:	4b04      	ldr	r3, [pc, #16]	; (800cfdc <__assert_func+0x38>)
 800cfca:	461c      	mov	r4, r3
 800cfcc:	e7f3      	b.n	800cfb6 <__assert_func+0x12>
 800cfce:	bf00      	nop
 800cfd0:	200000a4 	.word	0x200000a4
 800cfd4:	0800ebb8 	.word	0x0800ebb8
 800cfd8:	0800ebc5 	.word	0x0800ebc5
 800cfdc:	0800ebf3 	.word	0x0800ebf3

0800cfe0 <__errno>:
 800cfe0:	4b01      	ldr	r3, [pc, #4]	; (800cfe8 <__errno+0x8>)
 800cfe2:	6818      	ldr	r0, [r3, #0]
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	200000a4 	.word	0x200000a4

0800cfec <std>:
 800cfec:	2300      	movs	r3, #0
 800cfee:	b510      	push	{r4, lr}
 800cff0:	4604      	mov	r4, r0
 800cff2:	e9c0 3300 	strd	r3, r3, [r0]
 800cff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cffa:	6083      	str	r3, [r0, #8]
 800cffc:	8181      	strh	r1, [r0, #12]
 800cffe:	6643      	str	r3, [r0, #100]	; 0x64
 800d000:	81c2      	strh	r2, [r0, #14]
 800d002:	6183      	str	r3, [r0, #24]
 800d004:	4619      	mov	r1, r3
 800d006:	2208      	movs	r2, #8
 800d008:	305c      	adds	r0, #92	; 0x5c
 800d00a:	f000 f92c 	bl	800d266 <memset>
 800d00e:	4b05      	ldr	r3, [pc, #20]	; (800d024 <std+0x38>)
 800d010:	6263      	str	r3, [r4, #36]	; 0x24
 800d012:	4b05      	ldr	r3, [pc, #20]	; (800d028 <std+0x3c>)
 800d014:	62a3      	str	r3, [r4, #40]	; 0x28
 800d016:	4b05      	ldr	r3, [pc, #20]	; (800d02c <std+0x40>)
 800d018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d01a:	4b05      	ldr	r3, [pc, #20]	; (800d030 <std+0x44>)
 800d01c:	6224      	str	r4, [r4, #32]
 800d01e:	6323      	str	r3, [r4, #48]	; 0x30
 800d020:	bd10      	pop	{r4, pc}
 800d022:	bf00      	nop
 800d024:	0800da71 	.word	0x0800da71
 800d028:	0800da93 	.word	0x0800da93
 800d02c:	0800dacb 	.word	0x0800dacb
 800d030:	0800daef 	.word	0x0800daef

0800d034 <_cleanup_r>:
 800d034:	4901      	ldr	r1, [pc, #4]	; (800d03c <_cleanup_r+0x8>)
 800d036:	f000 b8c1 	b.w	800d1bc <_fwalk_reent>
 800d03a:	bf00      	nop
 800d03c:	0800de01 	.word	0x0800de01

0800d040 <__sfmoreglue>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	2268      	movs	r2, #104	; 0x68
 800d044:	1e4d      	subs	r5, r1, #1
 800d046:	4355      	muls	r5, r2
 800d048:	460e      	mov	r6, r1
 800d04a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d04e:	f000 f933 	bl	800d2b8 <_malloc_r>
 800d052:	4604      	mov	r4, r0
 800d054:	b140      	cbz	r0, 800d068 <__sfmoreglue+0x28>
 800d056:	2100      	movs	r1, #0
 800d058:	e9c0 1600 	strd	r1, r6, [r0]
 800d05c:	300c      	adds	r0, #12
 800d05e:	60a0      	str	r0, [r4, #8]
 800d060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d064:	f000 f8ff 	bl	800d266 <memset>
 800d068:	4620      	mov	r0, r4
 800d06a:	bd70      	pop	{r4, r5, r6, pc}

0800d06c <__sfp_lock_acquire>:
 800d06c:	4801      	ldr	r0, [pc, #4]	; (800d074 <__sfp_lock_acquire+0x8>)
 800d06e:	f000 b8ea 	b.w	800d246 <__retarget_lock_acquire_recursive>
 800d072:	bf00      	nop
 800d074:	20005291 	.word	0x20005291

0800d078 <__sfp_lock_release>:
 800d078:	4801      	ldr	r0, [pc, #4]	; (800d080 <__sfp_lock_release+0x8>)
 800d07a:	f000 b8e5 	b.w	800d248 <__retarget_lock_release_recursive>
 800d07e:	bf00      	nop
 800d080:	20005291 	.word	0x20005291

0800d084 <__sinit_lock_acquire>:
 800d084:	4801      	ldr	r0, [pc, #4]	; (800d08c <__sinit_lock_acquire+0x8>)
 800d086:	f000 b8de 	b.w	800d246 <__retarget_lock_acquire_recursive>
 800d08a:	bf00      	nop
 800d08c:	20005292 	.word	0x20005292

0800d090 <__sinit_lock_release>:
 800d090:	4801      	ldr	r0, [pc, #4]	; (800d098 <__sinit_lock_release+0x8>)
 800d092:	f000 b8d9 	b.w	800d248 <__retarget_lock_release_recursive>
 800d096:	bf00      	nop
 800d098:	20005292 	.word	0x20005292

0800d09c <__sinit>:
 800d09c:	b510      	push	{r4, lr}
 800d09e:	4604      	mov	r4, r0
 800d0a0:	f7ff fff0 	bl	800d084 <__sinit_lock_acquire>
 800d0a4:	69a3      	ldr	r3, [r4, #24]
 800d0a6:	b11b      	cbz	r3, 800d0b0 <__sinit+0x14>
 800d0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ac:	f7ff bff0 	b.w	800d090 <__sinit_lock_release>
 800d0b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d0b4:	6523      	str	r3, [r4, #80]	; 0x50
 800d0b6:	4b13      	ldr	r3, [pc, #76]	; (800d104 <__sinit+0x68>)
 800d0b8:	4a13      	ldr	r2, [pc, #76]	; (800d108 <__sinit+0x6c>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d0be:	42a3      	cmp	r3, r4
 800d0c0:	bf04      	itt	eq
 800d0c2:	2301      	moveq	r3, #1
 800d0c4:	61a3      	streq	r3, [r4, #24]
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f000 f820 	bl	800d10c <__sfp>
 800d0cc:	6060      	str	r0, [r4, #4]
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f000 f81c 	bl	800d10c <__sfp>
 800d0d4:	60a0      	str	r0, [r4, #8]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f000 f818 	bl	800d10c <__sfp>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	60e0      	str	r0, [r4, #12]
 800d0e0:	2104      	movs	r1, #4
 800d0e2:	6860      	ldr	r0, [r4, #4]
 800d0e4:	f7ff ff82 	bl	800cfec <std>
 800d0e8:	68a0      	ldr	r0, [r4, #8]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	2109      	movs	r1, #9
 800d0ee:	f7ff ff7d 	bl	800cfec <std>
 800d0f2:	68e0      	ldr	r0, [r4, #12]
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	2112      	movs	r1, #18
 800d0f8:	f7ff ff78 	bl	800cfec <std>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	61a3      	str	r3, [r4, #24]
 800d100:	e7d2      	b.n	800d0a8 <__sinit+0xc>
 800d102:	bf00      	nop
 800d104:	0800ec54 	.word	0x0800ec54
 800d108:	0800d035 	.word	0x0800d035

0800d10c <__sfp>:
 800d10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10e:	4607      	mov	r7, r0
 800d110:	f7ff ffac 	bl	800d06c <__sfp_lock_acquire>
 800d114:	4b1e      	ldr	r3, [pc, #120]	; (800d190 <__sfp+0x84>)
 800d116:	681e      	ldr	r6, [r3, #0]
 800d118:	69b3      	ldr	r3, [r6, #24]
 800d11a:	b913      	cbnz	r3, 800d122 <__sfp+0x16>
 800d11c:	4630      	mov	r0, r6
 800d11e:	f7ff ffbd 	bl	800d09c <__sinit>
 800d122:	3648      	adds	r6, #72	; 0x48
 800d124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d128:	3b01      	subs	r3, #1
 800d12a:	d503      	bpl.n	800d134 <__sfp+0x28>
 800d12c:	6833      	ldr	r3, [r6, #0]
 800d12e:	b30b      	cbz	r3, 800d174 <__sfp+0x68>
 800d130:	6836      	ldr	r6, [r6, #0]
 800d132:	e7f7      	b.n	800d124 <__sfp+0x18>
 800d134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d138:	b9d5      	cbnz	r5, 800d170 <__sfp+0x64>
 800d13a:	4b16      	ldr	r3, [pc, #88]	; (800d194 <__sfp+0x88>)
 800d13c:	60e3      	str	r3, [r4, #12]
 800d13e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d142:	6665      	str	r5, [r4, #100]	; 0x64
 800d144:	f000 f87e 	bl	800d244 <__retarget_lock_init_recursive>
 800d148:	f7ff ff96 	bl	800d078 <__sfp_lock_release>
 800d14c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d154:	6025      	str	r5, [r4, #0]
 800d156:	61a5      	str	r5, [r4, #24]
 800d158:	2208      	movs	r2, #8
 800d15a:	4629      	mov	r1, r5
 800d15c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d160:	f000 f881 	bl	800d266 <memset>
 800d164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d16c:	4620      	mov	r0, r4
 800d16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d170:	3468      	adds	r4, #104	; 0x68
 800d172:	e7d9      	b.n	800d128 <__sfp+0x1c>
 800d174:	2104      	movs	r1, #4
 800d176:	4638      	mov	r0, r7
 800d178:	f7ff ff62 	bl	800d040 <__sfmoreglue>
 800d17c:	4604      	mov	r4, r0
 800d17e:	6030      	str	r0, [r6, #0]
 800d180:	2800      	cmp	r0, #0
 800d182:	d1d5      	bne.n	800d130 <__sfp+0x24>
 800d184:	f7ff ff78 	bl	800d078 <__sfp_lock_release>
 800d188:	230c      	movs	r3, #12
 800d18a:	603b      	str	r3, [r7, #0]
 800d18c:	e7ee      	b.n	800d16c <__sfp+0x60>
 800d18e:	bf00      	nop
 800d190:	0800ec54 	.word	0x0800ec54
 800d194:	ffff0001 	.word	0xffff0001

0800d198 <fiprintf>:
 800d198:	b40e      	push	{r1, r2, r3}
 800d19a:	b503      	push	{r0, r1, lr}
 800d19c:	4601      	mov	r1, r0
 800d19e:	ab03      	add	r3, sp, #12
 800d1a0:	4805      	ldr	r0, [pc, #20]	; (800d1b8 <fiprintf+0x20>)
 800d1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1a6:	6800      	ldr	r0, [r0, #0]
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	f000 f923 	bl	800d3f4 <_vfiprintf_r>
 800d1ae:	b002      	add	sp, #8
 800d1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1b4:	b003      	add	sp, #12
 800d1b6:	4770      	bx	lr
 800d1b8:	200000a4 	.word	0x200000a4

0800d1bc <_fwalk_reent>:
 800d1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	4688      	mov	r8, r1
 800d1c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1c8:	2700      	movs	r7, #0
 800d1ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1ce:	f1b9 0901 	subs.w	r9, r9, #1
 800d1d2:	d505      	bpl.n	800d1e0 <_fwalk_reent+0x24>
 800d1d4:	6824      	ldr	r4, [r4, #0]
 800d1d6:	2c00      	cmp	r4, #0
 800d1d8:	d1f7      	bne.n	800d1ca <_fwalk_reent+0xe>
 800d1da:	4638      	mov	r0, r7
 800d1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1e0:	89ab      	ldrh	r3, [r5, #12]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d907      	bls.n	800d1f6 <_fwalk_reent+0x3a>
 800d1e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	d003      	beq.n	800d1f6 <_fwalk_reent+0x3a>
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	47c0      	blx	r8
 800d1f4:	4307      	orrs	r7, r0
 800d1f6:	3568      	adds	r5, #104	; 0x68
 800d1f8:	e7e9      	b.n	800d1ce <_fwalk_reent+0x12>
	...

0800d1fc <__libc_init_array>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	4d0d      	ldr	r5, [pc, #52]	; (800d234 <__libc_init_array+0x38>)
 800d200:	4c0d      	ldr	r4, [pc, #52]	; (800d238 <__libc_init_array+0x3c>)
 800d202:	1b64      	subs	r4, r4, r5
 800d204:	10a4      	asrs	r4, r4, #2
 800d206:	2600      	movs	r6, #0
 800d208:	42a6      	cmp	r6, r4
 800d20a:	d109      	bne.n	800d220 <__libc_init_array+0x24>
 800d20c:	4d0b      	ldr	r5, [pc, #44]	; (800d23c <__libc_init_array+0x40>)
 800d20e:	4c0c      	ldr	r4, [pc, #48]	; (800d240 <__libc_init_array+0x44>)
 800d210:	f000 ff7a 	bl	800e108 <_init>
 800d214:	1b64      	subs	r4, r4, r5
 800d216:	10a4      	asrs	r4, r4, #2
 800d218:	2600      	movs	r6, #0
 800d21a:	42a6      	cmp	r6, r4
 800d21c:	d105      	bne.n	800d22a <__libc_init_array+0x2e>
 800d21e:	bd70      	pop	{r4, r5, r6, pc}
 800d220:	f855 3b04 	ldr.w	r3, [r5], #4
 800d224:	4798      	blx	r3
 800d226:	3601      	adds	r6, #1
 800d228:	e7ee      	b.n	800d208 <__libc_init_array+0xc>
 800d22a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d22e:	4798      	blx	r3
 800d230:	3601      	adds	r6, #1
 800d232:	e7f2      	b.n	800d21a <__libc_init_array+0x1e>
 800d234:	0800ec94 	.word	0x0800ec94
 800d238:	0800ec94 	.word	0x0800ec94
 800d23c:	0800ec94 	.word	0x0800ec94
 800d240:	0800ec98 	.word	0x0800ec98

0800d244 <__retarget_lock_init_recursive>:
 800d244:	4770      	bx	lr

0800d246 <__retarget_lock_acquire_recursive>:
 800d246:	4770      	bx	lr

0800d248 <__retarget_lock_release_recursive>:
 800d248:	4770      	bx	lr

0800d24a <memcpy>:
 800d24a:	440a      	add	r2, r1
 800d24c:	4291      	cmp	r1, r2
 800d24e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d252:	d100      	bne.n	800d256 <memcpy+0xc>
 800d254:	4770      	bx	lr
 800d256:	b510      	push	{r4, lr}
 800d258:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d25c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d260:	4291      	cmp	r1, r2
 800d262:	d1f9      	bne.n	800d258 <memcpy+0xe>
 800d264:	bd10      	pop	{r4, pc}

0800d266 <memset>:
 800d266:	4402      	add	r2, r0
 800d268:	4603      	mov	r3, r0
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d100      	bne.n	800d270 <memset+0xa>
 800d26e:	4770      	bx	lr
 800d270:	f803 1b01 	strb.w	r1, [r3], #1
 800d274:	e7f9      	b.n	800d26a <memset+0x4>
	...

0800d278 <sbrk_aligned>:
 800d278:	b570      	push	{r4, r5, r6, lr}
 800d27a:	4e0e      	ldr	r6, [pc, #56]	; (800d2b4 <sbrk_aligned+0x3c>)
 800d27c:	460c      	mov	r4, r1
 800d27e:	6831      	ldr	r1, [r6, #0]
 800d280:	4605      	mov	r5, r0
 800d282:	b911      	cbnz	r1, 800d28a <sbrk_aligned+0x12>
 800d284:	f000 fbe4 	bl	800da50 <_sbrk_r>
 800d288:	6030      	str	r0, [r6, #0]
 800d28a:	4621      	mov	r1, r4
 800d28c:	4628      	mov	r0, r5
 800d28e:	f000 fbdf 	bl	800da50 <_sbrk_r>
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	d00a      	beq.n	800d2ac <sbrk_aligned+0x34>
 800d296:	1cc4      	adds	r4, r0, #3
 800d298:	f024 0403 	bic.w	r4, r4, #3
 800d29c:	42a0      	cmp	r0, r4
 800d29e:	d007      	beq.n	800d2b0 <sbrk_aligned+0x38>
 800d2a0:	1a21      	subs	r1, r4, r0
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 fbd4 	bl	800da50 <_sbrk_r>
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	d101      	bne.n	800d2b0 <sbrk_aligned+0x38>
 800d2ac:	f04f 34ff 	mov.w	r4, #4294967295
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	bd70      	pop	{r4, r5, r6, pc}
 800d2b4:	20005298 	.word	0x20005298

0800d2b8 <_malloc_r>:
 800d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2bc:	1ccd      	adds	r5, r1, #3
 800d2be:	f025 0503 	bic.w	r5, r5, #3
 800d2c2:	3508      	adds	r5, #8
 800d2c4:	2d0c      	cmp	r5, #12
 800d2c6:	bf38      	it	cc
 800d2c8:	250c      	movcc	r5, #12
 800d2ca:	2d00      	cmp	r5, #0
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	db01      	blt.n	800d2d4 <_malloc_r+0x1c>
 800d2d0:	42a9      	cmp	r1, r5
 800d2d2:	d905      	bls.n	800d2e0 <_malloc_r+0x28>
 800d2d4:	230c      	movs	r3, #12
 800d2d6:	603b      	str	r3, [r7, #0]
 800d2d8:	2600      	movs	r6, #0
 800d2da:	4630      	mov	r0, r6
 800d2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e0:	4e2e      	ldr	r6, [pc, #184]	; (800d39c <_malloc_r+0xe4>)
 800d2e2:	f000 fe41 	bl	800df68 <__malloc_lock>
 800d2e6:	6833      	ldr	r3, [r6, #0]
 800d2e8:	461c      	mov	r4, r3
 800d2ea:	bb34      	cbnz	r4, 800d33a <_malloc_r+0x82>
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	f7ff ffc2 	bl	800d278 <sbrk_aligned>
 800d2f4:	1c43      	adds	r3, r0, #1
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	d14d      	bne.n	800d396 <_malloc_r+0xde>
 800d2fa:	6834      	ldr	r4, [r6, #0]
 800d2fc:	4626      	mov	r6, r4
 800d2fe:	2e00      	cmp	r6, #0
 800d300:	d140      	bne.n	800d384 <_malloc_r+0xcc>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	4631      	mov	r1, r6
 800d306:	4638      	mov	r0, r7
 800d308:	eb04 0803 	add.w	r8, r4, r3
 800d30c:	f000 fba0 	bl	800da50 <_sbrk_r>
 800d310:	4580      	cmp	r8, r0
 800d312:	d13a      	bne.n	800d38a <_malloc_r+0xd2>
 800d314:	6821      	ldr	r1, [r4, #0]
 800d316:	3503      	adds	r5, #3
 800d318:	1a6d      	subs	r5, r5, r1
 800d31a:	f025 0503 	bic.w	r5, r5, #3
 800d31e:	3508      	adds	r5, #8
 800d320:	2d0c      	cmp	r5, #12
 800d322:	bf38      	it	cc
 800d324:	250c      	movcc	r5, #12
 800d326:	4629      	mov	r1, r5
 800d328:	4638      	mov	r0, r7
 800d32a:	f7ff ffa5 	bl	800d278 <sbrk_aligned>
 800d32e:	3001      	adds	r0, #1
 800d330:	d02b      	beq.n	800d38a <_malloc_r+0xd2>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	442b      	add	r3, r5
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	e00e      	b.n	800d358 <_malloc_r+0xa0>
 800d33a:	6822      	ldr	r2, [r4, #0]
 800d33c:	1b52      	subs	r2, r2, r5
 800d33e:	d41e      	bmi.n	800d37e <_malloc_r+0xc6>
 800d340:	2a0b      	cmp	r2, #11
 800d342:	d916      	bls.n	800d372 <_malloc_r+0xba>
 800d344:	1961      	adds	r1, r4, r5
 800d346:	42a3      	cmp	r3, r4
 800d348:	6025      	str	r5, [r4, #0]
 800d34a:	bf18      	it	ne
 800d34c:	6059      	strne	r1, [r3, #4]
 800d34e:	6863      	ldr	r3, [r4, #4]
 800d350:	bf08      	it	eq
 800d352:	6031      	streq	r1, [r6, #0]
 800d354:	5162      	str	r2, [r4, r5]
 800d356:	604b      	str	r3, [r1, #4]
 800d358:	4638      	mov	r0, r7
 800d35a:	f104 060b 	add.w	r6, r4, #11
 800d35e:	f000 fe09 	bl	800df74 <__malloc_unlock>
 800d362:	f026 0607 	bic.w	r6, r6, #7
 800d366:	1d23      	adds	r3, r4, #4
 800d368:	1af2      	subs	r2, r6, r3
 800d36a:	d0b6      	beq.n	800d2da <_malloc_r+0x22>
 800d36c:	1b9b      	subs	r3, r3, r6
 800d36e:	50a3      	str	r3, [r4, r2]
 800d370:	e7b3      	b.n	800d2da <_malloc_r+0x22>
 800d372:	6862      	ldr	r2, [r4, #4]
 800d374:	42a3      	cmp	r3, r4
 800d376:	bf0c      	ite	eq
 800d378:	6032      	streq	r2, [r6, #0]
 800d37a:	605a      	strne	r2, [r3, #4]
 800d37c:	e7ec      	b.n	800d358 <_malloc_r+0xa0>
 800d37e:	4623      	mov	r3, r4
 800d380:	6864      	ldr	r4, [r4, #4]
 800d382:	e7b2      	b.n	800d2ea <_malloc_r+0x32>
 800d384:	4634      	mov	r4, r6
 800d386:	6876      	ldr	r6, [r6, #4]
 800d388:	e7b9      	b.n	800d2fe <_malloc_r+0x46>
 800d38a:	230c      	movs	r3, #12
 800d38c:	603b      	str	r3, [r7, #0]
 800d38e:	4638      	mov	r0, r7
 800d390:	f000 fdf0 	bl	800df74 <__malloc_unlock>
 800d394:	e7a1      	b.n	800d2da <_malloc_r+0x22>
 800d396:	6025      	str	r5, [r4, #0]
 800d398:	e7de      	b.n	800d358 <_malloc_r+0xa0>
 800d39a:	bf00      	nop
 800d39c:	20005294 	.word	0x20005294

0800d3a0 <__sfputc_r>:
 800d3a0:	6893      	ldr	r3, [r2, #8]
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	b410      	push	{r4}
 800d3a8:	6093      	str	r3, [r2, #8]
 800d3aa:	da08      	bge.n	800d3be <__sfputc_r+0x1e>
 800d3ac:	6994      	ldr	r4, [r2, #24]
 800d3ae:	42a3      	cmp	r3, r4
 800d3b0:	db01      	blt.n	800d3b6 <__sfputc_r+0x16>
 800d3b2:	290a      	cmp	r1, #10
 800d3b4:	d103      	bne.n	800d3be <__sfputc_r+0x1e>
 800d3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3ba:	f000 bbb1 	b.w	800db20 <__swbuf_r>
 800d3be:	6813      	ldr	r3, [r2, #0]
 800d3c0:	1c58      	adds	r0, r3, #1
 800d3c2:	6010      	str	r0, [r2, #0]
 800d3c4:	7019      	strb	r1, [r3, #0]
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3cc:	4770      	bx	lr

0800d3ce <__sfputs_r>:
 800d3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d0:	4606      	mov	r6, r0
 800d3d2:	460f      	mov	r7, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	18d5      	adds	r5, r2, r3
 800d3d8:	42ac      	cmp	r4, r5
 800d3da:	d101      	bne.n	800d3e0 <__sfputs_r+0x12>
 800d3dc:	2000      	movs	r0, #0
 800d3de:	e007      	b.n	800d3f0 <__sfputs_r+0x22>
 800d3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e4:	463a      	mov	r2, r7
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f7ff ffda 	bl	800d3a0 <__sfputc_r>
 800d3ec:	1c43      	adds	r3, r0, #1
 800d3ee:	d1f3      	bne.n	800d3d8 <__sfputs_r+0xa>
 800d3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3f4 <_vfiprintf_r>:
 800d3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f8:	460d      	mov	r5, r1
 800d3fa:	b09d      	sub	sp, #116	; 0x74
 800d3fc:	4614      	mov	r4, r2
 800d3fe:	4698      	mov	r8, r3
 800d400:	4606      	mov	r6, r0
 800d402:	b118      	cbz	r0, 800d40c <_vfiprintf_r+0x18>
 800d404:	6983      	ldr	r3, [r0, #24]
 800d406:	b90b      	cbnz	r3, 800d40c <_vfiprintf_r+0x18>
 800d408:	f7ff fe48 	bl	800d09c <__sinit>
 800d40c:	4b89      	ldr	r3, [pc, #548]	; (800d634 <_vfiprintf_r+0x240>)
 800d40e:	429d      	cmp	r5, r3
 800d410:	d11b      	bne.n	800d44a <_vfiprintf_r+0x56>
 800d412:	6875      	ldr	r5, [r6, #4]
 800d414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d416:	07d9      	lsls	r1, r3, #31
 800d418:	d405      	bmi.n	800d426 <_vfiprintf_r+0x32>
 800d41a:	89ab      	ldrh	r3, [r5, #12]
 800d41c:	059a      	lsls	r2, r3, #22
 800d41e:	d402      	bmi.n	800d426 <_vfiprintf_r+0x32>
 800d420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d422:	f7ff ff10 	bl	800d246 <__retarget_lock_acquire_recursive>
 800d426:	89ab      	ldrh	r3, [r5, #12]
 800d428:	071b      	lsls	r3, r3, #28
 800d42a:	d501      	bpl.n	800d430 <_vfiprintf_r+0x3c>
 800d42c:	692b      	ldr	r3, [r5, #16]
 800d42e:	b9eb      	cbnz	r3, 800d46c <_vfiprintf_r+0x78>
 800d430:	4629      	mov	r1, r5
 800d432:	4630      	mov	r0, r6
 800d434:	f000 fbd8 	bl	800dbe8 <__swsetup_r>
 800d438:	b1c0      	cbz	r0, 800d46c <_vfiprintf_r+0x78>
 800d43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d43c:	07dc      	lsls	r4, r3, #31
 800d43e:	d50e      	bpl.n	800d45e <_vfiprintf_r+0x6a>
 800d440:	f04f 30ff 	mov.w	r0, #4294967295
 800d444:	b01d      	add	sp, #116	; 0x74
 800d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44a:	4b7b      	ldr	r3, [pc, #492]	; (800d638 <_vfiprintf_r+0x244>)
 800d44c:	429d      	cmp	r5, r3
 800d44e:	d101      	bne.n	800d454 <_vfiprintf_r+0x60>
 800d450:	68b5      	ldr	r5, [r6, #8]
 800d452:	e7df      	b.n	800d414 <_vfiprintf_r+0x20>
 800d454:	4b79      	ldr	r3, [pc, #484]	; (800d63c <_vfiprintf_r+0x248>)
 800d456:	429d      	cmp	r5, r3
 800d458:	bf08      	it	eq
 800d45a:	68f5      	ldreq	r5, [r6, #12]
 800d45c:	e7da      	b.n	800d414 <_vfiprintf_r+0x20>
 800d45e:	89ab      	ldrh	r3, [r5, #12]
 800d460:	0598      	lsls	r0, r3, #22
 800d462:	d4ed      	bmi.n	800d440 <_vfiprintf_r+0x4c>
 800d464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d466:	f7ff feef 	bl	800d248 <__retarget_lock_release_recursive>
 800d46a:	e7e9      	b.n	800d440 <_vfiprintf_r+0x4c>
 800d46c:	2300      	movs	r3, #0
 800d46e:	9309      	str	r3, [sp, #36]	; 0x24
 800d470:	2320      	movs	r3, #32
 800d472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d476:	f8cd 800c 	str.w	r8, [sp, #12]
 800d47a:	2330      	movs	r3, #48	; 0x30
 800d47c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d640 <_vfiprintf_r+0x24c>
 800d480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d484:	f04f 0901 	mov.w	r9, #1
 800d488:	4623      	mov	r3, r4
 800d48a:	469a      	mov	sl, r3
 800d48c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d490:	b10a      	cbz	r2, 800d496 <_vfiprintf_r+0xa2>
 800d492:	2a25      	cmp	r2, #37	; 0x25
 800d494:	d1f9      	bne.n	800d48a <_vfiprintf_r+0x96>
 800d496:	ebba 0b04 	subs.w	fp, sl, r4
 800d49a:	d00b      	beq.n	800d4b4 <_vfiprintf_r+0xc0>
 800d49c:	465b      	mov	r3, fp
 800d49e:	4622      	mov	r2, r4
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f7ff ff93 	bl	800d3ce <__sfputs_r>
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	f000 80aa 	beq.w	800d602 <_vfiprintf_r+0x20e>
 800d4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4b0:	445a      	add	r2, fp
 800d4b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d4b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f000 80a2 	beq.w	800d602 <_vfiprintf_r+0x20e>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c8:	f10a 0a01 	add.w	sl, sl, #1
 800d4cc:	9304      	str	r3, [sp, #16]
 800d4ce:	9307      	str	r3, [sp, #28]
 800d4d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4d4:	931a      	str	r3, [sp, #104]	; 0x68
 800d4d6:	4654      	mov	r4, sl
 800d4d8:	2205      	movs	r2, #5
 800d4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4de:	4858      	ldr	r0, [pc, #352]	; (800d640 <_vfiprintf_r+0x24c>)
 800d4e0:	f7f2 fe7e 	bl	80001e0 <memchr>
 800d4e4:	9a04      	ldr	r2, [sp, #16]
 800d4e6:	b9d8      	cbnz	r0, 800d520 <_vfiprintf_r+0x12c>
 800d4e8:	06d1      	lsls	r1, r2, #27
 800d4ea:	bf44      	itt	mi
 800d4ec:	2320      	movmi	r3, #32
 800d4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4f2:	0713      	lsls	r3, r2, #28
 800d4f4:	bf44      	itt	mi
 800d4f6:	232b      	movmi	r3, #43	; 0x2b
 800d4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d500:	2b2a      	cmp	r3, #42	; 0x2a
 800d502:	d015      	beq.n	800d530 <_vfiprintf_r+0x13c>
 800d504:	9a07      	ldr	r2, [sp, #28]
 800d506:	4654      	mov	r4, sl
 800d508:	2000      	movs	r0, #0
 800d50a:	f04f 0c0a 	mov.w	ip, #10
 800d50e:	4621      	mov	r1, r4
 800d510:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d514:	3b30      	subs	r3, #48	; 0x30
 800d516:	2b09      	cmp	r3, #9
 800d518:	d94e      	bls.n	800d5b8 <_vfiprintf_r+0x1c4>
 800d51a:	b1b0      	cbz	r0, 800d54a <_vfiprintf_r+0x156>
 800d51c:	9207      	str	r2, [sp, #28]
 800d51e:	e014      	b.n	800d54a <_vfiprintf_r+0x156>
 800d520:	eba0 0308 	sub.w	r3, r0, r8
 800d524:	fa09 f303 	lsl.w	r3, r9, r3
 800d528:	4313      	orrs	r3, r2
 800d52a:	9304      	str	r3, [sp, #16]
 800d52c:	46a2      	mov	sl, r4
 800d52e:	e7d2      	b.n	800d4d6 <_vfiprintf_r+0xe2>
 800d530:	9b03      	ldr	r3, [sp, #12]
 800d532:	1d19      	adds	r1, r3, #4
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	9103      	str	r1, [sp, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	bfbb      	ittet	lt
 800d53c:	425b      	neglt	r3, r3
 800d53e:	f042 0202 	orrlt.w	r2, r2, #2
 800d542:	9307      	strge	r3, [sp, #28]
 800d544:	9307      	strlt	r3, [sp, #28]
 800d546:	bfb8      	it	lt
 800d548:	9204      	strlt	r2, [sp, #16]
 800d54a:	7823      	ldrb	r3, [r4, #0]
 800d54c:	2b2e      	cmp	r3, #46	; 0x2e
 800d54e:	d10c      	bne.n	800d56a <_vfiprintf_r+0x176>
 800d550:	7863      	ldrb	r3, [r4, #1]
 800d552:	2b2a      	cmp	r3, #42	; 0x2a
 800d554:	d135      	bne.n	800d5c2 <_vfiprintf_r+0x1ce>
 800d556:	9b03      	ldr	r3, [sp, #12]
 800d558:	1d1a      	adds	r2, r3, #4
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	9203      	str	r2, [sp, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	bfb8      	it	lt
 800d562:	f04f 33ff 	movlt.w	r3, #4294967295
 800d566:	3402      	adds	r4, #2
 800d568:	9305      	str	r3, [sp, #20]
 800d56a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d650 <_vfiprintf_r+0x25c>
 800d56e:	7821      	ldrb	r1, [r4, #0]
 800d570:	2203      	movs	r2, #3
 800d572:	4650      	mov	r0, sl
 800d574:	f7f2 fe34 	bl	80001e0 <memchr>
 800d578:	b140      	cbz	r0, 800d58c <_vfiprintf_r+0x198>
 800d57a:	2340      	movs	r3, #64	; 0x40
 800d57c:	eba0 000a 	sub.w	r0, r0, sl
 800d580:	fa03 f000 	lsl.w	r0, r3, r0
 800d584:	9b04      	ldr	r3, [sp, #16]
 800d586:	4303      	orrs	r3, r0
 800d588:	3401      	adds	r4, #1
 800d58a:	9304      	str	r3, [sp, #16]
 800d58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d590:	482c      	ldr	r0, [pc, #176]	; (800d644 <_vfiprintf_r+0x250>)
 800d592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d596:	2206      	movs	r2, #6
 800d598:	f7f2 fe22 	bl	80001e0 <memchr>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d03f      	beq.n	800d620 <_vfiprintf_r+0x22c>
 800d5a0:	4b29      	ldr	r3, [pc, #164]	; (800d648 <_vfiprintf_r+0x254>)
 800d5a2:	bb1b      	cbnz	r3, 800d5ec <_vfiprintf_r+0x1f8>
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	3307      	adds	r3, #7
 800d5a8:	f023 0307 	bic.w	r3, r3, #7
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	9303      	str	r3, [sp, #12]
 800d5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b2:	443b      	add	r3, r7
 800d5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b6:	e767      	b.n	800d488 <_vfiprintf_r+0x94>
 800d5b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5bc:	460c      	mov	r4, r1
 800d5be:	2001      	movs	r0, #1
 800d5c0:	e7a5      	b.n	800d50e <_vfiprintf_r+0x11a>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	3401      	adds	r4, #1
 800d5c6:	9305      	str	r3, [sp, #20]
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	f04f 0c0a 	mov.w	ip, #10
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5d4:	3a30      	subs	r2, #48	; 0x30
 800d5d6:	2a09      	cmp	r2, #9
 800d5d8:	d903      	bls.n	800d5e2 <_vfiprintf_r+0x1ee>
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d0c5      	beq.n	800d56a <_vfiprintf_r+0x176>
 800d5de:	9105      	str	r1, [sp, #20]
 800d5e0:	e7c3      	b.n	800d56a <_vfiprintf_r+0x176>
 800d5e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e7f0      	b.n	800d5ce <_vfiprintf_r+0x1da>
 800d5ec:	ab03      	add	r3, sp, #12
 800d5ee:	9300      	str	r3, [sp, #0]
 800d5f0:	462a      	mov	r2, r5
 800d5f2:	4b16      	ldr	r3, [pc, #88]	; (800d64c <_vfiprintf_r+0x258>)
 800d5f4:	a904      	add	r1, sp, #16
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f3af 8000 	nop.w
 800d5fc:	4607      	mov	r7, r0
 800d5fe:	1c78      	adds	r0, r7, #1
 800d600:	d1d6      	bne.n	800d5b0 <_vfiprintf_r+0x1bc>
 800d602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d604:	07d9      	lsls	r1, r3, #31
 800d606:	d405      	bmi.n	800d614 <_vfiprintf_r+0x220>
 800d608:	89ab      	ldrh	r3, [r5, #12]
 800d60a:	059a      	lsls	r2, r3, #22
 800d60c:	d402      	bmi.n	800d614 <_vfiprintf_r+0x220>
 800d60e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d610:	f7ff fe1a 	bl	800d248 <__retarget_lock_release_recursive>
 800d614:	89ab      	ldrh	r3, [r5, #12]
 800d616:	065b      	lsls	r3, r3, #25
 800d618:	f53f af12 	bmi.w	800d440 <_vfiprintf_r+0x4c>
 800d61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d61e:	e711      	b.n	800d444 <_vfiprintf_r+0x50>
 800d620:	ab03      	add	r3, sp, #12
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	462a      	mov	r2, r5
 800d626:	4b09      	ldr	r3, [pc, #36]	; (800d64c <_vfiprintf_r+0x258>)
 800d628:	a904      	add	r1, sp, #16
 800d62a:	4630      	mov	r0, r6
 800d62c:	f000 f880 	bl	800d730 <_printf_i>
 800d630:	e7e4      	b.n	800d5fc <_vfiprintf_r+0x208>
 800d632:	bf00      	nop
 800d634:	0800ec14 	.word	0x0800ec14
 800d638:	0800ec34 	.word	0x0800ec34
 800d63c:	0800ebf4 	.word	0x0800ebf4
 800d640:	0800ec58 	.word	0x0800ec58
 800d644:	0800ec62 	.word	0x0800ec62
 800d648:	00000000 	.word	0x00000000
 800d64c:	0800d3cf 	.word	0x0800d3cf
 800d650:	0800ec5e 	.word	0x0800ec5e

0800d654 <_printf_common>:
 800d654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d658:	4616      	mov	r6, r2
 800d65a:	4699      	mov	r9, r3
 800d65c:	688a      	ldr	r2, [r1, #8]
 800d65e:	690b      	ldr	r3, [r1, #16]
 800d660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d664:	4293      	cmp	r3, r2
 800d666:	bfb8      	it	lt
 800d668:	4613      	movlt	r3, r2
 800d66a:	6033      	str	r3, [r6, #0]
 800d66c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d670:	4607      	mov	r7, r0
 800d672:	460c      	mov	r4, r1
 800d674:	b10a      	cbz	r2, 800d67a <_printf_common+0x26>
 800d676:	3301      	adds	r3, #1
 800d678:	6033      	str	r3, [r6, #0]
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	0699      	lsls	r1, r3, #26
 800d67e:	bf42      	ittt	mi
 800d680:	6833      	ldrmi	r3, [r6, #0]
 800d682:	3302      	addmi	r3, #2
 800d684:	6033      	strmi	r3, [r6, #0]
 800d686:	6825      	ldr	r5, [r4, #0]
 800d688:	f015 0506 	ands.w	r5, r5, #6
 800d68c:	d106      	bne.n	800d69c <_printf_common+0x48>
 800d68e:	f104 0a19 	add.w	sl, r4, #25
 800d692:	68e3      	ldr	r3, [r4, #12]
 800d694:	6832      	ldr	r2, [r6, #0]
 800d696:	1a9b      	subs	r3, r3, r2
 800d698:	42ab      	cmp	r3, r5
 800d69a:	dc26      	bgt.n	800d6ea <_printf_common+0x96>
 800d69c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6a0:	1e13      	subs	r3, r2, #0
 800d6a2:	6822      	ldr	r2, [r4, #0]
 800d6a4:	bf18      	it	ne
 800d6a6:	2301      	movne	r3, #1
 800d6a8:	0692      	lsls	r2, r2, #26
 800d6aa:	d42b      	bmi.n	800d704 <_printf_common+0xb0>
 800d6ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6b0:	4649      	mov	r1, r9
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	47c0      	blx	r8
 800d6b6:	3001      	adds	r0, #1
 800d6b8:	d01e      	beq.n	800d6f8 <_printf_common+0xa4>
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	68e5      	ldr	r5, [r4, #12]
 800d6be:	6832      	ldr	r2, [r6, #0]
 800d6c0:	f003 0306 	and.w	r3, r3, #6
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	bf08      	it	eq
 800d6c8:	1aad      	subeq	r5, r5, r2
 800d6ca:	68a3      	ldr	r3, [r4, #8]
 800d6cc:	6922      	ldr	r2, [r4, #16]
 800d6ce:	bf0c      	ite	eq
 800d6d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6d4:	2500      	movne	r5, #0
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	bfc4      	itt	gt
 800d6da:	1a9b      	subgt	r3, r3, r2
 800d6dc:	18ed      	addgt	r5, r5, r3
 800d6de:	2600      	movs	r6, #0
 800d6e0:	341a      	adds	r4, #26
 800d6e2:	42b5      	cmp	r5, r6
 800d6e4:	d11a      	bne.n	800d71c <_printf_common+0xc8>
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	e008      	b.n	800d6fc <_printf_common+0xa8>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	4652      	mov	r2, sl
 800d6ee:	4649      	mov	r1, r9
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	47c0      	blx	r8
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d103      	bne.n	800d700 <_printf_common+0xac>
 800d6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d700:	3501      	adds	r5, #1
 800d702:	e7c6      	b.n	800d692 <_printf_common+0x3e>
 800d704:	18e1      	adds	r1, r4, r3
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	2030      	movs	r0, #48	; 0x30
 800d70a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d70e:	4422      	add	r2, r4
 800d710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d718:	3302      	adds	r3, #2
 800d71a:	e7c7      	b.n	800d6ac <_printf_common+0x58>
 800d71c:	2301      	movs	r3, #1
 800d71e:	4622      	mov	r2, r4
 800d720:	4649      	mov	r1, r9
 800d722:	4638      	mov	r0, r7
 800d724:	47c0      	blx	r8
 800d726:	3001      	adds	r0, #1
 800d728:	d0e6      	beq.n	800d6f8 <_printf_common+0xa4>
 800d72a:	3601      	adds	r6, #1
 800d72c:	e7d9      	b.n	800d6e2 <_printf_common+0x8e>
	...

0800d730 <_printf_i>:
 800d730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d734:	7e0f      	ldrb	r7, [r1, #24]
 800d736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d738:	2f78      	cmp	r7, #120	; 0x78
 800d73a:	4691      	mov	r9, r2
 800d73c:	4680      	mov	r8, r0
 800d73e:	460c      	mov	r4, r1
 800d740:	469a      	mov	sl, r3
 800d742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d746:	d807      	bhi.n	800d758 <_printf_i+0x28>
 800d748:	2f62      	cmp	r7, #98	; 0x62
 800d74a:	d80a      	bhi.n	800d762 <_printf_i+0x32>
 800d74c:	2f00      	cmp	r7, #0
 800d74e:	f000 80d8 	beq.w	800d902 <_printf_i+0x1d2>
 800d752:	2f58      	cmp	r7, #88	; 0x58
 800d754:	f000 80a3 	beq.w	800d89e <_printf_i+0x16e>
 800d758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d75c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d760:	e03a      	b.n	800d7d8 <_printf_i+0xa8>
 800d762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d766:	2b15      	cmp	r3, #21
 800d768:	d8f6      	bhi.n	800d758 <_printf_i+0x28>
 800d76a:	a101      	add	r1, pc, #4	; (adr r1, 800d770 <_printf_i+0x40>)
 800d76c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d770:	0800d7c9 	.word	0x0800d7c9
 800d774:	0800d7dd 	.word	0x0800d7dd
 800d778:	0800d759 	.word	0x0800d759
 800d77c:	0800d759 	.word	0x0800d759
 800d780:	0800d759 	.word	0x0800d759
 800d784:	0800d759 	.word	0x0800d759
 800d788:	0800d7dd 	.word	0x0800d7dd
 800d78c:	0800d759 	.word	0x0800d759
 800d790:	0800d759 	.word	0x0800d759
 800d794:	0800d759 	.word	0x0800d759
 800d798:	0800d759 	.word	0x0800d759
 800d79c:	0800d8e9 	.word	0x0800d8e9
 800d7a0:	0800d80d 	.word	0x0800d80d
 800d7a4:	0800d8cb 	.word	0x0800d8cb
 800d7a8:	0800d759 	.word	0x0800d759
 800d7ac:	0800d759 	.word	0x0800d759
 800d7b0:	0800d90b 	.word	0x0800d90b
 800d7b4:	0800d759 	.word	0x0800d759
 800d7b8:	0800d80d 	.word	0x0800d80d
 800d7bc:	0800d759 	.word	0x0800d759
 800d7c0:	0800d759 	.word	0x0800d759
 800d7c4:	0800d8d3 	.word	0x0800d8d3
 800d7c8:	682b      	ldr	r3, [r5, #0]
 800d7ca:	1d1a      	adds	r2, r3, #4
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	602a      	str	r2, [r5, #0]
 800d7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e0a3      	b.n	800d924 <_printf_i+0x1f4>
 800d7dc:	6820      	ldr	r0, [r4, #0]
 800d7de:	6829      	ldr	r1, [r5, #0]
 800d7e0:	0606      	lsls	r6, r0, #24
 800d7e2:	f101 0304 	add.w	r3, r1, #4
 800d7e6:	d50a      	bpl.n	800d7fe <_printf_i+0xce>
 800d7e8:	680e      	ldr	r6, [r1, #0]
 800d7ea:	602b      	str	r3, [r5, #0]
 800d7ec:	2e00      	cmp	r6, #0
 800d7ee:	da03      	bge.n	800d7f8 <_printf_i+0xc8>
 800d7f0:	232d      	movs	r3, #45	; 0x2d
 800d7f2:	4276      	negs	r6, r6
 800d7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7f8:	485e      	ldr	r0, [pc, #376]	; (800d974 <_printf_i+0x244>)
 800d7fa:	230a      	movs	r3, #10
 800d7fc:	e019      	b.n	800d832 <_printf_i+0x102>
 800d7fe:	680e      	ldr	r6, [r1, #0]
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d806:	bf18      	it	ne
 800d808:	b236      	sxthne	r6, r6
 800d80a:	e7ef      	b.n	800d7ec <_printf_i+0xbc>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	6820      	ldr	r0, [r4, #0]
 800d810:	1d19      	adds	r1, r3, #4
 800d812:	6029      	str	r1, [r5, #0]
 800d814:	0601      	lsls	r1, r0, #24
 800d816:	d501      	bpl.n	800d81c <_printf_i+0xec>
 800d818:	681e      	ldr	r6, [r3, #0]
 800d81a:	e002      	b.n	800d822 <_printf_i+0xf2>
 800d81c:	0646      	lsls	r6, r0, #25
 800d81e:	d5fb      	bpl.n	800d818 <_printf_i+0xe8>
 800d820:	881e      	ldrh	r6, [r3, #0]
 800d822:	4854      	ldr	r0, [pc, #336]	; (800d974 <_printf_i+0x244>)
 800d824:	2f6f      	cmp	r7, #111	; 0x6f
 800d826:	bf0c      	ite	eq
 800d828:	2308      	moveq	r3, #8
 800d82a:	230a      	movne	r3, #10
 800d82c:	2100      	movs	r1, #0
 800d82e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d832:	6865      	ldr	r5, [r4, #4]
 800d834:	60a5      	str	r5, [r4, #8]
 800d836:	2d00      	cmp	r5, #0
 800d838:	bfa2      	ittt	ge
 800d83a:	6821      	ldrge	r1, [r4, #0]
 800d83c:	f021 0104 	bicge.w	r1, r1, #4
 800d840:	6021      	strge	r1, [r4, #0]
 800d842:	b90e      	cbnz	r6, 800d848 <_printf_i+0x118>
 800d844:	2d00      	cmp	r5, #0
 800d846:	d04d      	beq.n	800d8e4 <_printf_i+0x1b4>
 800d848:	4615      	mov	r5, r2
 800d84a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d84e:	fb03 6711 	mls	r7, r3, r1, r6
 800d852:	5dc7      	ldrb	r7, [r0, r7]
 800d854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d858:	4637      	mov	r7, r6
 800d85a:	42bb      	cmp	r3, r7
 800d85c:	460e      	mov	r6, r1
 800d85e:	d9f4      	bls.n	800d84a <_printf_i+0x11a>
 800d860:	2b08      	cmp	r3, #8
 800d862:	d10b      	bne.n	800d87c <_printf_i+0x14c>
 800d864:	6823      	ldr	r3, [r4, #0]
 800d866:	07de      	lsls	r6, r3, #31
 800d868:	d508      	bpl.n	800d87c <_printf_i+0x14c>
 800d86a:	6923      	ldr	r3, [r4, #16]
 800d86c:	6861      	ldr	r1, [r4, #4]
 800d86e:	4299      	cmp	r1, r3
 800d870:	bfde      	ittt	le
 800d872:	2330      	movle	r3, #48	; 0x30
 800d874:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d87c:	1b52      	subs	r2, r2, r5
 800d87e:	6122      	str	r2, [r4, #16]
 800d880:	f8cd a000 	str.w	sl, [sp]
 800d884:	464b      	mov	r3, r9
 800d886:	aa03      	add	r2, sp, #12
 800d888:	4621      	mov	r1, r4
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7ff fee2 	bl	800d654 <_printf_common>
 800d890:	3001      	adds	r0, #1
 800d892:	d14c      	bne.n	800d92e <_printf_i+0x1fe>
 800d894:	f04f 30ff 	mov.w	r0, #4294967295
 800d898:	b004      	add	sp, #16
 800d89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d89e:	4835      	ldr	r0, [pc, #212]	; (800d974 <_printf_i+0x244>)
 800d8a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d8a4:	6829      	ldr	r1, [r5, #0]
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8ac:	6029      	str	r1, [r5, #0]
 800d8ae:	061d      	lsls	r5, r3, #24
 800d8b0:	d514      	bpl.n	800d8dc <_printf_i+0x1ac>
 800d8b2:	07df      	lsls	r7, r3, #31
 800d8b4:	bf44      	itt	mi
 800d8b6:	f043 0320 	orrmi.w	r3, r3, #32
 800d8ba:	6023      	strmi	r3, [r4, #0]
 800d8bc:	b91e      	cbnz	r6, 800d8c6 <_printf_i+0x196>
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	f023 0320 	bic.w	r3, r3, #32
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	2310      	movs	r3, #16
 800d8c8:	e7b0      	b.n	800d82c <_printf_i+0xfc>
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	f043 0320 	orr.w	r3, r3, #32
 800d8d0:	6023      	str	r3, [r4, #0]
 800d8d2:	2378      	movs	r3, #120	; 0x78
 800d8d4:	4828      	ldr	r0, [pc, #160]	; (800d978 <_printf_i+0x248>)
 800d8d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8da:	e7e3      	b.n	800d8a4 <_printf_i+0x174>
 800d8dc:	0659      	lsls	r1, r3, #25
 800d8de:	bf48      	it	mi
 800d8e0:	b2b6      	uxthmi	r6, r6
 800d8e2:	e7e6      	b.n	800d8b2 <_printf_i+0x182>
 800d8e4:	4615      	mov	r5, r2
 800d8e6:	e7bb      	b.n	800d860 <_printf_i+0x130>
 800d8e8:	682b      	ldr	r3, [r5, #0]
 800d8ea:	6826      	ldr	r6, [r4, #0]
 800d8ec:	6961      	ldr	r1, [r4, #20]
 800d8ee:	1d18      	adds	r0, r3, #4
 800d8f0:	6028      	str	r0, [r5, #0]
 800d8f2:	0635      	lsls	r5, r6, #24
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	d501      	bpl.n	800d8fc <_printf_i+0x1cc>
 800d8f8:	6019      	str	r1, [r3, #0]
 800d8fa:	e002      	b.n	800d902 <_printf_i+0x1d2>
 800d8fc:	0670      	lsls	r0, r6, #25
 800d8fe:	d5fb      	bpl.n	800d8f8 <_printf_i+0x1c8>
 800d900:	8019      	strh	r1, [r3, #0]
 800d902:	2300      	movs	r3, #0
 800d904:	6123      	str	r3, [r4, #16]
 800d906:	4615      	mov	r5, r2
 800d908:	e7ba      	b.n	800d880 <_printf_i+0x150>
 800d90a:	682b      	ldr	r3, [r5, #0]
 800d90c:	1d1a      	adds	r2, r3, #4
 800d90e:	602a      	str	r2, [r5, #0]
 800d910:	681d      	ldr	r5, [r3, #0]
 800d912:	6862      	ldr	r2, [r4, #4]
 800d914:	2100      	movs	r1, #0
 800d916:	4628      	mov	r0, r5
 800d918:	f7f2 fc62 	bl	80001e0 <memchr>
 800d91c:	b108      	cbz	r0, 800d922 <_printf_i+0x1f2>
 800d91e:	1b40      	subs	r0, r0, r5
 800d920:	6060      	str	r0, [r4, #4]
 800d922:	6863      	ldr	r3, [r4, #4]
 800d924:	6123      	str	r3, [r4, #16]
 800d926:	2300      	movs	r3, #0
 800d928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d92c:	e7a8      	b.n	800d880 <_printf_i+0x150>
 800d92e:	6923      	ldr	r3, [r4, #16]
 800d930:	462a      	mov	r2, r5
 800d932:	4649      	mov	r1, r9
 800d934:	4640      	mov	r0, r8
 800d936:	47d0      	blx	sl
 800d938:	3001      	adds	r0, #1
 800d93a:	d0ab      	beq.n	800d894 <_printf_i+0x164>
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	079b      	lsls	r3, r3, #30
 800d940:	d413      	bmi.n	800d96a <_printf_i+0x23a>
 800d942:	68e0      	ldr	r0, [r4, #12]
 800d944:	9b03      	ldr	r3, [sp, #12]
 800d946:	4298      	cmp	r0, r3
 800d948:	bfb8      	it	lt
 800d94a:	4618      	movlt	r0, r3
 800d94c:	e7a4      	b.n	800d898 <_printf_i+0x168>
 800d94e:	2301      	movs	r3, #1
 800d950:	4632      	mov	r2, r6
 800d952:	4649      	mov	r1, r9
 800d954:	4640      	mov	r0, r8
 800d956:	47d0      	blx	sl
 800d958:	3001      	adds	r0, #1
 800d95a:	d09b      	beq.n	800d894 <_printf_i+0x164>
 800d95c:	3501      	adds	r5, #1
 800d95e:	68e3      	ldr	r3, [r4, #12]
 800d960:	9903      	ldr	r1, [sp, #12]
 800d962:	1a5b      	subs	r3, r3, r1
 800d964:	42ab      	cmp	r3, r5
 800d966:	dcf2      	bgt.n	800d94e <_printf_i+0x21e>
 800d968:	e7eb      	b.n	800d942 <_printf_i+0x212>
 800d96a:	2500      	movs	r5, #0
 800d96c:	f104 0619 	add.w	r6, r4, #25
 800d970:	e7f5      	b.n	800d95e <_printf_i+0x22e>
 800d972:	bf00      	nop
 800d974:	0800ec69 	.word	0x0800ec69
 800d978:	0800ec7a 	.word	0x0800ec7a

0800d97c <cleanup_glue>:
 800d97c:	b538      	push	{r3, r4, r5, lr}
 800d97e:	460c      	mov	r4, r1
 800d980:	6809      	ldr	r1, [r1, #0]
 800d982:	4605      	mov	r5, r0
 800d984:	b109      	cbz	r1, 800d98a <cleanup_glue+0xe>
 800d986:	f7ff fff9 	bl	800d97c <cleanup_glue>
 800d98a:	4621      	mov	r1, r4
 800d98c:	4628      	mov	r0, r5
 800d98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d992:	f000 baf5 	b.w	800df80 <_free_r>
	...

0800d998 <_reclaim_reent>:
 800d998:	4b2c      	ldr	r3, [pc, #176]	; (800da4c <_reclaim_reent+0xb4>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4283      	cmp	r3, r0
 800d99e:	b570      	push	{r4, r5, r6, lr}
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	d051      	beq.n	800da48 <_reclaim_reent+0xb0>
 800d9a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d9a6:	b143      	cbz	r3, 800d9ba <_reclaim_reent+0x22>
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d14a      	bne.n	800da44 <_reclaim_reent+0xac>
 800d9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9b0:	6819      	ldr	r1, [r3, #0]
 800d9b2:	b111      	cbz	r1, 800d9ba <_reclaim_reent+0x22>
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f000 fae3 	bl	800df80 <_free_r>
 800d9ba:	6961      	ldr	r1, [r4, #20]
 800d9bc:	b111      	cbz	r1, 800d9c4 <_reclaim_reent+0x2c>
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f000 fade 	bl	800df80 <_free_r>
 800d9c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d9c6:	b111      	cbz	r1, 800d9ce <_reclaim_reent+0x36>
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 fad9 	bl	800df80 <_free_r>
 800d9ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d9d0:	b111      	cbz	r1, 800d9d8 <_reclaim_reent+0x40>
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f000 fad4 	bl	800df80 <_free_r>
 800d9d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d9da:	b111      	cbz	r1, 800d9e2 <_reclaim_reent+0x4a>
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 facf 	bl	800df80 <_free_r>
 800d9e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d9e4:	b111      	cbz	r1, 800d9ec <_reclaim_reent+0x54>
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f000 faca 	bl	800df80 <_free_r>
 800d9ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d9ee:	b111      	cbz	r1, 800d9f6 <_reclaim_reent+0x5e>
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 fac5 	bl	800df80 <_free_r>
 800d9f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d9f8:	b111      	cbz	r1, 800da00 <_reclaim_reent+0x68>
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 fac0 	bl	800df80 <_free_r>
 800da00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da02:	b111      	cbz	r1, 800da0a <_reclaim_reent+0x72>
 800da04:	4620      	mov	r0, r4
 800da06:	f000 fabb 	bl	800df80 <_free_r>
 800da0a:	69a3      	ldr	r3, [r4, #24]
 800da0c:	b1e3      	cbz	r3, 800da48 <_reclaim_reent+0xb0>
 800da0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800da10:	4620      	mov	r0, r4
 800da12:	4798      	blx	r3
 800da14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800da16:	b1b9      	cbz	r1, 800da48 <_reclaim_reent+0xb0>
 800da18:	4620      	mov	r0, r4
 800da1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da1e:	f7ff bfad 	b.w	800d97c <cleanup_glue>
 800da22:	5949      	ldr	r1, [r1, r5]
 800da24:	b941      	cbnz	r1, 800da38 <_reclaim_reent+0xa0>
 800da26:	3504      	adds	r5, #4
 800da28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da2a:	2d80      	cmp	r5, #128	; 0x80
 800da2c:	68d9      	ldr	r1, [r3, #12]
 800da2e:	d1f8      	bne.n	800da22 <_reclaim_reent+0x8a>
 800da30:	4620      	mov	r0, r4
 800da32:	f000 faa5 	bl	800df80 <_free_r>
 800da36:	e7ba      	b.n	800d9ae <_reclaim_reent+0x16>
 800da38:	680e      	ldr	r6, [r1, #0]
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 faa0 	bl	800df80 <_free_r>
 800da40:	4631      	mov	r1, r6
 800da42:	e7ef      	b.n	800da24 <_reclaim_reent+0x8c>
 800da44:	2500      	movs	r5, #0
 800da46:	e7ef      	b.n	800da28 <_reclaim_reent+0x90>
 800da48:	bd70      	pop	{r4, r5, r6, pc}
 800da4a:	bf00      	nop
 800da4c:	200000a4 	.word	0x200000a4

0800da50 <_sbrk_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4d06      	ldr	r5, [pc, #24]	; (800da6c <_sbrk_r+0x1c>)
 800da54:	2300      	movs	r3, #0
 800da56:	4604      	mov	r4, r0
 800da58:	4608      	mov	r0, r1
 800da5a:	602b      	str	r3, [r5, #0]
 800da5c:	f7f8 fada 	bl	8006014 <_sbrk>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d102      	bne.n	800da6a <_sbrk_r+0x1a>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	b103      	cbz	r3, 800da6a <_sbrk_r+0x1a>
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	2000529c 	.word	0x2000529c

0800da70 <__sread>:
 800da70:	b510      	push	{r4, lr}
 800da72:	460c      	mov	r4, r1
 800da74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da78:	f000 face 	bl	800e018 <_read_r>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	bfab      	itete	ge
 800da80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da82:	89a3      	ldrhlt	r3, [r4, #12]
 800da84:	181b      	addge	r3, r3, r0
 800da86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da8a:	bfac      	ite	ge
 800da8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800da8e:	81a3      	strhlt	r3, [r4, #12]
 800da90:	bd10      	pop	{r4, pc}

0800da92 <__swrite>:
 800da92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da96:	461f      	mov	r7, r3
 800da98:	898b      	ldrh	r3, [r1, #12]
 800da9a:	05db      	lsls	r3, r3, #23
 800da9c:	4605      	mov	r5, r0
 800da9e:	460c      	mov	r4, r1
 800daa0:	4616      	mov	r6, r2
 800daa2:	d505      	bpl.n	800dab0 <__swrite+0x1e>
 800daa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daa8:	2302      	movs	r3, #2
 800daaa:	2200      	movs	r2, #0
 800daac:	f000 f9e4 	bl	800de78 <_lseek_r>
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daba:	81a3      	strh	r3, [r4, #12]
 800dabc:	4632      	mov	r2, r6
 800dabe:	463b      	mov	r3, r7
 800dac0:	4628      	mov	r0, r5
 800dac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dac6:	f000 b87d 	b.w	800dbc4 <_write_r>

0800daca <__sseek>:
 800daca:	b510      	push	{r4, lr}
 800dacc:	460c      	mov	r4, r1
 800dace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad2:	f000 f9d1 	bl	800de78 <_lseek_r>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	bf15      	itete	ne
 800dadc:	6560      	strne	r0, [r4, #84]	; 0x54
 800dade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dae6:	81a3      	strheq	r3, [r4, #12]
 800dae8:	bf18      	it	ne
 800daea:	81a3      	strhne	r3, [r4, #12]
 800daec:	bd10      	pop	{r4, pc}

0800daee <__sclose>:
 800daee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf2:	f000 b8ef 	b.w	800dcd4 <_close_r>

0800daf6 <strncmp>:
 800daf6:	b510      	push	{r4, lr}
 800daf8:	b17a      	cbz	r2, 800db1a <strncmp+0x24>
 800dafa:	4603      	mov	r3, r0
 800dafc:	3901      	subs	r1, #1
 800dafe:	1884      	adds	r4, r0, r2
 800db00:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db08:	4290      	cmp	r0, r2
 800db0a:	d101      	bne.n	800db10 <strncmp+0x1a>
 800db0c:	42a3      	cmp	r3, r4
 800db0e:	d101      	bne.n	800db14 <strncmp+0x1e>
 800db10:	1a80      	subs	r0, r0, r2
 800db12:	bd10      	pop	{r4, pc}
 800db14:	2800      	cmp	r0, #0
 800db16:	d1f3      	bne.n	800db00 <strncmp+0xa>
 800db18:	e7fa      	b.n	800db10 <strncmp+0x1a>
 800db1a:	4610      	mov	r0, r2
 800db1c:	e7f9      	b.n	800db12 <strncmp+0x1c>
	...

0800db20 <__swbuf_r>:
 800db20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db22:	460e      	mov	r6, r1
 800db24:	4614      	mov	r4, r2
 800db26:	4605      	mov	r5, r0
 800db28:	b118      	cbz	r0, 800db32 <__swbuf_r+0x12>
 800db2a:	6983      	ldr	r3, [r0, #24]
 800db2c:	b90b      	cbnz	r3, 800db32 <__swbuf_r+0x12>
 800db2e:	f7ff fab5 	bl	800d09c <__sinit>
 800db32:	4b21      	ldr	r3, [pc, #132]	; (800dbb8 <__swbuf_r+0x98>)
 800db34:	429c      	cmp	r4, r3
 800db36:	d12b      	bne.n	800db90 <__swbuf_r+0x70>
 800db38:	686c      	ldr	r4, [r5, #4]
 800db3a:	69a3      	ldr	r3, [r4, #24]
 800db3c:	60a3      	str	r3, [r4, #8]
 800db3e:	89a3      	ldrh	r3, [r4, #12]
 800db40:	071a      	lsls	r2, r3, #28
 800db42:	d52f      	bpl.n	800dba4 <__swbuf_r+0x84>
 800db44:	6923      	ldr	r3, [r4, #16]
 800db46:	b36b      	cbz	r3, 800dba4 <__swbuf_r+0x84>
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	6820      	ldr	r0, [r4, #0]
 800db4c:	1ac0      	subs	r0, r0, r3
 800db4e:	6963      	ldr	r3, [r4, #20]
 800db50:	b2f6      	uxtb	r6, r6
 800db52:	4283      	cmp	r3, r0
 800db54:	4637      	mov	r7, r6
 800db56:	dc04      	bgt.n	800db62 <__swbuf_r+0x42>
 800db58:	4621      	mov	r1, r4
 800db5a:	4628      	mov	r0, r5
 800db5c:	f000 f950 	bl	800de00 <_fflush_r>
 800db60:	bb30      	cbnz	r0, 800dbb0 <__swbuf_r+0x90>
 800db62:	68a3      	ldr	r3, [r4, #8]
 800db64:	3b01      	subs	r3, #1
 800db66:	60a3      	str	r3, [r4, #8]
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	1c5a      	adds	r2, r3, #1
 800db6c:	6022      	str	r2, [r4, #0]
 800db6e:	701e      	strb	r6, [r3, #0]
 800db70:	6963      	ldr	r3, [r4, #20]
 800db72:	3001      	adds	r0, #1
 800db74:	4283      	cmp	r3, r0
 800db76:	d004      	beq.n	800db82 <__swbuf_r+0x62>
 800db78:	89a3      	ldrh	r3, [r4, #12]
 800db7a:	07db      	lsls	r3, r3, #31
 800db7c:	d506      	bpl.n	800db8c <__swbuf_r+0x6c>
 800db7e:	2e0a      	cmp	r6, #10
 800db80:	d104      	bne.n	800db8c <__swbuf_r+0x6c>
 800db82:	4621      	mov	r1, r4
 800db84:	4628      	mov	r0, r5
 800db86:	f000 f93b 	bl	800de00 <_fflush_r>
 800db8a:	b988      	cbnz	r0, 800dbb0 <__swbuf_r+0x90>
 800db8c:	4638      	mov	r0, r7
 800db8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db90:	4b0a      	ldr	r3, [pc, #40]	; (800dbbc <__swbuf_r+0x9c>)
 800db92:	429c      	cmp	r4, r3
 800db94:	d101      	bne.n	800db9a <__swbuf_r+0x7a>
 800db96:	68ac      	ldr	r4, [r5, #8]
 800db98:	e7cf      	b.n	800db3a <__swbuf_r+0x1a>
 800db9a:	4b09      	ldr	r3, [pc, #36]	; (800dbc0 <__swbuf_r+0xa0>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	bf08      	it	eq
 800dba0:	68ec      	ldreq	r4, [r5, #12]
 800dba2:	e7ca      	b.n	800db3a <__swbuf_r+0x1a>
 800dba4:	4621      	mov	r1, r4
 800dba6:	4628      	mov	r0, r5
 800dba8:	f000 f81e 	bl	800dbe8 <__swsetup_r>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d0cb      	beq.n	800db48 <__swbuf_r+0x28>
 800dbb0:	f04f 37ff 	mov.w	r7, #4294967295
 800dbb4:	e7ea      	b.n	800db8c <__swbuf_r+0x6c>
 800dbb6:	bf00      	nop
 800dbb8:	0800ec14 	.word	0x0800ec14
 800dbbc:	0800ec34 	.word	0x0800ec34
 800dbc0:	0800ebf4 	.word	0x0800ebf4

0800dbc4 <_write_r>:
 800dbc4:	b538      	push	{r3, r4, r5, lr}
 800dbc6:	4d07      	ldr	r5, [pc, #28]	; (800dbe4 <_write_r+0x20>)
 800dbc8:	4604      	mov	r4, r0
 800dbca:	4608      	mov	r0, r1
 800dbcc:	4611      	mov	r1, r2
 800dbce:	2200      	movs	r2, #0
 800dbd0:	602a      	str	r2, [r5, #0]
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	f7f8 f9cd 	bl	8005f72 <_write>
 800dbd8:	1c43      	adds	r3, r0, #1
 800dbda:	d102      	bne.n	800dbe2 <_write_r+0x1e>
 800dbdc:	682b      	ldr	r3, [r5, #0]
 800dbde:	b103      	cbz	r3, 800dbe2 <_write_r+0x1e>
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	bd38      	pop	{r3, r4, r5, pc}
 800dbe4:	2000529c 	.word	0x2000529c

0800dbe8 <__swsetup_r>:
 800dbe8:	4b32      	ldr	r3, [pc, #200]	; (800dcb4 <__swsetup_r+0xcc>)
 800dbea:	b570      	push	{r4, r5, r6, lr}
 800dbec:	681d      	ldr	r5, [r3, #0]
 800dbee:	4606      	mov	r6, r0
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	b125      	cbz	r5, 800dbfe <__swsetup_r+0x16>
 800dbf4:	69ab      	ldr	r3, [r5, #24]
 800dbf6:	b913      	cbnz	r3, 800dbfe <__swsetup_r+0x16>
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	f7ff fa4f 	bl	800d09c <__sinit>
 800dbfe:	4b2e      	ldr	r3, [pc, #184]	; (800dcb8 <__swsetup_r+0xd0>)
 800dc00:	429c      	cmp	r4, r3
 800dc02:	d10f      	bne.n	800dc24 <__swsetup_r+0x3c>
 800dc04:	686c      	ldr	r4, [r5, #4]
 800dc06:	89a3      	ldrh	r3, [r4, #12]
 800dc08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc0c:	0719      	lsls	r1, r3, #28
 800dc0e:	d42c      	bmi.n	800dc6a <__swsetup_r+0x82>
 800dc10:	06dd      	lsls	r5, r3, #27
 800dc12:	d411      	bmi.n	800dc38 <__swsetup_r+0x50>
 800dc14:	2309      	movs	r3, #9
 800dc16:	6033      	str	r3, [r6, #0]
 800dc18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc22:	e03e      	b.n	800dca2 <__swsetup_r+0xba>
 800dc24:	4b25      	ldr	r3, [pc, #148]	; (800dcbc <__swsetup_r+0xd4>)
 800dc26:	429c      	cmp	r4, r3
 800dc28:	d101      	bne.n	800dc2e <__swsetup_r+0x46>
 800dc2a:	68ac      	ldr	r4, [r5, #8]
 800dc2c:	e7eb      	b.n	800dc06 <__swsetup_r+0x1e>
 800dc2e:	4b24      	ldr	r3, [pc, #144]	; (800dcc0 <__swsetup_r+0xd8>)
 800dc30:	429c      	cmp	r4, r3
 800dc32:	bf08      	it	eq
 800dc34:	68ec      	ldreq	r4, [r5, #12]
 800dc36:	e7e6      	b.n	800dc06 <__swsetup_r+0x1e>
 800dc38:	0758      	lsls	r0, r3, #29
 800dc3a:	d512      	bpl.n	800dc62 <__swsetup_r+0x7a>
 800dc3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc3e:	b141      	cbz	r1, 800dc52 <__swsetup_r+0x6a>
 800dc40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc44:	4299      	cmp	r1, r3
 800dc46:	d002      	beq.n	800dc4e <__swsetup_r+0x66>
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f000 f999 	bl	800df80 <_free_r>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	6363      	str	r3, [r4, #52]	; 0x34
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc58:	81a3      	strh	r3, [r4, #12]
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	6063      	str	r3, [r4, #4]
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	f043 0308 	orr.w	r3, r3, #8
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	6923      	ldr	r3, [r4, #16]
 800dc6c:	b94b      	cbnz	r3, 800dc82 <__swsetup_r+0x9a>
 800dc6e:	89a3      	ldrh	r3, [r4, #12]
 800dc70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc78:	d003      	beq.n	800dc82 <__swsetup_r+0x9a>
 800dc7a:	4621      	mov	r1, r4
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f000 f933 	bl	800dee8 <__smakebuf_r>
 800dc82:	89a0      	ldrh	r0, [r4, #12]
 800dc84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc88:	f010 0301 	ands.w	r3, r0, #1
 800dc8c:	d00a      	beq.n	800dca4 <__swsetup_r+0xbc>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	60a3      	str	r3, [r4, #8]
 800dc92:	6963      	ldr	r3, [r4, #20]
 800dc94:	425b      	negs	r3, r3
 800dc96:	61a3      	str	r3, [r4, #24]
 800dc98:	6923      	ldr	r3, [r4, #16]
 800dc9a:	b943      	cbnz	r3, 800dcae <__swsetup_r+0xc6>
 800dc9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dca0:	d1ba      	bne.n	800dc18 <__swsetup_r+0x30>
 800dca2:	bd70      	pop	{r4, r5, r6, pc}
 800dca4:	0781      	lsls	r1, r0, #30
 800dca6:	bf58      	it	pl
 800dca8:	6963      	ldrpl	r3, [r4, #20]
 800dcaa:	60a3      	str	r3, [r4, #8]
 800dcac:	e7f4      	b.n	800dc98 <__swsetup_r+0xb0>
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e7f7      	b.n	800dca2 <__swsetup_r+0xba>
 800dcb2:	bf00      	nop
 800dcb4:	200000a4 	.word	0x200000a4
 800dcb8:	0800ec14 	.word	0x0800ec14
 800dcbc:	0800ec34 	.word	0x0800ec34
 800dcc0:	0800ebf4 	.word	0x0800ebf4

0800dcc4 <abort>:
 800dcc4:	b508      	push	{r3, lr}
 800dcc6:	2006      	movs	r0, #6
 800dcc8:	f000 f9e0 	bl	800e08c <raise>
 800dccc:	2001      	movs	r0, #1
 800dcce:	f7f8 f929 	bl	8005f24 <_exit>
	...

0800dcd4 <_close_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	4d06      	ldr	r5, [pc, #24]	; (800dcf0 <_close_r+0x1c>)
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4608      	mov	r0, r1
 800dcde:	602b      	str	r3, [r5, #0]
 800dce0:	f7f8 f963 	bl	8005faa <_close>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d102      	bne.n	800dcee <_close_r+0x1a>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	b103      	cbz	r3, 800dcee <_close_r+0x1a>
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	2000529c 	.word	0x2000529c

0800dcf4 <__sflush_r>:
 800dcf4:	898a      	ldrh	r2, [r1, #12]
 800dcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	0710      	lsls	r0, r2, #28
 800dcfe:	460c      	mov	r4, r1
 800dd00:	d458      	bmi.n	800ddb4 <__sflush_r+0xc0>
 800dd02:	684b      	ldr	r3, [r1, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	dc05      	bgt.n	800dd14 <__sflush_r+0x20>
 800dd08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	dc02      	bgt.n	800dd14 <__sflush_r+0x20>
 800dd0e:	2000      	movs	r0, #0
 800dd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd16:	2e00      	cmp	r6, #0
 800dd18:	d0f9      	beq.n	800dd0e <__sflush_r+0x1a>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd20:	682f      	ldr	r7, [r5, #0]
 800dd22:	602b      	str	r3, [r5, #0]
 800dd24:	d032      	beq.n	800dd8c <__sflush_r+0x98>
 800dd26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd28:	89a3      	ldrh	r3, [r4, #12]
 800dd2a:	075a      	lsls	r2, r3, #29
 800dd2c:	d505      	bpl.n	800dd3a <__sflush_r+0x46>
 800dd2e:	6863      	ldr	r3, [r4, #4]
 800dd30:	1ac0      	subs	r0, r0, r3
 800dd32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd34:	b10b      	cbz	r3, 800dd3a <__sflush_r+0x46>
 800dd36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd38:	1ac0      	subs	r0, r0, r3
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd40:	6a21      	ldr	r1, [r4, #32]
 800dd42:	4628      	mov	r0, r5
 800dd44:	47b0      	blx	r6
 800dd46:	1c43      	adds	r3, r0, #1
 800dd48:	89a3      	ldrh	r3, [r4, #12]
 800dd4a:	d106      	bne.n	800dd5a <__sflush_r+0x66>
 800dd4c:	6829      	ldr	r1, [r5, #0]
 800dd4e:	291d      	cmp	r1, #29
 800dd50:	d82c      	bhi.n	800ddac <__sflush_r+0xb8>
 800dd52:	4a2a      	ldr	r2, [pc, #168]	; (800ddfc <__sflush_r+0x108>)
 800dd54:	40ca      	lsrs	r2, r1
 800dd56:	07d6      	lsls	r6, r2, #31
 800dd58:	d528      	bpl.n	800ddac <__sflush_r+0xb8>
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	6062      	str	r2, [r4, #4]
 800dd5e:	04d9      	lsls	r1, r3, #19
 800dd60:	6922      	ldr	r2, [r4, #16]
 800dd62:	6022      	str	r2, [r4, #0]
 800dd64:	d504      	bpl.n	800dd70 <__sflush_r+0x7c>
 800dd66:	1c42      	adds	r2, r0, #1
 800dd68:	d101      	bne.n	800dd6e <__sflush_r+0x7a>
 800dd6a:	682b      	ldr	r3, [r5, #0]
 800dd6c:	b903      	cbnz	r3, 800dd70 <__sflush_r+0x7c>
 800dd6e:	6560      	str	r0, [r4, #84]	; 0x54
 800dd70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd72:	602f      	str	r7, [r5, #0]
 800dd74:	2900      	cmp	r1, #0
 800dd76:	d0ca      	beq.n	800dd0e <__sflush_r+0x1a>
 800dd78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd7c:	4299      	cmp	r1, r3
 800dd7e:	d002      	beq.n	800dd86 <__sflush_r+0x92>
 800dd80:	4628      	mov	r0, r5
 800dd82:	f000 f8fd 	bl	800df80 <_free_r>
 800dd86:	2000      	movs	r0, #0
 800dd88:	6360      	str	r0, [r4, #52]	; 0x34
 800dd8a:	e7c1      	b.n	800dd10 <__sflush_r+0x1c>
 800dd8c:	6a21      	ldr	r1, [r4, #32]
 800dd8e:	2301      	movs	r3, #1
 800dd90:	4628      	mov	r0, r5
 800dd92:	47b0      	blx	r6
 800dd94:	1c41      	adds	r1, r0, #1
 800dd96:	d1c7      	bne.n	800dd28 <__sflush_r+0x34>
 800dd98:	682b      	ldr	r3, [r5, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0c4      	beq.n	800dd28 <__sflush_r+0x34>
 800dd9e:	2b1d      	cmp	r3, #29
 800dda0:	d001      	beq.n	800dda6 <__sflush_r+0xb2>
 800dda2:	2b16      	cmp	r3, #22
 800dda4:	d101      	bne.n	800ddaa <__sflush_r+0xb6>
 800dda6:	602f      	str	r7, [r5, #0]
 800dda8:	e7b1      	b.n	800dd0e <__sflush_r+0x1a>
 800ddaa:	89a3      	ldrh	r3, [r4, #12]
 800ddac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddb0:	81a3      	strh	r3, [r4, #12]
 800ddb2:	e7ad      	b.n	800dd10 <__sflush_r+0x1c>
 800ddb4:	690f      	ldr	r7, [r1, #16]
 800ddb6:	2f00      	cmp	r7, #0
 800ddb8:	d0a9      	beq.n	800dd0e <__sflush_r+0x1a>
 800ddba:	0793      	lsls	r3, r2, #30
 800ddbc:	680e      	ldr	r6, [r1, #0]
 800ddbe:	bf08      	it	eq
 800ddc0:	694b      	ldreq	r3, [r1, #20]
 800ddc2:	600f      	str	r7, [r1, #0]
 800ddc4:	bf18      	it	ne
 800ddc6:	2300      	movne	r3, #0
 800ddc8:	eba6 0807 	sub.w	r8, r6, r7
 800ddcc:	608b      	str	r3, [r1, #8]
 800ddce:	f1b8 0f00 	cmp.w	r8, #0
 800ddd2:	dd9c      	ble.n	800dd0e <__sflush_r+0x1a>
 800ddd4:	6a21      	ldr	r1, [r4, #32]
 800ddd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ddd8:	4643      	mov	r3, r8
 800ddda:	463a      	mov	r2, r7
 800dddc:	4628      	mov	r0, r5
 800ddde:	47b0      	blx	r6
 800dde0:	2800      	cmp	r0, #0
 800dde2:	dc06      	bgt.n	800ddf2 <__sflush_r+0xfe>
 800dde4:	89a3      	ldrh	r3, [r4, #12]
 800dde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddea:	81a3      	strh	r3, [r4, #12]
 800ddec:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf0:	e78e      	b.n	800dd10 <__sflush_r+0x1c>
 800ddf2:	4407      	add	r7, r0
 800ddf4:	eba8 0800 	sub.w	r8, r8, r0
 800ddf8:	e7e9      	b.n	800ddce <__sflush_r+0xda>
 800ddfa:	bf00      	nop
 800ddfc:	20400001 	.word	0x20400001

0800de00 <_fflush_r>:
 800de00:	b538      	push	{r3, r4, r5, lr}
 800de02:	690b      	ldr	r3, [r1, #16]
 800de04:	4605      	mov	r5, r0
 800de06:	460c      	mov	r4, r1
 800de08:	b913      	cbnz	r3, 800de10 <_fflush_r+0x10>
 800de0a:	2500      	movs	r5, #0
 800de0c:	4628      	mov	r0, r5
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	b118      	cbz	r0, 800de1a <_fflush_r+0x1a>
 800de12:	6983      	ldr	r3, [r0, #24]
 800de14:	b90b      	cbnz	r3, 800de1a <_fflush_r+0x1a>
 800de16:	f7ff f941 	bl	800d09c <__sinit>
 800de1a:	4b14      	ldr	r3, [pc, #80]	; (800de6c <_fflush_r+0x6c>)
 800de1c:	429c      	cmp	r4, r3
 800de1e:	d11b      	bne.n	800de58 <_fflush_r+0x58>
 800de20:	686c      	ldr	r4, [r5, #4]
 800de22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d0ef      	beq.n	800de0a <_fflush_r+0xa>
 800de2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de2c:	07d0      	lsls	r0, r2, #31
 800de2e:	d404      	bmi.n	800de3a <_fflush_r+0x3a>
 800de30:	0599      	lsls	r1, r3, #22
 800de32:	d402      	bmi.n	800de3a <_fflush_r+0x3a>
 800de34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de36:	f7ff fa06 	bl	800d246 <__retarget_lock_acquire_recursive>
 800de3a:	4628      	mov	r0, r5
 800de3c:	4621      	mov	r1, r4
 800de3e:	f7ff ff59 	bl	800dcf4 <__sflush_r>
 800de42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de44:	07da      	lsls	r2, r3, #31
 800de46:	4605      	mov	r5, r0
 800de48:	d4e0      	bmi.n	800de0c <_fflush_r+0xc>
 800de4a:	89a3      	ldrh	r3, [r4, #12]
 800de4c:	059b      	lsls	r3, r3, #22
 800de4e:	d4dd      	bmi.n	800de0c <_fflush_r+0xc>
 800de50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de52:	f7ff f9f9 	bl	800d248 <__retarget_lock_release_recursive>
 800de56:	e7d9      	b.n	800de0c <_fflush_r+0xc>
 800de58:	4b05      	ldr	r3, [pc, #20]	; (800de70 <_fflush_r+0x70>)
 800de5a:	429c      	cmp	r4, r3
 800de5c:	d101      	bne.n	800de62 <_fflush_r+0x62>
 800de5e:	68ac      	ldr	r4, [r5, #8]
 800de60:	e7df      	b.n	800de22 <_fflush_r+0x22>
 800de62:	4b04      	ldr	r3, [pc, #16]	; (800de74 <_fflush_r+0x74>)
 800de64:	429c      	cmp	r4, r3
 800de66:	bf08      	it	eq
 800de68:	68ec      	ldreq	r4, [r5, #12]
 800de6a:	e7da      	b.n	800de22 <_fflush_r+0x22>
 800de6c:	0800ec14 	.word	0x0800ec14
 800de70:	0800ec34 	.word	0x0800ec34
 800de74:	0800ebf4 	.word	0x0800ebf4

0800de78 <_lseek_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d07      	ldr	r5, [pc, #28]	; (800de98 <_lseek_r+0x20>)
 800de7c:	4604      	mov	r4, r0
 800de7e:	4608      	mov	r0, r1
 800de80:	4611      	mov	r1, r2
 800de82:	2200      	movs	r2, #0
 800de84:	602a      	str	r2, [r5, #0]
 800de86:	461a      	mov	r2, r3
 800de88:	f7f8 f8b6 	bl	8005ff8 <_lseek>
 800de8c:	1c43      	adds	r3, r0, #1
 800de8e:	d102      	bne.n	800de96 <_lseek_r+0x1e>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	b103      	cbz	r3, 800de96 <_lseek_r+0x1e>
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	bd38      	pop	{r3, r4, r5, pc}
 800de98:	2000529c 	.word	0x2000529c

0800de9c <__swhatbuf_r>:
 800de9c:	b570      	push	{r4, r5, r6, lr}
 800de9e:	460e      	mov	r6, r1
 800dea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dea4:	2900      	cmp	r1, #0
 800dea6:	b096      	sub	sp, #88	; 0x58
 800dea8:	4614      	mov	r4, r2
 800deaa:	461d      	mov	r5, r3
 800deac:	da08      	bge.n	800dec0 <__swhatbuf_r+0x24>
 800deae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800deb2:	2200      	movs	r2, #0
 800deb4:	602a      	str	r2, [r5, #0]
 800deb6:	061a      	lsls	r2, r3, #24
 800deb8:	d410      	bmi.n	800dedc <__swhatbuf_r+0x40>
 800deba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800debe:	e00e      	b.n	800dede <__swhatbuf_r+0x42>
 800dec0:	466a      	mov	r2, sp
 800dec2:	f000 f8ff 	bl	800e0c4 <_fstat_r>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	dbf1      	blt.n	800deae <__swhatbuf_r+0x12>
 800deca:	9a01      	ldr	r2, [sp, #4]
 800decc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ded0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ded4:	425a      	negs	r2, r3
 800ded6:	415a      	adcs	r2, r3
 800ded8:	602a      	str	r2, [r5, #0]
 800deda:	e7ee      	b.n	800deba <__swhatbuf_r+0x1e>
 800dedc:	2340      	movs	r3, #64	; 0x40
 800dede:	2000      	movs	r0, #0
 800dee0:	6023      	str	r3, [r4, #0]
 800dee2:	b016      	add	sp, #88	; 0x58
 800dee4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dee8 <__smakebuf_r>:
 800dee8:	898b      	ldrh	r3, [r1, #12]
 800deea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800deec:	079d      	lsls	r5, r3, #30
 800deee:	4606      	mov	r6, r0
 800def0:	460c      	mov	r4, r1
 800def2:	d507      	bpl.n	800df04 <__smakebuf_r+0x1c>
 800def4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800def8:	6023      	str	r3, [r4, #0]
 800defa:	6123      	str	r3, [r4, #16]
 800defc:	2301      	movs	r3, #1
 800defe:	6163      	str	r3, [r4, #20]
 800df00:	b002      	add	sp, #8
 800df02:	bd70      	pop	{r4, r5, r6, pc}
 800df04:	ab01      	add	r3, sp, #4
 800df06:	466a      	mov	r2, sp
 800df08:	f7ff ffc8 	bl	800de9c <__swhatbuf_r>
 800df0c:	9900      	ldr	r1, [sp, #0]
 800df0e:	4605      	mov	r5, r0
 800df10:	4630      	mov	r0, r6
 800df12:	f7ff f9d1 	bl	800d2b8 <_malloc_r>
 800df16:	b948      	cbnz	r0, 800df2c <__smakebuf_r+0x44>
 800df18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df1c:	059a      	lsls	r2, r3, #22
 800df1e:	d4ef      	bmi.n	800df00 <__smakebuf_r+0x18>
 800df20:	f023 0303 	bic.w	r3, r3, #3
 800df24:	f043 0302 	orr.w	r3, r3, #2
 800df28:	81a3      	strh	r3, [r4, #12]
 800df2a:	e7e3      	b.n	800def4 <__smakebuf_r+0xc>
 800df2c:	4b0d      	ldr	r3, [pc, #52]	; (800df64 <__smakebuf_r+0x7c>)
 800df2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800df30:	89a3      	ldrh	r3, [r4, #12]
 800df32:	6020      	str	r0, [r4, #0]
 800df34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df38:	81a3      	strh	r3, [r4, #12]
 800df3a:	9b00      	ldr	r3, [sp, #0]
 800df3c:	6163      	str	r3, [r4, #20]
 800df3e:	9b01      	ldr	r3, [sp, #4]
 800df40:	6120      	str	r0, [r4, #16]
 800df42:	b15b      	cbz	r3, 800df5c <__smakebuf_r+0x74>
 800df44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df48:	4630      	mov	r0, r6
 800df4a:	f000 f8cd 	bl	800e0e8 <_isatty_r>
 800df4e:	b128      	cbz	r0, 800df5c <__smakebuf_r+0x74>
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	f023 0303 	bic.w	r3, r3, #3
 800df56:	f043 0301 	orr.w	r3, r3, #1
 800df5a:	81a3      	strh	r3, [r4, #12]
 800df5c:	89a0      	ldrh	r0, [r4, #12]
 800df5e:	4305      	orrs	r5, r0
 800df60:	81a5      	strh	r5, [r4, #12]
 800df62:	e7cd      	b.n	800df00 <__smakebuf_r+0x18>
 800df64:	0800d035 	.word	0x0800d035

0800df68 <__malloc_lock>:
 800df68:	4801      	ldr	r0, [pc, #4]	; (800df70 <__malloc_lock+0x8>)
 800df6a:	f7ff b96c 	b.w	800d246 <__retarget_lock_acquire_recursive>
 800df6e:	bf00      	nop
 800df70:	20005290 	.word	0x20005290

0800df74 <__malloc_unlock>:
 800df74:	4801      	ldr	r0, [pc, #4]	; (800df7c <__malloc_unlock+0x8>)
 800df76:	f7ff b967 	b.w	800d248 <__retarget_lock_release_recursive>
 800df7a:	bf00      	nop
 800df7c:	20005290 	.word	0x20005290

0800df80 <_free_r>:
 800df80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df82:	2900      	cmp	r1, #0
 800df84:	d044      	beq.n	800e010 <_free_r+0x90>
 800df86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df8a:	9001      	str	r0, [sp, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f1a1 0404 	sub.w	r4, r1, #4
 800df92:	bfb8      	it	lt
 800df94:	18e4      	addlt	r4, r4, r3
 800df96:	f7ff ffe7 	bl	800df68 <__malloc_lock>
 800df9a:	4a1e      	ldr	r2, [pc, #120]	; (800e014 <_free_r+0x94>)
 800df9c:	9801      	ldr	r0, [sp, #4]
 800df9e:	6813      	ldr	r3, [r2, #0]
 800dfa0:	b933      	cbnz	r3, 800dfb0 <_free_r+0x30>
 800dfa2:	6063      	str	r3, [r4, #4]
 800dfa4:	6014      	str	r4, [r2, #0]
 800dfa6:	b003      	add	sp, #12
 800dfa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfac:	f7ff bfe2 	b.w	800df74 <__malloc_unlock>
 800dfb0:	42a3      	cmp	r3, r4
 800dfb2:	d908      	bls.n	800dfc6 <_free_r+0x46>
 800dfb4:	6825      	ldr	r5, [r4, #0]
 800dfb6:	1961      	adds	r1, r4, r5
 800dfb8:	428b      	cmp	r3, r1
 800dfba:	bf01      	itttt	eq
 800dfbc:	6819      	ldreq	r1, [r3, #0]
 800dfbe:	685b      	ldreq	r3, [r3, #4]
 800dfc0:	1949      	addeq	r1, r1, r5
 800dfc2:	6021      	streq	r1, [r4, #0]
 800dfc4:	e7ed      	b.n	800dfa2 <_free_r+0x22>
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	b10b      	cbz	r3, 800dfd0 <_free_r+0x50>
 800dfcc:	42a3      	cmp	r3, r4
 800dfce:	d9fa      	bls.n	800dfc6 <_free_r+0x46>
 800dfd0:	6811      	ldr	r1, [r2, #0]
 800dfd2:	1855      	adds	r5, r2, r1
 800dfd4:	42a5      	cmp	r5, r4
 800dfd6:	d10b      	bne.n	800dff0 <_free_r+0x70>
 800dfd8:	6824      	ldr	r4, [r4, #0]
 800dfda:	4421      	add	r1, r4
 800dfdc:	1854      	adds	r4, r2, r1
 800dfde:	42a3      	cmp	r3, r4
 800dfe0:	6011      	str	r1, [r2, #0]
 800dfe2:	d1e0      	bne.n	800dfa6 <_free_r+0x26>
 800dfe4:	681c      	ldr	r4, [r3, #0]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	6053      	str	r3, [r2, #4]
 800dfea:	4421      	add	r1, r4
 800dfec:	6011      	str	r1, [r2, #0]
 800dfee:	e7da      	b.n	800dfa6 <_free_r+0x26>
 800dff0:	d902      	bls.n	800dff8 <_free_r+0x78>
 800dff2:	230c      	movs	r3, #12
 800dff4:	6003      	str	r3, [r0, #0]
 800dff6:	e7d6      	b.n	800dfa6 <_free_r+0x26>
 800dff8:	6825      	ldr	r5, [r4, #0]
 800dffa:	1961      	adds	r1, r4, r5
 800dffc:	428b      	cmp	r3, r1
 800dffe:	bf04      	itt	eq
 800e000:	6819      	ldreq	r1, [r3, #0]
 800e002:	685b      	ldreq	r3, [r3, #4]
 800e004:	6063      	str	r3, [r4, #4]
 800e006:	bf04      	itt	eq
 800e008:	1949      	addeq	r1, r1, r5
 800e00a:	6021      	streq	r1, [r4, #0]
 800e00c:	6054      	str	r4, [r2, #4]
 800e00e:	e7ca      	b.n	800dfa6 <_free_r+0x26>
 800e010:	b003      	add	sp, #12
 800e012:	bd30      	pop	{r4, r5, pc}
 800e014:	20005294 	.word	0x20005294

0800e018 <_read_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d07      	ldr	r5, [pc, #28]	; (800e038 <_read_r+0x20>)
 800e01c:	4604      	mov	r4, r0
 800e01e:	4608      	mov	r0, r1
 800e020:	4611      	mov	r1, r2
 800e022:	2200      	movs	r2, #0
 800e024:	602a      	str	r2, [r5, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	f7f7 ff86 	bl	8005f38 <_read>
 800e02c:	1c43      	adds	r3, r0, #1
 800e02e:	d102      	bne.n	800e036 <_read_r+0x1e>
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	b103      	cbz	r3, 800e036 <_read_r+0x1e>
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	2000529c 	.word	0x2000529c

0800e03c <_raise_r>:
 800e03c:	291f      	cmp	r1, #31
 800e03e:	b538      	push	{r3, r4, r5, lr}
 800e040:	4604      	mov	r4, r0
 800e042:	460d      	mov	r5, r1
 800e044:	d904      	bls.n	800e050 <_raise_r+0x14>
 800e046:	2316      	movs	r3, #22
 800e048:	6003      	str	r3, [r0, #0]
 800e04a:	f04f 30ff 	mov.w	r0, #4294967295
 800e04e:	bd38      	pop	{r3, r4, r5, pc}
 800e050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e052:	b112      	cbz	r2, 800e05a <_raise_r+0x1e>
 800e054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e058:	b94b      	cbnz	r3, 800e06e <_raise_r+0x32>
 800e05a:	4620      	mov	r0, r4
 800e05c:	f000 f830 	bl	800e0c0 <_getpid_r>
 800e060:	462a      	mov	r2, r5
 800e062:	4601      	mov	r1, r0
 800e064:	4620      	mov	r0, r4
 800e066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e06a:	f000 b817 	b.w	800e09c <_kill_r>
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d00a      	beq.n	800e088 <_raise_r+0x4c>
 800e072:	1c59      	adds	r1, r3, #1
 800e074:	d103      	bne.n	800e07e <_raise_r+0x42>
 800e076:	2316      	movs	r3, #22
 800e078:	6003      	str	r3, [r0, #0]
 800e07a:	2001      	movs	r0, #1
 800e07c:	e7e7      	b.n	800e04e <_raise_r+0x12>
 800e07e:	2400      	movs	r4, #0
 800e080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e084:	4628      	mov	r0, r5
 800e086:	4798      	blx	r3
 800e088:	2000      	movs	r0, #0
 800e08a:	e7e0      	b.n	800e04e <_raise_r+0x12>

0800e08c <raise>:
 800e08c:	4b02      	ldr	r3, [pc, #8]	; (800e098 <raise+0xc>)
 800e08e:	4601      	mov	r1, r0
 800e090:	6818      	ldr	r0, [r3, #0]
 800e092:	f7ff bfd3 	b.w	800e03c <_raise_r>
 800e096:	bf00      	nop
 800e098:	200000a4 	.word	0x200000a4

0800e09c <_kill_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	4d07      	ldr	r5, [pc, #28]	; (800e0bc <_kill_r+0x20>)
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	4608      	mov	r0, r1
 800e0a6:	4611      	mov	r1, r2
 800e0a8:	602b      	str	r3, [r5, #0]
 800e0aa:	f7f7 ff2b 	bl	8005f04 <_kill>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	d102      	bne.n	800e0b8 <_kill_r+0x1c>
 800e0b2:	682b      	ldr	r3, [r5, #0]
 800e0b4:	b103      	cbz	r3, 800e0b8 <_kill_r+0x1c>
 800e0b6:	6023      	str	r3, [r4, #0]
 800e0b8:	bd38      	pop	{r3, r4, r5, pc}
 800e0ba:	bf00      	nop
 800e0bc:	2000529c 	.word	0x2000529c

0800e0c0 <_getpid_r>:
 800e0c0:	f7f7 bf18 	b.w	8005ef4 <_getpid>

0800e0c4 <_fstat_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	4d07      	ldr	r5, [pc, #28]	; (800e0e4 <_fstat_r+0x20>)
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	602b      	str	r3, [r5, #0]
 800e0d2:	f7f7 ff76 	bl	8005fc2 <_fstat>
 800e0d6:	1c43      	adds	r3, r0, #1
 800e0d8:	d102      	bne.n	800e0e0 <_fstat_r+0x1c>
 800e0da:	682b      	ldr	r3, [r5, #0]
 800e0dc:	b103      	cbz	r3, 800e0e0 <_fstat_r+0x1c>
 800e0de:	6023      	str	r3, [r4, #0]
 800e0e0:	bd38      	pop	{r3, r4, r5, pc}
 800e0e2:	bf00      	nop
 800e0e4:	2000529c 	.word	0x2000529c

0800e0e8 <_isatty_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4d06      	ldr	r5, [pc, #24]	; (800e104 <_isatty_r+0x1c>)
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	4608      	mov	r0, r1
 800e0f2:	602b      	str	r3, [r5, #0]
 800e0f4:	f7f7 ff75 	bl	8005fe2 <_isatty>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d102      	bne.n	800e102 <_isatty_r+0x1a>
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	b103      	cbz	r3, 800e102 <_isatty_r+0x1a>
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	2000529c 	.word	0x2000529c

0800e108 <_init>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	bf00      	nop
 800e10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10e:	bc08      	pop	{r3}
 800e110:	469e      	mov	lr, r3
 800e112:	4770      	bx	lr

0800e114 <_fini>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	bf00      	nop
 800e118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e11a:	bc08      	pop	{r3}
 800e11c:	469e      	mov	lr, r3
 800e11e:	4770      	bx	lr
